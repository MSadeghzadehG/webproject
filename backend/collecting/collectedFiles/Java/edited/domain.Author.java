
package sample.jooq.domain;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


@Generated(value = { "http:		"jOOQ version:3.8.2" }, comments = "This class is generated by jOOQ")
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Author extends TableImpl<Record> {

	private static final long serialVersionUID = 1187406915;

	
	public static final Author AUTHOR = new Author();

	
	@Override
	public Class<Record> getRecordType() {
		return Record.class;
	}

	
	public final TableField<Record, Integer> ID = createField("ID",
			org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	
	public final TableField<Record, String> FIRST_NAME = createField("FIRST_NAME",
			org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

	
	public final TableField<Record, String> LAST_NAME = createField("LAST_NAME",
			org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

	
	public final TableField<Record, Date> DATE_OF_BIRTH = createField("DATE_OF_BIRTH",
			org.jooq.impl.SQLDataType.DATE, this, "");

	
	public final TableField<Record, Integer> YEAR_OF_BIRTH = createField("YEAR_OF_BIRTH",
			org.jooq.impl.SQLDataType.INTEGER, this, "");

	
	public final TableField<Record, Byte> DISTINGUISHED = createField("DISTINGUISHED",
			org.jooq.impl.SQLDataType.TINYINT, this, "");

	
	public Author() {
		this("AUTHOR", null);
	}

	
	public Author(String alias) {
		this(alias, AUTHOR);
	}

	private Author(String alias, Table<Record> aliased) {
		this(alias, aliased, null);
	}

	private Author(String alias, Table<Record> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, "");
	}

	
	@Override
	public Schema getSchema() {
		return Public.PUBLIC;
	}

	
	@Override
	public UniqueKey<Record> getPrimaryKey() {
		return Keys.CONSTRAINT_7;
	}

	
	@Override
	public List<UniqueKey<Record>> getKeys() {
		return Arrays.<UniqueKey<Record>>asList(Keys.CONSTRAINT_7);
	}

	
	@Override
	public Author as(String alias) {
		return new Author(alias, this);
	}

	
	@Override
	public Author rename(String name) {
		return new Author(name, null);
	}
}
