
package sample.jooq.domain;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


@Generated(value = { "http:		"jOOQ version:3.8.2" }, comments = "This class is generated by jOOQ")
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Language extends TableImpl<Record> {

	private static final long serialVersionUID = -1890716744;

	
	public static final Language LANGUAGE = new Language();

	
	@Override
	public Class<Record> getRecordType() {
		return Record.class;
	}

	
	public final TableField<Record, Integer> ID = createField("ID",
			org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	
	public final TableField<Record, String> CD = createField("CD",
			org.jooq.impl.SQLDataType.CHAR.length(2).nullable(false), this, "");

	
	public final TableField<Record, String> DESCRIPTION = createField("DESCRIPTION",
			org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

	
	public Language() {
		this("LANGUAGE", null);
	}

	
	public Language(String alias) {
		this(alias, LANGUAGE);
	}

	private Language(String alias, Table<Record> aliased) {
		this(alias, aliased, null);
	}

	private Language(String alias, Table<Record> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, "");
	}

	
	@Override
	public Schema getSchema() {
		return Public.PUBLIC;
	}

	
	@Override
	public UniqueKey<Record> getPrimaryKey() {
		return Keys.CONSTRAINT_C;
	}

	
	@Override
	public List<UniqueKey<Record>> getKeys() {
		return Arrays.<UniqueKey<Record>>asList(Keys.CONSTRAINT_C);
	}

	
	@Override
	public Language as(String alias) {
		return new Language(alias, this);
	}

	
	@Override
	public Language rename(String name) {
		return new Language(name, null);
	}
}
