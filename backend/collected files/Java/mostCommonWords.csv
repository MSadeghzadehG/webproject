[('', 1006478), ('*', 25852), ('{\n', 23822), ('the', 17202), ('=', 13907), ('public', 11089), ('}\n\n', 10932), ('}\n', 8018), ('void', 7958), ('@Override\n', 6399), ('final', 5831), ('*\n', 5314), ('to', 5298), ('if', 5133), ('new', 5062), ('a', 4622), ('return', 4209), ('of', 3859), ('under', 3579), ('License', 3568), ('or', 3225), ('extends', 2863), ('and', 2827), ('static', 2801), ('for', 2692), ('/**\n', 2662), ('may', 2584), ('in', 2460), ('distributed', 2411), ('@Test\n', 2333), ('this', 2303), ('is', 2276), ('by', 2253), ('super', 2247), ('not', 2222), ('OR', 2214), ('}', 2157), ('class', 2052), ('an', 2021), ('on', 1990), ('@param', 1962), ('with', 1895), ('OF', 1876), ('throws', 1864), ('{\n\n', 1828), ('*/\n', 1764), ('{@link', 1740), ('{@code', 1692), ('ANY', 1540), ('boolean', 1475), ('private', 1467), ('Exception', 1464), ('License.\n', 1379), ('(the', 1372), ('KIND,', 1372), ('WARRANTIES', 1372), ('"AS', 1371), ('Copyright', 1369), ('use', 1368), ('WITHOUT', 1366), ('file', 1359), ('==', 1357), ('try', 1330), ('int', 1284), ('you', 1280), ('that', 1277), ('//', 1259), ('either', 1252), ('T>', 1249), ('You', 1238), ('return;\n', 1236), ('copy', 1234), ('required', 1233), ('specific', 1232), ('at\n', 1214), ('applicable', 1209), ('obtain', 1208), ('Apache', 1208), ('language', 1207), ('2.0', 1206), ('permissions', 1204), ('writing,', 1204), ('limitations', 1204), ('law', 1204), ('Licensed', 1204), ('License,', 1204), ('compliance', 1204), ('agreed', 1204), ('Unless', 1204), ('CONDITIONS', 1204), ('Version', 1204), ('IS"', 1203), ('governing', 1203), ('http://www.apache.org/licenses/LICENSE-2.0\n', 1203), ('software', 1190), ('(c)', 1171), ('is\n', 1167), ('except', 1166), ('express', 1150), ('in\n', 1144), ('*/\n\npackage', 1139), ('}\n}\n', 1099), ('!=', 1063), ('long', 1060), ('License.', 1028), ('implied.', 1028), ('"License");', 1027), ('BASIS,', 1027), ('value', 1026), ('RxJava', 1015), ('Contributors.\n', 1002), ('2016-present,', 1000), ('See\n', 971), ('be', 965), ('The', 887), ('catch', 851), ('THE', 834), ('+', 832), ('t)', 814), ('e)', 793), ('throw', 788), ('source', 787), ('else', 768), ('@return', 764), ('?', 751), ('.test()\n', 744), ('implements', 732), ('Disposable', 730), ('null)', 728), ('true;\n', 715), ('i', 701), ('})\n', 626), ('<T>', 611), ('<p>\n', 603), ('protected', 597), ('R>', 584), ('0)', 578), ('s)', 574), ('onError(Throwable', 530), ('finally', 519), ('IN', 517), ('type\n', 513), ('io.reactivex.*;\nimport', 503), ('onComplete()', 487), ('(Throwable', 487), ('it', 486), ('run()', 483), ('ex)', 476), ('*/\npublic', 472), ('Completable', 461), ('Throwable', 448), ('null");\n', 448), ('default', 443), ('does', 437), ('T', 432), ('all', 431), ('@CheckReturnValue\n', 429), ('any', 425), ('from', 425), ('null', 425), ('<', 422), ('error', 422), ('will', 411), ('without', 395), ('Object', 395), ('actual;\n', 393), ('<dt><b>Scheduler:</b></dt>\n', 391), ('</dl>\n', 391), ('<dl>\n', 391), ('0,', 388), ('as', 387), ('apply(Integer', 382), ('String', 382), ('};\n\n', 379), ('RxJavaPlugins.reset();\n', 377), ('Runnable', 377), ('\n', 375), ('null;\n', 372), ('dispose()', 369), ('<dd>{@code', 368), (':', 365), ('particular', 362), ('Function<?', 362), ('List<Throwable>', 362), ('done', 361), ('when', 360), ('Returns', 358), ('Scheduler}.</dd>\n', 355), ('returned', 353), ('&&', 353), ('operate', 353), ('-', 352), ('errors', 348), ('@SuppressWarnings("unchecked")\n', 348), ('@SchedulerSupport(SchedulerSupport.NONE)\n', 347), ('serialVersionUID', 346), ('Software', 341), ('(int', 340), ('T,', 338), ('Function<Integer,', 337), ('type', 337), ('copies', 337), ('notice', 336), ('FOR', 336), ('SOFTWARE', 336), ('Maybe', 328), ('d', 325), ('0;', 323), ('Integer', 323), ('A', 321), ('given', 319), ('instance\n', 319), ('1,', 317), ('are', 313), ('});\n\n', 313), ('i++)', 310), ('V>', 305), ('Runnable()', 304), ('method', 303), ('emitted', 295), ('onSubscribe(Disposable', 287), ('v)', 287), ('the\n', 286), ('instanceof', 282), ('Single', 279), ('break;\n', 279), ('this.actual', 278), ('Scheduler', 273), ('(done)', 272), ('2,', 269), ('other', 269), ('should', 268), ('and\n', 268), ('instance', 265), ('item', 264), ('@see', 264), ('values', 264), ('io.reactivex.disposables.Disposable;\nimport', 263), ('value)', 261), ('ex', 258), ('@since', 255), ('function', 254), ('isDisposed()', 253), ('See', 252), ('/*\n', 252), ('(;;)', 251), ('d)', 249), ('result', 249), ('RxJavaPlugins.onAssembly(new', 247), ('current', 245), ('};\n', 243), ('emits', 240), ('s', 239), ('have', 238), ('*/\npackage', 236), ('has', 236), ('drain();\n', 234), ('can', 234), ('onNext(T', 234), ('at', 233), ('Subscription', 232), ('while', 232), ('});\n', 230), ('do', 229), ('MaybeSource<?', 229), ('IOException', 228), ('PublishProcessor<Integer>', 228), ('which', 224), ('@author', 223), ('into', 221), ('operators', 220), ('"', 218), ('Exceptions.throwIfFatal(ex);\n', 218), ('TimeUnit', 217), ('returns', 217), ('This', 216), ('SingleSource<?', 216), ('Guava', 215), ('/**', 215), ('License\n', 212), ('@throws', 211), ('0;\n', 211), ('subject', 211), ('Integer>', 209), ('assertEquals(1,', 208), ('its', 206), ('{', 206), ('actual.onComplete();\n', 205), ('v', 204), ('one', 204), ('source.subscribe(new', 203), ('upstream', 203), ('each', 200), ('specified', 200), ('AtomicInteger', 200), ('U>', 199), ('(C)', 198), ('Authors\n', 198), ('actual,', 196), ('false;\n', 195), ('"The', 195), ('ts', 194), ('following', 191), ('actual;\n\n', 191), ('<a', 191), ('but', 191), ('after', 190), ('list', 190), ('volatile', 188), ('files', 187), ('documentation', 186), ('observer)', 186), ('associated', 186), ('sources', 186), ('org.junit.Test;\n\nimport', 183), ('software\n', 183), ('},', 182), ('null\n', 181), ('TestHelper.trackPluginErrors();\n', 181), ('3,', 181), ('time', 180), ('including', 178), ('only', 178), ('s;\n\n', 178), ('1;\n', 178), ('b', 177), ('BASIS,\n', 177), ('"License");\n', 176), ('implied.\n', 176), ('above', 175), ('source,', 175), ('THE\n', 174), ('elements)', 174), ('NO', 174), ('free', 173), ('<img', 171), ('copyright', 171), ('width="640"', 171), ('alt="">\n', 171), ('RxJavaPlugins.onError(t);\n', 170), ('OTHER', 170), ('and/or', 170), ('NOT', 170), ('TestException();\n', 170), ('included', 170), ('use,', 169), ('limitation', 169), ('first', 169), ('interface', 169), ('WITH', 168), ('sublicense,', 168), ('PROVIDED', 168), ('modify,', 168), ('person', 168), ('so,', 168), ('Software.\n', 168), ('obtaining', 168), ('WARRANTY', 168), ('IS', 168), ('USE', 168), ('DAMAGES', 168), ('ARISING', 168), ('DEALINGS', 168), ('persons', 168), ('BE', 168), ('publish,', 168), ('EVENT', 168), ('conditions:\n', 168), ('FROM,\n', 168), ('HOLDERS', 168), ('merge,', 168), ('permission', 168), ('AN', 168), ('substantial', 168), ('copy,', 168), ('SOFTWARE.\n', 168), ('granted,', 168), ('shall', 168), ('IS",', 168), ('permit', 168), ('CONNECTION', 168), ('Permission', 168), ('IMPLIED,', 168), ('portions', 168), ('TORT', 168), ('LIMITED', 168), ('TO', 168), ('OUT', 168), ('"Software"),', 168), ('SHALL', 168), ('EXPRESS', 168), ('NONINFRINGEMENT.', 168), ('PARTICULAR', 168), ('whom', 168), ('COPYRIGHT', 168), ('AUTHORS', 168), ('FITNESS', 168), ('cancel()', 168), ('charge,', 168), ('Software,', 168), ('ACTION', 168), ('CONTRACT,', 168), ('furnished', 168), ('WHETHER', 168), ('OTHERWISE,', 168), ('PURPOSE', 168), ('LIABILITY,', 168), ('hereby', 168), ('LIABLE', 168), ('MIT', 168), ('INCLUDING', 168), ('s))', 167), ('OTHER\n', 166), ('restriction,', 166), ('rights\n', 166), ('copy\n', 166), ('AND', 166), ('BUT', 166), ('CLAIM,', 166), ('MERCHANTABILITY,\n', 166), ('sell\n', 166), ('OR\n', 166), ('deal\n', 166), ('distribute,', 166), ('n)', 165), ('s.cancel();\n', 165), ('calls', 165), ('items', 164), ('o', 163), ('io.reactivex.plugins.RxJavaPlugins;\n\npublic', 161), ('no', 161), ('source;\n', 161), ('scheduler', 161), ('Subscriber<?', 160), ('@Benchmark\n', 160), ('actual.onSubscribe(this);\n', 159), ('q', 158), ('IN\n', 158), ('TestHelper.assertUndeliverable(errors,', 157), ('Flowable', 157), ('downstream', 157), ('number', 157), ('Publisher<?', 157), ('io.reactivex.exceptions.Exceptions;\nimport', 156), ('actual.onError(t);\n', 156), ('assertEquals(0,', 156), ('Seppälä\n', 156), ('Ilkka', 156), ('<R>', 155), ('java.util.List;\nimport', 154), ('test', 153), ('abstract', 153), ('v)\n', 153), ('onSubscribe(Subscription', 152), ('called', 150), ('documentation:', 150), ('exception', 150), ('call()', 149), ('e', 149), ('Exceptions.throwIfFatal(e);\n', 148), ('super(source);\n', 148), ('org.reactivestreams.*;\n\nimport', 146), ('Consumer<?', 146), ('empty', 146), ('4,', 145), ('TestObserver<Integer>', 145), ('If', 145), ('TestSubscriber<Integer>', 144), ('this.s', 144), ('s;\n', 144), ('cancelled', 144), ('io.reactivex.internal.operators.observable;\n\nimport', 143), ('R>>', 142), ('io.reactivex.internal.operators.flowable;\n\nimport', 142), ('queue', 142), ('Flowable<T>', 142), ('done;\n\n', 141), ('2014-2016', 141), ('->', 139), ('5,', 139), ('.assertFailure(TestException.class);\n', 139), ('idx', 138), ('subscribeActual(Subscriber<?', 138), ('Action', 136), ('operator', 136), ('0', 135), ('unit,', 133), ('r', 133), ('Integer>()', 132), ('this.source', 131), ('.test();\n\n', 131), ('}\n\n\n', 131), ('methods', 130), ('via', 130), ('{\n//', 130), ('(ex', 129), ('Integer,', 129), ('Observer<?', 129), ('thread', 129), ('return\n', 128), ('used', 128), ('true', 128), ('org.junit.Assert.*;\n\nimport', 128), (';\n', 127), ('R', 127), ('io.reactivex.internal.functions.ObjectHelper;\nimport', 126), ('run', 126), ('Observable<Integer>', 125), ('single', 125), ('source;\n\n', 125), ('TestException.class);\n', 124), ('PublishProcessor.create();\n\n', 124), ('a,', 124), ('call', 123), ('>', 123), ('multiple', 122), ('so', 122), ('io.reactivex.internal.disposables.DisposableHelper;\nimport', 122), ('missed', 121), ('subscribeActual(Observer<?', 120), ('request(long', 120), ('io.reactivex.exceptions.TestException;\nimport', 118), ('io.reactivex.functions.Function;\nimport', 118), ('io.reactivex.plugins.RxJavaPlugins;\nimport', 118), ('||', 118), ('we', 117), ('sequence', 117), ('pp', 117), ('(getAndIncrement()', 116), ('before', 115), ('object', 115), ('Flowable.range(1,', 115), ('using', 114), ('MaybeSource', 114), ('Disposables.empty();\n\n', 114), ('(d', 114), ('same', 113), ('@NonNull\n', 113), ('value;\n', 113), ('more', 113), ('element', 113), ('PublishProcessor.create();\n', 112), ('io.reactivex.tck;\n\nimport', 112), ('org.testng.annotations.Test;\n\nimport', 112), ('Single<T>', 112), ('org.reactivestreams.Publisher;\nimport', 112), ('false,', 112), ('inner', 111), ('io.reactivex.plugins.RxJavaPlugins;\n\n/**\n', 111), ('bh)', 111), ('java.util.concurrent.atomic.AtomicReference;\n\nimport', 110), ('TestException());\n', 110), ('subscription', 110), ('verify(observer,', 109), ('array', 109), ('count', 108), ('java.util.concurrent.atomic.*;\n\nimport', 108), ('signal', 108), ('@Test(expected', 108), ('to\n', 108), ('NullPointerException', 107), ('d.dispose();\n', 107), ('=\n', 107), ('T>>', 106), ('signals', 106), ('@Generates\n', 106), ('set', 106), ('Test', 105), ('Throwable>', 105), ('c', 105), ('InterruptedException', 105), ('}\n\n}\n', 104), ('CompletableObserver', 104), ('been', 103), ('event', 103), ('expected', 103), ('Flowable<Integer>', 103), ('parent', 102), ('n', 101), ('s.dispose();\n', 101), ('U', 101), ('DisposableHelper.dispose(this);\n', 101), ('a\n', 100), ('File', 100), ('java.util.concurrent.TimeUnit;\n\nimport', 100), ('CountDownLatch', 100), ('Maybe<T>', 100), ('observer', 99), ('1);\n', 99), ('resource', 99), ('value\n', 98), ('TimeUnit.MILLISECONDS);\n', 97), ('ObservableSource<?', 96), ('resulting', 96), ('synchronized', 96), ('parent;\n', 95), ('scheduler;\n', 95), ('Action()', 95), ('Publisher', 95), ('actual.onError(e);\n', 94), ('r1', 94), ('then', 93), ('until', 93), ('(InterruptedException', 93), ('TestHelper.race(r1,', 92), ('TestException())\n', 92), ('w', 92), ('onError', 92), ('r2', 92), ('was', 92), ('V', 91), ('java.util.Arrays;\nimport', 91), ('unit;\n', 91), ('AtomicLong', 91), ('b)', 91), ('CompletableSource', 91), ('experimental\n', 91), ('io.reactivex.functions.*;\nimport', 91), ('1)', 91), ('success', 91), ('Object>', 91), ('(v', 91), ('jdx', 90), ('implementation', 90), ('mapper;\n', 90), ('some', 90), ('2.0\n', 90), ('TimeUnit.SECONDS)\n', 89), ('null,', 89), ('output', 89), ('RxJavaPlugins.onError(ex);\n', 89), ('d);\n', 89), ('RxJavaPlugins.onError(e);\n', 89), ('createPublisher(long', 88), ('Java', 88), ('true,', 88), ('timeout,', 87), ('null;\n\n', 87), ('PerfConsumer(bh));\n', 87), ('next', 86), ('Single\n', 86), ('CompletableSource>', 86), ('TestObserver<Void>', 86), ('List<Integer>', 85), ('elements', 85), ('delay,', 85), ('Observable', 85), ('<dt><b>Backpressure:</b></dt>\n', 85), ('consumer', 85), ('task', 85), ('java.util.ArrayList;\nimport', 85), ('j', 85), ('than', 84), ('f', 84), ('actual', 83), ('must', 83), ('SingleObserver<?', 83), ('t', 83), ('this.mapper', 82), ('errors.terminate();\n', 82), ('.awaitDone(5,', 82), ('backpressure', 82), ('<dd>The', 82), ('TestException.class,', 82), ('this.parent', 82), ('5)\n', 82), ('io.reactivex.internal.operators.maybe;\n\nimport', 81), ('FlowableSubscriber<T>,', 81), ('Observer<T>,', 81), ('com.google.common.annotations.GwtCompatible;\nimport', 81), ('io.reactivex.internal.subscriptions.SubscriptionHelper;\nimport', 81), ("can't", 80), ('Flowable}', 80), ('.sequential()\n', 80), ('case', 80), ('(cancelled)', 80), ('AtomicReference<Disposable>', 80), ('already', 79), ('onSuccess(T', 79), ('subscriber', 79), ('fail("Should', 79), ('TestHelper.RACE_DEFAULT_LOOPS;', 78), ('io.reactivex.exceptions.*;\nimport', 78), ('null);\n', 78), ('In', 78), ('other)', 78), ('Flowable.range(0,', 78), ('actual)', 78), ('TestHelper.trackPluginErrors();\n\n', 77), ('v;\n', 77), ('input', 77), ('timeout', 77), ('b;\n', 76), ('@BackpressureSupport(BackpressureKind.FULL)\n', 76), ('scheduler)', 76), ('s);\n', 76), ('AtomicThrowable', 76), ('AtomicReference<Disposable>\n', 76), ('allowed', 76), ('io.reactivex.internal.functions.Functions;\nimport', 76), ('cs', 76), ('(e', 76), ('t;\n', 75), ('queue.clear();\n', 75), ('mapper,', 75), ('Integer>>()', 75), ('SingleSource', 74), ('mapper;\n\n', 74), ('java.util.List;\n\nimport', 74), ('TestException());\n\n', 74), ('<E>', 74), ('honors', 74), ('unit', 73), ('io.reactivex.Flowable;\nimport', 73), ('because', 73), ('(SubscriptionHelper.validate(this.s,', 73), ('other;\n', 73), ('mapper', 73), ('Predicate<?', 73), ('d;\n\n', 73), ('Publisher<Integer>', 73), ('second', 72), ('AtomicBoolean', 72), ('U,', 72), ('key,', 72), ('SubscriptionHelper.CANCELLED;\n', 72), ('io.reactivex.disposables.*;\nimport', 72), ('>=', 72), ('inOrder.verify(w,', 71), ('two', 71), ('parent;\n\n', 71), ('{@link\n', 71), ('m', 71), ('B>', 71), ('DisposableHelper.DISPOSED)', 70), ('TestScheduler', 70), ('once', 70), ('target', 70), ('source)', 70), ('List<String>', 70), ('actual.onNext(t);\n', 69), ('1', 69), ('p', 69), ('Note', 69), ('(idx', 69), ('.assertResult(1);\n', 69), ('queue;\n', 69), ('common', 68), ('unit)', 68), ('ExceptionHelper.wrapOrThrow(ex);\n', 68), ('handler', 68), ('int[]', 68), ('allows', 68), ('MaybeSources', 68), ('out', 68), ('Callable<?', 67), ('results', 67), ('also', 67), ('assertEquals(2,', 67), ('java.io.IOException;\nimport', 67), ("doesn't", 67), ('subscribed', 67), ('disposed', 67), ('.assertResult(1,', 67), ('terminate', 67), ('TimeUnit.SECONDS);\n', 67), ('applied', 67), ('/', 66), ('index)', 66), ('io.reactivex;\n\nimport', 66), ('onComplete', 66), ('2);\n', 66), ('error;\n', 66), ('io.reactivex.internal.operators.single;\n\nimport', 66), ('source\n', 66), ('AbstractFlowableWithUpstream<T,', 66), ('key', 65), ('PublishSubject<Integer>', 65), ('subscribes', 65), ('TimeUnit.SECONDS);\n\n', 65), ('Creates', 65), ('index', 65), ('Object>()', 65), ('n);\n', 65), ('state', 65), ('0L)', 64), ('enum', 64), ('DisposableHelper.DISPOSED;\n', 64), ('containing', 64), ('sources)', 64), ('last', 64), ('java.util.Collection;\nimport', 64), ('io.reactivex.observers.TestObserver;\nimport', 64), ('String>', 64), ('source,\n', 63), ('value);\n', 63), ('.map(new', 63), ('io.reactivex.")\n', 63), ('map', 63), ('Iterable<?', 63), ('onError}', 63), ('observer.onComplete();\n', 63), ('java.util.*;\nimport', 63), ('MaybeSource\n', 63), ('this.other', 63), ('r2);\n\n', 63), ('provided', 63), ('V>>', 63), ('make', 63), ('java.util.concurrent.Callable;\n\nimport', 63), ('subscribe', 62), ('times', 62), ('ArrayList<>();\n', 62), ('CompositeDisposable', 62), ('onSubscribe', 62), ('terminal', 62), ('iterator', 62), ('Observable.range(1,', 62), ('main', 62), ('{@code\n', 61), ('actual.onError(ex);\n', 61), ('instead', 61), ('parent)', 60), ('{});\n', 60), ('value.\n', 60), ('s,', 60), ('callback', 60), ('Throwable}', 60), ('data', 60), ('count;\n', 60), ('.assertNoErrors()\n', 60), ('under\n', 60), ('d))', 60), ('TestException', 60), ('(missed', 59), ('queue;\n\n', 59), ('to.assertEmpty();\n\n', 59), ('ps', 59), ('emit', 59), ('T>[]', 59), ('io.reactivex.Flowable;\n\n@Test\npublic', 59), ('BaseTck<Integer>', 59), ('value");\n', 59), ('idx)', 59), ('this.scheduler', 59), ('ExecutorService', 59), ('onNext(Integer', 59), ('(empty)', 59), ('such', 59), ('<p>This', 58), ('{\n\n\n', 58), ('AbstractObservableWithUpstream<T,', 58), ('drain()', 58), ('AtomicInteger();\n', 57), ('emitting', 57), ('io.reactivex.internal.operators.completable;\n\nimport', 57), ('Scheduler}', 57), ('error;\n\n', 57), ('E', 57), ('create', 57), ('get()', 57), ('subscribeActual(SingleObserver<?', 57), ('//\n', 57), ('dispose', 57), ('events', 57), ('s.request(Long.MAX_VALUE);\n', 56), ('stream', 56), ('e;\n', 56), ('false', 56), ('generally', 56), ('get', 56), ('onError(ex);\n', 56), ('e);\n', 56), ('DisposableHelper.isDisposed(get());\n', 56), ('completes', 55), ('expected\n', 55), ('thrown', 55), ('subscribeActual(MaybeObserver<?', 55), ('.filter(Functions.alwaysTrue())\n', 55), ('error,', 55), ('delay', 55), ('other;\n\n', 55), ('.assertResult();\n\n', 55), ('q.clear();\n', 55), ('addAndGet(-missed);\n', 55), ('(this)', 55), ('a.onComplete();\n', 55), ('assertFreshInstance(new', 55), ('Worker', 55), ('field', 55), ('source1,', 54), ('true;\n\n', 54), ('DisposableHelper.setOnce(this,', 54), ('&', 54), ('express\n', 54), ('java.util.concurrent.atomic.AtomicInteger;\n\nimport', 54), ('get();\n', 54), ('true))', 54), ('Logger', 54), ('sure', 54), ('An', 54), ('.assertResult(1);\n\n', 53), ('(s', 53), ('their', 53), ('Flowable.just(1)\n', 53), ('(r', 53), ('setup()', 53), ('this.unit', 53), ('method.\n', 53), ('another', 53), ('<U>', 53), ('assertTrue(d.isDisposed());\n', 53), ('of\n', 52), ('sent', 52), ('except\n', 52), ('predicate;\n', 52), ('mapper)', 52), ('instances', 52), ('global', 52), ('(o', 52), ('index,', 52), ('TestScheduler();\n\n', 51), ('predicate', 51), ('b,', 51), ('cdl.countDown();\n', 51), ('(current', 51), ('java.util.Map;\nimport', 51), ('(t', 51), ('(n', 51), ('actual.onError(new', 51), ('terminated', 51), ('Integer[]', 51), ('connection', 51), ('requested', 51), ('100,', 51), ('pattern', 51), ('args)', 51), ('Observable<?', 51), ('AtomicLong();\n', 50), ('CompletableSubject', 50), (')\n', 50), ('java.util.concurrent.TimeUnit;\nimport', 50), ('Collection<?', 50), ('reactive', 50), ('<p>The', 50), ('Null', 50), ('Subscriber', 50), ('key)', 50), ('transform', 50), ('index;\n', 50), ('o)', 50), ('count;\n\n', 50), ('Observable<String>', 50), ('ParallelFlowable', 50), ('Object[]', 50), ('test(Integer', 50), ('action', 49), ('thrown");\n', 49), ('RuntimeException();\n', 49), ('e.append("java.lang.RuntimeException:', 49), ('com.google.common.collect;\n\nimport', 49), ('tasks', 49), ('where', 49), ('cancelled;\n\n', 49), ('there', 49), ('accept(Integer', 48), ('Iterable', 48), ('a.onError(ex);\n', 48), ('an\n', 48), ('(a', 48), ('n;', 48), ('2.x', 48), ('|', 48), ('doubleOnSubscribe()', 48), ('{}\n\n', 48), ('@SuppressWarnings({', 48), ('unit);\n', 48), ('collection', 48), ('com.google.common.annotations.GwtIncompatible;\nimport', 48), ('6;\n', 48), ('(DisposableHelper.validate(this.s,', 48), ('predicate)', 48), ('t1,', 48), ('SingleSource<Integer>>()', 47), ('TimeUnit.MILLISECONDS,', 47), ('continue;\n', 47), ('height="380"', 47), ('UnsupportedOperationException();\n', 47), ('MaybeObserver<?', 47), ('subscribeActual(CompletableObserver', 47), ('Maybe\n', 47), ('pp1', 47), ('jdx);\n', 47), ('request', 47), ('buffer', 47), ('(q', 47), ('SingleSource<Integer>', 47), ('tests', 47), ('means', 46), ('<T,', 46), ('IllegalStateException.class,', 46), ('It', 46), ('cdl', 46), ('K', 46), ('Use', 46), ('CountDownLatch(1);\n\n', 46), ('period,', 46), ('downstream.onError(ex);\n', 46), ('Predicate<Integer>()', 46), ('java.util.*;\n\nimport', 46), ('base', 46), ('pp.onNext(1);\n\n', 46), ("Single's", 46), ('need', 46), ('date', 46), ('Observable<T>', 46), ('Disposable,', 45), ('.assertComplete();\n', 45), ('error.\n', 45), ('6,', 45), ('prefetch', 45), ('1).append(")\\r\\n\\r\\n");\n', 45), ('dispose();\n', 45), ('ErrorMode', 45), ('lineNumber(m.javadoc,', 45), ('objects', 45), ('AtomicThrowable();\n', 45), ('TestObserver<Object>', 45), ('this.d', 45), ('io.reactivex.internal.disposables.*;\nimport', 45), ('.assertFailure(TestException.class);\n\n', 45), ('Callable', 45), ('.assertResult();\n', 45), ('TimeUnit.MILLISECONDS);\n\n', 45), ('value;\n\n', 45), ('never()).onError(any(Throwable.class));\n', 45), ('custom', 44), ('SingleSubject<Integer>', 44), ('RuntimeException', 44), ('up', 44), ('Future}', 44), ('Observable.just(1,', 44), ('AtomicInteger\n', 44), ('see', 44), ('false);\n', 44), ('scheduler,', 44), ('io.reactivex.internal.util.*;\nimport', 44), ('LOGGER', 44), ('mapper,\n', 44), ('emitter', 44), ('<=', 44), ('threads', 44), ('executor', 44), ('?>', 44), ('java.util.concurrent.Callable;\nimport', 44), ('E>', 44), ('org.junit.Test;\nimport', 44), ('SequentialDisposable', 44), ('toString()', 44), ('this);\n', 44), ('name', 43), ('BooleanSubscription', 43), ('"1000",', 43), ('doc', 43), ('completed', 43), ('mode', 43), ('}\n//', 43), ('PublishSubject.create();\n', 43), ('@Param({', 43), ('set!");\n', 43), ('consumed', 43), ('entry', 43), ('Check', 43), ('read', 43), ('(decrementAndGet()', 43), ('"1",', 43), ('(get()', 42), ('Single.just(1)\n', 42), ('@Setup\n', 42), ('Collection<Method>', 42), ('AtomicInteger();\n\n', 42), ('between', 42), ('container', 42), ('10,', 42), ('java.util.Collections;\nimport', 42), ('Future<?>', 42), ('this.value', 42), ('NullPointerException.class)\n', 42), ('Observer', 42), ('+=', 42), ('created', 42), ('r)', 42), ('@GwtIncompatible', 42), ('observer.onError(new', 42), ('null.', 42), ('s.onComplete();\n', 42), ('through', 42), ('they', 42), ('10)\n', 42), ('t2)', 42), ('org.slf4j.LoggerFactory;\n\nimport', 42), ('BiFunction<Integer,', 42), ('promise', 42), ('sources;\n', 41), ('verify(w,', 41), ('produced', 41), ('t);\n', 41), ('Calls', 41), ('.parallel(1)\n', 41), ('it.\n', 41), ('error()', 41), ('terminates', 41), ('mentions', 41), ('done;\n', 41), ('ms', 41), ('(Exception', 41), ('just', 41), ('source2\n', 40), ('(!done)', 40), ('timeUnit', 40), ('@Test(timeout', 40), ('5)\n@Measurement(iterations', 40), ('subscribers', 40), ('calling', 40), ('due', 40), ('expected)', 40), ('Thread', 40), ('org.slf4j.Logger;\nimport', 40), ('them', 40), ('never', 40), ('Long', 40), ('TimeUnit.SECONDS));\n', 40), ('actual,\n', 40), ('ts.assertEmpty();\n\n', 40), ('org.reactivestreams.Subscriber;\n\nimport', 40), ('scheduler;\n\n', 40), ('accept(Throwable', 40), ('previous', 40), ('SingleSubject.create();\n\n', 40), ('org.openjdk.jmh.annotations.*;\nimport', 40), ('within', 40), ('Functions.emptyConsumer(),\n', 40), ('9,', 40), ('(SubscriptionHelper.validate(n))', 40), ('"100",', 39), ('Consumer<Throwable>()', 39), ('source.subscribe(parent);\n', 39), ('underlying', 39), ('message', 39), ('8,', 39), ('io.reactivex.Observer;\nimport', 39), ('1))', 39), ('sources,', 39), ('For', 39), ('setUp()', 39), ('s.onError(new', 39), ('K>', 39), ('TimeUnit.SECONDS)\n@OutputTimeUnit(TimeUnit.SECONDS)\n@Fork(value', 39), ('merged\n', 39), ('RxJavaPlugins.onError(new', 39), ('empty)', 39), ('method\n', 39), ('CompositeDisposable();\n', 39), ('TestHelper.assertError(errors,', 38), ('7,', 38), ('Observable.just(1)\n', 38), ('disposed?",', 38), ('different', 38), ('failure', 38), ('MaybeSource<Integer>>()', 38), ('StringBuilder', 38), ('MaybeSource<Integer>', 38), ('error\n', 38), ('},\n', 38), ('Boolean>', 38), ('1)\n@State(Scope.Thread)\npublic', 38), ('TestHelper.mockObserver();\n\n', 38), ('source2,', 38), ('Create', 38), ('(m', 38), ('by\n', 38), ('"b",', 38), ('java.util.concurrent.*;\nimport', 38), ('Maps', 38), ('actual.onSubscribe(this);\n\n', 38), ('to.assertFailure(TestException.class);\n', 38), ('@Override\n//', 38), ('instead.\n', 37), ('assertEquals(3,', 37), ('being', 37), ('"1000000"', 37), ('@Nullable\n', 37), ('support', 37), ('drainLoop();\n', 37), ('Disposables.empty();\n', 37), ('3);\n', 37), ('pp2', 37), ('2)\n', 37), ('Callable<Object>()', 37), ('future', 37), ('MaybeSubject<Integer>', 37), ('delayErrors;\n', 37), ('onNext(Object', 37), ('"10",', 37), ('way', 37), ('>>', 37), ('Android', 37), ('Publisher<Long>', 37), ('Consumer<Integer>()', 37), ('Long.MAX_VALUE)', 37), ('SimplePlainQueue<T>', 37), ('transformed', 37), ('{}\n', 37), ('this.delayErrors', 36), ('Callable<U>', 36), ('accept(Object', 36), ('Map<String,', 36), ('onError(e);\n', 36), ('.createTestSuite();\n', 36), ('BackpressureHelper.add(requested,', 36), ('Type', 36), ('Throwable,', 36), ('create(String[]', 36), ('receive', 36), ('iterator()', 36), ('source1\n', 36), ('BaseTck<Long>', 36), ('f)', 36), ('SingleObserver', 36), ('subscribeActual(final', 36), ('index;\n\n', 36), ('I/O', 36), ('tearDown()', 36), ('(DisposableHelper.validate(this.d,', 36), ('<K,', 36), ('CountDownLatch(1);\n', 36), ('times(1)).onComplete();\n', 36), ('Collections.emptySet();\n', 36), ('this.error', 35), ('line', 35), ('MaybeSubject.create();\n\n', 35), ('emission', 35), ('Subscribes', 35), ('TERMINATED', 35), ('via\n', 35), ('cancel();\n', 35), ('that,', 35), ('clear()', 35), ('io.reactivex.disposables.Disposables;\nimport', 35), ('or\n', 35), ('most', 35), ('this.queue', 35), ('ObjectHelper.requireNonNull(source1,', 35), ('result;\n', 35), ('C>', 35), ('wait', 35), ('b;\n\n', 35), ('this,', 35), ('ObjectHelper.requireNonNull(source2,', 35), ('bufferSize;\n', 35), ('@Override', 35), ('Tests', 35), ('.parallel()\n', 35), ('"source2', 35), ('@NonNull', 35), ('777);\n\n', 35), ('be\n', 35), ('"source1', 35), ('q;\n', 35), ('.withFeatures(\n', 34), ('2', 34), ('back', 34), ('unit\n', 34), ('lock', 34), ('sources.");\n', 34), ('set.dispose();\n', 34), ('this.predicate', 34), (')', 34), ('for\n', 34), ('byte[]', 34), ('CompletableSubject.create();\n\n', 34), ('Long>', 34), ('org.checkerframework.checker.nullness.compatqual.NullableDecl;\n\n/**\n', 34), ('Object[],', 34), ('InterruptedException,', 34), ('handle', 34), ('errors;\n\n', 34), ('io.reactivex.internal.subscriptions.*;\nimport', 34), ('code', 34), ('Boolean[]', 34), ('during', 34), ('PublishSubject.create();\n\n', 34), ('to.cancel();\n\n', 34), ('u', 34), ('initialDelay,', 34), ('since', 33), ('Utility', 33), ('operations', 33), ('io.reactivex.TestHelper;\nimport', 33), ('d2', 33), ('d1', 33), ('onError(new', 33), ('2009', 33), ('e.onComplete();\n', 33), ('operation', 33), ('factory', 33), ('TERMINATED)', 33), ('os', 33), ('possible', 33), ('m;\n', 33), ('io.reactivex.internal.subscriptions.BooleanSubscription;\nimport', 33), ('exceptions', 33), ('BooleanSubscription());\n', 33), ('time,', 33), ('scheduler));\n', 33), ('Single}', 33), ('stop', 33), ('actual.onSuccess(value);\n', 33), ('upstream.cancel();\n', 33), ('Publisher}', 33), ('java.util.Set;\nimport', 33), ('work', 33), ('suite', 33), ('BooleanSubscription();\n\n', 33), ('running', 33), ('(!d.isDisposed())', 33), ('this;\n', 32), ('timeout;\n', 32), ('C', 32), ('T2,', 32), ('Flowable.error(new', 32), ('Atomically', 32), ('io.reactivex.Observable;\nimport', 32), ('java.util.Iterator;\nimport', 32), ('"10000",', 32), ('@SuppressWarnings("rawtypes")\n', 32), ('.subscribeOn(Schedulers.computation())\n', 32), ('classes', 32), ('order', 32), ('@Experimental\n', 32), ('handler.\n', 32), ('java.util.concurrent.*;\n\nimport', 32), ('TestException();\n\n', 32), ('this.errors', 32), ('system', 32), ('(!delayErrors)', 32), ('s.onSubscribe(new', 32), ('Single<Integer>', 32), (');\n', 32), ('Iterator<?', 32), ('"100000",', 32), ('obs', 32), ('both', 32), ('contains', 32), ('it\n', 32), ('this.index', 32), ('.subscribe(new', 32), ('window', 32), ('io.reactivex.processors.PublishProcessor;\nimport', 32), ('delayErrors;\n\n', 32), ('Indicates', 32), ('e.onError(new', 31), ('safe', 31), ('org.mockito.Mockito.*;\n\nimport', 31), ('parent,', 31), ('K,', 31), ('Single.error(new', 31), ('assertFalse(d.isDisposed());\n\n', 31), ('implementations', 31), ('runs', 31), ('onStart()', 31), ('observable', 31), ('atomicInteger', 31), ('normal()', 31), ('2012', 31), ('(!errors.isEmpty())', 31), ('"unchecked",', 31), ('reference', 31), ('"rawtypes"', 31), ('trackPluginErrors();\n', 31), ('whose', 31), ('onNext', 31), ('could', 31), ('poll()', 31), ('(NullPointerException', 31), ('delayError)', 31), ('value,', 31), ('%', 31), ('ScheduledRunnable', 31), ('When', 31), ('Disposable}', 31), ('java.util.concurrent.ExecutorService;\nimport', 31), ('D>', 31), ('java.lang.annotation.Retention;\nimport', 31), ('fallback', 31), ('inOrder.verify(observer,', 30), ('.subscribe(to);\n\n', 30), ('type,', 30), ('System.arraycopy(a,', 30), ('org.reactivestreams.Publisher;\n\nimport', 30), ('CompletableObserver,', 30), ('AtomicReference<Subscription>', 30), ('io.reactivex.functions.Function;\n\n@BenchmarkMode(Mode.Throughput)\n@Warmup(iterations', 30), ('TimeoutException', 30), ('this.sources', 30), ('s.isDisposed();\n', 30), ('assertTrue(d.isDisposed());\n\n', 30), ('Date:', 30), ('1)\n', 30), ('io.reactivex.subjects.PublishSubject;\n\npublic', 30), ('observer;\n', 30), ('verify(o,', 30), ('supplied', 30), ('GWT', 30), ('MaybeObserver<T>,', 30), ('Jeroen', 30), ('converter', 30), ('InOrder', 30), ('Meulemeester\n', 30), ('errors.isEmpty());\n', 30), ('scheduler.advanceTimeBy(1,', 30), ('mergeDelayError}', 30), ('(p', 30), ('based', 30), ('All', 30), ('values,', 30), ('source3,', 30), ('generated', 30), ('R>\n', 30), ('sets', 30), ('0);\n', 30), ('source3\n', 30), ('active', 30), ('inOrder', 30), ('initial', 29), ('(value', 29), ('worker.dispose();\n', 29), ('how', 29), ('constructor', 29), ('t2;\n', 29), ('thread-safe.\n', 29), ('requested;\n\n', 29), ('io.reactivex.internal.util;\n\nimport', 29), ('pp.onComplete();\n\n', 29), ('2007', 29), ('annotation', 29), ('TestHelper.assertError(ce,', 29), ('isEmpty()', 29), ('java.util.List;\n\n/**\n', 29), ('onComplete}', 29), ('3)\n', 29), ('(!cancelled)', 29), ('standard', 29), ('various', 29), ('reps;', 29), ('notification', 29), ('assertTrue(errors.toString(),', 29), ('Class<?>', 29), ('*/\n@Experimental\npublic', 29), ('CollectionSize.ANY)\n', 29), ('BiFunction<?', 29), ('SingleSource<T>', 29), ('delayError;\n', 29), ('prefetch)', 29), ('happens', 29), ('App', 29), ("don't", 29), ('Flowable,', 29), ('java.util.HashMap;\nimport', 29), ('even', 29), ('example', 29), ('provides', 29), ('hasNext()', 29), ('upstream;\n\n', 29), ('InMemoryAppender', 29), ('DisposableHelper.replace(this,', 28), ('T3,', 28), ('third', 28), ('prefetch;\n\n', 28), ('next()', 28), ('point\n', 28), ('ScheduledExecutorService', 28), ('reports', 28), ('io.reactivex.internal.fuseable.*;\nimport', 28), ("it's", 28), ('Movie', 28), ('this.requested', 28), ('disposable', 28), ('5);\n', 28), ('v;\n\n', 28), ('MaybeObserver', 28), ('completion', 28), ('Observable.error(new', 28), ('longer', 28), ('shared', 28), ('TimeUnit.SECONDS,', 28), ('zipper\n', 28), ('ObservableSource<T>', 28), ('a;\n', 28), ('.assertNotComplete();\n', 28), ('writer', 28), ('"other', 28), ('complete', 28), ('super.onNext(t);\n', 28), ('Flowable<String>', 28), ('assertError(errors,', 28), ('(count', 28), ('Completable}', 28), ('cancelAll();\n', 28), ('(w', 28), ('TestCase', 28), ('followed', 28), ('@SchedulerSupport(SchedulerSupport.CUSTOM)\n', 28), ('Entry<K,', 28), ('(errorMode', 28), ('SubscriptionArbiter', 27), ('assertTrue("Timed', 27), ('prefetch,', 27), ('gets', 27), ('main(String[]', 27), ('AtomicBoolean();\n', 27), ('BiFunction<T,', 27), ('io.reactivex.subscribers.TestSubscriber;\n\npublic', 27), ('1;\n\n', 27), ('{@inheritDoc}\n', 27), ('sources\n', 27), ('deliver', 27), ('Integer[count];\n', 27), ('this.bufferSize', 27), ('io.reactivex.schedulers.Schedulers;\n\npublic', 27), ('org.junit.Assert.*;\nimport', 27), ('PM\n', 27), ('Louis', 27), ('passed', 27), ('consumer.</dd>\n', 27), ('true);\n', 27), ('java.util.concurrent.atomic.AtomicBoolean;\n\nimport', 27), ('inner)', 27), ('Comparator<?', 27), ('b[0]);\n', 27), ('ex.getCause()', 27), ('count,', 27), ('SubscriptionHelper.CANCELLED)', 27), ('.assertFailureAndMessage(TestException.class,', 27), ('ObjectHelper.requireNonNull(sources,', 27), ('defaultValue;\n', 27), ('this.prefetch', 27), ('r2);\n', 27), ('throw")\n', 27), ('worker', 27), ('TestException()))\n', 27), ('out",', 27), ('character', 27), ('java.util.concurrent.Executors;\nimport', 27), ('operator\n', 27), ('list);\n', 27), ('m,', 27), ('b[1]', 27), ('"a",', 27), ('cdl.await(5,', 27), ('b[0]', 27), ('Wasserman\n', 27), ('zipped', 27), ('<ul>\n', 26), ('singleItem', 26), ('BiConsumer<Object,', 26), ('ts.assertNoErrors();\n', 26), ('Observable<Integer>()', 26), ('Method', 26), ('asynchronous', 26), ('ObjectHelper.requireNonNull(source3,', 26), ('subscribe(Observer<?', 26), ('"source3', 26), ('onError},', 26), ('counter', 26), ('</ul>\n', 26), ('subscribe(Subscriber<?', 26), ("'rail'", 26), ('Constructs', 26), ('channel', 26), ('SequentialDisposable();\n', 26), ('Publishers', 26), ('now', 26), ('com.google.common.io;\n\nimport', 26), ('perform', 26), ('(c', 26), ('those', 26), ('item\n', 26), ('Completable>()', 26), ('occurs\n', 26), ('bufferSupplier;\n', 26), ('com.google.common.collect.testing;\n\nimport', 26), ('Class<?', 26), ('type.\n', 26), ('io.reactivex.functions.Action;\nimport', 26), ("didn't", 26), ('execute', 26), ('com.google.common.util.concurrent;\n\nimport', 26), ('count)', 26), ('skip\n', 26), ('"Disposable', 26), ('optionally', 26), ('Single.<Integer>error(new', 26), ('ObjectHelper.requireNonNull(other,', 26), ('to.cancel();\n', 26), ('always', 26), ('applying', 26), ('signature\\r\\n', 25), ('ParallelFlowable<T>', 25), ('stream,', 25), ('cause', 25), ('this\n', 25), ('retry', 25), ('TestException);\n', 25), ('drive', 25), ('prefetch;\n', 25), ('"\n', 25), ('runnable', 25), ('BiFunction<R,', 25), ('async', 25), ('observer.onSubscribe(Disposables.empty());\n', 25), ('ExecutionException', 25), ('composite', 25), ('RxJavaPlugins.setFailOnNonBlockingScheduler(true);\n\n', 25), ('delayErrors)', 25), ('bufferSize,', 25), ('Scheduler.Worker', 25), ('d.isDisposed();\n', 25), ('Object,', 25), ('BiConsumer<?', 25), ('"sources', 25), ('write', 25), ('<a\n', 25), ('upstream.dispose();\n', 25), ('mode)', 25), ('size', 25), ('EmptyDisposable.error(e,', 25), ('downstream.\n', 25), ('assertTrue(ex.toString(),', 25), ('&#64;Override\n', 25), ('0L,', 25), ('CompositeException(t,', 25), ('mapper));\n', 25), ('never()).onComplete();\n', 25), ('(!b)', 25), ('receives', 25), ('delay;\n', 25), ('uses', 25), ('Publisher\n', 25), ('flow', 25), ('version', 25), ('interrupted', 25), ('maxConcurrency,', 25), ('cancelled;\n', 25), ('waiting', 25), ('Maybe.just(v);\n', 25), ('like', 25), ('producer', 25), ('1];\n', 25), ('maxConcurrency;\n', 25), ('reset', 25), ('Function<Object[],', 24), ('i,', 24), ('@interface', 24), ('concurrency', 24), ('task.dispose();\n\n', 24), ('sourceArray', 24), ('otherwise', 24), ('Maybe<?', 24), ('Executor', 24), ('?,', 24), ('comparator', 24), ('inner,', 24), ('remove()', 24), ('io.reactivex.annotations.Nullable;\nimport', 24), ('Arrays.fill(sourceArray,', 24), ('TRight,', 24), ('To', 24), ('maxElementsFromPublisher()', 24), ('URL', 24), ('R>(s,', 24), ('countDown();\n', 24), ('io.reactivex.internal.schedulers;\n\nimport', 24), ('s.onSubscribe(Disposables.empty());\n', 24), ('@BeforeEach\n', 24), ('cancel', 24), ('indicating', 24), ('T4,', 24), ('behavior', 24), ('assertTrue(pp2.hasSubscribers());\n\n', 24), ('@NullableDecl\n', 24), ('List<T>', 24), ('exception.\n', 24), ('{@linkplain', 24), ('io.reactivex.xmapz;\n\nimport', 24), ('received', 24), ('allow', 24), ('org.openjdk.jmh.infra.Blackhole;\n\nimport', 24), ('(i', 24), ('specify', 24), ('Completable.error(new', 24), ('emitted\n', 24), ('execution', 24), ('List<Object>', 24), ('other\n', 24), ('java.util.LinkedList;\nimport', 24), ('properties', 24), ('control', 24), ('assertTrue(pp1.hasSubscribers());\n', 24), ('Disposable>', 24), ('2008', 24), ('Observer<T>', 24), ('B>,', 24), ('check', 24), ('depending', 24), ('(ExecutionException', 24), ('i;\n', 24), ('TimeUnit.MILLISECONDS)\n', 24), ('supported', 24), ('<li>{@code', 24), ('this.delayError', 24), ('Maybe<R>', 24), ('Single.just(v);\n', 24), ('FlowableSubscriber<T>', 24), ('org.junit.*;\nimport', 24), ('disposes', 24), ('t,', 24), ('addString)\n', 24), ('resource,', 24), ('Single<R>', 24), ('exec', 24), ('fourth', 24), ('org.junit.jupiter.api.BeforeEach;\nimport', 24), ('exc)', 23), ('Verify', 23), ('assertEquals("Second', 23), ('Observer<Object>', 23), ('to.assertFailure(TestException.class);\n\n', 23), ('RxJavaPlugins.\n', 23), ('Integer.MAX_VALUE)', 23), ('JUnit', 23), ('transform)', 23), ('completes.\n', 23), ('org.junit.jupiter.api.Test;\n\nimport', 23), ('AtomicReference<Throwable>', 23), ('ce', 23), ('(IllegalArgumentException', 23), ('error);\n', 23), ('freshElement)', 23), ('contents', 23), ('generator', 23), ('sources;\n\n', 23), ('assertEquals("First', 23), ('latch.countDown();\n', 23), ('that\n', 23), ('Wraps', 23), ('tested', 23), ('all\n', 23), ('-&gt;', 23), ('HashMap<>();\n', 23), ('delivered', 23), ('about', 23), ('start', 23), ('b[1]);\n\n', 23), ('amount', 23), ('command', 23), ('Flowable<Integer>()', 23), ('indicate', 23), ('converted', 23), ('Charset', 23), ('predicate));\n', 23), ('transform.apply(source);\n\n', 23), ('requested.get();\n', 23), ('assertTrue(ms.hasObservers());\n\n', 23), ('end', 23), ('Chris', 23), ('org.reactivestreams.Subscription;\n\nimport', 23), ('reps)', 23), ('io.reactivex.internal.observers;\n\nimport', 23), ('java.io.File;\nimport', 23), ('onError;\n', 23), ('R,', 23), ('multimap', 23), ('out.subscribe(NoOpConsumer.INSTANCE);\n\n', 23), ('set,', 23), ('type)', 23), ('0;\n\n', 23), ('.assertFailure(IllegalStateException.class);\n', 23), ('args', 23), ('string', 23), ('or,', 23), ('Flowable.just(1,', 23), ('e));\n', 23), ('(b', 23), ('test\n', 23), ('(DisposableHelper.setOnce(this,', 23), ('ps.onNext(1);\n\n', 23), ('ImmutableMap<K,', 23), ('thrown!");\n', 23), ('off,', 23), ('onComplete();\n', 23), ('CollectionFeature.SERIALIZABLE,\n', 23), ('IllegalArgumentException', 23), ('3', 23), ('INSTANCE', 22), ('combiner', 22), ('will\n', 22), ('parent.drain();\n', 22), ('io.reactivex.internal.operators.mixed;\n\nimport', 22), ('cd', 22), ('"c",', 22), ('Serializable', 22), ('delayError;\n\n', 22), ('Signals', 22), ('double', 22), ('assertFalse(pp2.hasSubscribers());\n\n', 22), ('EmptyDisposable.INSTANCE;\n', 22), ('offer(T', 22), ('merge}', 22), ('merge', 22), ('com.google.common.annotations.Beta;\nimport', 22), ('EmptyDisposable.error(ex,', 22), ('contain', 22), ('requestFusion(int', 22), ('error)', 22), ('*/\n@GwtCompatible\npublic', 22), ('on\n', 22), ('createPublisher(final', 22), ('1000)\n', 22), ('requests', 22), ('zipper)', 22), ('generic', 22), ('AppendOnlyLinkedArrayList<Object>', 22), ('this.count', 22), ('source4\n', 22), ('subscriptions', 22), ('assertEquals("one",', 22), ('downstream;\n', 22), ('io.reactivex.annotations.NonNull;\nimport', 22), ('annotated', 22), ('o;\n', 22), ('path', 22), ('observer.onSubscribe(d2);\n\n', 22), ('to.assertEmpty();\n', 22), ('1));\n', 22), ('assertEquals(Long.MAX_VALUE,', 22), ('subscriber)', 22), ('observer.onSubscribe(d1);\n\n', 22), ('ObservableSource', 22), ('Callable<List<Integer>>()', 22), ('SimpleQueue<T>', 22), ('io.reactivex.internal.disposables.EmptyDisposable;\nimport', 22), ('MaybeSource<T>', 22), ('runFinally();\n', 22), ('</dd>\n', 22), ('equivalent', 22), ('set;\n', 22), ('TestSuite', 22), ('Iterator<T>', 22), ('Completable.complete()\n', 22), ('a.add(b);\n', 22), ('<T>\n', 22), ('String[]', 22), ('s.request(n);\n', 22), ('c;\n', 22), ('original', 22), ('v1,', 22), ('singleton', 22), ('merged', 22), ('Calling', 22), ('(once.compareAndSet(false,', 22), ('hashCode()', 22), ('error.get();\n', 22), ('elements);\n', 22), ('2015', 22), ('Callable<Integer>()', 22), ('observer.onNext(1);\n', 22), ('/*', 22), ('onComplete;\n', 22), ('values.\n', 22), ('apply(Object[]', 22), ('clazz)', 22), ('once.\n', 22), ('onSuccess(Object', 22), ('would', 22), ('s.onNext(1);\n', 22), ('ds', 22), ('implementing', 21), ('ArrayList<Integer>();\n', 21), ('d;\n', 21), ('unbounded', 21), ('}</pre>\n', 21), ('failed', 21), ('c)', 21), ('SpscLinkedArrayQueue<R>', 21), ('downstream.</dd>\n', 21), ('entries', 21), ('io.reactivex.annotations.Experimental;\nimport', 21), ('.test(true)\n', 21), ('resources', 21), ('invokes', 21), ('time;\n', 21), ('lazySet(DisposableHelper.DISPOSED);\n', 21), ('a)', 21), ('over', 21), ('bytes', 21), ('<pre>{@code\n', 21), ('successful,', 21), ('CrashDummy', 21), ('timeout}', 21), ('}).test();\n\n', 21), ('R>(this,', 21), ('assertEquals(\n', 21), ('Set<String>', 21), ('innerError(Throwable', 21), ('latch', 21), ('established', 21), ('CompletableSource>()', 21), ('send', 21), ('null}', 21), ('Maybe<Integer>', 21), ('(IOException', 21), ('S>', 21), ('B', 21), ('Maybe,', 21), ('org.junit.jupiter.api.AfterEach;\nimport', 21), ('wrapping', 21), ('avoid', 21), ('java.util.concurrent.ExecutionException;\nimport', 21), ('log', 21), ('java.util.Set;\n\n/**\n', 21), ('these', 21), ('scheduler.advanceTimeBy(100,', 21), ('else\n', 21), ('.subscribeOn(Schedulers.io())\n', 21), ('Interface', 21), ('Publisher<U>', 21), ('downstream.onComplete();\n', 21), ('5', 21), ('C,', 21), ('null));\n', 21), ('Observable<T>>', 21), ('a.length;\n', 21), ('immediately', 21), ('expects', 21), ('ignored\n', 21), ('.assertValues(1,', 21), ('cancelled.\n', 21), ('U>>', 21), ('empty.\n', 21), ('@AfterEach\n', 21), ('numbers', 21), ('(errors.addThrowable(t))', 21), ('constant', 21), ('io.reactivex.internal.queue.SpscLinkedArrayQueue;\nimport', 21), ('concatenated\n', 21), ('Subscription,', 21), ('worked\n', 21), ('</code></pre>\n', 21), ('ObjectHelper.requireNonNull(mapper,', 21), ('(errors.addThrowable(e))', 20), ("upstream's", 20), ('TestHelper.assertError(list,', 20), ('assertEquals(5,', 20), ('super(actual);\n', 20), ('run,', 20), ('.assertNoValues()\n', 20), ('representing', 20), ('other));\n', 20), ('with\n', 20), ('(not', 20), ('assertEquals(Arrays.asList(1,', 20), ('(compareAndSet(false,', 20), ('Similarly,', 20), ('height="310"', 20), ('assertFalse(pp1.hasSubscribers());\n', 20), ('io.reactivex.functions.Consumer;\nimport', 20), ('signals.\n', 20), ('features', 20), ('CollectionFeature.ALLOWS_NULL_VALUES,\n', 20), ('List<E>', 20), ('org.junit.jupiter.api.Assertions.assertEquals;\nimport', 20), ('fifth', 20), ('.filter(new', 20), ('href="http://reactivex.io/documentation/operators/zip.html">ReactiveX', 20), ('fail();\n', 20), ('requested,', 20), ('amount\n', 20), ('Cancellable}', 20), ('it.next());\n\n', 20), ('Open,', 20), ('tc.start);\n', 20), ('might', 20), ('source2,\n', 20), ('creating', 20), ('ObservableSource<Integer>>()', 20), ('this.set', 20), ('name;\n', 20), ('assertTrue(pp.hasSubscribers());\n\n', 20), ('if\n', 20), ('action)', 20), ('results\n', 20), ('io.reactivex.Scheduler.Worker;\nimport', 20), ('service', 20), ('file\n', 20), ('io.reactivex.annotations.*;\nimport', 20), ('observer);\n', 20), ('A,', 20), ('o,', 20), ('throwable', 20), ('ExecutionException,', 20), ('io.reactivex.annotations.*;\n\n/**\n', 20), ('B,', 20), ('q.poll();\n', 20), ('accept(List<Integer>', 20), ('method,', 20), ('d.dispose();\n\n', 20), ('Functions.EMPTY_ACTION,\n', 20), ('access', 20), ('actual.onSuccess(v);\n', 20), ('Program', 20), ('index);\n', 20), ('org.openjdk.jmh.infra.Blackhole;\nimport', 20), ('Long.MAX_VALUE', 20), ('href="http://reactivex.io/documentation/operators/merge.html">ReactiveX', 20), ('iterable', 20), ('2014', 20), ('assertFalse(pp.hasSubscribers());\n', 20), ('eagerly', 20), ('b))', 20), ('maximum', 20), ('io.reactivex.functions.Predicate;\nimport', 20), ('pp.onNext(1);\n', 20), ('java.lang.reflect.Method;\nimport', 20), ('onXXX', 20), ('blocking', 20), ('limit)', 20), ('k', 20), ('want', 20), ('instance.\n', 20), ('com.google.common.base.Preconditions.checkNotNull;\n\nimport', 20), ('child', 20), ('Sets', 20), ('correct', 20), ('w.dispose();\n', 20), ('Flattens', 20), ('Merge</a>\n', 20), ('T5,', 20), ('idx,', 20), ('Zip</a>\n', 20), ('o.subscribe();\n', 20), ('BiPredicate<?', 20), ('ObservableSource<Integer>', 20), ('unit;\n\n', 19), ('tc', 19), ('Function<Observable<Object>,', 19), ('org.junit.Assert.assertEquals;\n\nimport', 19), ('supplier', 19), ('Subscriber<String>', 19), ('atomicInteger.incrementAndGet();\n', 19), ('t1', 19), ('S', 19), ('null);\n\n', 19), ('2)', 19), ('Kevin', 19), ('Iterable\n', 19), ('(maxConcurrency', 19), ('supports', 19), ('remaining', 19), ('<dt><b>Error', 19), ('to.assertResult();\n', 19), ('User', 19), ('accept', 19), ('#onError(Throwable)}', 19), ('atomicInteger.get());\n', 19), ('interface.\n', 19), ('unit));\n', 19), ('2L,', 19), ('io.reactivex.processors.PublishProcessor;\n\npublic', 19), ('Map<K,', 19), ('switch', 19), ('to,', 19), ('org.junit.*;\n\nimport', 19), ('from,', 19), ('onError\n', 19), ('queue.poll();\n', 19), ('inner.dispose();\n', 19), ('0L;\n', 19), ('"unit', 19), ('this.downstream', 19), ('ordering', 19), ('latest', 19), ('TestScheduler();\n', 19), ('java.lang.annotation.Target;\n\n/**\n', 19), ('response', 19), ('Functions.EMPTY_ACTION,', 19), ('T>,', 19), ('mainError()', 19), ('actual.onError(error.terminate());\n', 19), ('Functions.emptyConsumer(),', 19), ('downstream.onSubscribe(this);\n', 19), ('TestHelper.RACE_LONG_LOOPS;', 19), ('exception");\n', 19), ('Represents', 19), ('empty,', 19), ('ImmutableSet<E>', 19), ('<p>If', 19), ('Subscribers', 19), ('junit.framework.TestCase;\n\n/**\n', 19), ('IllegalStateException("No', 19), ('mapper\n', 19), ('this.bufferSupplier', 19), ('observer.onNext(2);\n', 19), ('SingleObserver<T>,', 19), ('Iterable<Integer>', 19), ('our', 19), ('example,', 19), ('non-null', 19), ('s.onSubscribe(parent);\n', 19), ('U>(this,', 19), ('instance,', 19), ('apply(Observable<Object>', 19), ('result\n', 19), ('this.upstream', 19), ('honor', 19), ('1L,', 19), ('actual);\n', 19), ('argument', 19), ('1;', 19), ('TestSubscriber<Object>', 19), ('4);\n', 19), ('ex);\n', 19), ('Observable<Long>', 19), ('AtomicReference<Disposable>();\n\n', 19), ('fusion', 19), ('this.timeout', 19), ('per', 19), ('ObjectHelper.requireNonNull(mapper.apply(t),', 19), ('SafeSubscriber<Integer>', 19), ('actual.onNext(value);\n', 19), ('disposing', 19), ('handling:</b></dt>\n', 19), ('@Before\n', 19), ('delaying', 19), ('<p>Note', 19), ('(TestException', 19), ('user', 19), ('Bourrillion\n', 19), ('disposeInner();\n', 19), ('(sources.length', 19), ('Observable.create(new', 19), ('Should', 19), ('src', 19), ('Completable.complete();\n', 19), ('.concatMapMaybe(new', 19), ('emulated', 19), ('@AndroidIncompatible', 19), ('cb.await();\n\n', 18), ('available', 18), ('parameters', 18), ('happen', 18), ('SerializationException', 18), ('p;\n\n', 18), ('d2.isDisposed();\n', 18), ('contained', 18), ('SafeSubscriber<Object>', 18), ('Maybe.just(1)\n', 18), ('ts.assertComplete();\n', 18), ('UnsupportedOperationException("Should', 18), ('Iterator<Long>', 18), ('Flowable.empty();\n', 18), ('i)', 18), ('scalar', 18), ('appender', 18), ('v2)', 18), ('appender;\n\n', 18), ('ts.cancel();\n\n', 18), ('callable', 18), ("won't", 18), ('2016', 18), ('whether', 18), ('currently', 18), ('AtomicReference<Disposable>();\n', 18), ('channel.\n', 18), ('message)', 18), ('errorMode;\n\n', 18), ('many', 18), ('FlatMap</a>\n', 18), ('CompositeException}', 18), ('RuntimeException.class)\n', 18), ('Function<Flowable<Object>,', 18), ('accept(Disposable', 18), ('never()).onNext(anyString());\n', 18), ('otherState', 18), ('logic', 18), ('(subscribers.get()', 18), ('1L);\n', 18), ('parameter', 18), ('sleep();\n', 18), ('s.onError(e);\n', 18), ('application', 18), ('href="http://reactivex.io/documentation/operators/flatmap.html">ReactiveX', 18), ('ObjectHelper.requireNonNull(source4,', 18), ('BiConsumer<List<Integer>,', 18), ('returning', 18), ('types', 18), ('class.', 18), ('"Subscription', 18), ('ObjectHelper.requireNonNull(scheduler,', 18), ('Observable<Object>', 18), ('java.util.HashSet;\nimport', 18), ('CompositeException(e,', 18), ('ts.assertResult(1,', 18), ('regular', 18), ('appender.getLogSize());\n', 18), ('pp.onError(new', 18), ('deliberately', 18), ('.subscribeWith(to)\n', 18), ('Single.fromCallable(new', 18), ('?>>()', 18), ('Single,', 18), ('charset', 18), ('apply(Flowable<Object>', 18), ('according', 18), ('existing', 18), ('List', 18), ('unique', 18), ('n,', 18), ('appender.stop();\n', 18), ('delayError', 18), ('e.printStackTrace();\n', 18), ('instances!");\n', 18), ('<V>', 18), ('FluentIterable', 18), ('0L;\n\n', 18), ('keys', 18), ('d1.isDisposed();\n', 18), ('no-op\n', 18), ('q)', 18), ('calls[0]);\n', 18), ('io.reactivex.internal.subscribers;\n\nimport', 18), ('require', 18), ('io.reactivex.internal.util.AtomicThrowable;\nimport', 18), ('p;\n', 18), ('Flowable<Long>', 18), ('subscriber\n', 18), ('Thread.sleep(SLEEP_AFTER_CANCEL);\n\n', 18), ('concurrent', 18), ('This\n', 18), ('ex;\n', 18), ('TestingDeferredScalarSubscriber', 18), ('event.\n', 18), ('takes', 18), ('consumer\n', 18), ('SpscLinkedArrayQueue<Object>', 18), ('w;\n', 18), ('stream)', 18), ('Iterable<Long>', 18), ('null!");\n', 18), ('(j', 18), ('Observable.unsafeCreate(new', 18), ('your', 18), ('other);\n', 18), ('what', 18), ('API', 18), ('zip}', 18), ('"mapper', 18), ('"source4', 18), ('b.append("java.lang.RuntimeException:', 18), ('CANCELLED)', 18), ('scheduled', 18), ('SafeSubscriberTestException);\n', 18), ('functional', 17), ('.doOnNext(new', 17), ('io.reactivex.internal.disposables.DisposableHelper;\n\n/**\n', 17), ('String>()', 17), ('positive', 17), ('@SuppressWarnings("unchecked")', 17), ('other,', 17), ('reducer)', 17), ('equal', 17), ('"unchecked"', 17), ('<p>History:', 17), ('reducer;\n\n', 17), ('Long>()', 17), ('Converts', 17), ('this.state', 17), ('e++;\n', 17), ('wrapped', 17), ('<T1>', 17), ('keep', 17), ('java.util.concurrent.Future;\nimport', 17), ('CompositeException(ex,', 17), ('ScheduledRunnable(Functions.EMPTY_RUNNABLE,', 17), ('zipper', 17), ('reducer;\n', 17), ('errorMode;\n', 17), ('finished', 17), ('serialization', 17), ('additional', 17), ('not\n', 17), ('Flowable.fromIterable(iterate(elements', 17), ('FutureTask<Void>(Functions.EMPTY_RUNNABLE,', 17), ('source.concatMap(new', 17), ('CompositeException', 17), ('TestObserver', 17), ('o2', 17), ('MaybeSources,', 17), ('deliver\n', 17), ('4', 17), ('calls[0]++;\n', 17), ('"scheduler', 17), ('method.', 17), ('resulting\n', 17), ('Completable()', 17), ('class\n', 17), ('bufferSize;\n\n', 17), ('AbstractMaybeWithUpstream<T,', 17), ('events\n', 17), ('func', 17), ('requires', 17), ('produced;\n\n', 17), ('list.add(v);\n', 17), ('@CanIgnoreReturnValue\n', 17), ('iter', 17), ('update', 17), ('propagating', 17), ('this.errorMode', 17), ('io.reactivex.schedulers.Schedulers;\nimport', 17), ('(iterator.hasNext())', 17), ('execute(Runnable', 17), ('source.flatMap(new', 17), ('Completable\n', 17), ('SingleObserver<T>', 17), ('zip(\n', 17), ('io.reactivex.internal.functions.Functions;\n\n@Test\npublic', 17), ('io.reactivex.functions.BiFunction;\nimport', 17), ('file,', 17), ('ss', 17), ('apply(Object', 17), ('period;\n', 17), ('QueueSubscription<T>', 17), ('TestSubscriber<String>', 17), ('<T2>', 17), ('against', 17), ('(!isDisposed())', 17), ('onNext;\n', 17), ('Consumer<Disposable>()', 17), ('":', 17), ('reader', 17), ('count[0]);\n', 17), ('Thread.currentThread().interrupt();\n', 17), ('operates', 17), ('this.reducer', 17), ('.assertFailure(NullPointerException.class);\n', 17), ('java.lang.annotation.RetentionPolicy;\nimport', 17), ('.append(className).append("', 17), ('(").append(fileName).append(":").append(i).append(")\\r\\n");\n', 17), ('<pre><code>\n', 17), ('similar', 17), ('ts.cancel();\n', 17), (';\n\n', 17), ('active.decrementAndGet();\n', 17), ('lines', 17), ('find', 17), ('T2>', 17), ('till', 17), ('Iterator<E>', 17), ('encounters', 17), ('list,', 17), ('Subscription()', 17), ('URL[]', 17), ('notify', 17), ('left', 17), ('suppress', 17), ('buffer;\n', 17), ('java.util.Map;\n\n/**\n', 17), ('receiving', 17), ('actions', 16), ('though', 16), ('<T1,', 16), ('TestingDeferredScalarSubscriber(ts);\n', 16), ('Iterable<T>', 16), ('values\n', 16), ('item)', 16), ('sorted', 16), ('subscription\n', 16), ('SimpleQueue<U>', 16), ('passing', 16), ('testing', 16), ('1);\n\n', 16), ('Cancellable', 16), ('lack', 16), ('sixth', 16), ('BackpressureHelper.produced(requested,', 16), ('.onTerminateDetach()\n', 16), ('errors.get();\n', 16), ('iter.iterator();\n\n', 16), ('disposed;\n\n', 16), ('builder', 16), ('@SuppressWarnings("unused")', 16), ('subscribers)', 16), ('wip', 16), ('source.switchMap(new', 16), ('optional', 16), ('empty\n', 16), ('onSuccess\n', 16), ('this.maxConcurrency', 16), ('concat}', 16), ('T1,', 16), ('event\n', 16), ('guaranteed', 16), ('downstream;\n\n', 16), ('D', 16), ('natural', 16), ('add', 16), ('exactly', 16), ('still', 16), ('TimeUnit.MILLISECONDS));\n', 16), ('bufferSize)', 16), ('Object>>()', 16), ('(String', 16), ('NullPointerException\n', 16), ('<dd>If', 16), ('{}",', 16), ('MaybeSource}s', 16), ('errors.', 16), ('Flowable<T>>', 16), ('source5,', 16), ('indicates', 16), ('go/futurereturn-lsc\n', 16), ('verified)\n', 16), ('UndeliverableException}', 16), ('pass', 16), ('T6,', 16), ('SubscriptionHelper.cancel(this);\n', 16), ('RxJavaPlugins#onError(Throwable)}', 16), ('scheduler.\n', 16), ('callback\n', 16), ('?>[]', 16), ('URLClassLoader', 16), ('zipArray(Functions.toFunction(zipper),', 16), ('set.delete(inner);\n', 16), ('it.next());\n', 16), ('signaled', 16), ('creates', 16), ('Applies', 16), ('TestException("Forced', 16), ('TLeft,', 16), ('Observable}', 16), ('predicate;\n\n', 16), ('create()', 16), ('Emitter<Object>>()', 16), ('function\n', 16), ('times(1)).onNext("a");\n', 16), ('AtomicReference<Subscription>();\n', 16), ('ZipCoordinator<T,', 16), ('));\n', 16), ('(disposed)', 16), ('rather', 16), ('map)', 16), ('R>(observer,', 16), ('Merges', 16), ("one's", 16), ('SortedSet<String>', 16), ('call[0]);\n', 16), ('fails', 16), ('(enter())', 16), ('call[0]++;\n', 16), ('intended', 16), ('incoming', 16), ('()', 16), ('lottery', 16), ('T1>', 16), ('Scheduler>()', 16), ('TestSubscriber<Integer>()', 16), ('(individually)', 16), ('source(s)', 16), ('Reader', 16), ('Boolean', 16), ('Throwable}s', 16), ('<p><b>Comparison', 16), ('retry}', 16), ('own', 16), ('assertTrue(cs.hasObservers());\n\n', 16), ('empty()', 16), ('list.size());\n', 16), ('Generates', 16), ('onSuccess', 16), ('Flowable.<Integer>error(new', 16), ('iterator.next();\n', 16), ('name)', 16), ('this.defaultValue', 16), ('Emitter<Object>', 16), ('<E', 16), ('items\n', 16), ('LotteryNumbers', 16), ('fashion', 16), ('Throwable}s\n', 16), ('(composite)', 16), ('testData.add(new', 16), ('HorrorMovie());\n\n', 16), ('reading', 16), ('predicate.test(t);\n', 16), ('i);\n', 16), ('holds', 16), ('ByteSource', 16), ('null");\n\n', 16), ('delayed', 15), ('words.add(new', 15), ('state;\n\n', 15), ('ObservableOnSubscribe<Object>()', 15), ('SubscriptionHelper.cancel(other);\n', 15), ('itself', 15), ('org.junit.jupiter.api.Test;\nimport', 15), ('Long.MAX_VALUE);\n', 15), ('capacityHint;\n', 15), ('FluentIterable<E>', 15), ('skip;\n', 15), ('predicate,', 15), ('Observer<Integer>', 15), ('invoke', 15), ('Single<Boolean>', 15), ('AtomicReference<Throwable>();\n', 15), ('observer.onSubscribe(Disposables.empty());\n\n', 15), ('Callable<R>', 15), ('command,', 15), ('ft', 15), ('(compareAndSet(0,', 15), ('Type[]', 15), ('convert', 15), ('subscribe(ObservableEmitter<Object>', 15), ('checked', 15), ('simple', 15), ('com.google.errorprone.annotations.CanIgnoreReturnValue;\nimport', 15), ('badSource()', 15), ('t;\n\n', 15), ('2);\n\n', 15), ('plugin', 15), ('client', 15), ('errors.addThrowable(ex);\n', 15), ('ObjectHelper.requireNonNull(bufferSupplier.call(),', 15), ('random', 15), ('it.hasNext());\n', 15), ('directly', 15), ('java.util.concurrent.atomic.AtomicLong;\n\nimport', 15), ('can\n', 15), ('computation}', 15), ('({@link', 15), ('assertFalse(cs.hasObservers());\n', 15), ('from\n', 15), ('java.util.Optional}:</b>', 15), ('were', 15), ('disposer;\n', 15), ('TimeUnit.SECONDS));\n\n', 15), ('Error();\n', 15), ('(AssertionFailedError', 15), ('LoggerFactory.getLogger(App.class);\n\n', 15), ('name,', 15), ('(RejectedExecutionException', 15), ('tasks.add(new', 15), ('onSuccess}', 15), ('LinkedList<>();\n\n', 15), ('Maybe}', 15), ('"onError', 15), ('file)', 15), ('bs', 15), ('<p>See', 15), ('@SchedulerSupport(SchedulerSupport.COMPUTATION)\n', 15), ('java.util.Map.Entry;\nimport', 15), ('processing', 15), ('a.onError(errors.terminate());\n', 15), ('source4,', 15), ('BooleanSupplier', 15), ('wrapper', 15), ('onError,', 15), ('verify(subscribedObserver,', 15), ('information', 15), ('ex.getMessage());\n', 15), ('inner;\n\n', 15), ('5);\n\n', 15), ('annotations', 15), ('com.google.common.base;\n\nimport', 15), ('null.\n', 15), ('occurs.\n', 15), ('directory', 15), ('total', 15), ('u;\n\n', 15), ('executed', 15), ('t1)', 15), ('AtomicLong();\n\n', 15), ('Word(Arrays.asList(new', 15), ('sa', 15), ('business', 15), ('this.onError', 15), ('automatically', 15), ('io.reactivex.flowable;\n\nimport', 15), ('ErrorMode.IMMEDIATE)', 15), ('java.util.Comparator;\nimport', 15), ('cannot', 15), ('fusionMode', 15), ('report', 15), ('named', 15), ('Povirk\n', 15), ('equals(Object', 15), ('MaybeSources\n', 15), ('array.\n', 15), ('conversion', 15), ('sending', 15), ('Function<Scheduler,', 15), ('this.inner', 15), ('java.util.Optional;\nimport', 15), ('first\n', 15), ('NONE;\n', 15), ('BlockingHelper.verifyNonBlocking();\n', 15), ('-1)', 15), ('""', 15), ('count);\n', 15), ('TestSubscriber<Integer>();\n\n', 15), ('Reduce', 14), ('SingleSource}s', 14), ('URLClassLoader(new', 14), ('Guide', 14), ('generate', 14), ('count.get());\n', 14), ('.unsubscribeOn(Schedulers.single())\n', 14), ('CollectionFeature.KNOWN_ORDER,\n', 14), ('apply(Scheduler', 14), ('observer.onSubscribe(new', 14), ('onNext,', 14), ('DateFormatRunnalbe.', 14), ('}),', 14), ('(emitting)', 14), ('(RuntimeException', 14), ('inOrder.verifyNoMoreInteractions();\n', 14), ('actual.onComplete();\n\n', 14), ('hold', 14), ('2011', 14), ('TestHelper.mockObserver();\n', 14), ('less', 14), ('(wip.decrementAndGet()', 14), ('err', 14), ('Ordering.natural()));\n', 14), ('T3>', 14), ('Disposable\n', 14), ('onFinally)', 14), ('this.task', 14), ('immediately.\n', 14), ('run.dispose();\n', 14), ('BufferedReader', 14), ('java.lang.annotation.ElementType.FIELD;\nimport', 14), ('.assertFailure(CompositeException.class);\n\n', 14), ('@Deprecated\n', 14), ('Called', 14), ('Maybe.empty();\n', 14), ('Singles,', 14), ('f)\n', 14), ('consumed;\n\n', 14), ('Movie>()', 14), ('onError,\n', 14), ('trigger', 14), ('called\n', 14), ('handling', 14), ('limit;\n', 14), ('Delays', 14), ('Callable<T>>', 14), ('length', 14), ('failure");\n', 14), ('jarFile', 14), ('observer,', 14), ('Timed<Integer>(1,', 14), ('#onComplete()}', 14), ('errors)', 14), ('delays', 14), ('No', 14), ('assertSame(s,', 14), ('StringBuilder();\n', 14), ('}));\n', 14), ('(windows.decrementAndGet()', 14), ('defaultValue;\n\n', 14), ('order.\n', 14), ('METHOD,', 14), ('args\n', 14), ('sequence,', 14), ('Movie,', 14), ('subscribers.get()', 14), ('collector;\n', 14), ('(d)', 14), ('otherwise.\n', 14), ('terminating', 14), ('null))', 14), ('only\n', 14), ('e.onNext(1);\n', 14), ('buf', 14), ('works', 14), ('CompletableSource");\n', 14), ('#poll()}', 14), ('chain', 14), ('defaultValue)', 14), ('io.reactivex.observers;\n\nimport', 14), ('TestException("Second"));\n', 14), ('entries)', 14), ('collection.', 14), ('SubscriptionHelper.setOnce(this,', 14), ('tmp', 14), ('observers;\n\n', 14), ('io.reactivex.parallel;\n\nimport', 14), ('assembly', 14), ('2;\n', 14), ('this.onComplete', 14), ('Collection<V>>', 14), ('ps.onComplete();\n\n', 14), ('Since', 14), ('o1', 14), ('{};\n', 14), ('org.junit.jupiter.api.Assertions.assertEquals;\n\n/**\n', 14), ('(b)', 14), ('removed', 14), ('com.google.common.collect.ImmutableList;\nimport', 14), ('(if', 14), ('it.hasNext();\n', 14), ('present', 14), ('exception\n', 14), ('IOException());\n', 14), ('java.io.Serializable;\nimport', 14), ('obs.toFuture();\n', 14), ('subscriber,', 14), ('.flatMapSingle(new', 14), ('&#64;Override', 14), ('(sourceMode', 14), ('derived', 14), ('ParallelFlowable<R>', 14), ('verifyNoMoreInteractions(observer);\n', 14), ('before()', 14), ('this)', 14), ('Single.just(2),', 14), ('8', 14), ('(eager)', 14), ('m)', 14), ('mock(Disposable.class);\n', 14), ('.subscribe(observer);\n\n', 14), ('list)', 14), ('BiFunction<Movie,', 14), ('Path', 14), ('data)', 14), ('TestObserver<Void>();\n\n', 14), ('(checkTerminate())', 14), ('io.reactivex.FlowableSubscriber;\nimport', 14), ('needed', 14), ('ms;\n', 14), ('bad', 14), ('beforeCancelSleep(to);\n\n', 14), ('ExceptionHelper.TERMINATED)', 14), ('successful', 14), ('inner.get();\n', 14), ('"rawtypes",', 14), ('context', 14), ('s.request(1);\n', 14), ('Base', 14), ('.assertEmpty();\n\n', 14), ('task,', 14), ('OTHER_STATE_CONSUMED_OR_EMPTY;\n', 14), ('<T3>', 14), ('this.limit', 14), ('name);\n', 14), ('InnerObserver', 14), ('fail', 14), ('onComplete\n', 14), ('continue', 14), ('apply(Movie', 14), ('Run', 14), ('actual.onNext(t);\n\n', 14), ('Even', 14), ('Future<String>', 14), ('called!");\n', 14), ('three', 14), ('Set<Feature<?', 14), ('Manifest', 14), ('java.lang.annotation.ElementType.METHOD;\nimport', 14), ('accumulator', 14), ('(f', 13), ('size()', 13), ('StringBuilder();\n\n', 13), ('apply(@NonNull', 13), ('behavior\n', 13), ('Singles', 13), ('appender.getLastMessage());\n', 13), ('simply', 13), ('delegate)', 13), ('.assertSubscribed()\n', 13), ('org.mockito.ArgumentMatchers.any;\nimport', 13), ('};\n//\n//', 13), ('height="305"', 13), ('.take(1)\n', 13), ('7', 13), ('object\n', 13), ('#onError(Throwable)},', 13), ('useful', 13), ('subscribeNext();\n', 13), ('e.setDisposable(d);\n\n', 13), ('disposed()', 13), ('type;\n', 13), ('task;\n\n', 13), ('Constructor\n', 13), ('w.schedule(new', 13), ('(int)elements)\n', 13), ('Observable.just("one",', 13), ('them.\n', 13), ('Document', 13), ('caller', 13), ('Maybe.error(new', 13), ('George', 13), ('list.\n', 13), ('first,', 13), ('multiset', 13), ('representation', 13), ('emit\n', 13), ('current;\n\n', 13), ('AtomicInteger(0);\n\n', 13), ('callbacks', 13), ('.concatMapSingle(new', 13), ('integers', 13), ('thread.\n', 13), ('UnicastSubject<T>', 13), ('TestHelper.race(r,', 13), ('Thread.sleep(200);\n\n', 13), ('Object();\n\n', 13), ("isn't", 13), ('this.delay', 13), ('SetTestSuiteBuilder.using(\n', 13), ('appear', 13), ('individual', 13), ('Multimap}', 13), ('java.util.concurrent.TimeUnit;\n\n/**\n', 13), ('size;\n\n', 13), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/zip.png"', 13), ('10);\n', 13), ('Throwable>()', 13), ('manifest', 13), ('capacityHint)', 13), ('lazySet(SubscriptionHelper.CANCELLED);\n', 13), ('task.dispose();\n', 13), ('using\n', 13), ('reducer', 13), ('requests"));\n', 13), ('*/\nfinal', 13), ('ParallelInvalid()\n', 13), ('other.\n', 13), ('Checks', 13), ('s.onSubscribe(parent);\n\n', 13), ('bufferSupplier)', 13), ('ObservableSource<Integer>()', 13), ('zipper;\n', 13), ('behaves', 13), ('ArrayList<Throwable>();\n\n', 13), ('suite()', 13), ('onSubscribe;\n', 13), ('u;\n', 13), ('isCancelled()', 13), ('count++;\n', 13), ('assertThat(Enums.getIfPresent(TestEnum.class,', 13), ('.append("', 13), ('to.dispose();\n\n', 13), ('2;\n\n', 13), ('article', 13), ('byte', 13), ('Completables', 13), ('CompletableObserver}', 13), ('.doOnComplete(new', 13), ('priority', 13), ('generators', 13), ('test(String', 13), ('Android.', 13), ('Publisher<B>', 13), ('io.reactivex.internal.util.BackpressureHelper;\nimport', 13), ('AtomicBoolean();\n\n', 13), ('times(1)).onNext("b");\n', 13), ('ObservableSource<B>', 13), ('task)', 13), ('Consumer<Object>()', 13), ('cancellation', 13), ('.reduce(new', 13), ('TestHelper.checkDoubleOnSubscribeMaybe(new', 13), ('delayErrors,', 13), ('pp.onNext(2);\n', 13), ('super.cancel();\n', 13), ('cancels', 13), ('BiFunction<Object,', 13), ('specification', 13), ('onSuccess(R', 13), ('set;\n\n', 13), ('domain', 13), ('MaybeSource");\n', 13), ('</pre>\n', 13), ('RxJavaPlugins.setErrorHandler(new', 13), ('AtomicReference<Subscription>\n', 13), ('io.reactivex.internal.fuseable;\n\nimport', 13), ('ByteSourceFactory', 13), ('count[0]++;\n', 13), ('maxConcurrency)', 13), ('assertEquals("two",', 13), ('publisher', 13), ('next)', 13), ('<p>For', 13), ('set\n', 13), ('MaybeObserver}', 13), ('Completable.\n', 13), ('AssertionError', 13), ('@deprecated', 13), ('four', 13), ('while\n', 13), ('take()', 13), ('MaybeObserver<T>', 13), ('System.gc();\n', 13), ('SingleSources', 13), ('child)', 13), ('fuseToFlowable()', 13), ('class.\n', 13), ('accumulator;\n', 13), ('Publisher<?>>', 13), ('collections', 13), ('Consumer', 13), ('designed', 13), ('bytes)', 13), ('Integer>>', 13), ('delayErrors));\n', 13), ('parallel', 13), ('QueueSubscription.SYNC)', 13), ('iteration', 13), ('this.queue;\n', 13), ('prevent', 13), ('",', 13), ('TestObserver<Object>();\n\n', 13), ('count.incrementAndGet();\n', 13), ('parallelism', 13), ('allowed\n', 13), ('(once)', 13), ('MaybeSource}', 13), ('disposer,', 13), ('change', 13), ('occur', 13), ('a.onNext(v);\n\n', 13), ('Observable\n', 13), ('TestStringSetGenerator()', 13), ('list;\n', 13), ('wr', 13), ('"Second");\n', 13), ('Event', 13), ('x', 13), ('<p>Because', 13), ('clazz', 13), ('all.\n', 13), ('.assertFailure(TestException.class,', 13), ('3;\n', 13), ('Queue', 13), ('adds', 13), ('exceptions\n', 13), ('({@code', 13), ('us', 13), ('is.\n', 13), ('Single.\n', 13), ('ObjectHelper.requireNonNull(mapper.apply(value),', 13), ('throwable)', 13), ('Single<?', 13), ('emitted;\n', 13), ('logging', 13), ('ts.request(1);\n\n', 13), ('PerfSubscriber', 13), ('well.</dd>\n', 13), ('references', 13), ('BooleanSubscription());\n\n', 13), ('ListenableFuture}', 13), ('Callable<T>', 13), ('Can', 13), ('fresh', 13), ('items;\n', 13), ('FIXME', 13), ('aOrAn(e,', 13), ('-1;\n', 13), ('(delayError)', 13), ('com.google.common.collect.Lists;\nimport', 13), ('size;\n', 13), ('EmptySubscription.error(e,', 13), ('atomicInteger.get());\n\n', 13), ('outer', 13), ('e,', 13), ('onComplete.\n', 12), ('EmptySubscription.error(ex,', 12), ('Optional<T>', 12), ('assertTrue(pp.hasSubscribers());\n', 12), ('subscribers.get();\n', 12), ('TestException("Inner");\n', 12), ('com.google.common.collect.testing.Helpers;\nimport', 12), ('HashSet<>();\n', 12), ('java.util.Queue;\nimport', 12), ('disposer.accept(resource);\n', 12), ('exception,', 12), ('apply(Long', 12), ('flowablePlain.subscribeWith(new', 12), ('set);\n', 12), ('run)', 12), ('observer.onSubscribe(parent);\n\n', 12), ('hasNext', 12), ('executor)', 12), ('Future', 12), ('serialized', 12), ('TestHelper.mockSubscriber();\n\n', 12), ('connects', 12), ('Observable.empty()\n', 12), ('inOrder(w);\n', 12), ('ObjectHelper.requireNonNull(unit,', 12), ('java.io.InputStream;\nimport', 12), ('NullPointerException();\n', 12), ('Charsets.UTF_8);\n', 12), ('observableDedicated.subscribeWith(new', 12), ('old', 12), ('j);\n', 12), ('Blackhole', 12), ('ps)', 12), ('FIELD,', 12), ('MergeWithObserver<T>', 12), ('Observable.fromArray(1,', 12), ('@AndroidIncompatible\n', 12), ('transformer', 12), ('false))\n', 12), ('specify.</dd>\n', 12), ('Instructs', 12), ('certain', 12), ('mock(Callable.class);\n\n', 12), ('(prefetch', 12), ('io.reactivex.internal.fuseable.SimplePlainQueue;\nimport', 12), ('bh;\n', 12), ('this.zipper', 12), ('compareAndSet(0,', 12), ('observableConvert(Blackhole', 12), ('observablePlain(Blackhole', 12), ('this.downstream;\n', 12), ('Maybe.fromCallable(new', 12), ('id;\n', 12), ('just(new', 12), ('object)', 12), ('methods\n', 12), ('port', 12), ('EMPTY', 12), ('Functions.emptyConsumer())\n', 12), ('assertFalse(tc.isDisposed());\n', 12), ('});\n//\n//', 12), ('NullPointerException("One', 12), ('t);\n\n', 12), ('Callable<C>', 12), ('current;\n', 12), ('CONSTRUCTOR,', 12), ('to)', 12), ('Long.MAX_VALUE))', 12), ('TestHelper.compositeList(list.get(0));\n', 12), ('function.\n', 12), ('ts.assertNoValues();\n\n', 12), ('functions', 12), ('customer', 12), ('Concatenate', 12), ('Pattern', 12), ('innerComplete()', 12), ('flowableConvert(Blackhole', 12), ('open;\n', 12), ('NoSuchElementException();\n', 12), ('@ParameterizedTest\n', 12), ('io.reactivex.exceptions.MissingBackpressureException;\nimport', 12), ('flowableDedicated;\n\n', 12), ('computation', 12), ('timeout\n', 12), ('INNER_DISPOSED)', 12), ('Signifies', 12), ('observablePlain', 12), ('org.junit.Assert.assertTrue;\n\nimport', 12), ('seventh', 12), ('onSuccess,', 12), ('applies', 12), ('.distinct()\n', 12), ('numberOfSubscribeCalls', 12), ('assertFalse(ms.hasObservers());\n', 12), ('observableDedicated', 12), ('io.reactivex.observable;\n\nimport', 12), ('.assertResult(0L,', 12), ('forbids', 12), ('CompositeException.class);\n', 12), ('NoSuchElementException.class)\n', 12), ('fallback)', 12), ('.assertNotComplete()\n', 12), ('insertionOrder)', 12), ('Future}\n', 12), ('assertFalse(ps.hasObservers());\n', 12), ('Write', 12), ('MediumTest', 12), ('SelectionKey', 12), ('w.onComplete();\n', 12), ('message\n', 12), ('maxConcurrency', 12), ('FreshValueGenerator', 12), ('bufferSupplier;\n\n', 12), ('AndroidIncompatible', 12), ('WindowBoundaryMainObserver<T,', 12), ('WindowBoundaryMainSubscriber<T,', 12), ('generators.', 12), ('(getAndSet(0)', 12), ('LargeTest.\n', 12), ('times(1)).onNext(new', 12), ('again', 12), ('given\n', 12), ('<T4>', 12), ('Flowable.fromArray(sourceArray);\n\n', 12), ('Emitter<T>,', 12), ('T7,', 12), ('com.google.common.collect.testing.features.CollectionFeature;\nimport', 12), ('known', 12), ('org.junit.Assert.assertEquals;\nimport', 12), ('methods.\n', 12), ('2.0.1', 12), ('downstream,\n', 12), ('Google-internal', 12), ('start();\n', 12), ('instances\n', 12), ('However,', 12), ('AtomicLong\n', 12), ('.test()', 12), ('Provides', 12), ('such\n', 12), ('items.\n', 12), ('Observable.fromArray(sourceArray);\n\n', 12), ('io.reactivex.subjects.*;\n\npublic', 12), ('java.lang.annotation.ElementType.CONSTRUCTOR;\nimport', 12), ('string)', 12), ('it.next();\n', 12), ('Observable.empty();\n', 12), ('Callable)', 12), ('queue.offer(t);\n', 12), ('drainLoop()', 12), ('com.google.common.collect.testing.features.CollectionSize;\nimport', 12), ('ParallelFailureHandling.ERROR)\n', 12), ('collection;\n', 12), ('object.', 12), ('DisposableHelper.dispose(upstream);\n', 12), ('Jared', 12), ('Observable<Integer>>()', 12), ('Publisher<Integer>>()', 12), ('NoSuchElementException());\n', 12), ('TYPE})\n@GwtCompatible\n@interface', 12), ('added', 12), ('r);\n', 12), ('flowablePlain(Blackhole', 12), ('Maybe.<Integer>error(new', 12), ('future)', 12), ('(error)', 12), ('Helpers.mapEntry(k0(),', 12), ('Observable<Movie>', 12), ('(getAndSet(DisposableHelper.DISPOSED)', 12), ('sa,', 12), ('observablePlain.subscribeWith(new', 12), ('default:\n', 12), ('ClassLoader', 12), ('observablePlain;\n\n', 12), ('flowablePlain;\n\n', 12), ('Maybe.create(new', 12), ('current.dispose();\n', 12), ('hash', 12), ('initialization', 12), ('nothing', 12), ('our\n', 12), ('observableDedicated(Blackhole', 12), ('io.reactivex.observers.*;\nimport', 12), ('flowableDedicated', 12), ('.collect(callableListCreator(),', 12), ('form', 12), ('QueueDisposable<T>', 12), ('eager)', 12), ('scheduler\n', 12), ('T4>', 12), ('Flowable<Object>', 12), ('Object[]{new', 12), ('io.reactivex.schedulers;\n\nimport', 12), ('Result', 12), ('flowableDedicated(Blackhole', 12), ('"Forced', 12), ('signalled', 12), ('"next', 12), ('onComplete)', 12), ('schedule(@NonNull', 12), ('numberOfSubscribeCalls.get());\n', 12), ('*/\n@Retention(CLASS)\n@Target({ANNOTATION_TYPE,', 12), ('sa;\n', 12), ('Unlike', 12), ('Function<String,', 12), ('assertThat(ClassPath.Scanner.getClassPathFromManifest(jarFile,', 12), ('"c");\n', 12), ('CrashDummy(false,', 12), ('flowableDedicated.subscribeWith(new', 12), ('(atomicInteger.decrementAndGet()', 12), ('node', 12), ('collector)', 12), ('provide', 12), ('flowablePlain', 12), ('Levy\n', 12), ('Flowable.just(v);\n', 12), ('dependent', 12), ('produced;\n', 12), ('set.\n', 12), ('j++)', 12), ('observableDedicated;\n\n', 12), ('BufferBoundarySubscriber<T,', 12), ('numberOfSubscribeCalls.incrementAndGet();\n\n', 12), ('com.google.common.base.Preconditions.checkNotNull;\nimport', 12), ('TestSubscriber.create();\n', 12), ('Executors.newSingleThreadExecutor();\n', 12), ('Thread.currentThread());\n', 12), ('forward', 12), ('BufferBoundaryObserver<T,', 12), ('Single}.\n', 12), ('java.lang.annotation.ElementType.TYPE;\nimport', 12), ('.assertErrorMessage("error")\n', 12), ('V>\n', 12), ('van', 12), ('defaultValue,', 12), ('store', 12), ('2.1\n', 12), ('.append(baseTypeName)\n', 12), ('this.capacityHint', 12), ('observers.get();\n', 12), ('Notification<T>', 12), ('fallback;\n', 12), ('sourcesIterable)', 12), ('RuntimeException(e);\n', 12), ('innerError()', 12), ('io.reactivex.Maybe;\nimport', 12), ('here', 12), ('respected', 12), ('wraps', 12), ('Publisher.\n', 12), ('extending', 12), ('Exceptions.throwIfFatal(exc);\n', 12), ('getAndSet(DisposableHelper.DISPOSED);\n', 12), ('onAfterTerminate.run();\n', 12), ('maxConcurrency;\n\n', 12), ('java.lang.annotation.RetentionPolicy.CLASS;\n\nimport', 12), ('v0()),', 12), ('timeout(long', 12), ('Cancellation', 12), ('2.1.11', 12), ('tc.onSubscribe(d);\n\n', 12), ('*/\n\n/**\n', 12), ('java.lang.annotation.ElementType.ANNOTATION_TYPE;\nimport', 12), ('TimeoutSupport', 12), ('ObservableSource");\n', 12), ('resource\n', 12), ('synchronous', 12), ('student', 12), ('Wait', 11), ('appropriate', 11), ('pattern.', 11), ('parent.innerComplete();\n', 11), ('work.\n', 11), ('SingleSubject}', 11), ('AtomicReference', 11), ('implement', 11), ('item;\n', 11), ('observableConvert', 11), ('receiver', 11), ('generator;\n', 11), ('Set}', 11), ('onComplete,\n', 11), ('.flatMap(new', 11), ('(wip.getAndIncrement()', 11), ('io.reactivex.internal.fuseable.FuseToFlowable;\nimport', 11), ('take', 11), ('Set<E>', 11), ('assertable\n//', 11), ('MaybeOnSubscribe<Object>()', 11), ('subscribing', 11), ('CharSourceFactory', 11), ('least', 11), ('qd', 11), ('set.add(d);\n', 11), ('(other', 11), ('Driessche\n', 11), ('(errors.get()', 11), ('len);\n', 11), ('Class', 11), ('java.util.function.Function;\nimport', 11), ('Optional.empty();\n', 11), ('ObserverFusion.newTest(QueueFuseable.ANY);\n\n', 11), ('flowableConvert;\n\n', 11), ('Maybe.\n', 11), ('actual.onNext(v);\n', 11), ('ds.onComplete();\n\n', 11), ('CompletableOnSubscribe()', 11), ('(type', 11), ('@Param', 11), ('.assertEmpty();\n', 11), ('key-value', 11), ('Some', 11), ('Comparator<Integer>()', 11), ('resourceSupplier,\n', 11), ('actual.onError(errors.terminate());\n', 11), ('right', 11), ('unit)\n', 11), ('source);\n', 11), ('subscribe(CompletableEmitter', 11), ('Observer}', 11), ('TODO(cpovirk):', 11), ('notified', 11), ('written', 11), ('reactor', 11), ('Get', 11), ('Flowable<Movie>', 11), ('zipper;\n\n', 11), ('href=\n', 11), ('MpscLinkedQueue<Object>', 11), ('onFinally;\n', 11), ('QueueSubscription)', 11), ('Thomas', 11), ('normally.\n', 11), ('TestStringListGenerator()', 11), ('<pre>\n', 11), ('sequence.\n', 11), ('them\n', 11), ('so.onSubscribe(cd);\n\n', 11), ('onFinally;\n\n', 11), ('Arrays.fill(array,', 11), ('Completable.fromAction(new', 11), ('member', 11), ('sourceMode', 11), ('full?!"));\n', 11), ('this.skip', 11), ('usually', 11), ('Scheduler,', 11), ('Flowable.empty()\n', 11), ('append(ILoggingEvent', 11), ('resource.\n', 11), ('ParallelFailureHandling', 11), ('((mode', 11), ('Predicate<String>()', 11), ('this.onFinally', 11), ('FutureTask<Void>', 11), ('(int):', 11), ('having', 11), ('TestHelper.mockSubscriber();\n', 11), ('flowableConvert', 11), ('assertEquals(6,', 11), ('io.reactivex.Single;\nimport', 11), ('checks', 11), ('downstream\n', 11), ('ts.assertValues(1,', 11), ('this.observers', 11), ('a.onError(e);\n', 11), ('MaybeObserver#onError', 11), ('TestObserver<Long>', 11), ('suite;\n', 11), ('cancelling', 11), ('around', 11), ('java.io.ByteArrayOutputStream;\nimport', 11), ('ch.qos.logback.classic.spi.ILoggingEvent;\nimport', 11), ('len)', 11), ('end;\n', 11), ('emit();\n', 11), ('emitted,', 11), ('tasks,', 11), ('9', 11), ('"Inner");\n', 11), ('active;\n\n', 11), ('Adds', 11), ('AsyncSubject}', 11), ('onAfterTerminate)', 11), ('Colin', 11), ('times(1)).onNext("one");\n', 11), ('IllegalStateException', 11), ('qs', 11), ('future\n', 11), ('npe', 11), ('it;\n\n', 11), ('java.io.ByteArrayInputStream;\nimport', 11), ('boundary', 11), ('setResource(Disposable', 11), ('Callable<Scheduler>', 11), ('nulls', 11), ('part', 11), ('BiConsumer<Integer,', 11), ('java.util.concurrent.CountDownLatch;\n\nimport', 11), ('Builder<K,', 11), ('((Logger)', 11), ('@NullableDecl', 11), ('(u', 11), ('Thread.sleep(1);\n', 11), ('observer;\n\n', 11), ('array)', 11), ('Predicate<Throwable>()', 11), ('ClassLoader\n', 11), ('discussion,', 11), ('createWorker()', 11), ('true}', 11), ('Flowable.fromArray(1,', 11), ('field,', 11), ('observableConvert.subscribeWith(new', 11), ('TestSubscriber<Long>', 11), ('delete', 11), ('io.reactivex.internal.queue.MpscLinkedQueue;\nimport', 11), ('apply(Flowable', 11), ('Construct', 11), ('T>...', 11), ('transient', 11), ('distinct', 11), ('e.getMessage());\n', 11), ('*/\n@GwtIncompatible\npublic', 11), ('set.add(run);\n\n', 11), ('(CancellationException', 11), ('Subscriber<Integer>', 11), ('AppenderBase<ILoggingEvent>', 11), ('TestHelper.checkDoubleOnSubscribeObservable(new', 11), ('assertSame(ex,', 11), ('openStream()', 11), ('subscribe}', 11), ('type.', 11), ('lifecycle', 11), ('f;\n', 11), ('flowableConvert.subscribeWith(new', 11), ('t;\n//', 11), ('collect', 11), ('Publisher");\n', 11), ('cancellation\n', 11), ('InnerObserver<?,', 11), ('produced++;\n', 11), ('users', 11), ('err;\n', 11), ('exec.shutdownNow();\n', 11), ('EMPTY;\n', 11), ('block', 11), ('to.assertNotComplete();\n', 11), ('expect', 11), ('Maybe<Integer>()', 11), ('add\n', 11), ('to.assertResult(1,', 11), ('able', 11), ('BufferedReader(new', 11), ('<dd>This', 11), ('close()', 11), ('are\n', 11), ('mapped', 11), ('length)', 11), ('manner', 11), ('pp0', 11), ('worker;\n', 11), ('Optional}', 11), ('org.junit.Test;\n\npublic', 11), ('.collect(new', 11), ('B>\n', 11), ('NavigableMap<K,', 11), ('subscribers;\n\n', 11), ('3;', 11), ('We', 11), ('Flowable.just(1).delay(10,', 11), ('Single.zip(Single.just(1),', 11), ('holder', 11), ('invoked', 11), ('TestObserver<Integer>()', 11), ('TODO', 11), ('fail("expects', 11), ('(errors.addThrowable(ex))', 11), ('scheduler.advanceTimeTo(2,', 11), ('List<ILoggingEvent>', 11), ('object,', 11), ('io.reactivex.internal.queue.SpscArrayQueue;\nimport', 11), ('flag', 11), ('actual));\n', 11), ('executor);\n', 11), ('this.collector', 11), ('com.google.common.base.AndroidIncompatible', 11), ('SubscriptionHelper.cancel(upstream);\n', 11), ('eventObject)', 11), ('onError)', 11), ('U>\n', 11), ('thread\n', 11), ('FreshValueGenerator();\n', 11), ('design', 11), ('InnerSubscriber<?,', 11), ('com.google.common.collect.ImmutableSet;\nimport', 11), ('fashion,', 11), ('to.assertNoErrors();\n', 11), ('task\n', 11), ('6', 11), ('operation.\n', 11), ('Map<Object,', 11), ('"two",', 11), ('ch.qos.logback.classic.Logger;\nimport', 11), ('January', 11), ('ch.qos.logback.core.AppenderBase;\nimport', 11), ('onSubscribe)', 11), ('den', 11), ('junit.framework.TestSuite;\n\n/**\n', 11), ('timer', 11), ('compare(Integer', 11), ('annotation}.\n', 11), ('inner.cancel();\n', 11), ('transformation.\n', 11), ('Arrays.asList(1,', 11), ('1000,', 11), ('race', 11), ('pp2.onComplete();\n\n', 11), ('ListTestSuiteBuilder.using(\n', 11), ('PublishSubject}', 11), ('MaybeSources.\n', 11), ('InstantPeriodicTask', 11), ('observableConvert;\n\n', 11), ('...\n', 11), ('combine', 11), ('d,', 11), ('IllegalArgumentException.class)\n', 11), ('m.javadoc.indexOf("', 11), ('CompletableSource}s', 11), ('log.add(eventObject);\n', 11), ('Signal', 11), ('connection.\n', 11), ('subscribe(MaybeEmitter<Object>', 11), ('Thread.currentThread().interrupt();\n\n', 11), ('(source', 11), ('stream\n', 11), ('runner', 11), ('3L);\n\n', 10), ('List<Object[]>', 10), ('ThreadLocal', 10), ('capacityHint;\n\n', 10), ('failed,', 10), ('succeeded,', 10), ('java.nio.file.Path}', 10), ('TimeoutSelectorSupport', 10), ('Exception;\n}\n', 10), ('items.add(new', 10), ('AtomicInteger(1);\n', 10), ('subscribes.\n', 10), ('capacity', 10), ('observable;\n\n', 10), ('BiFunction<S,', 10), ('onComplete,', 10), ('to.assertResult(1);\n', 10), ('java.util.Collection}', 10), ('parent.otherComplete();\n', 10), ('.doOnError(new', 10), ('column,', 10), ('e)\n', 10), ('2.1.7', 10), ('0),', 10), ('assertTrue(e', 10), ('ParallelFailureHandling.values())', 10), ('TestHelper.assertUndeliverable(list,', 10), ('ex));\n', 10), ('Single<Integer>>()', 10), ('2010', 10), ('TestResourceMaybeObserver<Integer>', 10), ('Flowable<R>', 10), ('verify(sideEffectObserver,', 10), ('disposed;\n', 10), ('IndexOutOfBoundsException.class)\n', 10), ('r;\n', 10), ('n;\n', 10), ('future.\n', 10), ('array\n', 10), ('j,', 10), ('super(new', 10), ('1000;', 10), ('21.0\n', 10), ('onNext,\n', 10), ('TestException.class)\n', 10), ('assertFalse(errors.isEmpty());\n', 10), ('Disposable.\n', 10), ('@MethodSource("dataProvider")\n', 10), ('ensure', 10), ('(error.addThrowable(ex))', 10), ('MaybeSource,', 10), ('scheduler);\n', 10), ('elements\n', 10), ('statement', 10), ('onTimeout(long', 10), ('time\n', 10), ('o2)', 10), ('(final', 10), ('this.sources;\n', 10), ('disposed.\n', 10), ('onSubscribe(@NonNull', 10), ('value);\n\n', 10), ('Publisher<T>', 10), ('false;\n\n', 10), ('Implementation', 10), ('"First");\n\n', 10), ('ObjectHelper.requireNonNull(source5,', 10), ('List<Entry<K,', 10), ('onComplete.run();\n', 10), ('errors\n', 10), ('onComplete.', 10), ('SingleSource");\n', 10), ('Iterable<Integer>>()', 10), ('horrorMovies', 10), ('delegate;\n', 10), ('getAndSet(this);\n', 10), ('(a[i]', 10), ('Map<Long,', 10), ('apply(Completable', 10), ('prefetch);\n', 10), ('<p>All', 10), ('inOrder(observer);\n\n', 10), ('ArrayList<Object>();\n\n', 10), ('java.util.concurrent.atomic.AtomicInteger;\nimport', 10), ('qs;\n', 10), ('Lock', 10), ('b[n]', 10), ('dematerialize', 10), ('which\n', 10), ('subsequent', 10), ('java.util.Arrays;\n\nimport', 10), ('SingleObserver}', 10), ('file.\n', 10), ('verify(secondObserver,', 10), ('pending', 10), ('run.run();\n', 10), ('checkNotNull(file);\n', 10), ('current\n', 10), ('combinations', 10), ('Optional', 10), ('subscription.\n', 10), ('verify(firstObserver,', 10), ('this.eager', 10), ('(subscribers.compareAndSet(a,', 10), ('dragon', 10), ('got', 10), ('apply', 10), ('this.onNext', 10), ('cases', 10), ('Filters', 10), ('emitter;', 10), ('Flowable\\r\\n', 10), ('this.delegate', 10), ('(ParallelFailureHandling', 10), ('relays', 10), ('onSubscribe}', 10), ('pool', 10), ('other}', 10), ('STATE_INACTIVE;\n', 10), ('}).subscribe(new', 10), ('submitted', 10), ('wrap', 10), ('Function<Maybe<Object>,', 10), ('WeakReference<Disposable>', 10), ('map\n', 10), ('Letter(\n', 10), ('ObjectHelper.verifyPositive(prefetch,', 10), ('.toObservable()\n', 10), ('very', 10), ('zero', 10), ('parent.innerError(this,', 10), ('2.1.10', 10), ('onNext(B', 10), ('cd.toSafe();\n', 10), ('connection\n', 10), ('runtime', 10), ('soon', 10), ('java.util.NoSuchElementException;\nimport', 10), ('dummy', 10), ('once\n', 10), ('.append("Maybe', 10), ('starting', 10), ('treated', 10), ('0;\n}\n', 10), ('create(Object...', 10), ('value()', 10), ('o1,', 10), ('callers', 10), ('handler)', 10), ('command)', 10), ('NOPMD\n', 10), ('s.onSuccess(1);\n', 10), ('primitive', 10), ('a.onNext(v);\n', 10), ('equals(@NullableDecl', 10), ('Schedulers.computation());\n', 10), ('RxJavaPlugins', 10), ('java.io.Reader;\nimport', 10), ('successfully', 10), ('onError()', 10), ('WeakReference<Disposable>(d);\n\n', 10), ('Single.create(new', 10), ('IllegalArgumentException();\n', 10), ('onNext(U', 10), ('internal', 10), ('io.reactivex.disposables.Disposable;\n\n/**\n', 10), ('source.blockingLatest();\n\n', 10), ('executor.submit(callableDf);\n', 10), ('(which', 10), ('Iterator<Integer>', 10), ('(error', 10), ('Optional<String>', 10), ('thus', 10), ('messages', 10), ('Throwables', 10), ('further', 10), ('Convenience', 10), ('components', 10), ('observer.onSubscribe(wr.get());\n', 10), ('onNext(String', 10), ('sources.\n', 10), ('makes', 10), ('stream);\n', 10), ('10.0\n', 10), ('this.fallback', 10), ('.doFinally(this)\n', 10), ('onAfterTerminate;\n', 10), ('future.get();\n', 10), ('dataProvider()', 10), ('observer.onError(ex);\n', 10), ('Subscriber,', 10), ('destination', 10), ('combiner;\n', 10), ('submit(Runnable', 10), ('5),', 10), ('(such', 10), ('separate', 10), ('Observable.wrap(new', 10), ('%s",', 10), ('Assert.assertEquals(false,', 10), ('use.</dd>\n', 10), ('assertNull(wr.get());\n', 10), ('apply(Maybe<Object>', 10), ('SafeSubscriber<Integer>(ts);\n\n', 10), ('list.add(t);\n', 10), ('Single}\n', 10), ('source5\n', 10), ('tryAdvance(Consumer<?', 10), ('")\n', 10), ('10000;', 10), ('calls);\n', 10), ('r.get());\n', 10), ('Completable.create(new', 10), ('ObjectHelper.requireNonNull(next,', 10), ('Iterable<E>', 10), ('cs.onError(new', 10), ('<K', 10), ('signalling', 10), ('subscribe(observer);\n', 10), ('ArrayList<>();\n\n', 10), ('.doAfterSuccess(afterSuccess)\n', 10), ('terminated\n', 10), ('Executor()', 10), ('eager;\n\n', 10), ('loader', 10), ('ObjectHelper.requireNonNull(mapper.apply(v),', 10), ('addition,', 10), ('c,', 10), ('(delayErrors)', 10), ('<T5>', 10), ('routed', 10), ('FlatMapMaybeObserver<T,', 10), ('%s', 10), ('(inner.compareAndSet(sender,', 10), ('java.util.SortedMap;\nimport', 10), ('reader,', 10), ('format', 10), ('lead', 10), ('(!eager)', 10), ('.concatMapDelayError(new', 10), ('eager;\n', 10), ('TestException("outer"));\n', 10), ('IOException.class);\n', 10), ('SubscriptionHelper.cancel(s);\n', 10), ('s.cancel();\n\n', 10), ('working', 10), ('this.time', 10), ('include', 10), ('1024)\n', 10), ('io.reactivex.functions.Function;\n\n@Test\npublic', 10), ('completable', 10), ('NONE)', 10), ('Publisher<Integer>()', 10), ('isDone()', 10), ('(Method', 10), ('T5>', 10), ('task;\n', 10), ('well', 10), ('CollectionFeature.FAILS_FAST_ON_CONCURRENT_MODIFICATION,\n', 10), ('.append("Completable', 10), ('modified', 10), ('integer', 10), ('accept(Subscription', 10), ('thread-safe', 10), ('(Completable.java:").append(m.javadocLine', 10), ('factory,', 10), ('"onSubscribe', 10), ('callable)', 10), ('.subscribeWith(new', 10), ('io.reactivex.SingleObserver;\nimport', 10), ('delayError,', 10), ('subscribeNext()', 10), ('upstream);\n}\n', 10), ('item;\n\n', 10), ('once;\n', 10), ('Future<Result>', 10), ('IOException();\n', 10), ('Observable.fromCallable(new', 10), ('load', 10), ('TestHelper.checkDoubleOnSubscribeFlowable(new', 10), ('called.\n', 10), ('getOrCreateQueue();\n', 10), ('SingleSource\n', 10), ('e1)', 10), ('no\n', 10), ('Schedulers.computation(),', 10), ('"source5', 10), ('(expected', 10), ('Flowable.generate(new', 10), ('assertTrue(e.isDisposed());\n', 10), ('(observers.compareAndSet(a,', 10), ('takeUntil}', 10), ('3);\n\n', 10), ('(!(ex.getCause()', 10), ('rmo', 10), ('(object', 10), ('represents', 10), ('iterator.hasNext();\n', 10), ('initialDelay;\n', 10), ('seed', 10), ('Consumer<Subscription>()', 10), ('0L', 10), ('function)', 10), ('fuseable', 10), ('@Retention(RetentionPolicy.RUNTIME)\n', 10), ('(Maybe.java:").append(m.javadocLine', 10), ('writing', 10), ('notifications', 10), ('overhead', 10), ('other.subscribe(new', 10), ('(mode', 10), ('w;\n\n', 10), ('SetFeature.GENERAL_PURPOSE,\n', 10), ('lifetime', 10), ('InputStream', 10), ('errorAll(a);\n', 10), ('dispose/cancel', 10), ('DisposableHelper.dispose(other);\n', 10), ('(result', 10), ('TimeoutConsumer', 10), ('.switchMapMaybe(new', 10), ('errors.get()', 10), ('source.\n', 10), ('loop', 10), ('input)', 10), ('io.reactivex.Completable;\nimport', 10), ('executorService.shutdown();\n', 10), ('once;\n\n', 10), ('id)', 10), ('initialized', 10), ('instances.\n', 10), ('obj)', 10), ('<U>\n', 10), ('EmptyDisposable.error(new', 10), ('SwitchMapInnerObserver', 10), ('io.reactivex.internal.subscriptions;\n\nimport', 10), ('super(actual,', 10), ('QueueDisposable)', 10), ('cancelled,', 10), ('Observable.range(v,', 10), ('stream.', 10), ('use\n', 10), ('remaining;\n', 10), ('org.junit.jupiter.params.ParameterizedTest;\nimport', 9), ('Example:\n', 9), ('IO', 9), ('exec);\n\n', 9), ('Is', 9), ('equivalent:</b>', 9), ('(Single.java:").append(m.javadocLine', 9), ('note', 9), ('mapperCrash()', 9), ('getLogSize()', 9), ('href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">efficiently', 9), ('junit.framework.Test;\nimport', 9), ('@Ignore("v2', 9), ('idx;\n', 9), ('know', 9), ('(File', 9), ('parameters\n', 9), ('NullPointerException}', 9), ("'", 9), ('this.disposer', 9), ('com.google.gwt.user.client.rpc.SerializationStreamReader;\nimport', 9), ('condition', 9), ('TestHelper.checkDoubleOnSubscribeSingle(new', 9), ('s.request(prefetch);\n', 9), ('Flowable.interval(1,', 9), ('HalfSerializer.onError(actual,', 9), ('resubscribe', 9), ('limit;\n\n', 9), ('memory', 9), ('instead.', 9), ('utility', 9), ('Stream<T>', 9), ('Iterator<String>', 9), ('simple()', 9), ('onErrorResumeNext}', 9), ('io.reactivex.internal.util.EndConsumerHelper;\nimport', 9), ('(this', 9), ('Function<T,', 9), ('Callable<Boolean>()', 9), ('override', 9), ('com.google.caliper.Benchmark;\nimport', 9), ('.mergeWith(Maybe.just(100))\n', 9), ('*/\n@GwtCompatible(emulated', 9), ('dates', 9), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png"', 9), ('ms.onSuccess(1);\n\n', 9), ('constants\n', 9), ('supplier;\n', 9), ('LotteryTicket', 9), ('Default', 9), ('.doOnSubscribe(new', 9), ('field\n', 9), ('10;\n', 9), ('printed', 9), ('ObjectHelper.requireNonNull(onError,', 9), ('e.getCause();\n', 9), ('default,', 9), ('predefined', 9), ('assertTrue(cdl.await(5,', 9), ('io.reactivex.disposables;\n\nimport', 9), ('MaybeSource<Object>', 9), ('result)', 9), ('type);\n', 9), ("'rails'", 9), ('it;\n', 9), ('rethrow', 9), ('disposeBoundary();\n', 9), ('consumes', 9), ('validation', 9), ('assertTrue(""', 9), ('File("base/some.jar");\n', 9), ('types)', 9), ('true)\npublic', 9), ('errorMode)', 9), ('non-blocking', 9), ('onFinally));\n', 9), ('cs.onComplete();\n\n', 9), ('manifest))\n', 9), ('BiFunction<Long,', 9), ('}})\n', 9), ('ts.assertFailure(TestException.class);\n', 9), ('error(new', 9), ('complete()', 9), ('queue\n', 9), ('ts.request(1);\n', 9), ('Dispatcher', 9), ('INSTANCE;\n\n', 9), ('ObjectHelper.requireNonNull(source,', 9), ('delegate;\n\n', 9), ('CompletableSource}', 9), ('2))\n', 9), ('adding', 9), ('parameters.add(new', 9), ('necessary', 9), ('ex2', 9), ('proper', 9), ('"prefetch");\n', 9), ('start++;\n', 9), ('Number', 9), ('height="315"', 9), ('(inner', 9), ('TestHelper.assertError(error,', 9), ('"source', 9), ('initialSupplier,', 9), ('this.bh', 9), ("that's", 9), ('new,', 9), ('<p><b>{@link', 9), ('@BeforeExperiment\n', 9), ('completed.\n', 9), ('ConnectableFlowable\n', 9), ('(DisposableHelper.dispose(this))', 9), ('fails\n', 9), ('GroupedFlowable<K,', 9), ('this.subscribers', 9), ('field.get();\n', 9), ('*/\n@GwtCompatible(serializable', 9), ('Observable.just(1).delay(10,', 9), ('Ben', 9), ('super(1);\n', 9), ('usage', 9), ('@Ignore("Subscribers', 9), ('Timed<Integer>', 9), ('InMemoryAppender();\n', 9), ('java.util.LinkedHashMap;\nimport', 9), ('io.reactivex.internal.disposables.EmptyDisposable;\n\npublic', 9), ('key;\n', 9), ('Queue<String>', 9), ('onDispose)', 9), ('io.reactivex.*;\n\n@Test\npublic', 9), ('buffers', 9), ('onError.\n', 9), ('.append("Single', 9), ('then\n', 9), ('(getCount()', 9), ('ArrayList<String>();\n', 9), ('recommended', 9), ('com.google.caliper.BeforeExperiment;\nimport', 9), ('completion.\n', 9), ('qd;\n', 9), ('efficient', 9), ('Unit', 9), ('apply(Flowable<Integer>', 9), ('concurrently.\n', 9), ('possibly', 9), ('onError(@NonNull', 9), ('remove', 9), ('Observable.<Integer>error(new', 9), ('respective', 9), ('.subscribe();\n', 9), ('Maybe<Object>', 9), ('Runnable,', 9), ('sources."));\n', 9), ("downstream's", 9), ('"onNext', 9), ('TestException("First"));\n', 9), ('entries);\n', 9), ('TestHelper.compositeList(to.errors().get(0));\n\n', 9), ('threadPool.submit(new', 9), ('url', 9), ('related', 9), ('ds.setupDownstream();\n\n', 9), ('(int)elements', 9), ('start;\n\n', 9), ('it,', 9), ('flowable', 9), ('concurrently', 9), ('response\n', 9), ('Observer<String>', 9), ('TestResourceCompletableObserver', 9), ('sourcesIterable;\n', 9), ('g', 9), ('startOnce()', 9), ('(!empty)', 9), ('power', 9), ('errorHandler', 9), ("input's", 9), ('list.size());\n\n', 9), ('com.google.common.testing;\n\nimport', 9), ('Subscribe', 9), ('100;', 9), ('this.accumulator', 9), ("rail's", 9), ('io.reactivex.parallel.ParallelFlowable;\nimport', 9), ('executorService', 9), ('this.name', 9), ('Functions.alwaysTrue())\n', 9), ('null"),', 9), ('com.google.gwt.user.client.rpc.SerializationException;\nimport', 9), ('multimap.\n', 9), ('java.util.SortedSet;\nimport', 9), ('(fusionMode', 9), ('backing', 9), ('assertFalse(promise.isCancelled());\n', 9), ('amount.\n', 9), ('Single<Integer>()', 9), ('s.get();\n', 9), ('ImmutableList<String>', 9), ('q.poll()', 9), ('pp1.onError(ex);\n', 9), ('ConnectableObservable\n', 9), ('attempt', 9), ('this.errors;\n', 9), ('Function<Flowable<Integer>,', 9), ('this.worker', 9), ('.toFlowable()\n', 9), ('RxJavaPlugins.setComputationSchedulerHandler(new', 9), ('deferred', 9), ('java.util.ArrayDeque;\nimport', 9), ('database', 9), ('ts.request(2);\n', 9), ('fail(ex.toString()', 9), ('c.lazySet(null);\n', 9), ('buffer;\n\n', 9), ('cel', 9), ('.assertNotComplete();\n\n', 9), ('is,', 9), ('String>>', 9), ('Producer(q,', 9), ('Step', 9), ('CompletableObserver()', 9), ('pair', 9), ('resource)', 9), ('ws)', 9), ('FlowableSubscriber<Object>', 9), ('NullPointerException("onNext', 9), ('Observable.just("a",', 9), ('fuseToObservable()', 9), ('Reads', 9), ('skip,', 9), ('(set.isDisposed())', 9), ('work\n', 9), ('get(int', 9), ('NullPointerException("onError', 9), ('@BackpressureSupport(BackpressureKind.UNBOUNDED_IN)\n', 9), ('iterable)', 9), ('another.\n', 9), ('initialSupplier;\n', 9), ('times;\n\n', 9), ('started', 9), ('window;\n\n', 9), ('upstream.\n', 9), ('q.offer(t);\n', 9), ('ObservableSource<Object>()', 9), ('CompletableOperator', 9), ('absent()', 9), ('(s.contains("', 9), ('going', 9), ('delayTime,', 9), ('accumulated', 9), ('Any', 9), ('supporting', 9), ('assertEquals(Disposables.disposed(),', 9), ('sources.length)', 9), ('invocation', 9), ('propagated', 9), ('defined', 9), ('SingleOnSubscribe<Object>()', 9), ('to.assertOf(ObserverFusion.<Integer>assertFuseable())\n', 9), ('@Param({"1",', 9), ('Chan\n', 9), ('StandardCharsets}', 9), ('ClassNotFoundException', 9), ('Publisher<Object>', 9), ('SingleSource,', 9), ('io.reactivex.Scheduler;\nimport', 9), ('2017', 9), ('v2', 9), ('assertTrue(promise.isDone());\n', 9), ('N', 9), ('ms.observerCount());\n\n', 9), ('collectionSupplier', 9), ('"Outer");\n', 9), ('subscribe(SingleEmitter<Object>', 9), ('io.reactivex.functions.Cancellable;\nimport', 9), ('DefaultSubscriber<Integer>()', 9), ('ExceptionHelper.addThrowable(error,', 9), ('mapping', 9), ('SortedMap<K,', 9), ('10;', 9), ('size,', 9), ('instantiate(SerializationStreamReader', 9), ('GroupedUnicast<K,', 9), ('possiblyIgnoredError', 9), ('onNext(Long', 9), ('otherError(Throwable', 9), ('requested.get())', 9), ('Override', 9), ('called,', 9), ('resourceSupplier;\n', 9), ('Lists.newArrayList();\n', 9), ('fromCallableObservable', 9), ('heavyweight', 9), ('ignore', 9), ('to.assertNoErrors().assertComplete();\n', 9), ('utilityClass()', 9), ('q);\n', 9), ('"B",', 9), ('}\n\n//', 9), ('calls\n', 9), ('size)', 9), ('MissingBackpressureException("Could', 9), ('NullPointerException.class,', 9), ('sender)', 9), ('stream.\n', 9), ('usage:\n', 9), ('idx);\n\n', 9), ('Thread.sleep(100);\n', 9), ('LinkedQueueNode<T>', 9), ('MaybeSource<Object>>()', 9), ('disposed\n', 9), ('s.onNext(2);\n', 9), ('writer,', 9), ('AtomicInteger(3);\n', 9), ('enumeration', 9), ('evaluates', 9), ('implementation.\n', 9), ('terminate.\n', 9), ('java.io.ObjectInputStream;\nimport', 9), ('.mergeWith(Single.just(100))\n', 9), ('prefetch));\n', 9), ('emitted;\n\n', 9), ('decoratedRun', 9), ('Observable.interval(1,', 9), ('respects', 9), ('e2', 9), ('{}\n}\n', 9), ('its\n', 9), ('(upstream', 9), ('com.google.gwt.user.client.rpc.SerializationStreamWriter;\nimport', 9), ('@Beta\n', 9), ('}\n}', 9), ('onSubscribe.\n', 9), ('this.onSubscribe', 9), ('fallback;\n\n', 9), ('stream;', 9), ('ordered', 9), ('time.\n', 9), ('(K', 9), ('time.', 9), ('Yu\n', 9), ('io.reactivex.ObservableSource;\nimport', 9), ('this.onAfterTerminate', 9), ('s.onError(ex);\n', 9), ('java.util.NoSuchElementException;\n\nimport', 9), ('SingleSubject', 9), ('w)', 9), ('observers', 9), ('prepare', 9), ('CompletableSource[]', 9), ('Expected', 9), ('count;', 9), ('Singles.\n', 9), ('invoked\n', 9), ('end)', 9), ('better', 9), ('non-overlapping', 9), ('interrupted\n', 9), ('TestSubscriber', 9), ('(resource', 9), ('helpful', 9), ('handles', 9), ('request(1);\n', 9), ('handled', 9), ('instance);\n', 9), ('properly.\n', 9), ('log.size();\n', 9), ('org.slf4j.LoggerFactory;\n\n/**\n', 9), ('Hayward', 9), ('disposeAfter();\n', 9), ('consider', 9), ('null));\n\n', 9), ('sequential', 9), ('Schedulers}', 9), ('list.add(100);\n', 9), ('backpressure.</dd>\n', 9), ('Subscription>', 9), ('delay\n', 9), ('signature', 9), ('2.0.8', 9), ('goNextSource', 9), ('io.reactivex.plugins.RxJavaPlugins#onError(Throwable)}.\n', 9), ('Random', 9), ('defines', 9), ('apply(Observable<Integer>', 8), ('(or', 8), ('Timed<T>>', 8), ('npe.getMessage());\n', 8), ('snapshot', 8), ('<p>When', 8), ('.doOnDispose(new', 8), ('super.onStart();\n\n', 8), ('Runs', 8), ('assertFalse(pp.hasSubscribers());\n\n', 8), ('");\n', 8), ('org.junit.jupiter.api.Assertions.assertTrue;\n\n/**\n', 8), ('status', 8), ('Arrays.fill(lists,', 8), ('parent.otherError(e);\n', 8), ('follow', 8), ('*/\n\npublic', 8), ('events.', 8), ('.createTestSuite());\n', 8), ('Prefer', 8), ('-7098360935104053232L;\n\n', 8), ('put', 8), ('"onComplete', 8), ('produce', 8), ('Observable<R>', 8), ('scheduler.advanceTimeTo(4,', 8), ('times(1)).onNext("c");\n', 8), ('.flatMapCompletable(new', 8), ('Open>', 8), ('source.onNext(1);\n', 8), ('charset)', 8), ('this.collectionSupplier', 8), ('instance)', 8), ('{}));\n', 8), ('bs1', 8), ('release', 8), ('Map<Integer,', 8), ('SwitchMapMaybeObserver<R>', 8), ('Exceptions.throwIfFatal(t);\n', 8), ('to.\n', 8), ('pp.mergeWith(cs).subscribeWith(new', 8), ('ObjectHelper.requireNonNull(onComplete,', 8), ('delayError));\n', 8), ('this.combiner', 8), ('decide', 8), ('s.length()', 8), ('trampolining.\n', 8), ('features)', 8), ('running.\n', 8), ('href="http://reactivex.io/documentation/operators/catch.html">ReactiveX', 8), ('com.google.common.collect.testing.features;\n\nimport', 8), ('page', 8), ('indication', 8), ('.timeout(1,', 8), ('cs.onSuccess(1);\n', 8), ('lazySet(list.size());\n', 8), ('resubscription', 8), ('assertTrue(it.hasNext());\n', 8), ('skip', 8), ('TestSubscriber<Integer>();\n', 8), ('}).apply(new', 8), ('q))', 8), ('source7,', 8), ('true)\n', 8), ('Decker\n', 8), ('infinite', 8), ('InstantPeriodicTask(new', 8), ('<T6>', 8), ('rco', 8), ('encountered.\n', 8), ('b);\n', 8), ('asCharSource(file,', 8), ('Affects', 8), ('this.once', 8), ('ScheduledExecutorService}', 8), ('TestHelper.assertError(cel,', 8), ('pp1.onComplete();\n\n', 8), ('e2,', 8), ('*/\n@Beta\n@GwtIncompatible\npublic', 8), ('io.reactivex.subscribers.*;\n\npublic', 8), ('subscriber.\n', 8), ('Iterator', 8), ('s2', 8), ('maps', 8), ('globalMutex', 8), ('QueueTestSuiteBuilder.using(\n', 8), ('signalConsumer();\n', 8), ('ASYNC;\n', 8), ('eighth', 8), ('fluent', 8), ('ps.onNext(2);\n', 8), ('(<a', 8), ('corresponding', 8), ('List<Future<T>>', 8), ('this.period', 8), ('LongAddable', 8), ('null",', 8), ('InMemoryAppender(Class', 8), ('doubleError()', 8), ('actual.onError(t);\n\n', 8), ('c;\n\n', 8), ('D,', 8), ('TestResourceMaybeObserver<Integer>();\n\n', 8), ("actual's", 8), ('dispose(s);\n', 8), ('Arrays.asList(\n', 8), ('"source6', 8), ('ObjectHelper.requireNonNull(t,', 8), ('.runOn(Schedulers.computation())\n', 8), ('reader)\n', 8), ('reason', 8), ('errorMode,', 8), ('sources.length;\n', 8), ('ByteBuffer', 8), ('thread.', 8), ('assertNotSame(Thread.currentThread(),', 8), ('this.actual;\n', 8), ('to.awaitDone(5,', 8), ('(state', 8), ('DebounceEmitter<T>', 8), ('TestSubscriber.create();\n//\n//', 8), ('Assert.assertEquals(Long.valueOf(i),', 8), ('Future<Object>', 8), ('Functions.EMPTY_ACTION);\n', 8), ('to1.assertValues(0L,', 8), ('assertNotNull(reduceResult2);\n', 8), ('TestObserver<T>', 8), ('(true)', 8), ('Action}', 8), ('Exceptions.throwIfFatal(e1);\n', 8), ('resources.dispose();\n', 8), ('Collection<Object[]>', 8), ('q.poll();\n\n', 8), ('Concat</a>\n', 8), ('Tries', 8), ('source6\n', 8), ('Streams', 8), ('io.reactivex.functions.BiConsumer;\nimport', 8), ('interface,', 8), ('ObservableSource<Object>', 8), ('cs;\n\n', 8), ('onAfterTerminate;\n\n', 8), ('N>', 8), ('Function<Timed<Integer>,', 8), ('runnable)', 8), ('ParallelFailureHandling>()', 8), ('1\n', 8), ('}).toObservable();\n\n', 8), ('io.reactivex.subjects;\n\nimport', 8), ('0L);\n', 8), ('2.0")\n', 8), ('logger', 8), ('property', 8), ('assertTrue(RxJavaPlugins.isBug(new', 8), ('Comparable<?', 8), ('values)', 8), ('getAndSet(null);\n', 8), ('well.\n', 8), ('assertSame(ImmediateThinScheduler.INSTANCE,', 8), ('assertTrue(appender.logContains("Reader', 8), ('Catch</a>\n', 8), ('.containsExactly(new', 8), ('unlike', 8), ('TreeMap<K,', 8), ('subscription.', 8), ('undefined', 8), ('ObservableSource<B>>', 8), ('(SubscriptionHelper.validate(upstream,', 8), ('Exceptions', 8), ('java.util.NavigableMap;\nimport', 8), ('collector;\n\n', 8), ('idx;\n\n', 8), ('ds.onNext(1);\n\n', 8), ('won', 8), ('ones', 8), ('disposables;\n\n', 8), ('LongConsumer', 8), ('ts.assertNotComplete();\n', 8), ('BackpressureHelper.produced(this,', 8), ('.map(Functions.identity(),', 8), ('executorService.execute(()', 8), ('observer\n', 8), ('2013', 8), ('propagate', 8), ('v3()));\n', 8), ('a.onError(error.terminate());\n', 8), ('log.get(log.size()', 8), ('AtomicBoolean(false);\n', 8), ('parent.innerComplete(this);\n', 8), ('normally,', 8), ('getAsBoolean()', 8), ('System.out.println(e);\n\n', 8), ('.assertFailure(UnsupportedOperationException.class);\n', 8), ('Media(),', 8), ('CharSource', 8), ('@SuppressWarnings({"unchecked",', 8), ('timeoutIndicator', 8), ('items)', 8), ('io.reactivex.plugins.RxJavaPlugins#onError(Throwable)}', 8), ('s.onSubscribe(set);\n\n', 8), ('CompletableSubject}', 8), ('account', 8), ('{};\n\n', 8), ('href="http://reactivex.io/documentation/operators/subscribe.html">ReactiveX', 8), ('buffers;\n', 8), ('"."', 8), ('listeners', 8), ('AtomicReference<Subscription>();\n\n', 8), ('href="http://reactivex.io/documentation/operators/concat.html">ReactiveX', 8), ('T>>\n', 8), ('bound', 8), ('deprecated;', 8), ('initialString', 8), ('--', 8), ('dematerialize.subscribe(observer);\n\n', 8), ('collection)', 8), ('@Ignore("Observers', 8), ('as\n', 8), ('(e.length()', 8), ('IOException);\n', 8), ('Reactive', 8), ('Executors.newFixedThreadPool(2);\n', 8), ('pp.switchMapMaybeDelayError(new', 8), ('times(0)).onNext(any(Integer.class));\n', 8), ('lazy', 8), ('}\n//\n//', 8), ('non', 8), ('pp1.onError(new', 8), ('subscribe(final', 8), ('T6>', 8), ('pp.switchMapSingleDelayError(new', 8), ('actual.onSuccess(t);\n', 8), ('without\n', 8), ('LoggerFactory.getLogger(clazz)).addAppender(this);\n', 8), ('allocation', 8), ('ThreadFactory', 8), ('horrorMovies.reduce(new', 8), ('emitter)', 8), ('getLastMessage()', 8), ('index\n', 8), ('supply', 8), ('Publisher<Object>>()', 8), ('pp\n', 8), ('visited', 8), ('skip;\n\n', 8), ('unless', 8), ('Flowable.unsafeCreate(new', 8), ('potion', 8), ('Thread.currentThread();\n', 8), ('round-robin', 8), ('Thread.sleep(500);\n\n', 8), ('rso', 8), ('Function<Throwable,', 8), ('sender', 8), ('3)', 8), ('key);\n\n', 8), ('manner.\n', 8), ('ZipSubscriber<T,', 8), ('registered', 8), ('t),', 8), ("SingleObserver's", 8), ('complete();\n', 8), ('Long.MAX_VALUE;\n', 8), ('Such', 8), ('Functions.toFunction(new', 8), ('bh.consume(t);\n', 8), ('assertEquals("default",', 8), ('keySelector,', 8), ('(!m.signature.contains("Publisher")\n', 8), ('next;\n', 8), ('key\n', 8), ('retries', 8), ('MaybeObserver<Object>()', 8), ('AppendOnlyLinkedArrayList<Object>(4);\n', 8), ('b.add(t);\n', 8), ('5000)\n', 8), ('Customer', 8), ('reduceResult2', 8), ('getImpliedFeatures()', 8), ('(list', 8), ('false).test();\n\n', 8), ('scheduler).take(10);\n\n', 8), ('verify(observer).onSubscribe((Disposable)any());\n', 8), ('TestStringQueueGenerator()', 8), ('observers)', 8), ('threw', 8), ('QueueSubscription.ASYNC)', 8), ('ObservableEmitter<T>', 8), ('java.io.OutputStream;\nimport', 8), ('every', 8), ('assertNotInstantiable(new', 8), ('Example', 8), ('repeat', 8), ('comparator)', 8), ('happens.\n', 8), ('(bufs', 8), ('serialize(SerializationStreamWriter', 8), ('worker;\n\n', 8), ('source6,\n', 8), ('.assertError(e)', 8), ('skip)', 8), ('assertTrue(appender.logContains("Writer', 8), ('getExpected(byte[]', 8), ('io.reactivex.internal.fuseable.FuseToObservable;\nimport', 8), ('HalfSerializer.onComplete(actual,', 8), ('{}', 8), ('map;\n', 8), ('v.time();\n', 8), ('TimeUnit.MILLISECONDS));\n\n', 8), ('.assertOf(ObserverFusion.<Integer>assertFusionMode(QueueFuseable.SYNC))\n', 8), ('java.lang.annotation.Inherited;\nimport', 8), ('immutable', 8), ('ArrayList<Integer>();\n\n', 8), ('ts1.assertValues(0L,', 8), ('FlowableSubscriber<Object>,', 8), ('assertNotSame(ImmediateThinScheduler.INSTANCE,', 8), ('assertEquals("Scheduler', 8), ('Observable.just(v);\n', 8), ('NullPointerException");\n', 8), ('index++));\n', 8), ('Maybe<Integer>>()', 8), ('(T', 8), ('to.assertValues(expected);\n', 8), ('.doAfterTerminate(new', 8), ('Subscribe</a>\n', 8), ('u,', 8), ('throw\n', 8), ('fail("Fetching', 8), ('iterator;\n', 8), ('checkInternalOperatorNaming("Observable",', 8), ('cancelled?",', 8), ('clear();\n', 8), ('ObservableSource<Object>>()', 8), ('ParallelPeek<T>(this,\n', 8), ('Function<Observable<Integer>,', 8), ('ObjectHelper.requireNonNull(iterator.next(),', 8), ('level', 8), ('runner,', 8), ('sequence,\n', 8), ('getExpected(String', 8), ('inner;\n', 8), ('options)', 8), ('R>[]', 8), ('input,', 8), ('SQLException', 8), ('org.junit.Ignore;\n\n/**\n', 8), ('server', 8), ('exposes', 8), ('this.observer', 8), ('serve', 8), ('Long.MAX_VALUE));\n', 8), ('rs.subscribeNext();\n', 8), ('Thread#NORM_PRIORITY}</li>\n', 8), ('Set<Entry<K,', 8), ('(obj', 8), ('com.google.common.reflect;\n\nimport', 8), ('SubscriptionArbiter();\n\n', 8), ('Function<Completable,', 8), ('java.util.concurrent.Executor;\nimport', 8), ('ms;\n\n', 8), ('innerError(this,', 8), ('apply(Timed<Integer>', 8), ('timeout0(timeout,', 8), ('collection;\n\n', 8), ('.subscribe(ts);\n\n', 8), ('hasThrowable()', 8), ('Observer<Integer>()', 8), ('in.close();\n', 8), ('keySelector;\n', 8), ('.runOn(ImmediateThinScheduler.INSTANCE)\n', 8), ('2019.\n', 8), ('TestResourceObserver<Integer>', 8), ('UI', 8), ('(s.compareAndSet(a,', 8), ('ts\n', 8), ('Allows', 8), ('io.reactivex.internal.disposables.SequentialDisposable;\nimport', 8), ('late', 8), ('nextSupplier;\n', 8), ('RxJavaPlugins.reset();\n//', 8), ('Single<Object>', 8), ('Writer', 8), ('this.id', 8), ('entrySet()', 8), ('splittable</a>\n', 8), ('item.\n', 8), ('TestException()),', 8), ('LOGGER.error("Error', 8), ('T8,', 8), ('non-null\n', 8), ('TimeoutMainMaybeObserver<T,', 8), ('terminates\n', 8), ('Completable,', 8), ('corrupt', 8), ('(task.replace(consumer))', 8), ('SingleSource<Object>', 8), ('invoking\n', 8), ('once,', 8), ('<li>If', 8), ('(index.getAndSet(Long.MAX_VALUE)', 8), ('variables', 8), ('ex.printStackTrace();\n', 8), ('sends', 8), ('Callable}', 8), ('(line', 8), ('actually', 8), ('to.assertSubscribed();\n\n', 8), ('observers.getAndSet(TERMINATED))', 8), ('finish', 8), ('{@literal', 8), ('SetMultimap}', 8), ('.filter(Functions.alwaysTrue(),', 8), ('TestObserver<String>', 8), ('later:</b>', 8), ('(getAndSet(Long.MAX_VALUE)', 8), ('List<Media>', 8), ('to.assertError(TestException.class)\n', 8), ('manages', 8), ('null;', 8), ('Maybe.empty()\n', 8), ('w.onError(ex);\n', 8), ('1.0\n', 8), ('Observer}s', 8), ('reportError', 8), ('duplicate', 8), ('ObjectHelper.requireNonNull(source6,', 8), ('function,', 8), ('npe)', 8), ('wip;\n\n', 8), ('*/\nabstract', 8), ('Functions.EMPTY_ACTION\n', 8), ('java.util.NavigableSet;\nimport', 8), ('stored', 8), ('os.subscribe(to);\n\n', 8), ('error(Throwable', 8), ('<p><b>Note', 8), ('hobbits', 8), ('Flowable.fromIterable(iterate(elements))\n', 8), ('Only', 8), ('DisposableHelper.set(this,', 8), ('sch', 8), ('source.subscribe(this);\n\n', 8), ('source3,\n', 8), ('backed', 8), ('there\n', 8), ('Splitr', 8), ('getThrowable()', 8), ('(MIT)\n', 8), ("hasn't", 8), ('TLeftEnd,', 8), ('UnicastProcessor<T>', 8), ('fail(exc,', 8), ('onError(final', 8), ('sender,', 8), ('d);\n\n', 8), ('So', 8), ('wiki:', 8), ('.test(0L);\n\n', 8), ('Functions.EMPTY_LONG_CONSUMER,\n', 8), ('TimeUnit.DAYS)\n', 8), ('computeNext()', 8), ('f,', 8), ('subscribeThread.get());\n', 8), ('help', 8), ('Object[20]);\n', 8), ('files.\n', 8), ('20);\n', 8), ('classes)', 8), ('d.isDisposed();\n\n', 8), ('<br>\n', 8), ('allowed")\n', 8), ('Publisher<B>>', 8), ('inputs)', 8), ('this.values', 8), ('Observers', 8), ('Subject', 8), ('Function<Disposable,', 8), ('com.google.caliper.Param;\nimport', 8), ('TRightEnd,', 8), ('.blockingGet();\n', 8), ('<dd>You', 8), ('SwitchMapSingleObserver<R>', 8), ('error.terminate();\n', 8), ('cs.onSuccess(2);\n', 8), ('File[]', 8), ('TestObserver<Integer>();\n', 8), ('h', 8), ('scheduler);\n\n', 8), ('ObjectHelper.requireNonNull(onSubscribe,', 8), ('test(Throwable', 8), ('j;\n', 8), ('GWT\n', 8), ('inOrder(observer);\n', 8), ('SchedulerRunnableIntrospection', 8), ('proxy', 8), ('disposeInner()', 8), ('org.junit.jupiter.api.Assertions.assertNotNull;\nimport', 8), ('(++c', 8), ('Builder<E>', 8), ('close;\n', 8), ('stream}', 8), ('get(long', 8), ('java.io.*;\nimport', 8), ('subscribe(@NonNull', 8), ('FutureTask<Object>', 8), ('"rawtypes"})\n', 8), ('Striped<Lock>', 8), ('implemented', 8), ('java.io.IOException;\n\n/**\n', 8), ('com.google.common.collect.testing.google;\n\nimport', 8), ('same\n', 8), ('3),', 8), ('TestSubscriber.create(0L);\n', 8), ('parallelism()', 8), ('io.reactivex.internal.functions.ObjectHelper;\n\n/**\n', 8), ('values;\n\n', 8), ('Close>>', 8), ('com.google.common.collect.testing.features.Feature;\nimport', 8), ('begin"));\n', 8), ('ts.assertNoValues();\n', 8), ('2)),\n', 8), ('Character', 8), ('finish"));\n', 8), ('java.util.concurrent.TimeoutException;\nimport', 8), ('TestResourceSingleObserver<Integer>', 8), ('HorrorMovie);\n', 8), ('null").apply(this);\n', 8), ('Observer,', 8), ('Nokleberg\n', 8), ('TimeUnit.SECONDS))', 8), ('e.serialize();\n\n', 8), ('UnicastSubject<Integer>', 8), ('Executes', 8), ('assertTestException(list,', 8), ('duration', 8), ('rs', 8), ('(i.e.', 8), ('instance)\n', 8), ('socket', 8), ('delaying\n', 8), ('v,', 8), ('bufs', 8), ('future,', 8), ('.doOnSuccess(new', 8), ('map,', 8), ('obs.all(new', 8), ('.hide()\n', 8), ('FuseToFlowable<T>', 8), ('java.util.concurrent.CountDownLatch;\nimport', 8), ('tests.\npublic', 8), ('itemTimeoutIndicator;\n', 8), ('OtherObserver<T>', 8), ('@Inherited\n', 7), ('termination', 7), ('unit);\n\n', 7), ('ps.onError(new', 7), ('subscribeActual(\n', 7), ('com.google.common.collect.testing.features.MapFeature;\nimport', 7), ('Object();\n', 7), ('id', 7), ('accept(long', 7), ('List<Potion>', 7), ('MaybeObserver<R>', 7), ('callable;\n', 7), ('associate', 7), ('Iterator<Object>', 7), ('com.google.common.base.Joiner;\nimport', 7), ('true));\n', 7), ('terminates,', 7), ('source.subscribe(observer);\n', 7), ('assertTrue(tc.values.isEmpty());\n', 7), ('TestException())))\n', 7), ('insertion', 7), ('maybe', 7), ('actual.onNext(b);\n', 7), ('(")\n', 7), ('Promise<>();\n', 7), ('(hasNext())', 7), ('actual.onSuccess(false);\n', 7), ('fs.get(5,', 7), ('String.format("%d",', 7), ('initialSupplier', 7), ('AtomicReference<Disposable>\nimplements', 7), ('another\n', 7), ('t2,', 7), ('symbolic', 7), ('Subscriber[]', 7), ('NoSuchElementException', 7), ('run.get(ScheduledRunnable.FUTURE_INDEX));\n', 7), ('java.net.URL;\nimport', 7), ('onError}\n', 7), ('mirrors', 7), ('yet")', 7), ('.assertResult(2);\n', 7), ('DISPOSED)', 7), ('cancel(boolean', 7), ('events.\n', 7), ('false));\n', 7), ('ex1', 7), ('io.reactivex.internal.operators.parallel;\n\nimport', 7), ('Completables\n', 7), ('":"', 7), ('behavior.\n', 7), ('Observable.just(new', 7), ('Collector<T,', 7), ('parent.innerError(t);\n', 7), ('assertFalse(ms.hasThrowable());\n', 7), ('locking', 7), ('UnicastSubject.create();\n\n', 7), ('on.\n', 7), ('fail(e.toString());\n', 7), ('Cancellable()', 7), ('DTO', 7), ('runnable.run();\n', 7), ('java.util.Iterator;\n\nimport', 7), ('.assertFailure(NoSuchElementException.class);\n', 7), ('onErrorRace()', 7), ('input.newLatchedObserver();\n', 7), ('temporary', 7), ('2)];\n', 7), ('operators,', 7), ('Verifies', 7), ('Integer.MAX_VALUE,', 7), ('java.util.Spliterator;\nimport', 7), ('this.remaining', 7), ('once)', 7), ('"b");\n', 7), ('pattern.\n', 7), ('createSource(byte[]', 7), ('cd.toSafe();\n\n', 7), ('java.lang.annotation.ElementType;\nimport', 7), ('SYNC)', 7), ('timeUnit,', 7), ('Function<Single<Object>,', 7), ('this.sourcesIterable', 7), ('signal.\n', 7), ('delaySubscription}', 7), ('calls.get());\n', 7), ('clazz,', 7), ('reduce', 7), ('Waits', 7), ('RuntimeException(ex);\n', 7), ('source()', 7), ('false)\n', 7), ('10))\n', 7), ('SingleObserver<R>', 7), ('scheduleDirect(@NonNull', 7), ('Gets', 7), ('e++;\n\n', 7), ('java.nio.CharBuffer;\nimport', 7), ('generated\n', 7), ('Concatenates', 7), ('<Boolean>', 7), ('AtomicInteger(2);\n', 7), ('errorMode));\n', 7), ('properly', 7), ('customer)', 7), ('this.items', 7), ('getOrCreateQueue()', 7), ('UnsupportedOperationException.class)\n', 7), ('this.factory', 7), ('marked', 7), ('Arrays.asList("a",', 7), ('isParallel', 7), ('remove(Object', 7), ('reduced', 7), ('fo.get(5,', 7), ('DateFormatCallable', 7), ('!m.javadoc.substring(idx', 7), ('upstream\n', 7), ('@Ignore("Not', 7), ('false.\n', 7), ('directExecutor}', 7), ('otherComplete()', 7), ('source4,\n', 7), ('(!active)', 7), ('customers', 7), ('CANCELLED', 7), ('interfaces', 7), ('FutureSubscriber<Integer>', 7), ('m.subscribe(observer);\n\n', 7), ('org.junit.Assert.assertEquals;\n\npublic', 7), ('notifications,', 7), ('information.\n', 7), ('apply(String', 7), ('e.onSuccess(1);\n', 7), ('apply(T', 7), ('arbitrary', 7), ('org.mockito.Mockito.mock;\nimport', 7), ('SYNC;\n', 7), ('200,', 7), ('result.\n', 7), ('SingleSource<Object>>()', 7), ('result,', 7), ('invoking', 7), ('inside', 7), ('onSuccess(final', 7), ('TestSubscriber<Object>();\n\n', 7), ('Class)', 7), ('entity', 7), ('Make', 7), ('assertSame(EmptyDisposable.INSTANCE,', 7), ('this));\n', 7), ('Producer', 7), ('correctly', 7), ('start,', 7), ('createArray(int', 7), ('however,', 7), ('io.reactivex.schedulers.TestScheduler;\n\npublic', 7), ('classLoader).getSimpleName());\n', 7), ('Exception>', 7), ('TestException("First");\n', 7), ('execution\n', 7), ('(lock)', 7), ('HashMultiset<E>', 7), ('available\n', 7), ('ps.onNext(1);\n', 7), ('<T', 7), ('.lift(new', 7), ('elements.\n', 7), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png"', 7), ('Object...', 7), ('termination.\n', 7), ('it.hasNext());\n\n', 7), ('baseClassName)', 7), ('predicate\n', 7), ('task.setFuture(f);\n', 7), ('sources[count++]', 7), ('Iterator<U>', 7), ('Require', 7), ('AtomicReference<Thread>', 7), ('parent.remove(this);\n', 7), ('integer)', 7), ('(isCancelled())', 7), ('Timed<Integer>(2,', 7), ('object;\n', 7), ('occurred', 7), ('.reduce(0,', 7), ('32)\n', 7), ('set.add(inner))', 7), ('content', 7), ('ParallelFlowable.\n', 7), ('specified\n', 7), ('assertFalse(ms.hasComplete());\n', 7), ('IOException,', 7), ('requested.addAndGet(-e);\n', 7), ('DefaultSubscriber<String>()', 7), ('generator,', 7), ('Object());\n', 7), ('elements,', 7), ('GetCheckedTypeValidator', 7), ('AssertionError();\n', 7), ('needs', 7), ('io.reactivex.CompletableObserver;\nimport', 7), ('assertFalse(ms.hasValue());\n', 7), ('collector,', 7), ('ObservableSource<U>', 7), ('exception)', 7), ('errorSupplier;\n', 7), ('ExceptionHelper.wrapOrThrow(e);\n', 7), ('^', 7), ('(c.get()', 7), ('org.junit.jupiter.params.provider.MethodSource;\n\nimport', 7), ('fo.onError(new', 7), ('QueueDisposable.ASYNC)', 7), ('resource;\n\n', 7), ('returns,', 7), ('SortedSet<V>', 7), ('Throwables\n', 7), ('(InvocationTargetException', 7), ('CompositeDisposable();\n\n', 7), ('The\n', 7), ('newer', 7), ('java.util.Random;\nimport', 7), ('componentType)', 7), ('kind', 7), ('to}', 7), ('3764492702657003550L;\n\n', 7), ('step', 7), ('4)));\n', 7), ('ObservableSource\n', 7), ('BooleanSubscription();\n', 7), ("'rail',", 7), ('<<', 7), ('subscribers,', 7), ('other.subscribe(parent.other);\n\n', 7), ('factory;\n', 7), ('throwing', 7), ('DisposableHelper.dispose(resource);\n', 7), ('Compares', 7), ('accepting', 7), ('onSubscribe(final', 7), ('mode,', 7), ('performed', 7), ('turning', 7), ('interruption', 7), ('example:\n', 7), ('to.assertResult(1);\n\n', 7), ('switches', 7), ('responsible', 7), ('good', 7), ('io.reactivex.schedulers.*;\nimport', 7), ('this.wip', 7), ('Observable.generate(new', 7), ('verify(o).onNext(1);\n', 7), ('CharSinkFactory', 7), ('String&gt;', 7), ('evaluated', 7), ('v1', 7), ('io.reactivex.exceptions.TestException;\n\npublic', 7), ('errorSupplier)', 7), ('Subscriber#onError', 7), ('.doOnRequest(this)\n', 7), ('(sources', 7), ('serial', 7), ('11,', 7), ('12/27/15', 7), ('Optional<LotteryTicketId>', 7), ('assertFalse(ss.hasObservers());\n', 7), ('skipping', 7), ('instances,', 7), ('Comparable,', 7), ('pp.onNext(2);\n\n', 7), ('actual.onNext(v);\n\n', 7), ('delay}', 7), ('Singles\n', 7), ('values);\n', 7), ('factory)', 7), ('onError.accept(t);\n', 7), ('case\n', 7), ('Condition', 7), ('implied;\n', 7), ('SafeSubscriber<Integer>(ts);\n', 7), ('parent.innerError(e);\n', 7), ('@TesterAnnotation\n', 7), ('java.io.ObjectOutputStream;\nimport', 7), ('onDispose', 7), ('.append("\\r\\n', 7), ('ObjectHelper.requireNonNull(predicate,', 7), ('ByteArrayOutputStream', 7), ('get().cancel();\n', 7), ('run.call();\n', 7), ('CompositeException;\n', 7), ('assertNull(ms.getThrowable());\n', 7), ('cache', 7), ('weather', 7), ('SubscriptionArbiter();\n', 7), ('e1));\n', 7), ('parents[i]', 7), ('assertFalse(cs.hasObservers());\n\n', 7), ('complete\n', 7), ('types,', 7), ('disposer', 7), ('assertEquals(10,', 7), ('generating', 7), ('ByteSinkFactory', 7), ('com.google.common.collect.ImmutableMap;\nimport', 7), ('checkNotNull(bytes);\n', 7), ('.concatMap(new', 7), ('hasComplete()', 7), ('generateInt();\n', 7), ('latch.await();\n', 7), ('e.onNext(2);\n', 7), ('verify(singleObserver,', 7), ('package', 7), ('background', 7), ('.elementAt(1,', 7), ('System.arraycopy(sources,', 7), ('causes', 7), ('Flowable<T>()', 7), ('Reactor', 7), ('view', 7), ('mutable', 7), ('AtomicReference<Object>', 7), ('calls.incrementAndGet();\n', 7), ('(BlockingQueue<Object>', 7), ('(for', 7), ('ts.request(3);\n', 7), ('assertNull(ms.getValue());\n', 7), ('flowable;\n\n', 7), ('SingleObserver<Object>()', 7), ('position', 7), ('range', 7), ('List<Long>', 7), ('subclasses', 7), ('Flowable.just(new', 7), ('executor.shutdown();\n', 7), ('.cancel();\n\n', 7), ('HashMap<String,', 7), ('Call', 7), ('o;\n\n', 7), ('5)', 7), ('Single<String>', 7), ('considered', 7), ('Execute', 7), ('protocol', 7), ('ready', 7), ('succeeded', 7), ('disposeRace()', 7), ('java.lang.annotation.Documented;\nimport', 7), ('value,\n', 7), ('(input.size', 7), ('DatagramPacket', 7), ('//TLTL\n', 7), ('ObservableOnSubscribe<Integer>()', 7), ('Converter<String,', 7), ('LinkedHashMultiset<E>', 7), ('sa.getAndIncrement();\n\n', 7), ('.assertOf(new', 7), ('unchecked', 7), ('normally', 7), ('Helpers.assertContainsAllOf(list,', 7), ('sd', 7), ('(SQLException', 7), ('normally\n', 7), ('MaybeSource}s\n', 7), ('so.onComplete();\n\n', 7), ('getName()', 7), ('<dd>you', 7), ('point', 7), ('assertEquals("a",', 7), ('!m.signature.contains("Flowable")\n', 7), ('decide/implement', 7), ('java.io.StringReader;\nimport', 7), ('Observable<Object>>()', 7), ('tasks)\n', 7), ('(error.get()', 7), ('delta', 7), ('assertTrue(tc.errors.isEmpty());\n', 7), ('junit.framework.TestCase;\nimport', 7), ('createFile();\n', 7), ('HashSet<Integer>(Arrays.asList(1,', 7), ('assertTrue(ps.hasObservers());\n', 7), ('full', 7), ('fusionMode;\n\n', 7), ('org.mockito.InOrder;\n\nimport', 7), ('multiset;\n', 7), ('thrown\n', 7), ('respectively.', 7), ('disposable,', 7), ('observer.onError(e);\n', 7), ('start()', 7), ('Sorts', 7), ('along', 7), ('io.reactivex.internal.disposables;\n\nimport', 7), ('io.reactivex.schedulers.TestScheduler;\nimport', 7), ('List<?>', 7), ('String>[]', 7), ('dispose().\n', 7), ('add,', 7), ('disposeAll();\n', 7), ('executes', 7), ('provided.\n', 7), ('top', 7), ('this.implied', 7), ('onSubscribe,\n', 7), ('fusion\n', 7), ('ObservableSource<?>>', 7), ('each\n', 7), ('func}', 7), ('exec.shutdown();\n', 7), ('happens\n', 7), ('.test(0)\n', 7), ('otherwise\n', 7), ('BackpressureHelper.add(this,', 7), ('E[]', 7), ('(DisposableHelper.validate(upstream,', 7), ('changed', 7), ('link', 7), ('loader,', 7), ('assertEquals(-1,', 7), ('(UnsupportedOperationException', 7), ('fatal', 7), ('sequence\n', 7), ('ASYNC)', 7), ('apply(Single<Object>', 7), ('c.decrementAndGet();\n', 7), ('allowing', 7), ('w,', 7), ('@Ignore("Fusion', 7), ('subscribe(ObservableEmitter<Integer>', 7), ('exc);\n', 7), ('bean', 7), ('List<RxMethod>', 7), ('forwards', 7), ('OutputStream', 7), ('fn', 7), ('Field', 7), ('operator/class', 7), ('emitted.\n', 7), ('mayInterruptIfRunning)', 7), ('ByteArrayOutputStream();\n', 7), ('}))\n', 7), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/mergeDelayError.png"', 7), ('{url},', 7), ('U>(s,', 7), ('List<CakeLayerInfo>', 7), ('Preconditions.checkNotNull(unit,', 7), ('fixed', 7), ('affect', 7), ('disposeResourceAfter();\n', 7), ('IllegalStateException();\n', 7), ('List<CustomerDto>', 7), ('CustomerDto', 7), ('blocks', 7), ('assertTrue(future.isDone());\n', 7), ('overridden', 7), ('blockingQueues())', 7), ('rmo.start);\n', 7), ('4)\n', 7), ('Callable<Scheduler>()', 7), ('filter', 7), ('layer', 7), ('DISPOSED;\n', 7), ('observer.onSubscribe(parent);\n', 7), ('U>(t,', 7), ('providing', 7), ('ScheduledFuture<?>', 7), ('entry.getValue());\n', 7), ('compare', 7), ('tryOnNext(T', 7), ('1",', 7), ('shutdown()', 7), ('cs.subscribe(inner);\n', 7), ('WindowOperation<T,', 7), ('just()', 7), ('scheduler)\n', 7), ('overload', 7), ('onSubscribe\n', 7), ('.switchMapSingle(new', 7), ('sourceMode;\n\n', 7), ('bufferOpen;\n', 6), ('converting', 6), ('collectionSupplier;\n\n', 6), ('onEvent', 6), ('methods.', 6), ('Virtual', 6), ('next);\n', 6), ('Queues.drain(q,', 6), ('subscribes\n', 6), ('errorHandler));\n', 6), ('INNER_DISPOSED', 6), ('4109457741734051389L;\n\n', 6), ('Subscriber>()', 6), ('times(1)).onError(any(TestException.class));\n', 6), ('InnerObserver();\n\n', 6), ('src.distinct(TO_UPPER_WITH_EXCEPTION).subscribe(w);\n\n', 6), ('IOException());\n\n', 6), ('AmbCoordinator<T>', 6), ('prevents', 6), ('simulated', 6), ('(won)', 6), ("method's", 6), ('generator.generateFresh(String.class));\n', 6), ('scanner', 6), ('"outer");\n\n', 6), ('cmp', 6), ('o.onNext(6);', 6), ('onErrorMapper;\n', 6), ('o.onNext(4);', 6), ('refrain', 6), ('}\n\n}', 6), ('result.subscribe(o);\n\n', 6), ('s.request(r);\n', 6), ('SimplePlainQueue<U>', 6), ('this.w', 6), ('SwitchMapInnerObserver<T,', 6), ('MaybeSource.\n', 6), ('LegacyComparable', 6), ('src.distinct().subscribe(w);\n\n', 6), ('DisposableHelper.replace(parent,', 6), ('++i)', 6), ('.take(3)\n', 6), ('Method>', 6), ('mocked', 6), ('FlowableOperator<String,', 6), ('s.assertTerminated();\n', 6), ('Integer>>();\n\n', 6), ('!m.signature.contains("Observable")\n', 6), ('CollectionSize.ANY,\n', 6), ('work-in-progress', 6), ('TestResourceObserver<Integer>();\n\n', 6), ('.to(ObserverFusion.<Integer>test(QueueFuseable.ANY,', 6), ('javadocEnd', 6), ('TIME_UNIT));\n', 6), ('readers', 6), ('9),', 6), ("operator's", 6), ('of(E', 6), ('ts1.assertNoErrors();\n', 6), ('Maybe.fromAction(new', 6), ('Observable.just(5,', 6), ('#onComplete}', 6), ('fluently.\n', 6), ('9;', 6), ('ps.onComplete();\n', 6), ('PublishProcessor<T>', 6), ('run;\n', 6), ('NotificationLite.COMPLETE)', 6), ('concat(Publisher<?', 6), ('act', 6), ('TimerDisposable', 6), ('<p><b>Warning:</b>', 6), ('cancelled\n', 6), ('reducer));\n', 6), ('source.onComplete();\n\n', 6), ('Enum<T>>', 6), ('AssemblyStackTraceException.find(ex);\n//\n//', 6), ('of();\n', 6), ('otherError()', 6), ('RejectedExecutionException.class);\n', 6), ('s1)', 6), ('s.onSubscribe(sa);\n\n', 6), ('(iterator', 6), ('});\n//', 6), ('concatenation', 6), ('Disposable}\n', 6), ('9L);\n', 6), ('TestResourceCompletableObserver();\n\n', 6), ('combiner,', 6), ('0:\n', 6), ('set!");\n\n', 6), ('Message', 6), ('TestException("One"));\n\n', 6), ('(!get())', 6), ('TimeoutOtherMaybeObserver<T,', 6), ('Enum', 6), ('31', 6), ('super();\n', 6), ('assertEquals(8,', 6), ('TakeUntilMainMaybeObserver<T,', 6), ('implementations.\n', 6), ('Otherwise,', 6), ('TestSubscriber<Integer>(0L);\n\n', 6), ('boundarySupplier;\n', 6), ('assertTrue("Not', 6), ('s.advanceTimeTo(600,', 6), ('Flowable.bufferSize());\n', 6), ('tmp;\n', 6), ('queue.get();\n', 6), ('observed', 6), ('boundary;\n', 6), ('queue.poll();\n\n', 6), ("'An", 6), ('q.poll());\n', 6), ('possible\n', 6), ('timing', 6), ('this.otherObserver', 6), ('V,', 6), ('accumulator)', 6), ('parent.onTimeout(idx);\n', 6), ('testThrottle()', 6), ('exceptions.\n', 6), ('Map<E,', 6), ('File("/a"),', 6), ('factory;\n\n', 6), ('NullPointerException("Subscription', 6), ('long,', 6), ('Array', 6), ('true.\n', 6), ('open,', 6), ('Observable<T>()', 6), ('o.onNext(1);', 6), ('ConcatInnerObserver', 6), ('source.onNext(2);\n', 6), ('Future<T>', 6), ('5).parallel()\n', 6), ('invokeAny(Collection<?', 6), ('Machine', 6), ('1).getFormattedMessage();\n', 6), ('fo.onNext(1);\n', 6), ('bufferSize));\n', 6), ('iterate', 6), ('easy', 6), ('interested', 6), ('20,', 6), ('"15.11.2015",', 6), ('o.onNext(7);', 6), ('gate', 6), ('s1', 6), ('Maybe.just(2))\n', 6), ('c.get());\n', 6), ('BOUNDARY)', 6), ('any)', 6), ('errors.addThrowable(e);\n', 6), ('ps1', 6), ('fulfilled', 6), ('consuming', 6), ('onSubscribeCrash()', 6), ('this.sa', 6), ('io.reactivex.subscribers;\n\nimport', 6), ('But', 6), ('ss.observerCount());\n\n', 6), ('o.onComplete();\n\n', 6), ('LocalDateTime', 6), ('Ensure', 6), ('SortedMap<String,', 6), ('types.\n', 6), ('By', 6), ('implied)', 6), ('assertEquals(i,', 6), ('java', 6), ('rails', 6), ('WindowBoundaryInnerSubscriber<T,', 6), ('before\n', 6), ('java.util.LinkedHashSet;\nimport', 6), ('compose', 6), ('real', 6), ('3L);\n', 6), ('merges', 6), ('DisposableHelper.dispose(mainDisposable);\n', 6), ('local', 6), ('ReduceSeedObserver<T,', 6), ('HashSet<>(Arrays.asList(1,', 6), ('ReaderWriterLock', 6), ('ArrayListMultimap<K,', 6), ('semantics', 6), ('o.latch.await();\n', 6), ('Promise<Void>', 6), ('implementor', 6), ('converter)', 6), ('(s.contains("An', 6), ('MaybeSource)}', 6), ('test()', 6), ('tc.start);\n\n', 6), ('java.util.Locale;\nimport', 6), ('String.class);\n', 6), ('.toList()\n', 6), ('versions', 6), ('so.onNext(1);\n\n', 6), ('to1.assertNoErrors();\n', 6), ('source.', 6), ('OTHER_STATE_HAS_VALUE;\n', 6), ('ThreadSubscription', 6), ('file.', 6), ('Executors.newCachedThreadPool();\n', 6), ('WindowBoundaryInnerObserver<T,', 6), ('evaluated\n', 6), ('o1.compareTo(o2);\n', 6), ('(at', 6), ('r.set(true);\n', 6), ('publishNext(observer,', 6), ('calling\n', 6), ('(inner.compareAndSet(current,', 6), ('iterator.remove();\n', 6), ('Reader("Reader', 6), ('ObservableSource<R>>', 6), ('BooleanSupplier()', 6), ('consume', 6), ('connection)', 6), ('assertTrue(ps.hasObservers());\n\n', 6), ('prefix', 6), ('10', 6), ('AppendOnlyLinkedArrayList<Object>(QUEUE_LINK_SIZE);\n', 6), ('expression', 6), ('emitLoop();\n', 6), ('INSTANCE;\n', 6), ('ts.assertResult(1);\n', 6), ('intermediate', 6), ('Since\n', 6), ('cast', 6), ('operate(Stream<?>', 6), ('Future#get}', 6), ('requests.\n', 6), ('s);\n\n', 6), ('ComputationScheduler.cap(8,', 6), ('FutureSubscriber<Integer>();\n\n', 6), ('Bauer,', 6), ('ts.getOnErrorEvents().get(0);\n//\n//', 6), ('using}', 6), ('DeferredScalarSubscription<T>', 6), ('plugins\n', 6), ('.requestMore(2)\n', 6), ('yet.', 6), ('innerCompleted', 6), ('.assertValue(1);\n', 6), ('o.onNext(5);', 6), ('innerScheduler.schedule(new', 6), ('likely', 6), ('RuntimeException("Forced', 6), ('Queue}', 6), ('Starts', 6), ('"converter', 6), ('File}', 6), ('allowFatal;\n', 6), ('ts)', 6), ('0L}', 6), ('state.', 6), ('class,', 6), ('Heavy', 6), ('one\n', 6), ('composition', 6), ('T7>', 6), ('TestSuite();\n', 6), ('option', 6), ('child.onComplete();\n', 6), ('io.reactivex.internal.util.*;\n\npublic', 6), ('(x', 6), ('define', 6), ('instances.', 6), ('newValue', 6), ('6)\n', 6), ('(o.latch.getCount()', 6), ('comparing', 6), ('com.google.common.collect.Multimap;\nimport', 6), ('(but', 6), ('innerErrorRace()', 6), ('@SuppressWarnings("unused")\n', 6), ('offer(R', 6), ('3L,', 6), ('any\n', 6), ('onNext.accept(t);\n', 6), ('emits\n', 6), ('ps.mergeWith(cs).subscribeWith(new', 6), ('produces', 6), ('newThread(Runnable', 6), ('output);\n', 6), ('changes', 6), ('list.get(index);\n', 6), ('RxMethod', 6), ('returned\n', 6), ('ArrayList<T>();\n\n', 6), ('SpscLinkedArrayQueue<T>', 6), ('.assertValueCount(513)\n', 6), ('.to(SubscriberFusion.<Integer>test(Long.MAX_VALUE,', 6), ('6L,', 6), ('renew', 6), ('ss;\n\n', 6), ('Writing', 6), ('SingleSource)\n', 6), ('Optional<E>', 6), ('assertTrue(task.isDone());\n', 6), ('java.lang.reflect.Type;\nimport', 6), ('error}', 6), ('checkNotNull(string);\n', 6), ('resetContainer(\n', 6), ('samples()', 6), ('web', 6), ('io.reactivex.plugins.RxJavaPlugins;\n\nimport', 6), ('disposer,\n', 6), ('subscribe(to);\n', 6), ('lift()}', 6), ('result);\n', 6), ('.limit(5)\n', 6), ('s.advanceTimeTo(0,', 6), ('performance', 6), ('requested:', 6), ('Member', 6), ('timer;\n', 6), ('((line', 6), ('varargs.\n@SuppressWarnings("unchecked")\n@GwtCompatible\npublic', 6), ('object.\n', 6), ('pp1.singleElement().timeout(pp2).test();\n\n', 6), ('1:\n', 6), ('actual.onError(e);\n\n', 6), ('subscribing\n', 6), ('HorrorMovie(),', 6), ('Map<Class<?', 6), ('SubscriptionHelper.cancel(mainSubscription);\n', 6), ('name\n', 6), ('SingleSource}', 6), ('timeoutIndicator,', 6), ('7L,', 6), ('InnerCompletableCache[]', 6), ('obs)', 6), ('inOrder.verify(observer).onNext(7);\n', 6), ('com.google.common.base.Charsets;\nimport', 6), ('increments\n', 6), ('List<Entry<E>>', 6), ('SerializableTester\n', 6), ('take(10)', 6), ('ObjectHelper.requireNonNull(reducer.apply(v,', 6), ('testScheduler.advanceTimeBy(1,', 6), ('suite.addTest(\n', 6), ('this.open', 6), ('s.advanceTimeTo(700,', 6), ('Single<Long>', 6), ('selecting', 6), ('assertTrue(tc.errors.isEmpty());\n\n', 6), ('found', 6), ('inOrder.verify(observer).onComplete();\n', 6), ('StreamSupport.stream(\n', 6), ('com.google.common.collect.SetMultimap;\nimport', 6), ('parent.onError(t);\n', 6), ('CancellationException();\n', 6), ('isNextConsumed', 6), ('e3,', 6), ('NavigableSet<K>', 6), ('executing', 6), ('com.google.common.collect.ImmutableSortedMap;\nimport', 6), ('t);\n}\n', 6), ('"Displaying', 6), ('com.google.common.collect.BiMap;\nimport', 6), ('#mergeDelayError(SingleSource,', 6), ('Subject<Integer>', 6), ('String>>()', 6), ('defaultValue));\n', 6), ('100);\n', 6), ('indicates\n', 6), ('mainDone;\n', 6), ('uncaughtException(Thread', 6), ('collectionSupplier)', 6), ('video', 6), ('API.\n', 6), ('bufferSupplier', 6), ('diff', 6), ('keys,', 6), ('Long.MIN_VALUE)', 6), ('apply(final', 6), ('sd;\n', 6), ('called.', 6), ('only.\n', 6), ('builder.toString();\n', 6), ('java.util.function.Consumer;\nimport', 6), ('ts1.assertNotComplete();\n\n', 6), ('string;\n', 6), ('data,', 6), ('published', 6), ('s.advanceTimeTo(501,', 6), ('QueueFuseable.ANY,', 6), ('(parent.win(index))', 6), ('element\n', 6), ('constructors', 6), ('windows.getAndIncrement();\n\n', 6), ('*/\n@Beta\npublic', 6), ('LotteryTicket>', 6), ('List<Item>', 6), ('counter/indicator\n', 6), ('io.reactivex.disposables.Disposable;\n\npublic', 6), ('14.0\n', 6), ('s.assertUnsubscribed();\n', 6), ('"inner");\n', 6), ('fires', 6), ('Void', 6), ('newline', 6), ('future;\n', 6), ('unsubscribed/cancelled.\n', 6), ('baseTypeName);\n', 6), ('album', 6), ('ts.assertError(TestException.class);\n//\n//', 6), ('ms.onComplete();\n\n', 6), ('newArrayType(Type', 6), ('list2', 6), ('bounds)', 6), ('Set<Feature<?>>', 6), ('ListenableFuture<T>', 6), ('boundary;\n\n', 6), ('Maybe.fromRunnable(new', 6), ('Flowable.intervalRange(1,', 6), ('t3,', 6), ('null"));\n', 6), ('m.invoke(null,', 6), ('argument\n', 6), ('4L,', 6), ('io.reactivex.subjects.UnicastSubject;\n\npublic', 6), ('(Type', 6), ('checkTerminated(boolean', 6), ('times\n', 6), ('PublishSubject<T>', 6), ('ObjectHelper.requireNonNull(collectionSupplier.call(),', 6), ('onFinally.run();\n', 6), ('setting', 6), ('io.reactivex.schedulers.Schedulers;\n\n/**\n', 6), ('values.get(2));\n', 6), ('entity.\n', 6), ('(subclass)', 6), ('.assertFailure(RuntimeException.class);\n\n', 6), ("Scheduler's", 6), ('(array.length', 6), ('Class<T>', 6), ('There', 6), ('*/\n@GwtCompatible\n@Ignore', 6), ('com.iluwatar.tls;\n\nimport', 6), ('io.reactivex.exceptions;\n\nimport', 6), ('(present', 6), ('innerError(InnerObserver', 6), ('converts', 6), ('cs.observerCount());\n\n', 6), ('IOException())\n', 6), ('acquired', 6), ('onTimeoutError(long', 6), ('pattern)', 6), ('MaybePeek<T>(this,\n', 6), ('actual.onSuccess(true);\n', 6), ('queues', 6), ('blockingGet()', 6), ('keySet()', 6), ('Multimap}\n', 6), ('@Ignore("Null', 6), ('RxJavaPlugins.onError', 6), ('repeat}', 6), ('this.\n', 6), ('io.reactivex.internal.util.BackpressureHelper;\n\npublic', 6), ('generator.generateFresh(new', 6), ('IllegalArgumentException);\n', 6), ('ObjectHelper.requireNonNull(source7,', 6), ('exceptionType', 6), ('twice', 6), ('e1', 6), ('to2', 6), ('whichever', 6), ('one.\n', 6), ('DisposableHelper.dispose(debouncer);\n', 6), ('@CollectionSize.Require(SEVERAL)\n', 6), ('c.incrementAndGet();\n', 6), ('policy', 6), ('delay(long', 6), ('com.google.common.collect.Sets;\nimport', 6), ('complete;\n\n', 6), ('overwrite', 6), ('AtomicReference<T>', 6), ('qs;\n\n', 6), ('v)));\n', 6), ('leak', 6), ('self();\n', 6), ('Entry<?', 6), ('PreparedStatement', 6), ('Single,\n', 6), ('com.google.common.base.Splitter;\nimport', 6), ('hasCustomOnError()', 6), ('lambda', 6), ('bh;\n\n', 6), ('ObservableSource<V>>', 6), ('java.util.ListIterator;\nimport', 6), ('.elementAt(0)\n', 6), ('merge(\n', 6), ('fromFuture(Future<?', 6), ('B>(this);\n', 6), ('com.google.common.collect.ImmutableBiMap;\nimport', 6), ('org.junit.Test;\n\n/**\n', 6), ('source7\n', 6), ('innerComplete(this);\n', 6), ('lines.add(line);\n', 6), ('TestExecutor', 6), ('TestSubscriber<Long>();\n\n', 6), ('publishNext(innerObserver,', 6), ('subject.\n', 6), ('Observable.just(1).hide()\n', 6), ('streams)', 6), ('Assert.assertEquals(true,', 6), ('worker)', 6), ('this.size', 6), ('Runtime', 6), ('com.google.common.collect.Maps;\nimport', 6), ('allCustomers', 6), ('this.type', 6), ('counter.get());\n', 6), ('50,', 6), ('(index.compareAndSet(idx,', 6), ('TestSubscriber.create(0);\n', 6), ('pp1.singleElement().takeUntil(pp2).test();\n\n', 6), ('CollectionFeature.KNOWN_ORDER,', 6), ('actual.onSubscribe(this)}', 6), ('From</a>\n', 6), ('(onSuccess', 6), ('runFinally()', 6), ('(error.addThrowable(t))', 6), ('Subscriber<T>', 6), ('limit', 6), ('(null', 6), ('io.reactivex.*;\n\npublic', 6), ('10;\n\n', 6), ('len;', 6), ('AtomicThrowable();\n\n', 6), ('received\n', 6), ('12.0\n', 6), ('promise.\n', 6), ('SubscriptionHelper.deferredRequest(s,', 6), ('next))', 6), ('pattern\n', 6), ('onFinally}', 6), ('comparator")\n', 6), ('Publisher<V>>', 6), ('.asList();\n\n', 6), ('iteratorNotification', 6), ('ex.getCause().getMessage());\n', 6), ('10th', 6), ('operator.\n', 6), ('Disposable[]', 6), ('start;\n', 6), ('subscriberCount()', 6), ('out\n', 6), ('NullPointerException}.\n', 6), ('Schedulers', 6), ('#onNext(Object)},', 6), ('errorHandler)', 6), ('ignores', 6), ('ExceptionHelper.wrapOrThrow(error);\n', 6), ('name.', 6), ('covariance.\n', 6), ('createSource(String', 6), ('delay.\n', 6), ('lists', 6), ('o.onNext(2);', 6), ('pp0.onError(ex);\n', 6), ('apply(Disposable', 6), ('Ensures', 6), ('test}', 6), ('set.dispose();\n\n', 6), ('next\n', 6), ('idx);\n', 6), ('io.reactivex.functions.*;\n\npublic', 6), ('matter', 6), ('map.put(key,', 6), ('createFluentIterable(integers)\n', 6), ('obj;\n', 6), ('io.reactivex.observers.LambdaConsumerIntrospection;\nimport', 6), ('constructorShouldBePrivate()', 6), ('fs', 6), ('this.end', 6), ('logic,', 6), ('comes', 6), ('Callable<Object>', 6), ('Builder<T>', 6), ('times(1)).onNext(\n', 6), ('subscribe()}', 6), ('otherObserver;\n\n', 6), ('org.mockito.ArgumentMatchers.*;\nimport', 6), ('Flowable<Media>', 6), ('get(@NullableDecl', 6), ('RxJavaPlugins.onSchedule(run);\n', 6), ('#mergeDelayError(MaybeSource,', 6), ('(!done', 6), ('stat)', 6), ('.subscribeOn(Schedulers.single())\n', 6), ('java.util.concurrent.atomic.AtomicReference;\n\n/**\n', 6), ('ts.assertEmpty();\n', 6), ("subscriber's", 6), ('Subscribers.\n', 6), ('threads\n', 6), ('<T7>', 6), ('cancelTimer();\n', 6), ('InterruptedException);\n', 6), ('executor;\n', 6), ('assertEquals(4,', 6), ('#refCount()}', 6), ('please', 6), ('collector));\n', 6), ('times(1)).onError(exception);\n', 6), ('nextDD', 6), ('java.nio.ByteBuffer;\nimport', 6), ('bs2', 6), ('this))', 6), ('512)\n', 6), ('emission\n', 6), ('href="http://reactivex.io/documentation/operators/from.html">ReactiveX', 6), ('io.reactivex.internal.disposables.DisposableHelper;\n\npublic', 6), ('(Connection', 6), ('accepts', 6), ('(CompositeException)', 6), ('error(e);\n', 6), ("source's", 6), ('come\n', 6), ('false\n', 6), ('until;\n', 6), ('atomically\n', 6), ('collection.clear();\n', 6), ('8L,', 6), ('counts', 6), ('to1', 6), ('success\n', 6), ('TestObserver<Integer>();\n\n', 6), ('others\n', 6), ('io.reactivex.internal.util.ExceptionHelper;\nimport', 6), ('errorMode', 6), ('e1,', 6), ('this(new', 6), ('href="https://github.com/reactive-streams/reactive-streams-jvm#2.13">Rule', 6), ('head', 6), ('source));\n', 6), ('timeout;\n\n', 6), ('(callback)', 6), ('*/\n//', 6), ('io.reactivex.internal.disposables.SequentialDisposable;\n\npublic', 6), ('Serializes', 6), ('verify(o).onError(any(TestException.class));\n', 6), ('removes', 6), ('chunk)', 6), ('org.mockito.InOrder;\nimport', 6), ('TIME_UNIT);\n', 6), ('f.get();\n', 6), ('across', 6), ('deserialize(SerializationStreamReader', 6), ('taskDone', 6), ('subject.onNext(1);\n', 6), ('copied', 6), ('logically', 6), ('UIEventLoopScheduler', 6), ('CountDownLatch\nimplements', 6), ('Maybe,\n', 6), ('Observable<Media>', 6), ('demonstrates', 6), ('}).blockingSingle();\n\n', 6), ('subscribe(Publisher<?', 6), ('to.assertValues(0L,', 6), ('F', 6), ('-1;\n\n', 6), ('isParallel)\n', 6), ('java.util.regex.Pattern;\nimport', 6), ('onAfterSuccess)', 6), ('Map<LotteryTicketId,', 6), ('2));\n', 6), ('probably', 6), ('<p>Allows', 6), ('identity', 6), ('student.getName());\n', 6), ('RegularImmutableMap<K,', 6), ('ErrorMode.END)', 6), ('wrapped\n', 6), ('ps2', 6), ('href="https://github.com/ReactiveX/RxJava/wiki/Writing-operators-for-2.0">RxJava', 6), ('to1.assertNotComplete();\n\n', 6), ('cmp.<String>toFlowable().subscribe(subscriber);\n\n', 6), ('4;\n\n', 6), ('TestResourceSingleObserver<Integer>();\n\n', 6), ('CompletableDisposable[]', 6), ('whenever', 6), ('assertSame(oop,', 6), ('go.', 6), ('aste', 6), ('#onNext(Object)}', 6), ('thrown,', 6), ('accept(Emitter<Object>', 6), ('ExecutionException(ex);\n', 6), ('SubscriptionHelper.cancel(upstream);\n\n', 6), ('updated', 6), ('AtomicReference<SingleObserver<?', 6), ('onNext(Notification<T>', 6), ('com.google.common.truth.Truth.assertThat;\n\nimport', 6), ('threads,', 6), ('(compareAndSet(idx,', 6), ('queue.offer(NEXT_WINDOW);\n', 6), ('initialized,', 6), ('this.collection', 6), ('Mockito.never()).onError(any(Throwable.class));\n', 6), ('AtomicReference<MaybeObserver<?', 6), ('further\n', 6), ('assertTrue(values.isEmpty());\n', 6), ('WITHOUT\n', 6), ('URL("file:/a");\n', 6), ('active;\n', 6), ('serialDisposable.dispose();\n', 6), ('tester', 6), ('s.assertNoErrors();\n', 6), ('Single.just(3),\n', 6), ('ObservableEmitter<Object>', 6), ('rvalue', 6), ('wip,', 6), ('AtomicReference<Subscriber<?', 6), ('source2);\n', 6), ('null}s', 6), ('TestSubscriber<Integer>(1)', 6), ('Emits', 6), ('capacityHint', 6), ('(isDisposed())', 6), ('ObjectHelper.requireNonNull(errorHandler,', 6), ('retry(long', 6), ('itself.\n', 6), ('who', 6), ('q.isEmpty()))', 6), ('source6,', 6), ('to;\n', 6), ('reducer,', 6), ('BiFunction<Flowable,', 6), ('queue.offer(b);\n', 6), ('collectionSupplier;\n', 6), ('QueueDisposable.SYNC)', 6), ('awaits', 6), ('}).toObservable()\n', 6), ('.take(2)\n', 6), ('verify(observer).onSubscribe(any(Disposable.class));\n', 6), ('EndConsumerHelper.composeMessage(tc.getClass().getName()));\n', 6), ('periodic', 6), ('CompositeException)', 6), ('dest;\n', 6), ('queue.isEmpty();\n', 6), ('Flowable.just("one",', 6), ('io.reactivex.functions.BiFunction;\n\n@Test\npublic', 6), ('delegates', 6), ('verify(o).onComplete();\n', 6), ('ListenableScheduledFuture<?>', 6), ('times(0)).onComplete();\n', 6), ('https://github.com/ReactiveX/RxJava/issues/360#issuecomment-24203016\n', 6), ('down', 6), ('subscribers.getAndSet(TERMINATED))', 6), ('serialDisposable.update(underlying);\n', 6), ('^=', 6), ('turn', 6), ('java.io.FileOutputStream;\nimport', 6), ('ObjectHelper.requireNonNull(converter,', 6), ('pp.onComplete();\n', 6), ('LambdaConsumerIntrospection', 6), ('Consumer<Emitter<Object>>()', 6), ('.elementAtOrError(0)\n', 6), ('assertEquals("",', 6), ('AtomicReference<SpscLinkedArrayQueue<R>>', 6), ('Helpers.copyToSet(implied);\n', 6), ('normal', 6), ('consumerIndex;\n', 6), ('Timed<Integer>(3,', 6), ('ts.assertValues(0L,', 6), ('TRight>', 6), ('r.run();\n', 6), ('tc.dispose();\n\n', 6), ('2.1.9', 6), ('List<Student>', 6), ('inspired', 6), ('value));\n', 6), ('windows;\n\n', 6), ('others', 6), ('setDisposable(Disposable', 6), ("8's\n", 6), ('interface.', 6), ('Integer[times];\n', 6), ('md', 6), ('FileNotFoundException', 6), ('specifies', 6), ('ts.assertValue(1);\n', 6), ('TimeoutException());\n', 6), ('WeakReference<?', 6), ('ByteSink', 6), ('source.onNext(3);\n\n', 6), ('%.3f', 6), ('t2', 6), ('zipper));\n', 6), ('ParallelFlowableTest.checkSubscriberCount(Flowable.range(1,', 6), ('mapWithIndex(\n', 6), ('element,\n', 6), ('Throwable\n', 6), ('this.idx', 6), ('pp1.singleElement().takeUntil(pp2.singleElement()).test();\n\n', 6), ('nextSupplier,', 6), ('Enum<K>,', 6), ('renewed,', 6), ('io.reactivex.functions;\n\n/**\n', 6), ('<li>{@link', 6), ('safe.onSubscribe(new', 6), ('Publisher<?>', 6), ('UnmodifiableIterator<Entry<K,', 6), ('delegate', 6), ('subscriber.', 6), ('"source7', 6), ('BackpressureHelper.addCancel(requested,', 6), ('lowest', 6), ('completing', 6), ('java.lang.Thread.UncaughtExceptionHandler}.\n', 6), ('completed\n', 6), ('"errorHandler', 6), ('ms.test();\n\n', 6), ('java.lang.reflect.Field;\nimport', 6), ('example,\n', 6), ('reached', 6), ('"inner");\n\n', 6), ('atomicLong.get());\n\n', 6), ('active\n', 6), ("wasn't", 6), ('this.keySelector', 6), ('HashMap<K,', 6), ('o.onNext(3);', 6), ('interface\n', 6), ('await();\n', 6), ('SingletonArrayFunc', 6), ('parent.next();\n', 6), ('badRequest()', 6), ('sequences', 6), ('duplicates', 6), ('get()}', 6), ('Helpers.mapEntry(k1(),', 6), ('java.io.BufferedReader;\nimport', 6), ('MpscLinkedQueue<Object>();\n', 6), ('RuntimeException());\n', 6), ('Schedulers.io())\n', 6), ('this.itemTimeoutIndicator', 6), ('decode', 6), ('6);\n', 6), ('dispatcher', 6), ('(checkTerminated(d,', 6), ('3;\n\n', 6), ('.just(1)\n', 6), ('subscription.dispose();\n', 6), ('Functions.EMPTY_ACTION);\n\n', 6), ("shouldn't", 6), ('B>(this);\n\n', 6), ('values.get(0));\n', 6), ('"It', 5), ('docs', 5), ('observer.onSubscribe(d);\n\n', 5), ('org.mockito.invocation.InvocationOnMock;\nimport', 5), ('Subscriber[n];\n\n', 5), ('completed.', 5), ('Enums.stringConverter(TestEnum.class);\n', 5), ('class:\n', 5), ('.assertFailureAndMessage(NullPointerException.class,', 5), ('read-only', 5), ('this.backingMap', 5), ('ss.test();\n\n', 5), ('resources,', 5), ('you\n', 5), ('T[]', 5), ('List}', 5), ('com.iluwatar.abstractdocument;\n\nimport', 5), ('item,', 5), ('taken', 5), ('set}', 5), ('this.qs;\n', 5), ('(key', 5), ('parent\n', 5), ('SocketAddress', 5), ('qs.poll();\n', 5), ('blockingGet}', 5), ('ImmutableSetMultimap<K,', 5), ('w.schedule(task);\n', 5), ('io.reactivex.MaybeObserver;\nimport', 5), ('DisposableHelper.DISPOSED;\n\n', 5), ('accumulator;\n\n', 5), ('happened.\n', 5), ('testData', 5), ('cs.test();\n\n', 5), ('sourcesIterable;\n\n', 5), ('DisposableHelper.dispose(s);\n', 5), ('may\n', 5), ('missingClosingDD(e,', 5), ('Object(),', 5), ('npe;\n', 5), ('multimap\n', 5), ('(++calls', 5), ('reflection\n', 5), ('Schedulers.from(new', 5), ('java.util.Objects;\nimport', 5), ('observers.\n', 5), ('Flowable>()', 5), ('com.google.common.graph;\n\nimport', 5), ('SlotPair<T>', 5), ('fs.onError(new', 5), ('com.google.common.base.Predicate;\nimport', 5), ('assertTrue(errors.isEmpty());\n', 5), ('i}', 5), ('this.lock', 5), ('Set<N>', 5), ('getValue()', 5), ('(cancelled.get())', 5), ('middleError()', 5), ('submit(Callable<T>', 5), ('(observers.get()', 5), ('cached', 5), ('times,', 5), ('Static', 5), ('}).subscribe(to);\n\n', 5), ('Random();\n', 5), ('SequentialDisposable();\n\n', 5), ('Subscriber}s', 5), ('numInstances)', 5), ('negative\n', 5), ('put(K', 5), ('com.google.common.base.Preconditions.checkArgument;\nimport', 5), ('}));\n\n', 5), ('{\n//\n//', 5), ('UsingObserver<T,', 5), ('st', 5), ('#tryOnError(Throwable)}', 5), ('href="http://reactivex.io/documentation/operators/takeuntil.html">ReactiveX', 5), ('onRequest;\n', 5), ('subscribers.length;\n', 5), ('Flowable<Object>>()', 5), ('height="356"', 5), ('Helpers.assertContentsInOrder(list,', 5), ('errorOnFewer)', 5), ('RejectedExecutionException', 5), ('ticket', 5), ('state\n', 5), ('stripes)', 5), ('e.onError(null);\n', 5), ('java.nio.charset.Charset;\nimport', 5), ('frc.dispose();\n', 5), ('observable.subscribe(new', 5), ('"1000"', 5), ('to.assertNoValues();\n', 5), ('andThen}', 5), ('HashMap<>();\n\n', 5), ('customerResource.getAllCustomers();\n', 5), ('(!tryOnError(t))', 5), ('@MapFeature.Require(SUPPORTS_REMOVE)\n', 5), ('header', 5), ('tryOnError(Throwable', 5), ('getSinkContents()', 5), ('Subscriber.\n', 5), ('comparator;\n\n', 5), ('checkNotNull(function);\n', 5), ('ts.request(2);\n\n', 5), ('SimpleDateFormat', 5), ('DisposableHelper.DISPOSED))', 5), ('ObjectHelper.requireNonNull(onNext,', 5), ('delayError))', 5), ('onCompleteSupplier)', 5), ('(!p.matcher(m.javadoc).find())', 5), ('Observer.\n', 5), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/takeUntil.png"', 5), ('Environment', 5), ('setDisposable(@Nullable', 5), ('ID', 5), ('characters', 5), ('implied;\n\n', 5), ('pp1.onError(ex1);\n', 5), ('equality', 5), ('cases.', 5), ('Thread(r,', 5), ('name;\n\n', 5), ('SingleSubject.create();\n', 5), ('reporting', 5), ('this.future', 5), ('.sorted(Functions.<Integer>naturalComparator())\n', 5), ('again.\n', 5), ('assembled', 5), ('trying', 5), ('reported', 5), ('.scan(new', 5), ('.append(".java:").append(m.javadocLine', 5), ('f.listFiles();\n', 5), ('provided,', 5), ('Fruit', 5), ('EmptyDisposable.complete(s);\n', 5), ('setCancellable(@Nullable', 5), ('MergerBiFunction<Integer>', 5), ('call[1]++;\n', 5), ('file;\n', 5), ('ConditionalSubscriber<?', 5), ('Flowable\n', 5), ('distinctElements)', 5), ('directExecutor());\n', 5), ('ex.getCause();\n', 5), ('File("/home/build/outer.jar"),', 5), ('outputFused;\n\n', 5), ('appender.getLogSize());\n\n', 5), ('but\n', 5), ('TestObservable', 5), ('Single.just(1))\n', 5), ('drop', 5), ('accept(final', 5), ('contains(Object', 5), ('executor;\n\n', 5), ('poll();\n', 5), ('a(n)', 5), ('string\n', 5), ('Completable.fromRunnable(new', 5), ('Delay</a>\n', 5), ('k1,', 5), ('t.printStackTrace();\n', 5), ('parents', 5), ('source.subscribe(parents);\n', 5), ('Writer("Writer', 5), ('Long.MAX_VALUE;\n\n', 5), ('LeftRightEndObserver', 5), ('BasicIntQueueSubscription<T>', 5), ('(SubscriptionHelper.setOnce(this,', 5), ('"a");\n', 5), ('io.reactivex.annotations;\n\nimport', 5), ('getAndIncrement();\n\n', 5), ('\'/\').replace("src/main/java",', 5), ('disposeAll();\n\n', 5), ('version.', 5), ('java.util.Optional}', 5), ('(!delayErrors', 5), ('optional)', 5), ('safely', 5), ('sensitive', 5), ('backpressureMentionedWithoutAnnotation(e,', 5), ('ts.assertFailure(TestException.class,', 5), ('this.errorSupplier', 5), ('assertThat(ClassPath.Scanner.getClassPathEntries(new', 5), ('java.util.OptionalLong;\nimport', 5), ('cases,', 5), ('replaced', 5), ('scheduler.scheduleDirect(this);\n', 5), ('ts.assertTerminated();\n', 5), ('AsyncDisposable<T>[]', 5), ('next,', 5), ('ms.subscribe(inner);\n', 5), ('source.single(-99).takeUntil(pp)\n', 5), ('e.onNext(3);\n', 5), ('k);\n', 5), ('DisposableHelper.dispose(upstream);\n\n', 5), ('Observer<Object>,', 5), ('tryOnError(@NonNull', 5), ('len', 5), ('Flowable.<Movie>', 5), ('assertTrue(tc.isDisposed());\n\n', 5), ('recursive', 5), ('Observable.<Movie>', 5), ('complete,', 5), ('stream.reduce((a,', 5), ('isTerminated()', 5), ('classLoader', 5), ('date:', 5), ('Emitter<T>', 5), ('IllegalArgumentException("Sequence', 5), ('ac', 5), ('optional.isPresent()', 5), ('.timeout(100,', 5), ('#setCancellable(Cancellable)}\n', 5), ('(field.compareAndSet(current,', 5), ('(!validate(subscribers))', 5), ('System.out.println("testStartIdempotence', 5), ('close()}', 5), ('mergeDelayError(Publisher<?', 5), ('n));\n', 5), ('case,', 5), ('SampleElements<E>', 5), ('delivered.\n', 5), ('2.0.6', 5), ('this.active', 5), ('a.dispose();\n', 5), ('compile', 5), ('Take', 5), ('scheduler.now(unit);\n', 5), ('boundary,', 5), ('assertNull(rmo.value);\n', 5), ('Integer.MAX_VALUE', 5), ('subscriber.onSubscribe(d1);\n\n', 5), ('fail(Throwable', 5), ('OnErrorNotImplementedException}\n', 5), ('ex))', 5), ('concat(\n', 5), ('waiting\n', 5), ('io.reactivex.schedulers.*;\n\npublic', 5), ('q.isEmpty();\n\n', 5), ('After', 5), ('times)', 5), ('cancelAndClear();\n', 5), ('It\n', 5), ('(and', 5), ('scheduler.scheduleDirect(this));\n', 5), ("It's", 5), ('"8",', 5), ('io.reactivex.functions.Cancellable;\n\n/**\n', 5), ('discussion', 5), ('deltas[keyIndex]', 5), ('returns\n', 5), ('picks', 5), ('disposables.dispose();\n', 5), ('apply(Observable', 5), ('counter[0]++;\n//', 5), ('(Flowable.java:").append(m.javadocLine', 5), ('assertTrue(task.isDisposed());\n', 5), ('mark', 5), ('(UnicastSubject<T>', 5), ('ObjectHelper.requireNonNull(it.next(),', 5), ('java.util.SortedSet;\n\n/**\n', 5), ('bit', 5), ('Server("localhost",', 5), ('elements;\n', 5), ('this.crashOnNext', 5), ('TestException()),\n', 5), ('SinglePostCompleteSubscriber<T,', 5), ('LotteryNumbers.create(\n', 5), ('sourceSupplier;\n', 5), ('lock.lock();\n', 5), ('inner.queue;\n', 5), ('Consumer<String>()', 5), ('executeService.shutdown();\n', 5), ('setCancellable(Cancellable', 5), ('ForEachWhileSubscriber<Integer>(new', 5), ('t4,', 5), ('java.util.concurrent.BlockingQueue;\nimport', 5), ('calls++;\n', 5), ('this.resourceSupplier', 5), ('Schedulers.trampoline().createWorker();\n', 5), ('FlowableProcessor<T>', 5), ('com.google.gwt.user.client.rpc.core.java.util.Map_CustomFieldSerializerBase;\nimport', 5), ('(SchedulerRunnableIntrospection)', 5), ('Maybe<T>()', 5), ('state,', 5), ('(parent.isDisposed())', 5), ('DisposableSubscriber<B>', 5), ('#tryOnError(Throwable)}.\n', 5), ('ConcurrentMap<K,', 5), ('#setDisposable(Disposable)}', 5), ('<em>Important', 5), ('emulation', 5), ('java.util.TreeSet;\nimport', 5), ('potions.put(type,', 5), ('potion);\n', 5), ('java.nio.file.Path', 5), ('created\n', 5), ('ClassCastException', 5), ('<p>Usage', 5), ('Unparseable', 5), ('i.e.', 5), ('#autoConnect(int,', 5), ('HashSet<>();\n\n', 5), ('java.text.ParseException:', 5), ('optional},', 5), ('directories', 5), ('InnerObserver<T,', 5), ('repeats', 5), ('made', 5), ('ws', 5), ('right)', 5), ('ResumeSingleObserver<T>(this,', 5), ('students', 5), ('java.util.concurrent.ConcurrentMap;\nimport', 5), ('BackpressureOverflowStrategy', 5), ('resultSelector)', 5), ('discovering', 5), ('lift)', 5), ('anyway.\n', 5), ('.parallel(2)\n', 5), ('Promise<T>', 5), ('s)\n', 5), ('12/12/15', 5), ('f.onNext(1);\n', 5), ('specified.\n', 5), ('array;\n', 5), ('FileFactory', 5), ('rail', 5), ('cold', 5), ('updating', 5), ('.unsubscribeOn(scheduler)\n', 5), ('mapper}', 5), ('this.callable', 5), ('fo.onComplete();\n', 5), ('(requested.get()', 5), ('behavior.', 5), ('fromFuture}', 5), ('BiFunction<List<Integer>,', 5), ('s.onSubscribe(bs);\n', 5), ('path.', 5), ('license', 5), ('Functions.EMPTY_ACTION', 5), ('CrashDummy(true,', 5), ('Reduces', 5), ('Consumer<Object>', 5), ('io.reactivex.internal.subscriptions.SubscriptionHelper;\n\n/**\n', 5), ('Single.using(Functions.justCallable(1),', 5), ('#addListener}', 5), ('java.util.logging.Level;\nimport', 5), ('flush();\n', 5), ('fail.\n', 5), ('purge', 5), ('order.', 5), ('available.\n', 5), ('SubscriptionHelper.CANCELLED;\n\n', 5), ('DefaultObserver<Integer>()', 5), ('LotteryTicketId(),', 5), ('1024;\n', 5), ('java.io.Writer;\nimport', 5), ('Bauer\n', 5), ('java.util.OptionalDouble;\nimport', 5), ('TestObserver<Long>();\n\n', 5), ('ignored', 5), ('ScheduledDirectTask', 5), ('terminated.\n', 5), ('candidate', 5), ('cs.onError(ex);\n', 5), ('t1;\n', 5), ('subscriber.onSubscribe(d2);\n\n', 5), ('times(1)).onComplete();\n\n', 5), ('mapper))', 5), ('#onSuccess(Object)}', 5), ('io.reactivex.exceptions.OnErrorNotImplementedException', 5), ('AtomicReferenceArray<Object>', 5), ('ObservableSource<String>()', 5), ('Student', 5), ('java.util.concurrent.ConcurrentLinkedQueue;\nimport', 5), ('f1', 5), ('Kluever\n', 5), ('stream.isParallel();\n', 5), ('missing', 5), ("File(parent.getAbsolutePath().replace('\\\\',", 5), ('java.lang.ref.WeakReference;\nimport', 5), ('s2)', 5), ('8);\n', 5), ('Attempts', 5), ('e.tryOnError(new', 5), ('ConditionalSubscriber<T>,', 5), ('(C', 5), ('Observer<U>', 5), ('Subject<T>', 5), ('safeguard', 5), ('getInstance()', 5), ('really', 5), ('mapper);\n', 5), ('keeps', 5), ('monadic', 5), ('io.reactivex.processors.UnicastProcessor;\nimport', 5), ('name.\n', 5), ('Single.just(4),', 5), ('expires.\n', 5), ('TestEnum>', 5), ('ThreadFactory,', 5), ('err.initCause(list.get(index));\n', 5), ('responsibility', 5), ('java.util.Date;\nimport', 5), ('Mocks', 5), ('Item(ItemType.POTION,', 5), ('CollectionSize', 5), ('types\n', 5), ('io.reactivex.internal.disposables.*;\n\npublic', 5), ('leaving', 5), ('details', 5), ('DefaultObserver<Long>()', 5), ('<O>', 5), ('MissingBackpressureException', 5), ('Map_CustomFieldSerializerBase.serialize(writer,', 5), ('target\n', 5), ('general', 5), ('source();\n}\n', 5), ('Observable.range(10,', 5), ('call\n', 5), ('to.assertError(new', 5), ('executor)\n', 5), ('t.onSubscribe(d);\n', 5), ('address.\n', 5), ('emit()', 5), ('TestException("inner"));\n\n', 5), ('testScheduler', 5), ('Exception;\n}\n\n', 5), ('accessing', 5), ('mergeWith}', 5), ('ObjectHelper.requireNonNull(initialSupplier.call(),', 5), ('onErrorMapper,\n', 5), ('up\n', 5), ('"Disposer");\n', 5), ('QueueDisposable.NONE)', 5), ('Predicate,', 5), ('MergerBiFunction<Integer>(new', 5), ('iterator();\n', 5), ('source4);\n', 5), ('tenant.\n', 5), ('apply(List<Integer>', 5), ('fo.onComplete();\n\n', 5), ('observers[i].dispose();\n', 5), ('source2)', 5), ('count}', 5), ('sourceSupplier,\n', 5), ('assertTrue(rmo.isDisposed());\n\n', 5), ('Validator#validate(Function,', 5), ('enumClass)', 5), ('ci', 5), ('Abstract', 5), ('Observer<Object>()', 5), ('(parent', 5), ('LeftRightEndSubscriber', 5), ('n);\n\n', 5), ('AsyncSubscription<T>[]', 5), ('callable()', 5), ('subscribe(SingleObserver<?', 5), ('Kurt', 5), ('order,', 5), ('merge(Publisher<?', 5), ('SetMultimap<K,', 5), ('ListenableFuture<V>', 5), ('operations,', 5), ('null"),\n', 5), ('PatternCompiler', 5), ('min', 5), ('ConnectableFlowable}', 5), ('https://github.com/google/guava/issues/2152\n', 5), ('JVM', 5), ('this.initialSupplier', 5), ('ObservableSource<?>', 5), ('map(Function<?', 5), ('cancelSources();\n', 5), ('"class', 5), ('io.reactivex.internal.subscriptions.SubscriptionArbiter;\n\npublic', 5), ('executeService', 5), ('all));\n\n', 5), ('Function<Flowable,', 5), ('mappings', 5), ('java.io.ObjectOutputStream\n', 5), ('happen\n', 5), ('listener', 5), ('Writes', 5), ('released', 5), ('data;\n', 5), ('performing', 5), ('performs', 5), ('lock.unlock();\n', 5), ('java.util.concurrent.atomic.AtomicReference;\nimport', 5), ('stopping', 5), ('++id));\n', 5), ('chest', 5), ('serial;\n', 5), ('this.windows', 5), ('calls;\n\n', 5), ('reports\n', 5), ('ClassPath.DefaultScanner', 5), ('")";\n', 5), ('assertEquals(true,', 5), ('action,', 5), ('java.io.FileInputStream;\nimport', 5), ('Helper', 5), ('d1.isCancelled();\n', 5), ('onErrorNull()', 5), ('jdx;\n', 5), ('defaultItem)', 5), ('Alfred', 5), ('objects.\n', 5), ('possibility', 5), ('child.onError(e);\n', 5), ('(qs', 5), ('Entry<Class<?', 5), ('collection.\n', 5), ('about\n', 5), ('next;\n\n', 5), ('fail(e);\n', 5), ('ClassPath.DefaultScanner();\n', 5), ('receives\n', 5), ('Single.just(1);\n', 5), ('members', 5), ('list.get(index));\n', 5), ('Queue<Object>', 5), ('ready.decrementAndGet();\n', 5), ('charset,', 5), ('AtomicReference<Thread>();\n', 5), ('org.junit.Assert.assertTrue;\n\npublic', 5), ('PublishSubscription<T>[]', 5), ('.mergeWith(Maybe.error(new', 5), ('factory.tearDown();\n', 5), ('Flowable<U>', 5), ('maxConcurrency));\n', 5), ('immediate', 5), ('begin', 5), ('tail', 5), ('io.reactivex.subscribers.SerializedSubscriber;\n\npublic', 5), ('cancelAll()', 5), ('assertSame(o,', 5), ('source3);\n', 5), ('fail("expected', 5), ('FlowableSubscriber<Object>()', 5), ('<Downstream>', 5), ('dispose.\n', 5), ('assertFalse(list.isEmpty());\n\n', 5), ('pp.concatMapCompletable(\n', 5), ('e.onNext(4);\n', 5), ('Consumer<T>}', 5), ('non-cancelled', 5), ('an",', 5), ('sample', 5), ('f.cancel(true);\n', 5), ('alternate', 5), ('Readable', 5), ('Start', 5), ('checkNotNull(factory);\n', 5), ('t.onError(e);\n', 5), ('Blocks', 5), ('Burst.items(1,', 5), ('io.reactivex.internal.functions.*;\nimport', 5), ('succeed', 5), ('Schedulers.single();\n\n', 5), ('rawType,', 5), ('holding', 5), ('whereas', 5), ('lastMethodCalled', 5), ("RxJava's", 5), ('structure', 5), ('sa.drainLoop();\n\n', 5), ('href="http://reactivex.io/documentation/operators/delay.html">ReactiveX', 5), ('response[0]', 5), ('rso.start);\n', 5), ('d2.isCancelled();\n', 5), ('Single.using(Functions.justCallable(d),', 5), ('Set<Integer>', 5), ('SpscLinkedArrayQueue<GroupedFlowable<K,', 5), ('entities', 5), ('createSink()', 5), ('.isEqualTo(new', 5), ('StreamSupport.stream(new', 5), ('leaves', 5), ('composing', 5), ('Collection<E>', 5), ('"three",', 5), ('completed,', 5), ('.assertFailure(TimeoutException.class);\n', 5), ('testEmpty()', 5), ('node)', 5), ('Single<U>', 5), ('TODO:', 5), ('restrictions.\n', 5), ('to.assertFailure(CancellationException.class);\n', 5), ('List<V>', 5), ('never()).onNext(any());\n', 5), ('(QueueDisposable<T>)', 5), ('java.util.concurrent.ConcurrentHashMap;\nimport', 5), ('assertEquals(100,', 5), ('*/\n@Beta\n@GwtCompatible\npublic', 5), ('qs.isEmpty();\n', 5), ('single.toFlowable().subscribe(subscriber);\n\n', 5), ('dangerous', 5), ('merger', 5), ('qs.clear();\n', 5), ('.switchMapCompletable(new', 5), ('offset', 5), ('LotteryTicket(new', 5), ('assertTrue(m.getClass().toString(),', 5), ('dispatch', 5), ('List<Integer>>()', 5), ('TakeUntil</a>\n', 5), ('remote', 5), ('SingleSource}s\n', 5), ('cancellation-safe', 5), ('warnings', 5), ('TypeVariable', 5), ('why', 5), ('(RxMethod', 5), ('.append("Observable', 5), ('#onError(Throwable)},\n', 5), ('upstream)', 5), ('(q)', 5), ('AsyncResult<T>', 5), ('doing', 5), ('number\n', 5), ('heavyweight\n', 5), ('Schedulers.single().scheduleDirect(new', 5), ('assertNull(q.poll());\n', 5), ('operations.\n', 5), ('(Thread', 5), ('filter(Predicate<?', 5), ('dispose\n', 5), ('TreeMultimap}', 5), ('com.iluwatar.reactor.framework;\n\nimport', 5), ('cancellable', 5), ('extract', 5), ('Promise', 5), ('get().request(p);\n', 5), ('components).', 5), ('SingleOnSubscribe<Integer>()', 5), ('java.util.OptionalInt;\nimport', 5), ('Single.just(2))\n', 5), ('io.reactivex.annotations.NonNull;\n\n/**\n', 5), ('Read', 5), ('Schedulers.trampoline())\n', 5), ('hasObservers()', 5), ('java.math.BigInteger;\nimport', 5), ('tc.values.get(0).intValue());\n', 5), ('State<T,', 5), ('boolean[]', 5), ('R}.\n', 5), ('(!queue.offer(t))', 5), ('ce.getExceptions();\n', 5), ('q.offer(value);\n', 5), ('#source()}', 5), ('subscribe(s);\n', 5), ('2.1.1', 5), ('.append("Flowable', 5), ('inventory', 5), ('does\n', 5), ('queue.', 5), ('OnErrorFailedSubscriber());\n', 5), ('Abstraction', 5), ('ScheduledDirectPeriodicTask', 5), ('composer', 5), ('contents)', 5), ('.mergeWith(Single.error(new', 5), ('pushing\n', 5), ("there's", 5), ('resourceSupplier.call();\n', 5), ('Object>>', 5), ('referenced', 5), ('SortedSet},', 5), ('TestHelper.mockSingleObserver();\n\n', 5), ('"n', 5), ('j++;\n', 5), ('first.\n', 5), ('(m.javadoc', 5), ('show', 5), ('checking', 5), ('LinkedHashMap<>();\n', 5), ('yield', 5), ('Event}', 5), ('word,', 5), ('schedule(Runnable', 5), ('classes,', 5), ('SequentialExecutor', 5), ('source.subscribe(this);\n', 5), ('HalfSerializer.onNext(actual,', 5), ('callable\n', 5), ('periodically', 5), ('is:', 5), ('subscribe(SingleEmitter<Integer>', 5), ('this.generator', 5), ('IllegalArgumentException("original', 5), ('IllegalStateException}', 5), ('Stream<R>', 5), ('note:</em>', 5), ('sd,', 5), ('(error.addThrowable(e))', 5), ('set.size());\n', 5), ('true)\nfinal', 5), ('com.iluwatar.reader.writer.lock;\n\nimport', 5), ('qd.requestFusion(QueueDisposable.ANY);\n', 5), ('iterable.iterator();\n', 5), ('Sed', 5), ('CustomerResource', 5), ('outputFused', 5), ('com.iluwatar.execute.around;\n\nimport', 5), ('ObjectHelper.requireNonNull(errorSupplier.call(),', 5), ('.assertFailure(MissingBackpressureException.class);\n', 5), ('dirs.offer(new', 5), ('ignoring', 5), ('crashOnNext;\n', 5), ('readObject(ObjectInputStream', 5), ('pp2.onError(ex2);\n', 5), ('EmptySubscription.complete(s);\n', 5), ('NumberCrunchingTask(),', 5), ('java.util.logging.Logger;\nimport', 5), ('V>)', 5), ('Long,', 5), ('insertionOrder;\n', 5), ('fileName', 5), ('handler\n', 5), ('.assertFailure(CompositeException.class)\n', 5), ('assertFalse(((Disposable)observer).isDisposed());\n\n', 5), ('List<Feature<?>>', 5), ('getCount()', 5), ('regardless', 5), ('a",', 5), ('verify(observer).onComplete();\n', 5), ('concrete', 5), ('CakeTopping', 5), ('issues.\n', 5), ('io.reactivex.SingleSource;\nimport', 5), ('test.', 5), ('process', 5), ('result[1]', 5), ('com.google.common.base.Function;\nimport', 5), ('times(1)).onNext(1);\n', 5), ('["', 5), ('spliterator\n', 5), ('#get},', 5), ('onAfterTerminate));\n', 5), ('element!"));\n', 5), ('toObservable()', 5), ('error.addThrowable(ex);\n', 5), ('Therefore,', 5), ('CollectionFeature.GENERAL_PURPOSE,', 5), ('exception.', 5), ('Observable<List<Integer>>', 5), ('parent.onComplete();\n', 5), ("we're", 5), ('SimpleQueueWithConsumerIndex<Object>', 5), ('cancelled)', 5), ('Single},', 5), ('testEquals()', 5), ('unsubscribed', 5), ('O', 5), ('Maybe}.\n', 5), ('Single.just(1),\n', 5), ('CopyOnWriteArrayList<Throwable>();\n', 5), ('Flowable.fromIterable(iterate(elements)),\n', 5), ('Map_CustomFieldSerializerBase.deserialize(reader,', 5), ('IllegalArgumentException");\n', 5), ('@Mock\n', 5), ('*/', 5), ('Optional<Integer>', 5), ('o.reduce(new', 5), ('this.disposables', 5), ('PlayerDetails', 5), ('posted', 5), ('DISPOSED', 5), ('assertFalse(response[0]);\n\n', 5), ('(PublishSubscription<T>', 5), ('usedInGenericType(Type', 5), ('Optional<?', 5), ('RxJavaPlugins.setOnFlowableSubscribe(new', 5), ('subscription.cancel();\n', 5), ('six', 5), ('CustomerDao', 5), ('subscribe()', 5), ('pairs', 5), ('e.execute(intCounter);\n', 5), ('io.reactivex.disposables.CompositeDisposable;\nimport', 5), ('rootLocaleFormat("%s', 5), ('(Observable.java:").append(m.javadocLine', 5), ('values.add(value);\n', 5), ('left,', 5), ('p)', 5), ('defaultItem;\n\n', 5), ('(iteratorNotification', 5), ('TestException("Outer"))\n', 5), ('ParallelFlowable<List<T>>', 5), ('flatMap', 5), ('immediately.', 5), ('Schedulers.from(exec);\n', 5), ('item.', 5), ('of()', 5), ('necessarily', 5), ('unsubscribed.set(true);\n', 5), ('code.\n', 5), ('FileLoggerModule', 5), ('requested.get();\n\n', 5), ('errors.add(e);\n', 5), ('present;', 5), ('<Upstream>', 5), ('Doug', 5), ('TimeUnit.DAYS));\n', 5), ('"value', 5), ('temp', 5), ('SerializedObserver<T>', 5), ('Once', 5), ('explained', 5), ('Promise<Integer>', 5), ('succeeds.\n', 5), ('comment', 5), ('gets\n', 5), ('java.util},', 5), ('error(s)', 5), ('com.google.common.collect.Multiset;\nimport', 5), ('SortedSet}', 5), ('AbstractSpliterator<R>(\n', 5), ('source.single(-99).takeUntil(pp.ignoreElements())\n', 5), ('c);\n\n', 5), ('Iterable.', 5), ('world', 5), ('1));\n\n', 5), ('null),', 5), ('#computation()}', 5), ('eager));\n', 5), ('MAX_VALUE,', 5), ('output\n', 5), ('ImmutableList<Type>', 5), ('2");\n', 5), ('bufferSize,\n', 5), ('lorem', 5), ('(i.e.,', 5), ('answer(InvocationOnMock', 5), ('variable', 5), ('RxJavaPlugins.onError}', 5), ('Pattern.compile("@see\\\\s+#[A-Za-z0-9', 5), ('triggers', 5), ('NullPointerException.class);\n', 5), ('through.\n', 5), ('rco.start);\n', 5), ('that.\n', 5), ('Maybe.mergeDelayError(\n', 5), ('Integer.MAX_VALUE);\n', 5), ('.assertError(TestException.class);\n', 5), ('servers.add(new', 5), ('nec', 5), ('values;\n', 5), ('call[1]);\n', 5), ('defaultItem;\n', 5), ('Facade<Integer>', 5), ('Observable<U>', 5), ('Schedulers.io().createWorker();\n', 5), ('keys)', 5), ('subscriber.onComplete();\n', 5), ('it.', 5), ('null)\n', 5), ('fs.onNext(1);\n', 5), ('fakePool.runAll();\n\n', 5), ('SortedSetMultimap}', 5), ('CollectionFeature.GENERAL_PURPOSE,\n', 5), ('Observable,', 5), ('tc.onSubscribe(Disposables.empty());\n\n', 5), ('"https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap">', 5), ('associating\n', 5), ('TimeoutFallbackObserver<T>', 5), ('io.reactivex.internal.fuseable.ConditionalSubscriber;\nimport', 5), ('assertSame(all,', 5), ('Jdk7FileFactory', 5), ('ArrayCompositeDisposable', 5), ('this.observers;\n', 5), ('stores', 5), ('FuseToObservable<T>', 5), ('Downstream>', 5), ('cleanup', 5), ('s.onSubscribe(d);\n', 5), ('TestObserver<Long>();\n', 5), ('java.io.InputStreamReader;\nimport', 5), ('TestHelper.checkBadSourceFlowable(new', 5), ('(ready.get()', 5), ('rest', 5), ('crashOnNext;\n\n', 5), ('scheduler.now(unit);\n\n', 5), ('read\n', 5), ('documentation.', 5), ('route', 5), ('<p>As', 5), ('DisposableObserver<B>', 5), ('"Callable', 5), ('FutureTask<Object>(Functions.EMPTY_RUNNABLE,', 5), ('assertThat(ClassPath.toFile(new', 5), ('"Potion', 5), ('Constructor', 5), ('dragonSlayer.goToBattle();\n', 5), ('iterator.next());\n', 5), ('analogue', 5), ('observer);\n\n', 5), ('CharSink', 5), ('key);\n', 5), ('fs.onComplete();\n', 5), ('#create()}', 5), ('assertEquals("b",', 5), ('Observable.<Integer>create(new', 5), ('(fromIterator.hasNext())', 5), ('B>>', 5), ('readResolve()', 5), ('com.google.common.collect.Ordering;\nimport', 5), ('this.sd', 5), ('file}\n', 5), ('buffers;\n\n', 5), ('Subject.\n', 5), ('N>)', 5), ('TestStringSortedSetGenerator()', 5), ('element)', 5), ('this.qs', 5), ('beta\n', 5), ('{\n\n}\n', 5), ('(QueueSubscription<T>)s;\n', 5), ('timed', 5), ('i++;\n', 5), ('(in', 5), ('frequency', 5), ('delay}\n', 5), ('source.parallelism();\n', 5), ('(sd.isDisposed())', 5), ('eget', 5), ('2.1', 5), ('safe.onError(new', 5), ('newValue)', 5), ('operator)', 5), ('concatenates', 5), ('InnerSubscriber<T,', 5), ('ForEachWhileSubscriber<Integer>', 5), ('go', 5), ('com.google.common.truth.Truth.assertThat;\nimport', 5), ('feature', 5), ('await', 5), ('Iterator}', 5), ('row,', 5), ('r.set(n);\n', 5), ('runnable;\n', 5), ('terminated,', 5), ('calls;\n', 5), ('onAfterTerminate();\n', 5), ('qs.requestFusion(mode);\n', 5), ('(Spliterator.ORDERED', 5), ('FluentFuture<V>', 5), ('assertFalse(d1.isDisposed());\n\n', 5), ('plain', 5), ('times(1)).onNext(null);\n', 5), ('io.reactivex.disposables.CompositeDisposable}\n', 5), ('Multimap}</a>.\n', 5), ('defined.\n', 5), ('(NoSuchMethodException', 5), ('ImmutableList.of(),', 5), ('accept(String', 5), ('completion\n', 5), ('writing.', 5), ('publishers', 5), ('Callable<String>', 5), ('connection;\n', 5), ('observers\n', 5), ('getConnection();\n', 5), ('to.assertResult();\n\n', 5), ('@serialData', 5), ('helps', 5), ('.subscribeOn(scheduler)\n', 5), ('registration', 5), ('shutdown",', 5), ('prefix,', 5), ('ObjectHelper.requireNonNull(callable.call(),', 5), ('DelayedRunnable', 5), ('System.getProperty()}):</strong>\n', 5), ('Collection<Object>', 5), ('unsubscribeThread', 5), ('Not', 5), ('deal', 5), ("Thread's", 5), ('subscriber.assertNoValues();\n', 5), ('executor,', 5), ('.take(10)\n', 5), ('requests);\n', 4), ('T9,', 4), ('Processor}', 4), ('System.out.println("completed");\n', 4), ('org.reactivestreams.Subscription;\n\n/**\n', 4), ('java.nio.DoubleBuffer;\nimport', 4), ('deltas', 4), ('assertFalse(future.isCancelled());\n\n', 4), ('"\\r");\n', 4), ('m.javadoc.indexOf("Publisher",', 4), ('PotionFactory', 4), ('debounceSelector;\n\n', 4), ('fo', 4), ('MinimalSet<E>', 4), ('ninth', 4), ('Future.get()', 4), ('Closer.create();\n', 4), ('"run', 4), ('assertTrue(e4', 4), ('(fusion).\n', 4), ('onErrorReturn}', 4), (';', 4), ('#removeAll},', 4), ('System.out.print("', 4), ('Long.MIN_VALUE;\n', 4), ('com.google.common.collect.Range;\nimport', 4), ('<li>', 4), ('this.resource', 4), ('ResultSet', 4), ('Cake', 4), ('splitr,', 4), ('signature:', 4), ('subscribers.', 4), ('AsyncSubject<T>', 4), ('this.disposeState', 4), ('returned.\n', 4), ('AtomicBoolean\n', 4), ('simultaneous', 4), ('height="373"', 4), ('CompositeException);\n', 4), ('<p>Operators', 4), ('io.reactivex.Scheduler}', 4), ('Single.using(Functions.justCallable(Disposables.empty()),', 4), ('Iterator<Entry<K,', 4), ('tryOnError()', 4), ('offer(t);\n', 4), ('RuntimeException("Barf!");\n', 4), ('result.subscribe(singleObserver);\n\n', 4), ('assertTrue(values.get(0)', 4), ('exceptionType,', 4), ('AtomicReferenceArray}', 4), ('p.subscribe(this);\n', 4), ('call,', 4), ('bufferSupplier,\n', 4), ('customScheduler', 4), ('System.out.println("subscribeThread.get():', 4), ('leftEnd,\n', 4), ('this.requested;\n', 4), ('invoked.\n', 4), ('O(n),', 4), ('inner.request(1);\n', 4), ('TreeMultimap<K,', 4), ('com.google.common.collect.ListMultimap;\nimport', 4), ('Function<Integer[],', 4), ('Flowable<Integer>>()', 4), ('Single<Object>>()', 4), ('EqualsTester().addEqualityGroup(expected,', 4), ('test;\n', 4), ('filtered', 4), ('-1),', 4), ('pp.onNext(3);\n', 4), ('buffered', 4), ('successful\n', 4), ('itemTimeoutIndicator', 4), ('Flowable.range(10,', 4), ('Spellbook', 4), ('times(1)).onNext(2);\n', 4), ('ExecutorService}', 4), ('five', 4), ('observables.\n', 4), ('description', 4), ('-99");\n', 4), ('DateFormatRunnalbe\n', 4), ('bimap', 4), ('o);\n', 4), ('Flowable.fromPublisher(new', 4), ('s.scheduleDirect(Functions.EMPTY_RUNNABLE);\n\n', 4), ('UncaughtExceptionHandler()', 4), ("doesn't\n", 4), ('observerLatch', 4), ('resourceDisposer,', 4), ('subscribers.get().length', 4), ('index;', 4), ('impossible)', 4), ('actual.onSubscribe(EmptySubscription.INSTANCE);\n', 4), ('this.emitted', 4), ('(ExceptionHelper.addThrowable(error,', 4), ('cancelOthers', 4), ('pushed\n', 4), ('2000)\n', 4), ('Runnable}', 4), ('current,', 4), ('onDisposed(@NonNull', 4), ('previous\n', 4), ('errors.add(e);\n\n', 4), ('.take(5)\n', 4), ('amount,', 4), ('Gopinath', 4), ('timeIntervalDefault()', 4), ('(dq)', 4), ('source.timestamp(scheduler);\n', 4), ('second.clear();\n', 4), ('ex.getCause(),', 4), ('t1.onSubscribe(subscription);\n', 4), ('InnerObserver());\n', 4), ('{@linkplain\n', 4), ('entries);\n\n', 4), ('order(List<E>', 4), ('CompletableSubscriber', 4), ('serializable', 4), ('cs.onSuccess(3);\n\n', 4), ('java.io.StringWriter;\nimport', 4), ('look', 4), ('(initialBytes', 4), ('present,', 4), ('fallback,', 4), ('.doAfterTerminate(afterTerminate)\n', 4), ('1:', 4), ('inner.setDone();\n', 4), ('parent.startTimeout(0L);\n', 4), ('Closer', 4), ('ex),', 4), ('ObservableSource<TLeftEnd>>', 4), ('Object\n', 4), ('onSuccess.\n', 4), ('Restoring', 4), ('(executor', 4), ('delay;\n\n', 4), ('task.get();\n', 4), ('request)', 4), ('run.setFuture(ft);\n', 4), ('super.close();\n', 4), ('assertFalse(ss.hasValue());\n', 4), ('collector.accept(u,', 4), ('CollectSubscriber<T,', 4), ('flatMap(\n', 4), ('UnsupportedOperationException("Read', 4), ('ObjectHelper.requireNonNull(zipper.apply(new', 4), ('#onSubscribe(Disposable)}', 4), ('{},', 4), ('giving', 4), ('.blockingForEach(new', 4), ('w.dispose();\n\n', 4), ('onNextSlowPath()', 4), ('words', 4), ('delays\n', 4), ('emit(long', 4), ('(index', 4), ('AtomicReference}', 4), ('Delay', 4), ('<p>Implementation', 4), ('#doFinally(Action)\n', 4), ('customerResource', 4), ('ExceptionHelper.terminate(error);\n\n', 4), ('get(index);\n', 4), ('IOException("Unable', 4), ('OtherSubscriber<T,', 4), ('MaybeSource<R>>', 4), ('io.reactivex.internal.fuseable.QueueFuseable;\nimport', 4), ('ParallelFailureHandling.SKIP)\n', 4), ('Notification<T>>', 4), ('debouncer.get();\n', 4), ('fulfilled,\n', 4), ('"")\n', 4), ('cdl1', 4), ('#connect(Consumer)}.', 4), ('isLeft,', 4), ('s.scheduleDirect(Functions.EMPTY_RUNNABLE,', 4), ('this.holder', 4), ('sb.append(v);\n', 4), ('SpscLinkedArrayQueue<C>', 4), ('pp.onError(ex);\n', 4), ('javadocStartNext', 4), ('mainDone;\n\n', 4), ('beforeCancelSleep(ts);\n\n', 4), ('assertEquals(ImmutableList.of(),', 4), ('.assertError(CompositeException.class)\n', 4), ('newArrayList();\n', 4), ('ObjectHelper.requireNonNull(source8,', 4), ('nextIndex)', 4), ('GuardedQueue', 4), ('AtomicLong(1);\n\n', 4), ('problem', 4), ('BaseTck<List<Long>>', 4), ('Disposable}s,', 4), ('custom\n', 4), ('comparator,', 4), ('ChannelHandler', 4), ('PublishDisposable<T>[]', 4), ('unload', 4), ('Object[]{WeatherType.SUNNY,', 4), ('result.length;', 4), ('errorOnFewer;\n', 4), ('scheduleWithFixedDelay(\n', 4), ('smallest', 4), ('threads.', 4), ('visible', 4), ('java.nio.channels.SelectionKey;\nimport', 4), ('node);\n', 4), ('Timeout</a>\n', 4), ('11.0\n', 4), ('consider\n', 4), ('O(log', 4), ('parent.otherSuccess(t);\n', 4), ('SingleSubject<T>', 4), ('onSuccess(Integer', 4), ('(sb.length()', 4), ('startProcess(Callable<T>', 4), ('"You', 4), ('suppressing', 4), ('Report', 4), ('reloadCount.get());\n', 4), ('comparator;\n', 4), ('assertTrue(css[1].hasObservers());\n\n', 4), ('as.onComplete();\n', 4), ('scheduler-returning', 4), ('Multimap<String,', 4), ('source.single(-99).takeUntil(pp.single(-99))\n', 4), ('disconnecting', 4), ('JSR-166\n', 4), ('wrap}', 4), ('(InternalError', 4), ('com.google.common.base.Ticker;\nimport', 4), ('Nazgul', 4), ('data.\n', 4), ('Upon\n', 4), ('appender.getLastMessage());\n\n', 4), ('Threading', 4), ('method);\n', 4), ('e.onNext(s);\n', 4), ('subscribers;\n', 4), ('java.nio.LongBuffer;\nimport', 4), ('contains}', 4), ('action.accept(function.apply(holder,', 4), ('List<CakeTopping>', 4), ('r.set(v);\n', 4), ('SingletonArrayFunc()));\n', 4), ('com.google.common.collect.ImmutableSetMultimap;\nimport', 4), ('CUSTOMERS', 4), ('(new', 4), ('onNext(@NonNull', 4), ('.collectInto(new', 4), ('keys;\n', 4), ('Flowable.just(1L),\n', 4), ('java.util.concurrent.CompletableFuture#handleAsync}', 4), ('running.', 4), ('t1.onNext(1);\n', 4), ('workDone));\n', 4), ('James', 4), ('(globalMutex)', 4), ('Campbell', 4), ('closing', 4), ('list2.get(1).intValue());\n', 4), ('"/";\n', 4), ('optimization', 4), ('TestCollectionGenerator<E>', 4), ('funcLatch', 4), ('active.decrementAndGet()', 4), ('non-positive', 4), ('}).subscribe(o);\n\n', 4), ('(cancelling\n', 4), ('InputThousand', 4), ('Maybe.just(1);\n\n', 4), ('assertEquals("onError', 4), ('ByteArrayInputStream(new', 4), ('arguments\n', 4), ('presence', 4), ('Thread.currentThread().setUncaughtExceptionHandler(new', 4), ('counterDateValues', 4), ('15.0', 4), ('TestException())),', 4), ('ordering.', 4), ('.takeLast(1)\n', 4), ('RxJavaPlugins.enableAssemblyTracking();\n//', 4), ('TestHelper.checkDoubleOnSubscribeFlowable(\n', 4), ('problems', 4), ('UCS', 4), ('Multimap<K,', 4), ('<p>Like', 4), ('generator,\n', 4), ('RepeatObserver<T>', 4), ('.assertValues(10,', 4), ('}).subscribe(ts);\n\n', 4), ('java.math.BigDecimal;\nimport', 4), ('2).elementAt(2,', 4), ('"onSubscribe()");\n', 4), ('parent.error(t);\n', 4), ('startTimeout(long', 4), ('Emulation', 4), ('Schedulers.newThread()\n\n', 4), ('ensures', 4), ('List<Worker>', 4), ('.cancel();\n', 4), ('BlockingFirstSubscriber<Integer>', 4), ('Flowable.<Integer>unsafeCreate(new', 4), ('pre-implemented', 4), ('changed.\n', 4), ('FlatMapSingleObserver<T,', 4), ('".");\n', 4), ('splittable', 4), ('(Collection<V>)', 4), ('.assertNoValues()', 4), ('bufs.values())', 4), ('this.t', 4), ('5;\n\n', 4), ('LOGGER.info("{}', 4), ('Stops', 4), ('tests.\n', 4), ('ObjectHelper.requireNonNull(timeoutIndicator,', 4), ('coll));\n', 4), ('same-order', 4), ('TestException();\n//', 4), ('Helpers.assertEqualInOrder(list,', 4), ('fromIterator.next();\n', 4), ('super(splitr,', 4), ('resultSelector', 4), ('setDisposable(new', 4), ('com.google.common.collect.ImmutableTable;\nimport', 4), ('doubleOnSubscribeMain()', 4), ('}).toFlowable()\n', 4), ('MongoCollection<Document>', 4), ('saves', 4), ('AbstractTester>>', 4), ('TypeToken<?>', 4), ('queue.\n', 4), ('AbstractNioChannel', 4), ('assertEquals("One",', 4), ("I'm", 4), ('AssertionError(impossible);\n', 4), ('JCP', 4), ("Letter('h'),", 4), ('cancelAllBut(index);\n', 4), ('assertEquals("Reports', 4), ('cs.subscribe(this);\n', 4), ('Settings,', 4), ('NANOSECONDS);\n', 4), ('Table}', 4), ('writeObject(ObjectOutputStream', 4), ('Sexton\n', 4), ('after?",', 4), ('<dd>When', 4), ('TimeUnit.MINUTES);\n\n', 4), ('com.google.common.collect.ImmutableMultiset;\nimport', 4), ('errorOnFewer;\n\n', 4), ('ts.assertNoErrors()\n', 4), ('Subscriber<Object>', 4), ('Exceptions.throwIfFatal(ex);\n\n', 4), ('iters', 4), ('deoptimization\n', 4), ('AtomicReference<Throwable>();\n\n', 4), ('onErrorThrows()', 4), ('queue.offer(isLeft', 4), ('Flowable.fromArray(array)\n', 4), ('inOrder.verify(observer).onNext(6);\n', 4), ('RxJavaPlugins.onError(exc);\n', 4), ('typically', 4), ('During', 4), ('create(Entry<String,', 4), ('MB%n",', 4), ('<R>\n', 4), ('propagates', 4), ('staticMethodDef', 4), ('streams.\n', 4), ('T.\n', 4), ('"two")\n', 4), ('.append(word)\n', 4), ('MessageQueue', 4), ('"outer");\n', 4), ('de', 4), ('break;', 4), ('ObservableSource<TRightEnd>>', 4), ('getInstance', 4), ('calculate', 4), ('.flatMap(Functions.justFunction(Maybe.just(1)),\n', 4), ('"\\n",', 4), ('SubscriptionCancelThrows());\n\n', 4), ('callableDf', 4), ('!index.compareAndSet(idx,', 4), ('.doOnCancel(new', 4), ('(winner.get()', 4), ('exists', 4), ('Observer.onNext', 4), ('assertNull(cs.getThrowable());\n', 4), ('clients', 4), ('MpscLinkedQueue<U>());\n', 4), ('href="https://github.com/reactive-streams/reactive-streams-jvm#2.12">Rule', 4), ('parent.close(this,', 4), ('consumed;\n', 4), ('Burst.item(1).create()', 4), ('Maybe<Object>>()', 4), ('transitiveBoundaryFusion(mode);\n', 4), ('obs.set(observer);\n', 4), ('ThreadFactory()', 4), ('e.execute(runMe);\n', 4), ('combiner;\n\n', 4), ('ImmutableList.of())\n', 4), ('(sch', 4), ('HorrorMovie());\n', 4), ('blocking;', 4), ('t.sendOnNext("one");\n', 4), ('java.util.EnumSet;\nimport', 4), ('.blockingSubscribe(new', 4), ('(Class<?>', 4), ('io.reactivex.schedulers.Schedulers;\n\n@Test\npublic', 4), ('this.bufferOpen', 4), ('this.it', 4), ('fields', 4), ('repeatWhen}', 4), ('customScheduler;\n', 4), ('when\n', 4), ('continue;\n//', 4), ('(!clazz.isInstance(ex))', 4), ('null},', 4), ('STATE_RESULT_VALUE;\n', 4), ('sink', 4), ('chain\n', 4), ('to.assertComplete();\n', 4), ('wasStreamOpened()', 4), ('more\n', 4), ('assertTrue(((Disposable)observer).isDisposed());\n', 4), ('assertEquals("Foo",', 4), ('"callable', 4), ('System.out.println("delay', 4), ('Object[]{WeatherType.RAINY,', 4), ('o.dispose();\n', 4), ('TimeoutTask(nextIndex,', 4), ('access,', 4), ('RepeatSubscriber<T>', 4), ('n.get()', 4), ('inOrder.verify(observer).onError(any(TestException.class));\n', 4), ('Print', 4), ('caps', 4), ('io.reactivex.internal.util.BackpressureHelper;\n\n/**\n', 4), ('Single.never()\n', 4), ('JavadocForAnnotations.lineNumber(b,', 4), ('(currentIndex', 4), ('this.errorOnFewer', 4), ('}).takeLast(1);\n\n', 4), ('items,', 4), ('-2809475196591179431L;\n\n', 4), ('UnicastSubject.create(capacityHint,', 4), ('quis', 4), ('this.onCompleteSupplier', 4), ('sb.append("-");\n', 4), ('cleaned', 4), ('fallback);\n', 4), ('onError;\n\n', 4), ('zipperThrows()', 4), ('secondError()', 4), ('RuntimeException("error");\n', 4), ('SafeSubscriber<String>(new', 4), ('getValue();\n', 4), ('p.subscribe(end);\n\n', 4), ('pendingWrites', 4), ('CommonPattern', 4), ('<D>', 4), ('stateSupplier;\n', 4), ('unsubscribe', 4), ('PARENT_DISPOSED', 4), ('Collections.addAll(set,', 4), ('downstream.onNext(w);\n\n', 4), ('inner[j].id;\n', 4), ('w.onNext(t);\n', 4), ('sources.', 4), ('(previously', 4), ('ps.ignoreElements()\n', 4), ('this.item', 4), ('(subscribes)', 4), ('this.otherIterable', 4), ('onErrorMainOverflow()', 4), ('readObject,', 4), ('Close>', 4), ('Thread.UncaughtExceptionHandler', 4), ('personalized\n', 4), ('unsubscribeThread);\n\n', 4), ('<p><b>Java', 4), ('Schedulers.io(),', 4), ('not.\n', 4), ('(System.currentTimeMillis()', 4), ('FUSED_CONSUMED', 4), ('out,', 4), ('(!m.signature.contains("ObservableSource"))', 4), ('assertTrue(values.get(2)', 4), ('capacityHint,', 4), ('swallowed', 4), ('<class', 4), ('currentVal', 4), ('annotationClass),\n', 4), ('slightly', 4), ('impl.newFacade();\n', 4), ('e4,', 4), ('NavigableMap<String,', 4), ('CustomException(ex.getMessage(),', 4), ('this.actual;\n\n', 4), ('Subject\n', 4), ('utilities.\n', 4), ('queue)', 4), ('domain,', 4), ('merge0(sources,', 4), (');\n\n', 4), ('source.flatMapMaybe(new', 4), ('bf', 4), ('((r', 4), ('STATE_ACTIVE;\n', 4), ('Spliterator.SIZED))', 4), ('HashSet<Integer>(),', 4), ('loading', 4), ('atomic', 4), ('Completable.fromCallable(new', 4), ('context.getBean(CakeLayerDao.class);\n', 4), ('return,', 4), ('NIO', 4), ('off', 4), ('io.reactivex.observers.TestObserver;\n\npublic', 4), ('ArrayDeque<T>', 4), ('java.nio.IntBuffer;\nimport', 4), ('CollectObserver<T,', 4), ('CakeToppingDao', 4), ('this.onErrorMapper', 4), ('"e");\n', 4), ('latch.await(2000,', 4), ('entries,', 4), ('active,', 4), ('Contains', 4), ('IOException))', 4), ('Langote\n', 4), ('(next', 4), ('Scheduler.\n', 4), ('AsyncProcessor<T>', 4), ('invocations', 4), ('logged', 4), ('12:07', 4), ('as(@NonNull', 4), ('children', 4), ('4).take(2).subscribe(new', 4), ('mapperThrows,', 4), ('Completable>', 4), ('observer.onSubscribe(d);\n', 4), ('LEFT_VALUE', 4), ('Exception("test");\n', 4), ('outer.cancel();\n\n', 4), ('java.net.MalformedURLException;\nimport', 4), ('supposed', 4), ('true}\n', 4), ('.subscribe(Functions.emptyConsumer());\n', 4), ('wrap,', 4), ('transforms', 4), ('Holds', 4), ('(!disposed)', 4), ('once).\n', 4), ('NullPointerException);\n', 4), ('assertEquals("onErrorFail",', 4), ('static\n', 4), ('innerExceptions.size());\n\n', 4), ('observable.subscribe(observer);\n', 4), ('wrapper.getWrappedRunnable());\n', 4), ('crashOnHasNext;\n\n', 4), ('NextSubscriber<T>', 4), ('entries.add(entry(k,', 4), ('better.', 4), ('OnComplete', 4), ('firstTimeoutIndicator;\n', 4), ('called");\n', 4), ('t1.onNext(2);\n', 4), ('assertTrue(bs.isDisposed());\n\n', 4), ('#onError(Throwable)}.\n', 4), ('checkInternalOperatorNaming("Flowable",', 4), ('TestEnum', 4), ('to2.assertNoErrors();\n', 4), ('uiEventLoop', 4), ('8042919737683345351L;\n\n', 4), ('TimeUnit}', 4), ('sa.requested);\n\n', 4), ('onCompleteRace()', 4), ('zipperReturnsNull()', 4), ('cake', 4), ('e;\n\n', 4), ('DecoratingIterator<E>(iterable.iterator())', 4), ('NextObserver<T>', 4), ('accessed', 4), ('ToListSubscriber<T,', 4), ('TimedRunnable', 4), ('.elementAtOrError(1)\n', 4), ('2233020065421370272L;\n\n', 4), ('assertEquals("beta",', 4), ('io.reactivex.observers.DisposableObserver;\nimport', 4), ('counterExceptions', 4), ('handler;\n', 4), ('java.io.OutputStreamWriter;\nimport', 4), ('StandardSystemProperty.values())', 4), ('subscribe\n', 4), ('crashOnHasNext;\n', 4), ('serialization\n', 4), ('completeRace()', 4), ('#item}.', 4), ('defaultValue', 4), ('hook', 4), ('"two");', 4), ('available,', 4), ('3).collect(new', 4), ('index)\n', 4), ('5).switchMapCompletable(new', 4), ('ObjectHelper.requireNonNull(onAfterTerminate,', 4), ('java.io.FileWriter;\nimport', 4), ('Error();', 4), ('RainbowFish', 4), ('GWT,', 4), ('(t.isOnError())', 4), ('sa.requested', 4), ('interfaces.\n', 4), ('SingleSource<Integer>()', 4), ('100),', 4), ('closer.rethrow(e);\n', 4), ('innerComplete(int', 4), ('factory\n', 4), ('w.onNext((T)v);\n', 4), ('ParallelFailureHandling.STOP)\n', 4), ('Set', 4), ('List<Class<?', 4), ('FileReader(f));\n', 4), ('decimated', 4), ("'count'", 4), ('singleSourceZipperReturnsNull()', 4), ('TimeoutFallbackSubscriber<T>', 4), ('failed:', 4), ('ts.assertValues(1);\n', 4), ('support,', 4), ('seedSupplier;\n', 4), ('a.onNext(w);\n', 4), ('stop()', 4), ('list.get(0).getCause());\n', 4), ('CANCELLED;\n', 4), ('invokeAll(\n', 4), ('list.', 4), ('OTHER_STATE_HAS_VALUE)', 4), ('com.google.common.base.CharMatcher;\nimport', 4), ('done)', 4), ('standalone', 4), ('super(message);\n', 4), ('list.add(e);\n', 4), ('(cause', 4), ('href="http://reactivex.io/documentation/operators/timeout.html">ReactiveX', 4), ('java.util.concurrent.CancellationException;\nimport', 4), ('arrange(List<Integer>', 4), ('TimeoutConsumer(0L,', 4), ('ClassPath.Scanner.getClassPathEntry(new', 4), ('(!m.signature.contains("Publisher"))', 4), ('enums', 4), ('AsyncExecutor', 4), ('doubleSubscribe()', 4), ('subj', 4), ('getClass()))', 4), ('keySelector', 4), ('Consumer)}', 4), ('Executors.newSingleThreadScheduledExecutor();\n', 4), ('ConnectableObservable}', 4), ('error(final', 4), ('subscriber.set(s);\n', 4), ('possible.\n', 4), ('fromSpliterator.characteristics()', 4), ('"two");\n', 4), ('ReaderWriterLock();\n\n', 4), ('OTHER_STATE_HAS_VALUE', 4), ('"predicate', 4), ('instanceId;\n', 4), ('element;\n', 4), ('&#64;{@link', 4), ('}).subscribeOn(Schedulers.single()).test();\n\n', 4), ('possible)\n', 4), ('setSubscription(s);\n', 4), ('ImmutableBiMap<?,', 4), ('OTHER_STATE_CONSUMED_OR_EMPTY)', 4), ('cancelAllBut(-1);\n', 4), ('this.stopWindows', 4), ('source.materialize().dematerialize();\n\n', 4), ('timer()', 4), ('yet', 4), ('Collection>>', 4), ('CompletableSubject.create()\n', 4), ('As', 4), ('TestSubscriber<String>(w)));\n\n', 4), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/parallelflowable.sequential.png"', 4), ('1024', 4), ('channel\n', 4), ('toOffer', 4), ('observer.assertTerminated();\n', 4), ("Letter('i'),", 4), ('OutputStreamWriter(new', 4), ('basic', 4), ('Publisher<Boolean>', 4), ('values.size());\n', 4), ('r;\n\n', 4), ('Eager', 4), ('.elementAt(0,', 4), ('com.iluwatar.layers;\n\nimport', 4), ('Error', 4), ('(timeout--', 4), ('e2).getExceptions();\n', 4), ('meant', 4), ('throttleFirstDefaultScheduler()', 4), ('fromCallable}', 4), ('BlockingObservableIterator<Integer>', 4), ('Scheduler},', 4), ('IoTestCase.ASCII', 4), ('coll', 4), ('lastId;\n', 4), ('<U,', 4), ('used\n', 4), ('connect\n', 4), ('understand', 4), ('onError(t);\n', 4), ('.publish()\n', 4), ('stream.readObject();\n', 4), ('delaySubscription(long', 4), ('(svq', 4), ('conceptionally', 4), ('@Test\n//', 4), ('hide()', 4), ('ImmutableSet<K>', 4), ('e3.getMessage());\n\n', 4), ('TestObserver<String>(observer);\n\n', 4), ('disconnect', 4), ('m.javadoc.indexOf("Observer",', 4), ('TCP', 4), ('emitted++;\n', 4), ('com.google.common.primitives.UnsignedLong;\nimport', 4), ('pool\n', 4), ('builder.build();\n', 4), ('swallow', 4), ('Object[]{WeatherType.WINDY,', 4), ('startTimeout(idx', 4), ('com.google.common.collect.Table;\nimport', 4), ('OnError(Throwable', 4), ('subscriber.onSubscribe(new', 4), ('CakeLayerDao', 4), ('com.google.common.primitives.UnsignedInteger;\nimport', 4), ('"item', 4), ('!cancelled)', 4), ('onSuccess)', 4), ('(multiple', 4), ('UnmodifiableIterator<E>', 4), ('create(e1,', 4), ('javadocEnd)', 4), ('observer.onSuccess(2);\n', 4), ('(Collection<V>', 4), ('otherSuccess(T', 4), ('matching', 4), ('STATE_INACTIVE', 4), ('org.mockito.Mockito.verify;\nimport', 4), ('tasks\n', 4), ('SingleDisposable<T>[]', 4), ('isDisposed', 4), ('toKey)', 4), ('subscriber;\n', 4), ('disposables.add(end);\n\n', 4), ('a/an', 4), ('assertFalse(cs.hasComplete());\n', 4), ('innerSuccess(R', 4), ('sch,', 4), ('assertNotEquals(t5,', 4), ('clazz.isInstance(cel.get(index)));\n', 4), ('bufferClose;\n', 4), ('assertAfterTerminateCalledOnce();\n', 4), ('DISPOSED))', 4), ('classes.\n', 4), ('(elements', 4), ('WithLatestInnerObserver[]', 4), ('contain\n', 4), ('parent.onError(ex);\n', 4), ('rails.\n', 4), ('assertTrue(d2.isDisposed());\n\n', 4), ('assertFalse(RxJavaPlugins.isBug(new', 4), ('lastIndex', 4), ('checkNotNull(stream);\n', 4), ('io.reactivex.MaybeSource;\nimport', 4), ('ts.assertFailureAndMessage(TestException.class,', 4), ('inner.getAndSet((SwitchMapSingleObserver)INNER_DISPOSED);\n', 4), ('inner.compareAndSet(current,', 4), ('Publisher<TLeftEnd>>', 4), ('b)},', 4), ('IoTestCase.I18N;\n', 4), ('WorkerCallback()', 4), ('assertTrue(e3', 4), ('Calculate', 4), ('this.bufferClose', 4), ('BlockingMultiObserver<Void>', 4), ('array[0]', 4), ('fromKey,', 4), ('parent);\n', 4), ('initialValue;\n', 4), ('few', 4), ('this.nextSupplier', 4), ('K>,', 4), ('keyFunction,\n', 4), ('Retry</a>\n', 4), ('CoffeeMakingTask(2));\n', 4), ('toImmutableMap(\n', 4), ('LinkedList<>();\n', 4), ('single()', 4), ('management', 4), ('Supplier<LongAddable>', 4), ('Function3<Object,', 4), ('T8>', 4), ('otherArray;\n', 4), ('OnErrorNotImplementedException', 4), ('lastUnit', 4), ('caughtError', 4), ('Store', 4), ('runtime.\n', 4), ('(!stopWindows.get())', 4), ('bufferClose;\n\n', 4), ('accept(HashSet<Integer>', 4), ('initialValue,', 4), ('actionThrows()', 4), ('subscribeThread.set(Thread.currentThread());\n', 4), ('assertNotNull(new', 4), ('this.emitted;\n\n', 4), ('ConditionalSubscriber)', 4), ('fit', 4), ('uiEventLoop.getThread());\n\n', 4), ('BlockingMultiObserver<Void>();\n', 4), ('"cancel()");\n', 4), ('CollectorTester<T,', 4), ('funcLatch.await();\n', 4), ('customScheduler.shutdown();\n', 4), ('File("/c:/Documents', 4), ('(int)', 4), ('ExecutorWorker', 4), ('ts.assertValue(1);\n\n', 4), ('lastTime', 4), ('.assertValueCount(i)\n', 4), ('flowable.subscribe(new', 4), ('io.reactivex.internal.util.*;\n\n/**\n', 4), ('ImmutableMap<?,', 4), ('strings', 4), ('20));\n', 4), ('sa.produced(p);\n', 4), ('sampled', 4), ('other.subscribe(parent.otherObserver);\n', 4), ('TimeoutObserver<T>', 4), ('nine', 4), ('br', 4), ('Single<T>()', 4), ('Method}', 4), ('.assertFailure(IOException.class)\n', 4), ('LongConsumer()', 4), ('uiEventLoop.shutdown();\n', 4), ('s).subscribe(observer);\n\n', 4), ('is.setResource(d);\n', 4), ('ListFeature.GENERAL_PURPOSE,\n', 4), ('(!m.signature.contains("Flowable"))', 4), ('ts2.assertValues(0L,', 4), ('innerErrorAfterMainError()', 4), ('UDP', 4), ('Written', 4), ('await()', 4), ('itemTimeoutIndicator,\n', 4), ('B>(new', 4), ('Removes', 4), ('SingleInternalHelper.toFlowable(),', 4), ('src;\n', 4), ('ConcatMapDelayErrorObserver<?,', 4), ('(reportError)', 4), ('callback,', 4), ('Wilson\n', 4), ('TrampolineScheduler)', 4), ('TestHelper.checkDoubleOnSubscribeObservable(\n', 4), ('BaseTck<Boolean>', 4), ('MappedByteBuffer', 4), ('resource))', 4), ('okay,', 4), ('unsubscription', 4), ('schedule()', 4), ('elements);\n\n', 4), ('queue);\n', 4), ('Function<Operator,', 4), ('V>[]', 4), ('Monad', 4), ('TimeoutConsumer(idx', 4), ('(kdx', 4), ('Scheduler.', 4), ('repeatedly', 4), ('attempting', 4), ('inOrder.verify(observer).onNext(2);\n', 4), ('reader1', 4), ('source8\n', 4), ('WithLatestInnerSubscriber[]', 4), ('-8565274649390031272L;\n\n', 4), ('.assertComplete();\n\n', 4), ('MaybeNo2Dot0Since.findSource("Flowable");\n', 4), ('assertTrue(rco.isDisposed());\n\n', 4), ('delayed.\n', 4), ('java.util.concurrent.atomic.AtomicLong;\n\n/**\n', 4), ('OperationNeverComplete', 4), ('RxJavaPlugins.reset();\n\n', 4), ('callbackThrows()', 4), ('times(0)).onNext("four");\n', 4), ('href="http://reactivex.io/documentation/operators/retry.html">ReactiveX', 4), ('List<TestSuite>', 4), ('.fulfillInAsync(new', 4), ('current.lazySet(NotificationLite.COMPLETE);\n', 4), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/onErrorResumeNext.png"', 4), ('intercept', 4), ('observers.get()', 4), ('"should_not_be_delivered";\n', 4), ('point.\n', 4), ('a}', 4), ('com.iluwatar.promise;\n\nimport', 4), ('(!cancelled', 4), ('flattening', 4), ('CompositeException");\n', 4), ('java.util.Optional<T>', 4), ('.subscribe(outer);\n\n', 4), ('Single.just(1).subscribe(new', 4), ('Operators</a>\n', 4), ('p);\n', 4), ('ObjectHelper.requireNonNull(boundarySupplier.call(),', 4), ('ds.setupDownstream();\n', 4), ('allowFatal)', 4), ('selector', 4), ('method,\n', 4), ('PerfObserver(bh));\n', 4), ('io.reactivex.internal.functions.Functions;\n\npublic', 4), ('com.google.common.base.Equivalence;\nimport', 4), ('force', 4), ('single-threaded', 4), ('DataSource', 4), ('requested.set(n);\n', 4), ('reads\n', 4), ('"if', 4), ('ArithmeticException.class,', 4), ('(windows.get()', 4), ('Entry<String,', 4), ('funcLatch.countDown();\n\n', 4), ('DateFormatCallable}', 4), ('onSubscribe}\n', 4), ('T[]},', 4), ('300,', 4), ('SafeSubscriberTestException("error!"));\n', 4), ('rmo.add(d);\n\n', 4), ('ps;\n\n', 4), ('ts,', 4), ('height="490"', 4), ('putAll(Map<?', 4), ('Iterator<Completable>', 4), ('Publisher<U>>', 4), ('junit.framework.Test;\n\n/**\n', 4), ('"English"));\n', 4), ('optional.stream()}', 4), ('Flowable.bufferSize()}.\n', 4), ('shouldNotDeliverResultIfSubscriberUnsubscribedBeforeEmission()', 4), ('"C",', 4), ('this.leftEnd', 4), ('java.util.EnumMap;\nimport', 4), ('track', 4), ('pp.mergeWith(cs)\n', 4), ('NEXT_WINDOW', 4), ('onStart();\n', 4), ('2).elementAt(1,', 4), ('innerExceptions.get(1);\n', 4), ('"zipper', 4), ('signal\n', 4), ('iterator)', 4), ('These', 4), ('o.blockingGet();\n\n', 4), ('STATE_RESULT_VALUE)', 4), ('accept(StringBuilder', 4), ('io.reactivex.internal.util.QueueDrainHelper;\nimport', 4), ('timeUnit\n', 4), ('BiConsumer<HashSet<Integer>,', 4), ('failure!")).subscribeOn(scheduler);\n\n', 4), ('Throwable[]', 4), ('InnerQueuedObserver<R>', 4), ('exit', 4), ('Completable.complete())\n', 4), ('lastDelay', 4), ('assertNull(ss.getValue());\n', 4), ('o2).toList().blockingGet();\n\n', 4), ('apply(Maybe', 4), ('combines', 4), ('ObservableSource<U>>', 4), ('from}', 4), ('QueueSubscription', 4), ('cdl2.await(5,', 4), ('ObserverFusion.assertFusion(to,', 4), ('EmptyDisposable.error(error,', 4), ('any.\n', 4), ('assertFalse(added.get());\n', 4), ('proceed.\n', 4), ('Flowable.unsafeCreate(t);\n\n', 4), ('Consumer<T>', 4), ('ObjectHelper.requireNonNull(value,', 4), ('ps.onNext(3);\n', 4), ('ExceptionHelper.<Exception>throwIfThrowable(ex);\n', 4), ('Long.MAX_VALUE.\n', 4), ('list.get(0).intValue());\n', 4), ('effect.', 4), ('stateless', 4), ('hongshuwei@gmail.com\n', 4), ('together', 4), ('onComplete;\n\n', 4), ('fromCallableObservable.subscribe(observer);\n\n', 4), ('DEFAULT', 4), ('\\"15.12.2015\\"",\n', 4), ('timer(long', 4), ('error2()', 4), ('6);\n\n', 4), ('TestScheduler()));\n', 4), ('.unsubscribeOn(uiEventLoop)\n', 4), ('(!m.signature.contains("ObservableSource")\n', 4), ('assertNotNull(caughtError.get());\n', 4), ('boundarySubscriber.dispose();\n', 4), ('rightEnd,\n', 4), ('verify(factory,', 4), ('e.printStackTrace();\n\n', 4), ('noErrorLoss()', 4), ('create();\n\n', 4), ('regex', 4), ('subscriber.get().onError(new', 4), ('t5,', 4), ('countBefore.get());\n', 4), ('@CanIgnoreReturnValue', 4), ('resourceSupplier', 4), ('Preconditions.checkNotNull(tasks,', 4), ('fusedAsync()', 4), ('this.comparator', 4), ('ArrayList<String>();\n\n', 4), ('Function', 4), ('file);\n', 4), ('validated\n', 4), ('eight', 4), ('.assertResult(10);\n', 4), ('onError()}\n', 4), ('vendor.', 4), ('result(Collector<T,', 4), ('test.\n', 4), ('ArrayDeque<File>();\n\n', 4), ('B>\nextends', 4), ('symlink', 4), ('java.net.URLClassLoader;\nimport', 4), ('-5402190102429853762L;\n\n', 4), ('"timeoutIndicator', 4), ('DebounceInnerSubscriber<T,', 4), ('DefaultSubscriber<Long>()', 4), ('.requestMore(1)\n', 4), ('sources.",', 4), ('this.singletonInstanceMethod.get();\n', 4), ('lower', 4), ('zipper);\n\n', 4), ('assertTrue(ms1.hasObservers());\n\n', 4), ('observerLatch.await();\n\n', 4), ('onWorker(int', 4), ('explicit', 4), ('LEFT_CLOSE', 4), ('multimap)', 4), ('f.subscribe(new', 4), ('this.errorMode;\n', 4), ('.assertComplete()\n', 4), ('delayErrors,\n', 4), ('invokeAll(Collection<?', 4), ('queue.offer(NotificationLite.next(t));\n', 4), ('Wizard', 4), ('seed;\n\n', 4), ('parent.innerSuccess(t);\n', 4), ('closer.close();\n', 4), ('CollectionFeature.SUPPORTS_ADD,\n', 4), ('dropped\n', 4), ('empty"));\n', 4), ('.forEachWhile(new', 4), ('PublishProcessor\n', 4), ('scheduler.scheduleDirect(new', 4), ('(Object', 4), ('onNextMapper;\n', 4), ('dis', 4), ('combiner)', 4), ('SubscribeOnObserver<T>', 4), ('(FluentFuture<V>)', 4), ('OnError', 4), ('java.nio.FloatBuffer;\nimport', 4), ('arbiter;\n\n', 4), ('fallback}.', 4), ('fs.onComplete();\n\n', 4), ('valueSelector;\n', 4), ('assertTrue(ms2.hasObservers());\n\n', 4), ('exclusive', 4), ('1L);\n\n', 4), ('U>(source,', 4), ('ScheduledFuture)', 4), ('inner\n', 4), ('effect.\n', 4), ('specification,\n', 4), ('Supplier<O>', 4), ('IllegalArgumentException.class,', 4), ('misbehaving', 4), ('WildcardType', 4), ('wrap\n', 4), ('accept(Subscriber<?', 4), ('MergeWithObserver<T>(observer);\n', 4), ('normalLong()', 4), ('-2935427570954647017L;\n\n', 4), ('stream)},', 4), ('known\n', 4), ('onAfterSuccess;\n', 4), ('socket.\n', 4), ('kdx', 4), ('worker.schedulePeriodically(is,', 4), ('delegate()', 4), ('(can', 4), ('(sa.isCancelled())', 4), ('io.reactivex.functions.Function;\n\npublic', 4), ('io.reactivex.internal.fuseable.SimpleQueue;\nimport', 4), ('member)', 4), ('SourceObserver<T,', 4), ('com.google.common.testing.EqualsTester;\nimport', 4), ('InnerQueuedSubscriber<R>', 4), ('NoSuchElementException("The', 4), ('assertEquals("1-2-3",', 4), ('onErrorOtherOverflow()', 4), ('unix', 4), ('qr.get();\n', 4), ('getMap().forEach((k,', 4), ('joinHelper(10,', 4), ('completable\n', 4), ('Integer[3]),', 4), ('lefts.clear();\n', 4), ('stream.defaultReadObject();\n', 4), ('Examples</a>\n', 4), ('key.\n', 4), ('logic.\n', 4), ('5));\n', 4), ('Generally,', 4), ('V>(\n', 4), ('state-peeking', 4), ('Subscriber}s.\n', 4), ('times."}.\n', 4), ('fromSpliterator.estimateSize(),\n', 4), ('everything', 4), ('efficiently', 4), ('bugs', 4), ('Paul', 4), ('"six");\n\n', 4), ('signal,', 4), ('ts.dispose();\n', 4), ('WashingMachine', 4), ('Single.just(5),', 4), ('active.compareAndSet(inner,', 4), ('shows', 4), ('DebounceInnerObserver<T,', 4), ('innerComplete(InnerObserver', 4), ('o2);\n\n', 4), ('executorService.awaitTermination(10,', 4), ('f.get());\n', 4), ('overload\n', 4), ('reportError;\n', 4), ('(!q.offer(value))', 4), ('1]', 4), ('java.nio.ShortBuffer;\nimport', 4), ('3:', 4), ('operator,', 4), ('rest).\n', 4), ('second.\n', 4), ('getThread()', 4), ('disposeState;\n\n', 4), ('*/expected', 4), ('STATE_INACTIVE))', 4), ('@State(Scope.Thread)\n', 4), ("Letter('o'),", 4), ('downstream.onNext(w);\n', 4), ('CombinerObserver<T,', 4), ('a.onNext(null);\n', 4), ('(!fromSpliterator.hasCharacteristics(Spliterator.SUBSIZED))', 4), ('java.util.concurrent.ScheduledExecutorService;\nimport', 4), ('generateInt());\n\n', 4), ('ms2', 4), ('resultSelector;\n\n', 4), ('8;', 4), ('instance;\n', 4), ('baseTypeName)', 4), ('delayError);\n', 4), ('numberOfSubscribers,', 4), ('to.assertTerminated();\n', 4), ('Enum<?>>>', 4), ('OTHER_STATE_CONSUMED_OR_EMPTY', 4), ('SortedMapTestSuiteBuilder<K,', 4), ('current.item', 4), ('throw.\n', 4), ('assertTrue(to.isDisposed());\n', 4), ('li.add("beta");\n', 4), ('Scheduler#shutdown()}', 4), ('EnumMap<K,', 4), ('view");\n', 4), ('original\n', 4), ('Atomically:', 4), ('observers;\n', 4), ('list2.get(0).intValue());\n', 4), ('failure"));\n\n', 4), ('significantly', 4), ('source.switchMapMaybe(new', 4), ('Registers', 4), ('onAfterSuccess;\n\n', 4), ('ObjectHelper.requireNonNull(onSuccess,', 4), ('caughtError.set(e);\n', 4), ('(T)q.poll();\n\n', 4), ('mainBoundaryErrorInnerSuccess()', 4), ('Long.MAX_VALUE,', 4), ('safe.', 4), ('dependentPromise', 4), ('underlying\n', 4), ('FileReader(u));\n', 4), ('makeDone', 4), ('.autoConnect()\n', 4), ('upstream,', 4), ('disposables.remove(end);\n', 4), ('Observable.<Integer>just(1).hide()\n', 4), ('assertTrue(rso.isDisposed());\n\n', 4), ('@Test(/*', 4), ('TimeoutSubscriber<T>', 4), ('supplier)', 4), ('count,\n', 4), ('ArrayList<String>', 4), ('assertTrue(values.get(3)', 4), ('Flowable<Flowable<Integer>>', 4), ('Queue<GroupedUnicast<K,', 4), ('Validator<T>', 4), ('accept(ArrayList<Integer>', 4), ('trip', 4), ('2).create()', 4), ('CapturingUncaughtExceptionHandler', 4), ('java.util.concurrent.Callable;\n\n/**\n', 4), ('java.util.Deque;\nimport', 4), ('fromCallableObservable\n', 4), ('0\n', 4), ('indexed', 4), ('memoryMXBean.getHeapMemoryUsage();\n', 4), ('org.mockito.Mockito.inOrder;\n\nimport', 4), ('0).blockingGet().intValue());\n', 4), ('coll;\n', 4), ('CancellableDisposable', 4), ('sum', 4), ('java.io.PrintWriter;\nimport', 4), ('log.info("customerDao.getAllCustomers():', 4), ('this.boundary', 4), ('attempts', 4), ('<N,', 4), ('Set},', 4), ('composes', 4), ('com.google.common.collect.SortedMultiset;\nimport', 4), ('Object[]{WeatherType.COLD,', 4), ('assertNotNull(subscribeThread.get());\n', 4), ('FlowableFlatMapPublisher(sources,', 4), ('BiConsumer<StringBuilder,', 4), ('publisher\n', 4), ('assertEquals("failure', 4), ('this.arbiter', 4), ('((CompositeException)', 4), ('verify(func).call();\n\n', 4), ('RuntimeException();\n\n', 4), ('scheduler.createWorker()));\n', 4), ('ImmutableList.of("a",', 4), ('R>(actual,', 4), ('context.getBean(CakeToppingDao.class);\n', 4), ('InputWithIncrementingInteger', 4), ('Flowable.', 4), ('shelf', 4), ('utilized', 4), ('assertEquals(classes.length,', 4), ('RxJavaPlugins.setOnFlowableAssembly(new', 4), ('String)}', 4), ('subscribe(Consumer<?', 4), ('Group', 4), ('Connect</a>\n', 4), ('ArrayDeque<UnicastSubject<T>>', 4), ('outstanding', 4), ('fail("Didn\'t', 4), ('instanceMethodDef', 4), ('when(func.call()).thenAnswer(new', 4), ('<p>Example<pre><code>\n', 4), ('.distinct(Functions.identity(),', 4), ('TimeUnit.MILLISECONDS).intValue());\n', 4), ('height="602"', 4), ('ObjectHelper.requireNonNull(zipper,', 4), ('closer', 4), ('8606673141535671828L;\n\n', 4), ('fuse', 4), ('assertEquals(21,', 4), ('result.subscribe(observer);\n\n', 4), ('complete(v);\n', 4), ('cakeToppingInfo,', 4), ('observer))', 4), ('t1);\n', 4), ('holder;\n\n', 4), ('s.add(v);\n', 4), ('io.reactivex.exceptions.ProtocolViolationException;\nimport', 4), ('SingleObserver#onError', 4), ('Instead,', 4), ('assertEquals(null,', 4), ('MaybeSource<U>', 4), ('(UnicastProcessor<T>', 4), ('ListenableFuture<?>', 4), ('True', 4), ('this.seedSupplier', 4), ('in.readLine();\n', 4), ('seedSupplier;\n\n', 4), ('observer.onNext(value);\n', 4), ('list2.get(2).intValue());\n', 4), ('so.onSubscribe(d);\n\n', 4), ('o.blockingLast();\n\n', 4), ('u))', 4), ('end.\n', 4), ('#mergeDelayError(Publisher,', 4), ('this.initialDelay', 4), ('Lea', 4), ('java.util.function.Function}', 4), ('write(int', 4), ('href="http://reactivex.io/documentation/operators/empty-never-throw.html">ReactiveX', 4), ('subscribeThread', 4), ('9);\n', 4), ('Expert', 4), ('s.onSubscribe(is);\n\n', 4), ('fallback}', 4), ('enum")\n', 4), ('Answer<String>()', 4), ('delayAllErrors()', 4), ('com.google.common.base.Preconditions.checkArgument;\n\nimport', 4), ('enter', 4), ('Synchronous', 4), ('RxJavaPlugins.setErrorHandler(addToList(list));\n', 4), ('bufferSupplier\n', 4), ('t3);\n', 4), ('better.\n', 4), ('onComplete}\n', 4), ('2.12</a>)\n', 4), ('OtherObserver(MergeWithObserver<T>', 4), ('CURRENT', 4), ('Spliterator<T>', 4), ('this.executor', 4), ('sa.setSubscription(s);\n', 4), ('TestHelper.checkInvalidParallelSubscribers(\n', 4), ('yet.\n', 4), ('Functions.ON_ERROR_MISSING;\n', 4), ('(compareAndSet(index,', 4), ('annotation.\n', 4), ('bufferOpen,\n', 4), ('(StandardSystemProperty', 4), ('Downstream', 4), ('SpscLinkedArrayQueue<Object>(bufferSize);\n', 4), ('synchronously', 4), ('ObjectOutputStream', 4), ('li.add("alpha");\n', 4), ('accounts', 4), ('Completable)', 4), ('writes', 4), ('throwOnFirstOnly)//\n', 4), ('.delay(5,', 4), ('k2,', 4), ('composer)', 4), ('(skip', 4), ('mainDone', 4), ('<p><b>Note:</b>', 4), ('negative', 4), ('offer', 4), ('collection\n', 4), ('Service', 4), ('ObservableSource<R>', 4), ('entry.getKey();\n', 4), ('OtherSubscriber', 4), ('disposer.accept((D)resource);\n', 4), ('NEXT_WINDOW)', 4), ('Servant', 4), ('List<T>>', 4), ('org.junit.Assert.assertFalse;\nimport', 4), ('urls.add(new', 4), ('res)', 4), ('apply(Throwable', 4), ('loadCount.get());\n', 4), ('com.google.common.testing.NullPointerTester;\nimport', 4), ('debounceSelector;\n', 4), ('DateFormatCallable("dd/MM/yyyy",', 4), ('executeService.awaitTermination(10,', 4), ('goes', 4), ('2.0.5', 4), ('task.replace(worker.schedule(new', 4), ('singleItem;\n', 4), ('(Reader', 4), ('-9140123220065488293L;\n\n', 4), ('otherState;\n\n', 4), ('Unfortunately,', 4), ('new\n', 4), ('Jesse', 4), ('final:', 4), ('ClassCastException}.\n', 4), ('java.util.Optional;\n\nimport', 4), ('TimeUnit.MILLISECONDS))\n', 4), ('assertNotEquals(t3,', 4), ('#single()}', 4), ('times(1)).onNext("three");\n', 4), ('.onClose(stream::close);\n', 4), ('-7139995637533111443L;\n\n', 4), ('Unsubscribing', 4), ('.onBackpressureLatest()\n', 4), ('15.0\n', 4), ('12)\n', 4), ('PotatoPeelingTask(4));\n', 4), ('(terminate)', 4), ('Thread\n', 4), ('SpscArrayQueue<T>(prefetch);\n', 4), ('#getThrowable()}', 4), ('this.resultSelector', 4), ('Subscriber<?>', 4), ('sch.schedulePeriodicallyDirect(is,', 4), ('dest,', 4), ('<p>Equivalent', 4), ('"maxConcurrency");\n', 4), ('assertNull(ss.getThrowable());\n', 4), ('thin', 4), ('retry()', 4), ('mode\n', 4), ('nullResource()', 4), ('clear(dq);\n', 4), ('boundary.subscribe(bs);\n', 4), ('typo', 4), ('?>[0];\n\n', 4), ('(firstTimeoutIndicator', 4), ('<p><strong>Supported', 4), ('never()', 4), ('"onAfterTerminate', 4), ('Publisher<List<Long>>', 4), ('Data', 4), ('assertEquals(i', 4), ('trampolining', 4), ('(pcampbell@kemitix.net)\n', 4), ('functionality', 4), ('getScheduler()', 4), ('trampoline', 4), ('super(map);\n', 4), ('first;\n', 4), ('resource;\n', 4), ('io.reactivex.internal.util.EndConsumerHelper;\n\n/**\n', 4), ('java.util.Currency;\nimport', 4), ('list.get(1).intValue());\n', 4), ('Flowable.<Integer>empty()\n', 4), ('sch.createWorker();\n', 4), ('threadFactory)', 4), ('b[1]);\n', 4), ('execution");\n', 4), ('com.google.common.collect.HashBiMap;\nimport', 4), ('otherState;\n', 4), ('http://creativecommons.org/publicdomain/zero/1.0/\n', 4), ('(componentType', 4), ('subclass', 4), ('ThreadSafeDoubleCheckLocking', 4), ('assertFalse(cs.hasThrowable());\n', 4), ('upfront?",', 4), ('TERMINATED.', 4), ('package.\n', 4), ('timeIntervalDefaultSchedulerCustomUnit()', 4), ('ErrorMode.IMMEDIATE));\n', 4), ('max', 4), ('numberOfSubscribers', 4), ('held', 4), ('p.subscribe(inner);\n', 4), ('invoked.</dd>\n', 4), ('disposed/cancelled.\n', 4), ('Single.just(6),\n', 4), ('this.rightEnd', 4), ('assertFreshInstanceReturned(\n', 4), ('cdl2', 4), ('this.defaultItem', 4), ('observerLatch.countDown();\n\n', 4), ('>>>', 4), ('terminates.\n', 4), ('delta;\n', 4), ('this.first', 4), ('delivers', 4), ('errors.isEmpty())', 4), ('easier', 4), ('assertEquals(message,', 4), ('entryOf(k2,', 4), ('to2.assertValues(0L,', 4), ('initialValue)', 4), ('!compareAndSet(idx,', 4), ('too', 4), ('java.util.function.Predicate;\n\n/**\n', 4), (').test();\n\n', 4), ('java.util.TreeMap;\nimport', 4), ('assertEquals("onNextFail",', 4), ('filter\n', 4), ('com.google.common.collect.ImmutableListMultimap;\nimport', 4), ('name>', 4), ('source.throttleFirst(400,', 4), ('itemTimeoutIndicator;\n\n', 4), ('~', 4), ('from(@NonNull', 4), ('line,', 4), ('source.concatMapMaybe(new', 4), ('compared', 4), ('ones\n', 4), ('.assertError(e1)', 4), ('emitting;\n', 4), ('UnsupportedOperationException("This', 4), ('1000;\n', 4), ('stream.defaultWriteObject();\n', 4), ('assertTrue(values.get(1)', 4), ('size;', 4), ('(list.size()', 4), ('onDispose;\n', 4), ('obs.get().onError(new', 4), ('ps.mergeWith(cs).test();\n\n', 4), ('serializing', 4), ('(!m.signature.contains("Observable"))', 4), ('Object[]}', 4), ('xs)', 4), ('predicate.\n', 4), ('ArrayList<Worker>();\n\n', 4), ('SchedulerSupport}({@link', 4), ('itemTimeoutIndicator.apply(t),\n', 4), ('respect', 4), ('completes\n', 4), ('(get())', 4), ('Repeat</a>\n', 4), ('stop)', 4), ('bean.findAll().iterator();\n', 4), ('so.onError(new', 4), ('crashOnHasNext,', 4), ('Your', 4), ('TestObservable();\n', 4), ('io.reactivex.annotations.SchedulerSupport', 4), ('spy(new', 4), ('just}', 4), ('re-emitted', 4), ('bind', 4), ('BasicFuseableSubscriber<T,', 4), ('methods,', 4), ('lines;\n', 4), ('#onStart()},', 4), ('io.reactivex.observers.SerializedObserver;\n\npublic', 4), ('StatusMember', 4), ('SingleObserver,', 4), ('values.get(1));\n', 4), ('Promise<String>', 4), ('wasStreamClosed()', 4), ('unsubscribeThread);\n', 4), ('guarantee\n', 4), ('apply(Single', 4), ('assertNotNull(unsubscribeThread);\n', 4), ('BiConsumer<ArrayList<Integer>,', 4), ('TestHelper.checkBadSourceObservable(new', 4), ('flatMap}', 4), ('assertFalse(rmo.isDisposed());\n\n', 4), ('.doFinally(new', 4), ('onError.accept(ex);\n', 4), ('href="http://reactivex.io/documentation/operators/connect.html">ReactiveX', 4), ('element,', 4), ('assertFalse(errors.isEmpty());\n\n', 4), ('On', 4), ('repeat()', 4), ('(stopWindows.compareAndSet(false,', 4), ('GWT.', 4), ('collector.supplier().get();\n', 4), ('s.get()', 4), ('Single<List<Integer>>', 4), ('v1),', 4), ('reader\n', 4), ('compiler', 4), ('ObjectHelper.verifyPositive(maxConcurrency,', 4), ('ArrayList<Object>();\n', 4), ('say', 4), ('subscribeActual();\n\n', 4), ('this.u', 4), ('replace(K', 4), ('encounters\n', 4), ('after\n', 4), ('java.time.Duration.ofMillis;\nimport', 4), ('12/30/15', 4), ('FutureTask<Integer>', 4), ('biConsumerThrows(e))', 4), ('onCompleteSupplier;\n\n', 4), ('AssertionError(fail.toString());\n', 4), ('compare\n', 4), ('java.util.Map;\n\nimport', 4), ('<p>In', 4), ('Movie);\n', 4), ('AtomicInteger(2);\n\n', 4), ('assertTrue(cancelled);', 4), ('observer,\n', 4), ('idx2', 4), ('Single.zip(Arrays.asList(Single.just(1),', 4), ('is.setResource(worker);\n', 4), ('root', 4), ('SimpleQueue<R>', 4), ('other}\n', 4), ('firstTimeoutIndicator.subscribe(consumer);\n', 4), ('"onSuccess', 4), ('.concatMapCompletable(completableComplete())\n', 4), ('index.\n', 4), ('gain', 4), ('this.crashOnHasNext', 4), ('EmptyDisposable.complete(observer);\n', 4), ('cdl1.countDown();\n', 4), ('CollectionFeature.RESTRICTS_ELEMENTS,\n', 4), ('RxThreadFactory', 4), ('SingleSource<R>>', 4), ('r,', 4), ('2.0.7', 4), ('enters', 4), ('fromIterator', 4), ('AbstractMultimapTester<K,', 4), ('LinkedHashMap<Integer,', 4), ('wants', 4), ('values.get(3));\n', 4), ('DisposableHelper.DISPOSED', 4), ('consumer)', 4), ('AtomicReference<SwitchMapMaybeObserver<R>>', 4), ('completes,', 4), ('ParallelFailureHandling.SKIP;\n', 4), ('java.util.stream.Stream;\n\n/**\n', 4), ('Guarded', 4), ('(via', 4), ('(remaining', 4), ('PrintWriter', 4), ('split', 4), ('pp.parallel(1)\n', 4), ('Functional', 4), ('firstError()', 4), ('assertEquals("Didn\'t', 4), ('reduceResult', 4), ('#onSuccess(Object)},', 4), ('OpenJDK', 4), ('defaults', 4), ('added.set(true);\n', 4), ('fail(ex.getCause().toString()', 4), ('collected', 4), ('emission,\n', 4), ('assertTrue(cdl1.await(5,', 4), ('this.dao.findAll();\n', 4), ('bytes.\n', 4), ('"123-12312",', 4), ('operators.\n', 4), ('Unhandled', 4), ('runnable\n', 4), ('isDisposed();\n\n', 4), ('fusion</b>,', 4), ('npe,', 4), ('System.out.println("testShutdown', 4), ('Bound', 4), ('<T8>', 4), ('queue,', 4), ('testing\n', 4), ('CacheDisposable<T>[]', 4), ('Flowable.timer(1,', 4), ('finite', 4), ('t.onComplete();\n', 4), ('com.google.common.collect.RowSortedTable;\nimport', 4), ('classes.length;', 4), ('com.google.common.collect.ImmutableSortedSet;\nimport', 4), ('ro', 4), ('errors[1]', 4), ('Spliterators.iterator(fromSpliterator);\n', 4), ('q.add(NotificationLite.next(t));\n', 4), ('weather."});\n', 4), ('System.out.println("unsubscribeThread:', 4), ('svq', 4), ('encountered', 4), ('ObjectHelper.requireNonNull(resultSelector.apply(left,', 4), ('Splitr(fromSpliterator,', 4), ('errorSupplier', 4), ('ImmutableSet<Entry<K,', 4), ('onNext(R', 4), ('list.length', 4), ('8443155186132538303L;\n\n', 4), ('inner.getAndSet((SwitchMapMaybeObserver)INNER_DISPOSED);\n', 4), ('Maybe<Movie>', 4), ('register', 4), ('pp1.onNext(1);\n\n', 4), ('assertTrue(ro.isDisposed());\n\n', 4), ('assertEquals("alpha",', 4), ('onErrorComplete}', 4), ('java.util.logging.Logger;\n\n/**\n', 4), ('seed));\n', 4), ('state.\n', 4), ('queue.offer(new', 4), ('.timeInterval()\n', 4), ('sampled.subscribe(observer);\n\n', 4), ('Edge', 4), ('unsafe', 4), ('Throw', 4), ('assertNotEquals(t4,', 4), ('publisher)', 4), ('ignored.', 4), ('com.iluwatar.observer;\n\nimport', 4), ('Iterator<Completable>()', 4), ('primary', 4), ('AtomicReference<SwitchMapSingleObserver<R>>', 4), ('resetCollection();\n', 4), ('SingleSource<R>', 4), ('Supplier<LongAddable>()', 4), ('e4', 4), ('UIEventLoopScheduler();\n', 4), ('TestOutputStream', 4), ('(Class<?', 4), ('TestHelper.assertCompositeExceptions(ts,', 4), ('FooTest}', 4), ('java.util.Map.Entry;\n\n/**\n', 4), ('id;\n\n', 4), ('assertEquals(expected,', 4), ('msg)', 4), ('this.boundarySupplier', 4), ('rightEnd;\n\n', 4), ('until,', 4), ('child;\n', 4), ('Operation', 4), ('TreasureChest', 4), ('OtherObserver<T>(this);\n', 4), ('alternative', 4), ('Iterable.\n', 4), ('Application', 4), ('toFlowable()', 4), ('.assertValueCount(1024)\n', 4), ('subsequently', 4), ('onAfterSuccess));\n', 4), ('mean', 4), ('java.util.function.Supplier;\n\nimport', 4), ('scheduler.schedulePeriodicallyDirect(new', 4), ('.all(new', 4), ('4);\n\n', 4), ('2)));\n', 4), ('Observable.fromCallable(func);\n\n', 4), ('list.get(2).intValue());\n\n', 4), ('resultSelector;\n', 4), ('ref', 4), ('index.get();\n', 4), ('do\n', 4), ('Maybe.zip(Arrays.asList(Maybe.just(1),', 4), ('ThreadSubscription();\n', 4), ('Schedules', 4), ('"Error', 4), ('onErrorCleansUp()', 4), ('firstTimeoutIndicator)', 4), ('Apply', 4), ('com.google.common.collect.ImmutableMultimap;\nimport', 4), ('queue.get();\n\n', 4), ('Callable\n', 4), ('Violating', 4), ('disposeState;\n', 4), ("'rail'.\n", 4), ('.assertError(NoSuchElementException.class);\n', 4), ('faster', 4), ('writer1', 4), ('Re-subscribes', 4), ('flowable(Blackhole', 4), ('ObjectHelper.requireNonNull(accumulator.apply(v,', 4), ('#replaceValues}', 4), ('CustomerDto("1",', 4), ('(os', 4), ('Flowable.just(1).parallel(1)\n', 4), ('ps.onNext(4);\n', 4), ('href="http://www.grahamlea.com/2014/07/rxjava-threading-examples/">RxJava', 4), ('assertFalse(ms1.hasObservers());\n', 4), ('Scheduler>', 4), ('s.advanceTimeTo(1501,', 4), ('fromSpliterator', 4), ('observer.onNext(3);\n', 4), ('Iterable<Completable>()', 4), ('e.getMessage());\n\n', 4), ('iterator");\n', 4), ('Callable<StringBuilder>()', 4), ('assistance', 4), ('therefore', 4), ('ObjectHelper.requireNonNull(item,', 4), ('"source8', 4), ('domainEvent', 4), ('java.lang.reflect.Constructor;\nimport', 4), ('parameters.\n', 4), ('mergeDelayError(\n', 4), ('in.\n', 4), ('STATE_RESULT_VALUE', 4), ('initialValue;\n\n', 4), ('ArrayListMultimap}', 4), ('ArrayList<Long>();\n\n', 4), ('-8498650778633225126L;\n\n', 4), ('Functions.justCallable(Maybe.just(1)))\n', 4), ('UnicastProcessor<Integer>', 4), ('Iterable<U>', 4), ('s.onSuccess(value);\n', 4), ('relay', 4), ('mo', 4), ('Scheduler}\n', 4), ('memHeap', 4), ('second(s)");\n', 4), ('.assertResult(new', 4), ('8663801314800248617L;\n\n', 4), ('FlatMapIterableObserver<T,', 4), ('assertTrue(r.get());\n', 4), ('CompletableSources', 4), ('ms1', 4), ('users:</b>', 4), ('TestHelper.doubleOnSubscribe(new', 4), ('addString', 4), ('this.buffers', 4), ('LatestCoordinator<T,', 4), ('SubscriptionHelper.deferredSetOnce(this.s,', 4), ('directory.', 4), ('right),', 4), ('Stream}', 4), ('counter;\n', 4), ('.assertResult(1)\n', 4), ('(empty', 4), ('keySelector;\n\n', 4), ('source.safeSubscribe(new', 4), ('q.add(NotificationLite.complete());\n', 4), ('m.javadoc.indexOf(wrongPre', 4), ('s.createWorker();\n', 4), ('Single.unsafeCreate(new', 4), ('horrorMovies.scan(new', 4), ('assertError(list,', 4), ('ObjectHelper.requireNonNull(\n', 4), ('singleItem;\n\n', 4), ('upfront.\n', 4), ('MaybeCallbackObserver<Object>', 4), ('.intValue());\n', 4), ('MaybeSource<R>', 4), ('Thread.currentThread().setUncaughtExceptionHandler(null);\n', 4), ('throwOnFirstOnly', 4), ('Maybe.just(1);\n', 4), ('size())', 4), ('0)\n', 4), ('Transformation', 4), ('assertFalse(pp0.hasSubscribers());\n\n', 4), ('manual', 4), ('RUNNING;\n', 4), ('multimap;\n', 4), ('striped;\n', 4), ('TestException("Main"))\n', 4), ('assertTrue(e2', 4), ('component', 4), ('leftEnd;\n\n', 4), ('count));\n', 4), ('this.lazySet(1);\n', 4), ('sb,', 4), ('Movie());\n', 4), ('TestCompletable', 4), ('actual.onNext(null);\n', 4), ('provided\n', 4), ('Splitr(from,', 4), ('throwable.\n', 4), ('io.reactivex.functions.BiPredicate;\nimport', 4), ('assertTrue(disposable[0].isDisposed());\n', 4), ('isParallel).onClose(stream::close);\n', 4), ('co)', 4), ('com.iluwatar.hexagonal.domain.LotteryTicket;\nimport', 4), ('this.current', 4), ('bufferSupplier));\n', 4), ('@Empty\n', 4), ('"tasks', 4), ('consisting', 4), ('RuntimeException("forced', 4), ('autoConnect(int', 4), ('emitLoop()', 4), ('disposeState,', 4), ('subj.timeout(1,', 4), ('ListeningExecutorService', 4), ('java.util.concurrent.ArrayBlockingQueue;\nimport', 4), ('classloader', 4), ('f2', 4), ('verify(ballItem,', 4), ('callable.call();\n', 4), ('times(1)).onNext("e");\n', 4), ('this),', 4), ('main;\n', 4), ('o.onSubscribe(THROWING_DISPOSABLE);\n', 4), ('assertFalse(ss.hasThrowable());\n', 4), ('rightEnd;\n', 4), ('scheduleAtFixedRate(\n', 4), ('Notifies', 4), ('this.close', 4), ('ReentrantLock();\n', 4), ('onSubscribe;\n\n', 4), ('(fromSpliterator.tryAdvance(this))', 4), ('up.\n', 4), ('com.google.common.testing.SerializableTester;\nimport', 4), ('interruption\n\n', 4), ('href="http://reactivex.io/documentation/operators/repeat.html">ReactiveX', 4), ('List<Method>', 4), ('possiblyIgnoredError1', 4), ('mock', 4), ('STATE_ACTIVE', 4), ('BiPredicate<Integer,', 4), ('Queue<File>', 4), ('T\n', 4), ('stream.spliterator();\n\n', 4), ('this.debounceSelector', 4), ('s.onNext(3);\n', 4), ('IOException\n', 4), ('ObservableSource}', 4), ('remove\n', 4), ('K>>', 4), ('.assertFailure(ArithmeticException.class);\n', 4), ('id,', 4), ('ts2.assertNoErrors();\n', 4), ('consumer.\n', 4), ('switchOver()', 4), ('.assertValues(100,', 4), ('Burst.items(1).error(e2)', 4), ('System.out.println("error:', 4), ('leftEnd;\n', 4), ('asCharSink(to,', 4), ('disposable[0]', 4), ('Thread.sleep(150);\n', 4), ('consumers,', 4), ('TestSubscriber<Long>();\n', 4), ('E>>', 4), ('not,', 4), ('.assertOf(ObserverFusion.<Integer>assertFusionMode(QueueFuseable.NONE))\n', 4), ('R>(sources,', 4), ('ToListObserver<T,', 4), ('(EndConsumerHelper.setOnce(this.s,', 4), ('Thread.sleep(150);\n\n', 4), ('fashion.\n', 4), ('BlockingFirstSubscriber<Integer>();\n\n', 4), ('assertEquals(e2,', 4), ('list\n', 4), ('to1.assertEmpty();\n', 4), ('Add', 4), ('refer', 4), ('ProtocolViolationException', 4), ('special', 4), ('Hides', 4), ('test,', 4), ('Thread.currentThread().getName();\n', 4), ('java.nio.Buffer;\nimport', 4), ('ParallelFailureHandling.RETRY)\n', 4), ('Subscription",', 4), ('scheduler.advanceTimeBy(200,', 4), ('IllegalArgumentException))', 4), ('(long', 4), ('ObjectHelper.requireNonNull(run,', 4), ('ordering.\n', 4), ('is.queue;\n', 4), ('totalCalls.get());\n', 4), ('-4592979584110982903L;\n\n', 4), ('Function}', 4), ('doAfterTerminate}', 4), ('first.clear();\n', 4), ('Spliterator<R>', 4), ('TestHelper.checkDoubleOnSubscribeCompletable(new', 4), ('become', 4), ('this.allowFatal', 4), ('CancellationException.class)\n', 4), ('Annotation>', 4), ('innerExceptions', 4), ('parent.startFirstTimeout(firstTimeoutIndicator);\n', 4), ('assumes', 4), ('org.junit.Assert.fail;\n\nimport', 4), ('assertTrue(cel.get(index).toString(),', 4), ('list2.size());\n', 4), ('null}\n', 4), ('2:', 4), ('DeferredScalarDisposable<T>', 4), ('lastId', 4), ('startId)', 4), ("Letter('u'),", 4), ('char', 4), ('put(String', 4), ('design;', 4), ('ParameterizedType', 4), ('IOException()))\n', 4), ('otherErrors()', 4), ('ObjectHelper.requireNonNull(seedSupplier.call(),', 4), ('timer}', 4), ('accept(Observer<?', 4), ('org.mockito.Matchers.eq;\nimport', 4), ('ticket\n', 4), ('SingleObserver.\n', 4), ('TestHelper.emit(up,', 4), ('begins', 4), ('Flowable.just("Hello', 4), ('Publishers\n', 4), ('connect()', 4), ('mock(Future.class);\n', 4), ('orcs', 4), ('DisposableHelper.setOnce(upstream,', 4), ('onSuccessSlowPath()', 4), ('qd.clear();\n\n', 4), ('Observable.just(1);\n\n', 4), ('(J2EE)', 4), ('often', 4), ('pp.mergeWith(cs).test();\n\n', 4), ('e3', 4), ('testData;\n', 4), ('downstream,', 4), ('ms1;\n', 4), ('task.get().dispose();\n\n', 4), ('`this`', 4), ('removeInner(is);\n', 4), ('lastIndex;\n\n', 4), ('close,', 4), ('downloaded', 4), ('org.junit.jupiter.api.Assertions.assertTrue;\nimport', 4), ('times(0)).onNext("two");\n', 4), ('errorConditional()', 4), ('<B>', 4), ('bufferSupplier,', 4), ('Promise<V>', 4), ('Impl', 4), ('bufferClose,', 4), ('Publisher<TRightEnd>>', 4), ('processor', 4), ('addResources()', 4), ('ConcatMapInnerObserver', 4), ('*/\nclass', 4), ('this.errors;\n\n', 4), ('parent.boundaryError(this,', 4), ('Queues.drainUninterruptibly(q,', 4), ('service.execute(new', 4), ('"one");', 4), ('s.advanceTimeTo(1001,', 4), ('5L,', 4), ('m.javadoc.indexOf("Subscriber",', 4), ('accumulator,', 4), ('onto', 4), ('s.schedulePeriodicallyDirect(r,', 4), ('Flowable.rangeLong(1,', 4), ('Set<V>', 4), ('this.otherArray', 4), ('t1.onComplete();\n', 4), ('RuntimeException);\n', 4), ('li', 4), ('ObjectHelper.requireNonNull(fallback,', 4), ('qd;\n\n', 4), ('Spliterator#SUBSIZED}.', 4), ('org.junit.jupiter.api.Assertions.assertFalse;\nimport', 4), ('onComplete)\n', 4), ("'r'),", 4), ('onAfterTerminate,\n', 4), ('CompletableSource}s\n', 4), ('valid', 4), ('ms2.onError(new', 4), ('onSubscribed.get());\n', 4), ('TestStreamSupplier', 4), ('(Long)a[0];\n', 4), ('configurable', 4), ('validated)\n', 4), ('something', 4), ('closed', 4), ('seven', 4), ('lock.notifyAll();\n', 4), ('st.subscribe(new', 4), ('promise\n', 4), ('as.complete(v);\n', 4), ('notification\n', 4), ('2.1.5', 4), ('-3051469169682093892L;\n\n', 4), ('(count++', 4), ('(q.isEmpty())', 4), ('TODO(lowasser):', 4), ('*/\n\n/*\n', 4), ('datagram', 4), ('executorService.submit(()', 4), ('ps\n', 4), ('2014-2017', 4), ('assertFalse(bs2.isCancelled());\n', 4), ('observable(Blackhole', 4), ('(Entry<String,', 4), ('cycles,', 4), ('ce.getExceptions().size());\n', 4), ('backpressure()', 4), ('asynchronous,', 4), ('toKey,', 4), ('simpleLong()', 4), ('countAfter.get());\n', 4), ('ParallelFailureHandling.RETRY', 4), ('CancellableDisposable(c));\n', 4), ('drains', 4), ('flattens', 4), ('html', 4), ('next}', 4), ('TimeoutFallbackMaybeObserver<T>', 4), ('unsubscribe",', 4), ('System.out.println("Start!");\n', 4), ('lets', 4), ('java.util.Set;\n\nimport', 4), ('ErrorMode.IMMEDIATE\n', 4), ('lock;\n\n', 4), ('clear(q);\n', 4), ('directory.\n', 4), ('result[0]', 4), ('caches', 4), ('Repeatedly', 4), ('ErrorMode.BOUNDARY', 4), ('ExecutionException}', 4), ('next().\n', 4), ('indexes', 4), ('1024.0', 4), ('subscription.getThread();\n\n', 4), ('innerExceptions.get(0);\n', 4), ('com.google.common.collect.ImmutableCollection;\nimport', 4), ('Single.mergeDelayError(\n', 4), ('R>}', 4), ('DisposableHelper.dispose(otherObserver);\n', 4), ('this();\n', 4), ('invocation)', 4), ('Schedulers.single());\n', 4), ('represent', 4), ('-5677354903406201275L;\n', 4), ('jsonElement', 4), ('onCompleteSupplier;\n', 4), ('debounceSelector)', 4), ('r.intValue());\n', 4), ('(it', 4), ('Emitting', 4), ('.limit(3)\n', 4), ('"First");\n', 4), ('of(K', 4), ('logger.log(Level.WARNING,', 4), ('com.iluwatar.hexagonal.domain;\n\nimport', 4), ('(i++', 4), ('s.scheduleDirect(r,', 4), ('ObjectHelper.requireNonNull(sources.iterator(),', 4), ('doOnLifecycle(Functions.emptyConsumer(),', 4), ('limit()', 4), ('STATE_INACTIVE)', 4), ('UserDto', 4), ('older', 4), ('onError.accept(e);\n', 4), ('requested.get());\n', 4), ('concatenate\n', 4), ('parent.open(t);\n', 4), ('throwable.', 4), ('ms2;\n', 4), ('seedSupplier,', 4), ('q.offer(null);\n', 4), ('resultSet', 4), ('.assertFailure(NullPointerException.class);\n\n', 4), ('stopWindows;\n\n', 4), ('Callable<Collection<Object>>()', 4), ('(!terminate)', 4), ('tickets', 4), ('com.iluwatar.observer.generic;\n\nimport', 4), ('this.onAfterSuccess', 4), ('ClassPathTest.class.getClassLoader();\n', 4), ('s.onNext(Completable.never());\n', 4), ('Observer}s.\n', 3), ('IoTestCase', 3), ('That', 3), ('Maybe.just(1).delay(1,', 3), ('sources[i];\n\n', 3), ('Observable.', 3), ('Lists', 3), ('SingleObserver}s', 3), ('Flowable.just(o).count().toFlowable().onTerminateDetach().subscribe(ts);\n\n', 3), ('Spliterator.SIZED', 3), ('tc.complete);\n', 3), ('Schedulers.newThread());\n', 3), ('.containsExactly(rootDir,', 3), ('retryTimesPredicateWithZeroRetries()', 3), ('"onLift', 3), ('ErrorMode.BOUNDARY)', 3), ('Callback()', 3), ('m.javadoc.indexOf("onNext",', 3), ('legacy', 3), ('assertEquals(ImmutableSet.of(),', 3), ('element");\n', 3), ('#sourceMode}', 3), ('w2', 3), ('write(byte[]', 3), ('{}))\n', 3), ('retained!",', 3), ('FileWriteMode...', 3), ('super(value);\n', 3), ('mergeArrayDelayError(source1,', 3), ('InputMillion', 3), ('rco.add(d);\n\n', 3), ('covering', 3), ('basicWithCancellable()', 3), ('DisposableHelper.dispose(task);\n', 3), ('this.latest;\n', 3), ('((FuseToObservable<T>)this).fuseToObservable();\n', 3), ('age', 3), ('"d");\n', 3), ('sixteen-bit', 3), ('concat(Flowable.fromArray(source1,', 3), ('IllegalStateException("Scalar', 3), ('important', 3), ('dispose}', 3), ('times(1)).onNext("B");\n', 3), ('Function<Callable<Scheduler>,', 3), ('this.main', 3), ('errorDetaches()', 3), ('Callable<Throwable>()', 3), ('Function<Single,', 3), ('.assertError(e)\n', 3), ('InterruptedException.class);\n', 3), ('asMap();\n\n', 3), ('"1000000"})\n', 3), ('Consumer<Disposable>', 3), ('Rethrows', 3), ('valueSet', 3), ('factored', 3), ('impl.get(numStripes);\n', 3), ('s.request(maxConcurrency);\n', 3), ('1:39', 3), ('ReplayProcessor<Integer>', 3), ('Helpers.assertContains(list,', 3), ('retryTimesPredicateWithMatchingRetryAmount()', 3), ('ignore\n', 3), ('SafeTreeSet<>();\n', 3), ('Testers', 3), ('guardedQueue', 3), ('multimap().keySet())', 3), ('re-subscribe', 3), ('prepared', 3), ('weak', 3), ('Weather', 3), ('their\n', 3), ('-----------------------------------------------------------\n\n', 3), ('AtomicReference<SpscLinkedArrayQueue<R>>();\n', 3), ("Letter('s'))));\n", 3), ('natural")\n', 3), ('stack', 3), ('doOnDispose}', 3), ('GroupBySubscriber<T,', 3), ('open', 3), ('"");\n', 3), ('Classes', 3), ('Flowable.never()\n', 3), ('s.scheduleDirect(new', 3), ('FlowableSubscriber<U>', 3), ('resultIterator.hasNext()', 3), ('Assert.assertNull("Object', 3), ('situation', 3), ('setFuture(Disposable', 3), ('options);\n', 3), ('file:', 3), ('pp2.ignoreElements();\n', 3), ('4),', 3), ('executor.\n', 3), ('requires.', 3), ('api.someMethod(listener);\n', 3), ('ObjectHelper.requireNonNull(onFinally,', 3), ('rxdir', 3), ('would\n', 3), ('layers.add(new', 3), ('RxThreadFactory(String', 3), ('Publishers.\n', 3), ('boxedLast', 3), ('assertTrue(d2.isDisposed());\n', 3), ('2006', 3), ('dir', 3), ('.retry(2,', 3), ('reply', 3), ('CompletableOperator}', 3), ('NOTICE', 3), ('AsyncCallback<T>', 3), ('Sets.newHashSet(v0(),', 3), ('Makes', 3), ('pp2.ignoreElements()),', 3), ('(!m.signature.contains("Flowable")\n', 3), ('steps', 3), ('io.reactivex.internal.functions.ObjectHelper;\n\npublic', 3), ('TimeUnit.SECONDS).blockingFirst();\n\n', 3), ('PerfAsyncConsumer', 3), ('reducer);\n', 3), ('appropriately', 3), ('Observable.never();\n', 3), ('length();\n', 3), ('Future.\n', 3), ('"Observable");\n', 3), ('.retry(Integer.MAX_VALUE,', 3), ('TestDisposableSubscriber<Integer>();\n\n', 3), ('TestSingle<Integer>', 3), ('Object()));\n', 3), ('cancelAll();\n\n', 3), ('building', 3), ('serialize', 3), ('ts2.dispose();\n\n', 3), ('com.iluwatar.doublechecked.locking;\n\nimport', 3), ('NullPointerException("Actually', 3), ('supplier\n', 3), ('<strong>This', 3), ('parameterized', 3), ('})).test();\n\n', 3), ('w.subscribe(to2);\n\n', 3), ('ParallelFlowable<?', 3), ('actual.onSuccess(value);\n\n', 3), ('ObjectHelper.requireNonNull(clazz,', 3), ('QueueDrainObserver<T,', 3), ('List<CakeInfo>', 3), ('this.onDispose', 3), ('assertTrue(rmo.isDisposed());\n', 3), ('sr.setFuture(f);\n', 3), ('buffer");\n', 3), ('crashes', 3), ('.throttleFirst(1,', 3), ('oop', 3), ('accessible', 3), ('subscriber.assertNoErrors();\n', 3), ('observer.blockingGet();\n', 3), ('Map', 3), ('drainFused();\n', 3), ('Validator', 3), ('supported");\n', 3), ('execTime;\n', 3), ('assertEquals(Arrays.asList(2,', 3), ('a.length)', 3), ('behavior.</dd>\n', 3), ('operating', 3), ('x},', 3), ('AtomicInteger(1);\n\n', 3), ('Iterable<File>', 3), ('MockExecutor', 3), ('rights', 3), ('getSize()', 3), ('ConcatWithSubscriber<T>(s,', 3), ('List);\n', 3), ('<li>An', 3), ('tree.', 3), ('pop(stack);\n', 3), ('ImmutableMap.builder();\n', 3), ('com.google.common.base.Preconditions;\nimport', 3), ('utilities', 3), ('memHeap.getUsed();\n', 3), ('FuseToFlowable)', 3), ('IllegalArgumentException\n', 3), ('onCompleteThrows()', 3), ('mode).\n', 3), ('SubscriptionArbiter\n', 3), ('assertTrue(bs1.isCancelled());\n\n', 3), ('push(stack,', 3), ('...', 3), ('leads', 3), ('run.setFuture(new', 3), ('iterable;\n\n', 3), ('username);\n\n', 3), ('values.', 3), ('Integer.MAX_VALUE;\n', 3), ('task.', 3), ('poll,', 3), ('a.onNext(w);\n\n', 3), ('Publisher<R>>', 3), ('rvalue;\n', 3), ('Thread.getAllStackTraces().keySet())', 3), ('com.google.common.base.Supplier;\nimport', 3), ('lift(final', 3), ('biConsumerThrows(e1))', 3), ('Flowable.fromIterable(iterate(elements)))\n', 3), ('fail(\n', 3), ('InternalError();\n', 3), ('*",\n', 3), ('views', 3), ('-1', 3), ('-2467358622224974244L;\n\n', 3), ('apply()', 3), ('BiPredicate<Object,', 3), ('e.onNext(null);\n', 3), ('never()).onNext("three");\n', 3), ('Preconditions.checkNotNull(pattern);\n', 3), ('Subscriber<Long>', 3), ('Operators', 3), ('innerNext(int', 3), ('com.google.common.base.StandardSystemProperty.JAVA_CLASS_PATH;\nimport', 3), ('.assertResult(5);\n', 3), ('port));\n', 3), ('cancelOnArrival2()', 3), ('differences.\n', 3), ('onCancel)', 3), ('Consumer<Integer>', 3), ('"onDispose', 3), ('Completable.complete().toFlowable();\n', 3), ('java.util.concurrent.ThreadFactory;\nimport', 3), ('MutableClassToInstanceMap<B>', 3), ('ParallelFailureHandling>', 3), ('DisposableHelper.setOnce(target,', 3), ('href="http://reactivex.io/documentation/operators/filter.html">ReactiveX', 3), ('callable;\n\n', 3), ('Minimal', 3), ('s.request(c);\n', 3), ('src.distinctUntilChanged(TO_UPPER_WITH_EXCEPTION).subscribe(w);\n\n', 3), ('Completable.never()\n', 3), ('it.remove();\n', 3), ('verify(consumer,', 3), ('testErrorObservable()', 3), ('e.execute(\n', 3), ('map.put(entry.getKey(),', 3), ('o.apply(s);\n\n', 3), ('NioReactor', 3), ('WeakReference<Object>(o);\n\n', 3), ('pp.ignoreElements())\n', 3), ('fromAction()', 3), ('io.reactivex.internal.queue;\n\nimport', 3), ('exists.\n', 3), ('displayMessage)', 3), ('Cannot', 3), ('TestException();\n//\n//', 3), ('delivered\n', 3), ('observable)', 3), ('list.clear();\n', 3), ('first;\n\n', 3), ('counter.\n', 3), ('TestSubscriber<Object>(0L);\n\n', 3), ('read()', 3), ('"no', 3), ('NoSuchElementException.\n', 3), ('TimeUnit.MILLISECONDS).blockingFirst();\n', 3), ('isPartialView()', 3), ('exist,', 3), ('map.', 3), ('io.reactivex.internal.fuseable.ScalarCallable;\n\npublic', 3), ('AsyncProcessor.\n', 3), ('DisposableHelper.setOnce(this.s,', 3), ('.test(0);\n\n', 3), ('source).firstElement()\n', 3), ('fromCallableNull()', 3), ('containsKey(@NullableDecl', 3), ('merge(Iterable<?', 3), ('priority,', 3), ('iterables', 3), ('"]', 3), ('Functions.justFunction(Single.just(1)),', 3), ('has\n', 3), ('(from', 3), ('{@inheritDoc}', 3), ('LotteryTicketRepository', 3), ('iterator.\n', 3), ('accepted.', 3), ('.assertFailure(MissingBackpressureException.class);\n\n', 3), ('WithPublicConstant', 3), ('!m.signature.contains("MaybeSource")\n', 3), ('concatWith}', 3), ('dirs.poll();\n\n', 3), ('AmbInnerSubscriber<T>[]', 3), ('(immediate,', 3), ('iteration.\n', 3), ('similarly', 3), ('testEmptyObservable()', 3), ('onErrorResumeNext(final', 3), ('21);\n', 3), ('<p>An', 3), ('"]";\n', 3), ('Publisher<List<Integer>>', 3), ('suite.addTest(SetTestSuiteBuilder.using(new', 3), ('nullArgument()', 3), ('5));\n\n', 3), ('"Orcish', 3), ("Letter('w'),", 3), ('operators</a>\n', 3), ('this.prototype', 3), ('disposal', 3), ('itself.', 3), ('ImmutableList<E>', 3), ('future.', 3), ('Flowable.\n', 3), ('#mergeDelayError(Publisher)}', 3), ('(!hasNext)', 3), ('"errorSupplier', 3), ('.assertFailure(IllegalArgumentException.class);\n\n', 3), ('ns', 3), ('1811839108042568751L;\n\n', 3), ('rso.dispose();\n\n', 3), ('testCounterDateValues()', 3), ('towards', 3), ('source3));\n', 3), ('wrapping.\n', 3), ('(ostensibly)', 3), ('smell', 3), ('schedulePeriodicallyDirect(@NonNull', 3), ('LOGGER.info("Registering', 3), ('(fallback', 3), ('app', 3), ('initialize', 3), ('observer2', 3), ('onDispose));\n', 3), ('q.offer(1,', 3), ('Maybe.concatArrayDelayError(Maybe.just(1),', 3), ('FileOutputStream(file),', 3), ('Publisher,', 3), ('stays', 3), ('java.lang.Thread.UncaughtExceptionHandler;\nimport', 3), ('(AsyncDisposable<T>', 3), ('HasUpstreamMaybeSource<T>', 3), ('ConcatWithObserver<T>(observer,', 3), ('2).elementAt(-1);\n', 3), ('System.gc();\n\n', 3), ('contained\n', 3), ('Maybe}\n', 3), ('s.shutdown();\n\n', 3), ('UNIX).', 3), ('InputStreamReader(new', 3), ('wrappedHashMapTests(\n', 3), ('once()', 3), ('Nulls', 3), ('File("/b"),', 3), ('packet.\n', 3), ('assertFalse(run.isDisposed());\n\n', 3), ('database.",', 3), ('@Ignore("No', 3), ('javax.persistence.CascadeType;\nimport', 3), ('ListenableFuture<Integer>', 3), ('BlockingMultiObserver<T>();\n', 3), ('TypeVariable<D>', 3), ('.test(1)\n', 3), ('ConcatMaybeObserver<T>(s,', 3), ('RxJavaPlugins.onError(null);\n\n', 3), ('counter.get()', 3), ('enqueue,', 3), ('valueComparator)', 3), ('resultIterator', 3), ('StatusMember(1);\n', 3), ('buffer.\n', 3), ('reducerCrash()', 3), ('ambWith}', 3), ('ballThread.join();\n\n', 3), ('Future<?', 3), ('comparators', 3), ('promise.fulfillInAsync(new', 3), ('cal.get(Calendar.MONTH)', 3), ('chunk));\n', 3), ('array.', 3), ('errorMode,\n', 3), ('fileA,', 3), ('assertEquals("error!",', 3), ('fileOut', 3), ('Observable.fromFuture(future).subscribe(to);\n\n', 3), ('observe', 3), ('Though', 3), ('innerObserver,', 3), ('latest.length)', 3), ('java.util.function.Predicate;\n\nimport', 3), ('LotteryNumbers.create(new', 3), ('SampleTimedObserver<T>', 3), ('Charles', 3), ('onTerminate', 3), ('EnumHashBiMap<K,', 3), ('ImmutableCollection<V>', 3), ('caused', 3), ('methodTestNoCancel()', 3), ('ElementAtSubscriber<T>', 3), ('Calendar', 3), ('shutdownNow()', 3), ('us.onNext(1);\n', 3), ('TestHelper.mockSingleObserver();\n', 3), ('StudentDatabase', 3), ('org.junit.Assert.assertTrue;\nimport', 3), ('<S>', 3), ('valueSet.comparator());\n', 3), ('unsubscribeOn(final', 3), ('Strategy', 3), ('bytes");\n', 3), ('assertSame(cop,', 3), ('(!dirs.isEmpty())', 3), ('Mute.mute(()', 3), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/autoConnect.f.png"', 3), ('crashOnNext,', 3), ('RxJavaPlugins.class.getMethods())', 3), ('res', 3), ('cs.onComplete();\n', 3), ('npe.initCause(ex);\n', 3), ('errors;\n', 3), ('s.createWorker();\n\n', 3), ('never}', 3), ("thread's\n", 3), ('passes', 3), ('testDoOnEach()', 3), ('elements.', 3), ('java.time.LocalDateTime;\nimport', 3), ('modes)', 3), ('generateInt()', 3), ('o.onNext(1);\n', 3), ('FluentIterable<T>', 3), ('t.sendOnError(new', 3), ('mock(Subscription.class);\n\n', 3), ('(ns)', 3), ('completable()', 3), ('unit,\n', 3), ('com.iluwatar.databus.members;\n\nimport', 3), ('visitWildcardType(WildcardType', 3), ('reduces', 3), ('u);\n', 3), ('arbitraryConstantInstanceOrNull(type);\n', 3), ('Observable.fromArray(array).flatMapIterable(new', 3), ('MaybeCallbackObserver<Object>(\n', 3), ('DatagramPacket}', 3), ('append', 3), ('BigInteger', 3), ('lift}', 3), ('cancelOnArrival()', 3), ('(FUSED_READY', 3), ('consumerIndex', 3), ('requirements.\n', 3), ('val)', 3), ('.retry(0,', 3), ('assertEquals(expectedCounterDateValues,', 3), ('RS', 3), ('close', 3), ('java.lang.reflect.InvocationTargetException;\nimport', 3), ('ConcurrentHashMap<String,', 3), ('DEFAULT_URL', 3), ('onComplete}.\n', 3), ('interrupted()', 3), ('List},', 3), ('instantiated', 3), ('Function<Long,', 3), ('HashSet<Thread>();\n', 3), ('topShelf.add(factory.createPotion(PotionType.INVISIBILITY));\n', 3), ('ClassLoader(parent)', 3), ('Collector}', 3), ('dummyKey;\n', 3), ('Creating', 3), ('m.javadoc.indexOf("Flowable",', 3), ('run.run();\n\n', 3), ('licenses', 3), ('single)', 3), ('bigger', 3), ('Single.merge(Single.just(1),', 3), ('lc', 3), ('pp.hasSubscribers());\n\n', 3), ('GroupBySubscriber<?,', 3), ('Single.never();\n', 3), ('us\n', 3), ('drain(q,', 3), ('sub', 3), ('.retry(1,', 3), ('counter.incrementAndGet();\n', 3), ('-502562646270949838L;\n\n', 3), ('groups', 3), ('TimerDisposable(final', 3), ('current.lazySet(value);\n', 3), ('this.onDrop', 3), ('science', 3), ('task);\n\n', 3), ('(cancelled.isDisposed())', 3), ('https://github.com/JCTools/JCTools/blob/master/jctools-core/src/main/java/org/jctools/queues/atomic\n', 3), ('knowledge', 3), ('LOGGER.info("----------------------------------------------------------");\n\n', 3), ('atomicLong.incrementAndGet();\n', 3), ('safe.onComplete();\n', 3), ('here\n', 3), ('tenants', 3), ('Thread.sleep(50);\n', 3), ('archers"});\n', 3), ("User's", 3), ('Marks', 3), ('src.distinctUntilChanged().subscribe(w);\n\n', 3), ('e.setDisposable(d1);\n', 3), ('visitGenericArrayType(GenericArrayType', 3), ('doOnNext(@NonNull', 3), ('TestMaybe<Integer>', 3), ('decided', 3), ('writers', 3), ('PartyMember', 3), ('(CompletableSource', 3), ('ElementAtObserver<T>(t,', 3), ('share', 3), ('SafeSubscriber<String>(o).onError(new', 3), ('.assertResult(2,', 3), ('logs', 3), ('CancellableDisposable(c);\n\n', 3), ('!m.signature.contains("TestObserver"))', 3), ('pp2.onComplete();\n', 3), ('Single.zipArray(new', 3), ('elapsed.\n', 3), ('observer.onSubscribe(Disposables.disposed());\n', 3), ('nested', 3), ('TODO(b/65488446):', 3), ('Schedulers.single().scheduleDirect(ft,', 3), ('If\n', 3), ('sources));\n', 3), ('it)', 3), ('DD.MM.YYYY\n', 3), ('RxJavaPlugins.onSubscribe(this,', 3), ('BlockingMultiObserver<T>', 3), ('regarding\n', 3), ('currentIndex++;\n', 3), ('-1,', 3), ('FlowableEmitter}', 3), ('this.subscriber', 3), ('tryLock(long', 3), ('second)', 3), ('((FuseToFlowable<T>)this).fuseToFlowable();\n', 3), ('acts', 3), ('flows.', 3), ('Observable.error(exception);\n', 3), ('Node', 3), ('CacheLoader<Object,', 3), ('false})', 3), ('futures', 3), ('disposeExcept(index);\n', 3), ('io.reactivex.internal.util.BlockingHelper;\nimport', 3), ('ps2.onError(ex);\n', 3), ('target)', 3), ('IOException;\n\n', 3), ('Basic', 3), ('satisfy\n', 3), ('nothing\n', 3), ('(Subscriber<?>', 3), ('JoinSubscription<TLeft,', 3), ('FeatureSpecificTestSuiteBuilder<\n', 3), ('System.nanoTime();\n', 3), ('later\n', 3), ('count.getAndIncrement();\n', 3), ('he', 3), ('BaseConcatMapSubscriber<T,', 3), ('MapMode', 3), ('href="https://github.com/google/guava/wiki/FunctionalExplained">the', 3), ('a1', 3), ('Flag', 3), ('@BeforeAll\n', 3), ('exceptionHandler', 3), ('"Completable");\n', 3), ('List<Wizard>', 3), ('2017\n', 3), ('create(int', 3), ('rules', 3), ('Created', 3), ('s.onSubscribe(d);\n\n', 3), ('Collections.sort(insertionOrder);\n', 3), ('TestObserver.create();\n\n', 3), ('Callable<Integer>', 3), ('lock()', 3), ('FirstConstantIsNull', 3), ('a.onNext((T)o);\n', 3), ('io.reactivex.completable;\n\nimport', 3), ('separator', 3), ('quits\n', 3), ('componentType;\n', 3), ('active.get()', 3), ('ASYNC_DISPOSED', 3), ('inventory.', 3), ('workers.add(new', 3), ('getAnnotatedBounds()}', 3), ('delegate();\n\n', 3), ('keyComparator;\n', 3), ('(read', 3), ('comparison', 3), ('GC");\n', 3), ('lines\n', 3), ('IllegalStateException("Should', 3), ('assertUndeliverableTestException(list,', 3), ('Integer.MAX_VALUE)\n', 3), ('temporaryFile', 3), ('com.google.common.cache;\n\nimport', 3), ('cause.\n', 3), ('WeakReference<Object>', 3), ('.assertEmpty()\n', 3), ('Functions.EMPTY_LONG_CONSUMER,', 3), ('assertEquals(displayMessage,', 3), ('RUNNING', 3), ('onEvent)', 3), ('desired', 3), ('Function<CompletableOperator,', 3), ('phase\n', 3), ('doWrite(Object', 3), ('this.longs', 3), ('none', 3), ('customer.getId());\n', 3), ('Web', 3), ('completed.countDown();\n', 3), ('Party', 3), ('scheduler.createWorker();\n\n', 3), ('o.onNext(2);\n', 3), ('PrintStream', 3), ('SampleTimedSubscriber<T>', 3), ('setOnce(AtomicReference<Subscription>', 3), ('requested.decrementAndGet();\n', 3), ('onCancel;\n\n', 3), ('multiset.add(freshElement);\n', 3), ('mechanism', 3), ('-7346385463600070225L;\n\n', 3), ('lim', 3), ('zipper,', 3), ('io.reactivex.Flowable;\n\npublic', 3), ('times(1)).onNext("two");\n', 3), ('v2,', 3), ('.flatMapMaybe(new', 3), ('mask;\n', 3), ('Map}', 3), ('context.",', 3), ('.compose(new', 3), ('assertEquals(expectRead,', 3), ('LOGGER.info("Get', 3), ('op;\n', 3), ('displayMessage', 3), ('Flowable.just("a",', 3), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concat.png"', 3), ('findById(LotteryTicketId', 3), ('Maybe<Long>', 3), ('io.reactivex.schedulers.TestScheduler;\n\nimport', 3), ('active.getAndIncrement();\n\n', 3), ('queue.offer(value);\n', 3), ('C>(this,', 3), ('o.collect(new', 3), ('o[0].onError(new', 3), ('3520831347801429610L;\n\n', 3), ('found\n', 3), ('2.0.8\n', 3), ('dataSource.getConnection();\n', 3), ('scheduled\n', 3), ('concat(Iterable<?', 3), ('other},', 3), ('nullAction()', 3), ('Number>', 3), ('Maybe.fromAction(run)\n', 3), ('interfaceType}', 3), ('pp1.singleElement(),', 3), ('this.sourceSupplier', 3), ('Single.zip(new', 3), ('E#toString()}', 3), ('ElementAtSubscriber<T>(s,', 3), ('multimap.put(key,', 3), ('actual.tryOnNext(t);\n', 3), ('LOGGER.info("The', 3), ('ArrayList}', 3), ('dataSource', 3), ('counter.getAndIncrement();\n', 3), ('drainNormal()', 3), ('notice:\n', 3), ('Maybe.zip(Maybe.just(1),', 3), ('break', 3), ('onSuccess(@NonNull', 3), ('#mergeDelayError(Iterable)}', 3), ('findLast(Stream)', 3), ('headMap(K', 3), ('i}.\n', 3), ('SingleSource)}', 3), ('java.util.concurrent.ScheduledFuture;\nimport', 3), ('"E");\n', 3), ('overridden)\n', 3), ('CompoundOrdering<?>', 3), ('"mapper");\n', 3), ('Maybe)', 3), ('Replaces', 3), ('proxy,', 3), ('!m.signature.contains("Publisher")\n', 3), ('isShutdown()', 3), ('assertEquals(ScheduledRunnable.ASYNC_DISPOSED,', 3), ('FluentFuture}', 3), ('--------------------------------------------------------------\n\n', 3), ('ByteSource()', 3), ('times.\n', 3), ('retry(Predicate<?', 3), ('copy(File', 3), ('String(data,', 3), ('retryTimesPredicateWithNotMatchingRetryAmount()', 3), ('disposer;\n\n', 3), ('actual.onNext(u);\n', 3), ('Flowable.empty().test();\n', 3), ('Long.MAX_VALUE));\n\n', 3), ('sender;\n', 3), ('asynchronously', 3), ('b.indexOf("public', 3), ('Callback', 3), ('task.\n', 3), ('again:\n', 3), ('earlier', 3), ('ListeningScheduledExecutorService', 3), ('fs.cancel(false);\n', 3), ('12/28/15', 3), ('RPC', 3), ('Generic', 3), ('Decker', 3), ('QueueDrainSubscriber<T,', 3), ("8's", 3), ('(!await(timeout,', 3), ('ConnectConsumer', 3), ('java.util.concurrent.atomic.AtomicReference;\n\npublic', 3), ('onCompleteSupplier));\n', 3), ('suppressed.\n', 3), ('Used', 3), ('consults', 3), ('MaybeSource},', 3), ('assertFalse(w.tasks.hasSubscriptions());\n//', 3), ('LinkedHashMultiset}', 3), ('sch.advanceTimeBy(1,', 3), ('Completable}.\n', 3), ('"\\n");\n', 3), ('singleFunction', 3), ('Implementation\n', 3), ('For\n', 3), ('getId()', 3), ('--------------------------------------------------------------\n', 3), ('Pellentesque', 3), ('DebounceObserver<T,', 3), ('NoSuchElementException}', 3), ('Queues', 3), ('assertTrue(iterator.hasNext());\n', 3), ('fo.cancel(false);\n', 3), ('@SuppressWarnings("serial")\n', 3), ('DONE', 3), ('io.reactivex.internal.subscribers.QueueDrainSubscriber;\nimport', 3), ('put(key,', 3), ('Do</a>\n', 3), ('e.getCause().getClass());\n', 3), ('Set);\n', 3), ('beforeDownstream()', 3), ('size);\n', 3), ('merge(Flowable.fromArray(source1,', 3), ('Predicate<File>', 3), ('bh,', 3), ('//given\n', 3), ('List<Facade<Integer>>', 3), ('checkTerminated(done,', 3), ('assertTrue(ms.hasObservers());\n', 3), ('latest[index]', 3), ('unbounded.onNext(1);\n', 3), ('scheduler.advanceTimeTo(5,', 3), ('onError.set(e);\n', 3), ('<R,', 3), ('(outputFused)', 3), ('tries', 3), ('bugs.\n', 3), ('Ts', 3), ('Maybe.<Integer>empty().toObservable();\n', 3), ('this.runnable', 3), ('java.net.InetAddress;\nimport', 3), ('toArray()', 3), ('UndirectedNetworkConnections<N,', 3), ('disposables.replace(d);\n', 3), ('Charsets.UTF_8))', 3), ('ts2.assertNoValues();\n\n', 3), ('If,', 3), ('Flowable<Timed<Integer>>', 3), ('long)\n', 3), ('*/\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic', 3), ('list.add(e);\n\n', 3), ('DisposableHelper.isDisposed(upstream.get());\n', 3), ('Observable.<Long>', 3), ('case,\n', 3), ('potions\n', 3), ('a[i]', 3), ('asynchronously\n', 3), ('CancellationException}', 3), ('.doOnCancel(this)\n', 3), ('tickets\n', 3), ('createTestSuite().");\n', 3), ('resubscribing', 3), ('Fluent', 3), ('items;\n\n', 3), ('.assertOf(ObserverFusion.<Integer>assertNotFuseable())\n', 3), ('register(student,', 3), ('Flowable.<Long>', 3), ('time)', 3), ('<C>', 3), ('java.lang.reflect.TypeVariable;\nimport', 3), ('(evictedGroups', 3), ('lazySet(ON_COMPLETE);\n', 3), ('PerfSubscriber(bh);\n\n', 3), ('ds.onComplete();\n', 3), ('#mergeDelayError(Iterable)\n', 3), ('dispose2()', 3), ('errs.terminate();\n', 3), ('completableFunction', 3), ('buffer.flip();\n', 3), ('exception;\n\n', 3), ('Single.just(v).toObservable();\n', 3), ('Consume', 3), ('ObjectHelper.requireNonNull(future,', 3), ('testScheduler).subscribe(new', 3), ('count)));\n', 3), ('observable;\n', 3), ('(s1', 3), ('test(Object', 3), ('.retryWhen(errors', 3), ('apply()}', 3), ('getMultiset()\n', 3), ('place,', 3), ('concat(sources,', 3), ('TypeToken<com.google.common.base.Optional<OneConstantEnum>>()', 3), ('java.lang.reflect.AnnotatedElement;\nimport', 3), ('print', 3), ('(QueueSubscription<T>)', 3), ('several', 3), ('ConcatMaybeObserver(Subscriber<?', 3), ('source4));\n', 3), ('NavigableSetTestSuiteBuilder.using(\n', 3), ('necessary\n', 3), ('concatArray(source1,', 3), ('subject.onNext(2);\n', 3), ('i--)', 3), ('userDto', 3), ('Set<AnEnum>', 3), ('testing.\n', 3), ('callOnOverflow', 3), ('SingleCache<T>', 3), ('Flowable.<Integer>', 3), ('request\n', 3), ('.doOnLifecycle(new', 3), ('loads', 3), ('allTests()', 3), ('Computes', 3), ('BallThread', 3), ('counter++;\n', 3), ('SimpleQueueWithConsumerIndex<T>', 3), ('otherSource;\n\n', 3), ('valueCollection', 3), ('flowable()', 3), ('considerations', 3), ('assertSame(runnable,', 3), ('source.onError(new', 3), ('super(subscriber);\n', 3), ('troll', 3), ('maxConcurrency);\n', 3), ('BiFunction<Observable,', 3), ('clientName;\n', 3), ('to.errors().get(0);\n', 3), ('(n.isOnError())', 3), ('ba1.length);\n', 3), ('ambArray}', 3), ('ObjectHelper.requireNonNull(onEvent,', 3), ('u1', 3), ('washingMachine', 3), ('onEvent(Event', 3), ('baseIndex', 3), ('MissingBackpressureException("Queue', 3), ('BooleanRunnable', 3), ('com.iluwatar.resource.acquisition.is.initialization;\n\nimport', 3), ('ClassOwnership', 3), ('SingleScheduler();\n', 3), ('io.reactivex.schedulers.Schedulers;\n\n@BenchmarkMode(Mode.Throughput)\n@Warmup(iterations', 3), ('subscribe(onSuccess,', 3), ('catapults"});\n', 3), ('simulate', 3), ('loadAllCount.get());\n\n', 3), ('LoggerFactory.getLogger("root")).addAppender(this);\n', 3), ('FileOutputStream', 3), ('org.mockito.stubbing.Answer;\n\nimport', 3), ('lockInterruptibly()', 3), ('repeatUntil(BooleanSupplier', 3), ('Copies', 3), ('LazyFluentIterable<E>()', 3), ('java.util.concurrent.LinkedBlockingDeque;\nimport', 3), ('assertFalse(rmo.isDisposed());\n', 3), ('(entry', 3), ('org.junit.Assert.assertNull;\n\nimport', 3), ('startWith}', 3), ('from)', 3), ('NetworkConnections}', 3), ('normalError()', 3), ('especially', 3), ('preventing', 3), ('<pre>', 3), ('Fry\n', 3), ('door', 3), ('manage', 3), ('cop', 3), ('Blocking', 3), ('onRequest,\n', 3), ('ts.assertNotComplete();\n\n', 3), ('save(LotteryTicket', 3), ('assertTrue(s2.isCancelled());\n\n', 3), ('delay(final', 3), ('downstream)', 3), ('IntervalSubscriber', 3), ('Observable.intervalRange(1,', 3), ('e.onSuccess(2);\n', 3), ('retry\n', 3), ('continueNextSource', 3), ('subjectGenerator;\n', 3), ('annotation,', 3), ('ImmutableCollection<E>', 3), ('child.onNext(o);\n\n', 3), ('idx3', 3), ('"onFinally', 3), ('SingleObservers.\n', 3), ('String>)', 3), ('locked', 3), ('hasValue()', 3), ('cal', 3), ('(PublishDisposable<T>', 3), ('multimaps.\n', 3), ('height="392"', 3), ('actual.onSuccess(t);\n\n', 3), ('annotationClass,', 3), ('validated', 3), ('BallThread}', 3), ('o.name()));\n', 3), ('first;</strong>\n', 3), ('AccessibleObject', 3), ('afterDownstream();\n', 3), ('(d.isDisposed())', 3), ('optimizations', 3), ('spell\n', 3), ('depend', 3), ('org.junit.jupiter.api.Assertions.assertThrows;\nimport', 3), ('AsyncSubscription', 3), ('source.onNext(5);\n', 3), ('s.dispose();\n\n', 3), ('mf', 3), ('Flowable.just("First",', 3), ('assertTrue(run.isDisposed());\n\n', 3), ('although\n', 3), ('runnable;\n\n', 3), ('assertTrue(task.isDisposed());\n\n', 3), ('onTerminate,\n', 3), ('14.0', 3), ('ts2.assertNotComplete();\n', 3), ('completion.', 3), ('non-serialized', 3), ('update))', 3), ('retry(Long.MAX_VALUE,', 3), ('ArrayList<>(reps);\n', 3), ('function.', 3), ('prettyPrint("The', 3), ('AbstractDocument', 3), ('assertEquals("three",', 3), ('BufferBoundarySupplierSubscriber<T,', 3), ('SerializableTester.reserializeAndAssert(set);\n', 3), ('BiFunction', 3), ('times);\n\n', 3), ('assertEquals(ClassInfo.class,', 3), ('Observers}s', 3), ('InetSocketAddress(InetAddress.getLocalHost(),', 3), ('BufferCloseObserver<T,', 3), ('toFlowable}', 3), ('left);\n\n', 3), ('b.add(t);\n\n', 3), ('V>,', 3), ('equivalent.\n', 3), ('com.google.common.collect.Iterables;\nimport', 3), ('read(SelectionKey', 3), ('upstream.request(limit);\n', 3), ('java.util.AbstractSet;\nimport', 3), ('newCondition()', 3), ('Inventory', 3), ('fiction', 3), ('values[index]', 3), ('OperatorWindowBoundaryOpenObserver<T,', 3), ('"\\r",', 3), ('org.junit.jupiter.api.TestInstance;\nimport', 3), ('File(rootDir,', 3), ('idiom', 3), ('AssemblyStackTraceException', 3), ('Flowable<Boolean>', 3), ('org.junit.jupiter.api.Assertions.fail;\n\n/**\n', 3), ('!isEmpty())', 3), ('producerIndex.get();\n', 3), ('ImmutableSet<TestOption>', 3), ('RxJava\n', 3), ('(u.isDirectory())', 3), ('"Flowable");\n', 3), ('List<Runnable>', 3), ('isDisposed}', 3), ('conform', 3), ('multimap().asMap().values())', 3), ('RxJavaPlugins.onSchedule(run);\n\n', 3), ('clientName', 3), ('fromCallableTwice()', 3), ('Format,', 3), ('java.lang.reflect.GenericDeclaration;\nimport', 3), ('Binds', 3), ('CakeInfo', 3), ('resumed\n', 3), ('false}', 3), ('SUPPORTS_REMOVE,\n', 3), ('SingleOperator}', 3), ('current))', 3), ('value[0]', 3), ('(next.getCake()', 3), ('sourceSupplier', 3), ('(fail.length()', 3), ('And', 3), ('FlatMapSingleObserver(AtomicReference<Disposable>', 3), ('origin', 3), ('timer(delay,', 3), ('distinctElements', 3), ('Collections.unmodifiableSet(((BiMap<E,', 3), ('composed', 3), ('ParallelFailureHandling}', 3), ('supported,', 3), ('sources[i];\n', 3), ('(s.charAt(i)', 3), ('R>(\n', 3), ('java.lang.reflect.ParameterizedType;\nimport', 3), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/autoConnect.o.png"', 3), ('io.reactivex.exceptions.Exceptions;\n\npublic', 3), ('io.reactivex.annotations.CheckReturnValue;\nimport', 3), ('ts2', 3), ('favor', 3), ('SHUTDOWN)', 3), ('2017-present,', 3), ('Maybe},', 3), ('MaybeSource)\n', 3), ('Observable.fromArray(new', 3), ('((Callable<T>)source).call();\n', 3), ('retryTimesPredicateWithMatchingPredicate()', 3), ('numCalls.get());\n', 3), ('Falling', 3), ('this.delayError;\n', 3), ('end",', 3), ('file}', 3), ('onAfterTerminate', 3), ('update\n', 3), ('negative,', 3), ('(blocking)', 3), ('careful', 3), ('ObservableSource<?>[]', 3), ('timed/delayed', 3), ('BiFunction<Maybe,', 3), ('get(PARENT_INDEX);\n', 3), ('Worker()', 3), ('io.reactivex.internal.subscriptions.SubscriptionHelper;\n\npublic', 3), ('createdDateValues', 3), ('"\\r\\n");\n', 3), ('synchronization.\n', 3), ('java.util.concurrent.atomic.AtomicReferenceArray;\n\nimport', 3), ('Evaluates', 3), ('Log', 3), ('MaybeObserver#onComplete', 3), ('"resourceSupplier', 3), ('Flowable/Observable', 3), ('JCTools', 3), ('last(int', 3), ('WithPublicConstants', 3), ('o.scan(new', 3), ('bottom', 3), ('scheduler.triggerActions();\n\n', 3), ('mws', 3), ('javax.persistence.Entity;\nimport', 3), ('(test', 3), ('syncFused', 3), ('implementations.', 3), ('technically', 3), ('@After\n', 3), ('(queue.compareAndSet(null,', 3), ('ms.observerCount());\n', 3), ('Future<T>,', 3), ('source8,', 3), ('com.iluwatar.flux.action.Action;\nimport', 3), ('retrieved', 3), ('ArrayList<E>', 3), ('tenantName', 3), ('.forEachEntry((element,', 3), ('List<Student>>', 3), ('disposeAll()', 3), ('NOSONAR\n', 3), ('ImmutableList.builder();\n', 3), ('this.options', 3), ('RuntimeException();', 3), ('everybody', 3), ('.elementAt(1)\n', 3), ('FROM', 3), ('sources[i].subscribe(as[i]);\n', 3), ('ConcatWithObserver(Observer<?', 3), ('second(s)\n', 3), ('Flowable<Throwable>,', 3), ('SYNC_DISPOSED', 3), ('AtomicReference<Future<?>>', 3), ('curr', 3), ('tenantName)', 3), ('.assertResult(1L,', 3), ('MaybeToPublisher.instance(),', 3), ('givenNumbers)', 3), ('callback-style', 3), ('pitfalls', 3), ('gate;\n\n', 3), ('Complete', 3), ('Functions.emptyConsumer()));\n', 3), ('io.reactivex.internal.subscriptions.EmptySubscription;\n\npublic', 3), ('(ExecutorWorker)Schedulers.from(e).createWorker();\n//\n//', 3), ('future.get(timeout,', 3), ('MaybeObserver.\n', 3), ('(!SubscriptionHelper.validate(n))', 3), ('(onSubscribe', 3), ('Function<Observable,', 3), ('DoFinallyObserver<T>', 3), ('doOnEach', 3), ('height="422"', 3), ('com.google.common.collect.Lists.newArrayList;\nimport', 3), ('write\n', 3), ('shared\n', 3), ('ListMultimap}', 3), ('com.iluwatar.poison.pill;\n\nimport', 3), ('end)\n', 3), ('and/or\n', 3), ('chaining', 3), ('assertNull(rso.value);\n', 3), ('io.reactivex.subjects.CompletableSubject;\n\npublic', 3), ('subscriber);\n', 3), ('assertThat(ClassPath.Scanner.getClassPathEntries(classloader))\n', 3), ('assertTrue(list.get(index).toString(),', 3), ('height="348"', 3), ('closed()', 3), ('channel,', 3), ('delegate.size();\n', 3), ('tillTheEnd)', 3), ('enqueue', 3), ('(s)', 3), ('frc;\n', 3), ('ts.assertError(TestException.class);\n', 3), ('subMap(K', 3), ('with/relative/directory', 3), ('AlchemistShop', 3), ('extra', 3), ('schhedulerSpec', 3), ('(wip', 3), ('immediately\n', 3), ('compose}', 3), ('TimeUnit.SECONDS).blockingLast();\n\n', 3), ('ts1', 3), ('Single.just(3),', 3), ('Set<T>', 3), ('winner.get();\n', 3), ('interrupted.get());\n', 3), ('scheduling', 3), ('ParallelFlowable#sequential()\n', 3), ('Observable\\r\\n', 3), ('SelectableChannel', 3), ('built-in', 3), ('Observable<Timed<Integer>>', 3), ('ConcatMapDelayed<T,', 3), ('as}', 3), ('Foundation', 3), ('writer.close();\n', 3), ('created.', 3), ('doFinally}', 3), ('child.onNext(t);\n', 3), ('OtherSubscriber<T>', 3), ('LOGGER.error("error', 3), ('DisposableContainer', 3), ('data);\n', 3), ('Throwable.\n', 3), ('.sequential(1)\n', 3), ('assertTrue(rmo.errors.isEmpty());\n\n', 3), ('BufferExactObserver<T,', 3), ('Consumer<Throwable>}', 3), ('flush', 3), ('sees', 3), ('java.lang.reflect.InvocationHandler;\nimport', 3), ('(!field.compareAndSet(null,', 3), ('state-aware', 3), ('considers', 3), ('io.reactivex.internal.queue.*;\nimport', 3), ('characteristics', 3), ('observer.onSuccess(1);\n', 3), ('qd.isEmpty();\n', 3), ('yet,', 3), ('MaybeTimeoutMaybe<T,', 3), ('int)}', 3), ('statement.setInt(1,', 3), ('assertTrue(d1.isDisposed());\n', 3), ('inventorySize)', 3), ('subscribeWith(E', 3), ('"Two");\n', 3), ('CompletableObserver}s', 3), ('threads.\n', 3), ('defer}', 3), ('Maybe.fromRunnable(run)\n', 3), ('assertTrue(unsubscribed.get());\n', 3), ('filename)', 3), ('TypeVariable}', 3), ('localFuture', 3), ('DisposableCompletableObserver', 3), ('reusing', 3), ('copy.comparator());\n', 3), ('flatMap;\n\n', 3), ('pairs.', 3), ('statusMember', 3), ('out.close();\n', 3), ('(AssertionError', 3), ('io.reactivex.flowables.ConnectableFlowable;\nimport', 3), ('f.onComplete();\n', 3), ('Publisher<?>[]', 3), ('//when\n', 3), ('encode', 3), ('complete++;\n\n', 3), ('1.x', 3), ('pushing', 3), ('addRemoveRace()', 3), ('entry.getValue();\n', 3), ('pp1.single(0),', 3), ('ObjectHelper.requireNonNull(sourceSupplier.apply(resource),', 3), ('classLoader);\n', 3), ('org.mockito.Mockito.verifyNoMoreInteractions;\n\n/**\n', 3), ('MaybeToFlowable<T>((MaybeSource<T>)sources[0]));\n', 3), ('get().dispose();\n', 3), ('period', 3), ('assertTrue(list.toString(),', 3), ('Maybe.<Integer>empty()\n', 3), ('assertFalse(ro.isDisposed());\n\n', 3), ('to2.assertNoValues();\n\n', 3), ('input);\n', 3), ('combining', 3), ('execute\n', 3), ('expectedCounterExceptions', 3), ('worker,', 3), ('firstEmission', 3), ('line;\n', 3), ('e.invoke(null,', 3), ('source8,\n', 3), ('counter.getAndIncrement()', 3), ('assertTimeout(ofMillis(5000),', 3), ('SingleObserver},', 3), ('chunk,', 3), ('assertNotNull(generator.generateFresh(Currency.class));\n', 3), ('doubleToRawLongBits(newValue);\n', 3), ('io.reactivex.internal.observers;\n\n/**\n', 3), ('Multiset}.\n', 3), ('IllegalStateException("More', 3), ('tryLock()', 3), ('complete.\n', 3), ('CollectionFeature.SUPPORTS_ITERATOR_REMOVE,\n', 3), ('WithLatestFromObserver<T,', 3), ('BiFunction<Integer,Integer,Integer>()', 3), ('generateString();\n', 3), ('List<CakeLayer>', 3), ('Collections.emptyList();\n', 3), ('first(int', 3), ('}\n\n\n}\n', 3), ('Item(ItemType.WEAPON,', 3), ('IMPLEMENTATION', 3), ('actual.onNext(w);\n', 3), ('traveled', 3), ('Set<Thread>', 3), ('as.length;\n', 3), ('sd.replace(d);\n', 3), ('Executors.newScheduledThreadPool(1,', 3), ('directory\n', 3), ('generator.addSampleInstances(String.class,', 3), ('ListenableScheduledFuture<V>', 3), ('differently', 3), ('FlatMapSingleObserver<R>(this,', 3), ('entryIterator()', 3), ('java.util.stream.Stream;\nimport', 3), ('#merge(SingleSource,', 3), ('java.util.function.Function;\n\nimport', 3), ('this.onRequest', 3), ('(ObservableScalarXMap.tryScalarXMapSubscribe(source,', 3), ('{true,', 3), ('unnecessary', 3), ('≤', 3), ('m);\n\n', 3), ('java.util.*;\n\n/**\n', 3), ('equal\n', 3), ('Integer#MAX_VALUE}', 3), ('maybe()', 3), ('TimerObserver', 3), ('parent.setFuture(scheduler.scheduleDirect(parent,', 3), ('Object.class)\n', 3), ('Our', 3), ('emitters.add(new', 3), ('500"});\n', 3), ('amb}', 3), ('testCounterExceptions()', 3), ('ps.switchMapCompletableDelayError(Functions.justFunction(cs)).test();\n\n', 3), ('15.12.2015\n', 3), ('TestOption...', 3), ('takeUntil(final', 3), ('.withFeatures(allFeatures)\n', 3), ('mute', 3), ('(ASF)', 3), ('IO-bound', 3), ('com.iluwatar.async.method.invocation;\n\nimport', 3), ('io.reactivex.internal.fuseable.QueueSubscription;\n\n/**\n', 3), ('flatMap(mapper,', 3), ('ts.onComplete();\n', 3), ('blocked', 3), ('disposer)\n', 3), ('Disposables.fromAction(new', 3), ('justConditional()', 3), ('Lists.newArrayList();\n\n', 3), ('Future}.\n', 3), ('to);\n', 3), ('(SecurityException', 3), ('tillTheEnd', 3), ('v2),', 3), ('true)\nabstract', 3), ('apply(Maybe<Integer>', 3), ('qr', 3), ('InvocationTargetException(IllegalStateException)");\n', 3), ('observable()', 3), ('Arrays.copyOf(ba1,', 3), ('constructor.\n', 3), ('atomically', 3), ('queue.take();\n', 3), ('mar;\n', 3), ('onSubscribeError(Throwable', 3), ('m.onTerminateDetach();\n', 3), ('this.second', 3), ('(s.equals("x"))', 3), ('Operator>()', 3), ('Consumer<Throwable>', 3), ('downstream.onError(throwable);\n', 3), ('tailMap(K', 3), ('args);\n', 3), ('subscriber.assertComplete();\n', 3), ('*/\n@GwtIncompatible\nclass', 3), ('toSingle}', 3), ('upstream.isDisposed();\n', 3), ('Methods', 3), ('(1', 3), ('callable,', 3), ('FutureTask<Integer>(Functions.justCallable(1));\n\n', 3), ('<li>In', 3), ('Try', 3), ('4));\n', 3), ('test(boolean', 3), ('constants', 3), ('<p>Files', 3), ('inner.done;\n', 3), ('true\n', 3), ('initialValue', 3), ('sa.requested);\n', 3), ('Flowable.fromArray(array).flatMapIterable(new', 3), ('requiring\n', 3), ('NPE(IAE)");\n', 3), ('className', 3), ('win', 3), ('ObjectHelper.requireNonNull(resourceSupplier,', 3), ('allocation,', 3), ('e\n', 3), ('.assertResult(2);\n\n', 3), ('reset()', 3), ('entity\n', 3), ('lift()', 3), ('@Inject\n', 3), ('succeeded\n', 3), ('(where', 3), ('builder.append("', 3), ('1024.0);\n\n', 3), ('onDispose;\n\n', 3), ('BusinessOperation<T>', 3), ('lazySet(true);\n', 3), ('retry(BiPredicate<?', 3), ('ObservableSource.\n', 3), ('purgePeriod', 3), ('implementation.', 3), ('Subscription.\n', 3), ('onSubscribeDispose()', 3), ('lazySet(EmptyDisposable.INSTANCE);\n', 3), ('started,', 3), ('(emitter.isDisposed()', 3), ('Object[n];\n', 3), ('InMemoryAppender()', 3), ('Design', 3), ('MissingBackpressureException());\n', 3), ('T>\n', 3), ('Mute.loggedMute(()', 3), ('#asMap}', 3), ('Actions', 3), ('10));\n', 3), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png"', 3), ('LOGGER.info(String.format("Receiver', 3), ('-1953724749712440952L;\n\n', 3), ('thread-safe.', 3), ('f.cancel(runner', 3), ('pp.hasSubscribers());\n', 3), ('java.util.stream.Stream;\n\nimport', 3), ('*/\n\n', 3), ('to2.dispose();\n\n', 3), ('bother', 3), ('signalled.\n', 3), ('MaybeFlatten<T,', 3), ('list.add(localFuture);\n', 3), ('"");\n\n', 3), ('onSuccessMapper,\n', 3), ('which,', 3), ('sent\n', 3), ('exc', 3), ('DataType', 3), ('e2)', 3), ('in,', 3), ('observer.dispose();\n', 3), ('"More', 3), ('m);\n', 3), ('properties)', 3), ('CustomerResource(customers);\n\n', 3), ('sync', 3), ('series', 3), ('ts.assertResult();\n', 3), ("'{@code", 3), ('Maybe.just(v).toFlowable();\n', 3), ('awaitTermination(long', 3), ('java.util.Random;\n\n/**\n', 3), ('(data', 3), ('tools,', 3), ('str', 3), ('resource);\n', 3), ('sources);\n', 3), ('io.reactivex.internal.observers.*;\nimport', 3), ('NullPointerException("A', 3), ('get();\n\n', 3), ('assertNotEquals(t2,', 3), ('clear', 3), ('(s)\n', 3), ('8.', 3), ('java.util.concurrent.Future;\n\nimport', 3), ('250', 3), ('second;\n', 3), ('length())', 3), ('Thread.sleep(1000);\n\n', 3), ('disposeAfter()', 3), ('innerSuccess(InnerObserver', 3), ('contents.\n', 3), ('Subscription}s.\n', 3), ('allows\n', 3), ('actual.onSubscribe(EmptyDisposable.INSTANCE);\n', 3), ('success()', 3), ('signalled\n', 3), ('java.util.regex.MatchResult;\nimport', 3), ('source.onNext(6);\n\n', 3), ('(Worker', 3), ('testToString()', 3), ('slight', 3), ('Again,', 3), ('Comparator<Object>', 3), ('(goNextSource', 3), ('ps.switchMapCompletable(Functions.justFunction(cs)).test();\n\n', 3), ('complete(t);\n', 3), ('errorHandler.call(e);\n//', 3), ('to);\n\n', 3), ('#merge(MaybeSource,', 3), ('NoSuchElementException}.\n', 3), ('(o1', 3), ('com.iluwatar.flyweight;\n\nimport', 3), ('this.supplier', 3), ('java.lang.ref.WeakReference;\n\nimport', 3), ('interfaceType)', 3), ('subclassed', 3), ('onFailure(Exception', 3), ('Throw</a>\n', 3), ('io.reactivex.functions.Predicate;\n\n@Test\npublic', 3), ('terminate.', 3), ('reads', 3), ('io.reactivex.internal.operators.maybe.*;\nimport', 3), ('assertFalse(task.isDisposed());\n\n', 3), ('LOGGER.info("->', 3), ('validate\n', 3), ('explicitly,', 3), ('index);\n\n', 3), ('counter[0]++;\n', 3), ('"waiting"', 3), ('assertSame(\n', 3), ('(!it.hasNext())', 3), ('DocumentImplementation', 3), ('.onBackpressureBuffer()\n', 3), ('TestObserver<Void>();\n', 3), ('(bs.isCancelled())', 3), ('TestHelper.checkDoubleOnSubscribeObservableToSingle(new', 3), ('lo', 3), ('requested\n', 3), ('parallelism,', 3), ('BlockingBaseObserver<T>', 3), ('io.reactivex.subjects.MaybeSubject;\nimport', 3), ('push-based', 3), ('dto', 3), ('recommended.\n', 3), ('super(resource);\n', 3), ('java.util.function.Supplier;\n\n/**\n', 3), ('dirs.offer(u);\n', 3), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.merge.png"', 3), ('-1");\n', 3), ('(AsyncSubscription<T>', 3), ('(byte)', 3), ('unsubscribeOn}', 3), ('order(List<String>', 3), ('java.io.ObjectInputStream\n', 3), ('basicWithError()', 3), ('(Writer', 3), ('spliterator', 3), ('assertEquals(20,', 3), ('e4.getMessage());\n', 3), ('}).dispose();\n', 3), ('fused', 3), ('Calendar.getInstance();\n', 3), ('console,', 3), ('introduced', 3), ('TestException("inner"));\n', 3), ('flushed.\n', 3), ('annotationClass)', 3), ('"three");\n', 3), ('ConcatWithSubscriber(Subscriber<?', 3), ('unit))', 3), ('length.\n', 3), ('onSubscribe()', 3), ('ObjectHelper.requireNonNull(onDispose,', 3), ('multimap.', 3), ('height="358"', 3), ('Observable<Boolean>', 3), ('TestSubscriber<Object>();\n', 3), ('ballThread', 3), ('Toolkit</a>', 3), ('been\n', 3), ('.flatMap((Function)Functions.identity())\n', 3), ('(--crashOnNext', 3), ('inner.queue', 3), ('),\n', 3), ('ImmutableSet.of())\n', 3), ('Resource', 3), ('assertEquals(administration.getAllSubmittedTickets().size(),', 3), ('doOnEvent}', 3), ('Sets.newLinkedHashSet();\n', 3), ('innerSuccess(this,', 3), ('assertEquals(NumberCrunchingTask.CRUNCHED_NUMBER,', 3), ('Splitr>\n', 3), ('org.junit.jupiter.api.BeforeAll;\nimport', 3), ('ZipSingleObserver<T>[]', 3), ('backpressured()', 3), ('"64",', 3), ('url1', 3), ('goNextSource;\n', 3), ('wrap(sources[0]);\n', 3), ('#merge(Publisher)}', 3), ('RxJavaPlugins.onError.\n', 3), ('classloader);\n', 3), ('assertEquals(expectedCounterExceptions,', 3), ('TargetObserver<T,', 3), ('thrown.\n', 3), ('@Id\n', 3), ('dispose()\n', 3), ("subject's", 3), ('Completable.CompletableOperator', 3), ('closer.register(new', 3), ('DirectedNetworkConnections<N,', 3), ('*/\n/**\n', 3), ('times.size()', 3), ('expectedCounterDateValues', 3), ('ambArray(final', 3), ('Function<Maybe<Integer>,', 3), ('innerErrorDelayed()', 3), ('computational', 3), ('exception;\n', 3), ('"clazz', 3), ('(resource.get()', 3), ('disposeBoundary()', 3), ('io.reactivex.Scheduler.Worker}', 3), ('mainErrorDelayed()', 3), ('parts\n', 3), ('operators</a>', 3), ('assertTimeout(ofMillis(10000),', 3), ('unlock()', 3), ('nullThrowable()', 3), ('between\n', 3), ('8571289934935992137L;\n\n', 3), ('SimpleFileWriter(temporaryFile.getPath(),', 3), ('values}', 3), ('emit,', 3), ('2),\n', 3), ('pp2.onError(new', 3), ('removeAll(@NullableDecl', 3), ('@CollectionFeature.Require(KNOWN_ORDER)\n', 3), ('TestContainerGenerator<T,', 3), ('}).toFlowable();\n\n', 3), ('observer.onSuccess(v);\n', 3), ('observer.onSuccess(value);\n', 3), ('cancelDetaches()', 3), ('PerfSubscriber(bh));\n', 3), ('happened', 3), ('give', 3), ('.assertOf(SubscriberFusion.<Integer>assertFusionMode(QueueFuseable.SYNC))\n', 3), ('TestDisposableSubscriber<Integer>', 3), ('errorSupplier;\n\n', 3), ('retryWhen}', 3), ('frq', 3), ('Objects', 3), ('TimeUnit.MILLISECONDS).test()\n', 3), ('SINGLE', 3), ('ps.onNext(0);\n\n', 3), ('File("base.jar");\n', 3), ('times(1)).onNext(3);\n', 3), ('String...', 3), ('StringReader(""))\n', 3), ('filled', 3), ('SingleObserver#onSuccess(Object)}.\n', 3), ('Completable.CompletableOperator()', 3), ('checkArgument(\n', 3), ('Object>();\n', 3), ('fetch', 3), ("Letter('e'))));\n", 3), ('Collections.addAll(innerSet,', 3), ('(direct)', 3), ('Flowable.merge(o1,', 3), ('assertTrue(latch.await(5,', 3), ('ask', 3), ('baseClassName.toLowerCase()', 3), ('URL("file:/b");\n', 3), ('stopIndex', 3), ('errors,', 3), ('Object[]{\n', 3), ('ds.onNext(1);\n', 3), ('ownerType;\n', 3), ('ImmutableMap<Object,', 3), ('setting\n', 3), ('};\n//', 3), ('LetterComposite', 3), ('TO_UPPER_WITH_EXCEPTION', 3), ('pp.switchMapCompletableDelayError(Functions.justFunction(cs)).test();\n\n', 3), ('arguments', 3), ('box', 3), ('java.util.ArrayDeque;\n\nimport', 3), ('ListIterator<String>', 3), ('last\n', 3), ('com.iluwatar.dao;\n\nimport', 3), ('TestDisposableObserver<Integer>();\n\n', 3), ('50);\n', 3), ('CancellationException', 3), ('influence', 3), ('Optional.of(resultIterator.next())', 3), ('instance()', 3), ('io.reactivex.functions.BooleanSupplier;\nimport', 3), ('started;\n\n', 3), ('(poll()', 3), ('lazySet(TERMINATED);\n', 3), ('iterable;\n', 3), ('io.reactivex.functions.Function;\n\n/**\n', 3), ('TestDisposableObserver<Integer>', 3), ('never()).onSuccess(any());\n', 3), ('timestamp', 3), ('List<SimpleObject>', 3), ('server.\n', 3), ('path)', 3), ('DoubleStream', 3), ('loaded', 3), ('sr', 3), ('create}', 3), ('ScheduledDirectPeriodicTask(decoratedRun);\n', 3), ('drainFused()', 3), ('Schedulers.\n', 3), ('entryOf(k3,', 3), ('DisposableHelper.dispose(d);\n', 3), ('hard', 3), ('assertNotNull(aste);\n//\n//', 3), ('JDK', 3), ('ElementAtObserver<T>', 3), ('m.javadoc.indexOf("ObservableSource",', 3), ('com.iluwatar.front.controller.utils.InMemoryAppender;\nimport', 3), ('exist\n', 3), ('limit));\n', 3), ('TimeoutException();\n', 3), ("Letter('e'),", 3), ('compare(T', 3), ('org.junit.jupiter.api.Assertions.assertNotNull;\n\n/**\n', 3), ('"future', 3), ('.doOnRequest(new', 3), ('execution.\n', 3), ('@GeneratedValue\n', 3), ('assertTrue(\n', 3), ('io.reactivex.internal.subscriptions.BooleanSubscription;\n\npublic', 3), ('defaultItem\n', 3), ('unconditionally', 3), ('loader),\n', 3), ('App()', 3), ('(latest', 3), ('assertTrue(d.isCancelled());\n\n', 3), ('(beforeDownstream())', 3), ('E...', 3), ('writeReplace()', 3), ('pp2.onError(ex);\n', 3), ('Disposable}s.\n', 3), ('com.iluwatar.hexagonal.database;\n\nimport', 3), ('scalarEmptySource()', 3), ("function's", 3), ('System.out.println(fail);\n', 3), ('java.util.concurrent.locks.Lock;\nimport', 3), ('io.reactivex.processors;\n\nimport', 3), ('newFile("file-a");\n', 3), ('Single.just(v).toFlowable();\n', 3), ('disposer.accept((U)u);\n', 3), ('java.util.stream.Collectors;\n\nimport', 3), ('NOTES:<br>\n', 3), ('flatMap(Blackhole', 3), ('App}\n', 3), ('#qs}', 3), ('#onError(Throwable)}.', 3), ('url2', 3), ('assertEquals(integers.get(0),', 3), ('(!disposed', 3), ('atomicLong', 3), ('Retries', 3), ('barrier', 3), ('objects\n', 3), ('Data-Bus', 3), ('IOException}', 3), ('emitter.onError(e);\n', 3), ('second;\n\n', 3), ('FutureTask<Object>(new', 3), ('transitiveBoundaryFusion(int', 3), ('license\n', 3), ('streamB,', 3), ('Callable);\n\n', 3), ('application.', 3), ('differs', 3), ('Functions.justFunction(Maybe.just(1)),\n', 3), ('IllegalStateException("Call', 3), ('javax.persistence.Id;\nimport', 3), ('compareAndSet(d,', 3), ('ZipMaybeObserver<T>[]', 3), ('interrupted.set(true);\n', 3), ('streams', 3), ('"15/12/2015");\n', 3), ('item.</dd>\n', 3), ('source}', 3), ('#hasThrowable()},\n', 3), ('source.onNext(4);\n', 3), ('}).subscribe(s1);\n', 3), ('io.reactivex.internal.observers.ResumeSingleObserver;\n\npublic', 3), ('dt', 3), ('Completable.complete().toObservable();\n', 3), ('t6,', 3), ('reflecting', 3), ('subscribeWith}', 3), ('attacks', 3), ('com.google.common.collect.TreeBasedTable;\nimport', 3), ('gives', 3), ('DefaultSubscriber<T>', 3), ('subject.test();\n', 3), ('a.cancel();\n', 3), ('com.iluwatar.guarded.suspension;\n\nimport', 3), ('java.util.concurrent;\n\n/**\n', 3), ('URLs', 3), ('trailing', 3), ('ts1.dispose();\n', 3), ('-1",', 3), ('resets', 3), ('Single.concat(Single.just(1),', 3), ('validate', 3), ('WithLatestFromSubscriber<T,', 3), ('Stores', 3), ('WHERE', 3), ('t4);\n', 3), ('U>(observer,', 3), ("class'", 3), ('observer.onNext("one");\n', 3), ('AtomicReferenceArray<E>', 3), ('BufferExactBoundarySubscriber<T,', 3), ('absolute', 3), ('syncFused;\n\n', 3), ('Flowable.bufferSize()', 3), ('java.util.Map;\n\n@GwtCompatible(emulated', 3), ('assertFalse(fakePool.hasNext());\n', 3), ('javax.persistence.GeneratedValue;\nimport', 3), ('emitter.setCancellable(c::close);\n', 3), ('@SafeVarargs\n', 3), ('assertEquals(Integer.valueOf(1),', 3), ('fail("Setup', 3), ('rco.dispose();\n\n', 3), ('comparer;\n', 3), ('2",', 3), ('adapt', 3), ('composite.add(source.subscribeWith(ds));\n', 3), ('#subscribeActual}', 3), ('t5);\n\n', 3), ('oldValue);\n', 3), ('ElementType.TYPE})\npublic', 3), ('minIndex', 3), ('fromIterator.hasNext())', 3), ('assertEquals(member.toString()', 3), ('this.producerIndex', 3), ('source2));\n', 3), ('dq.offer(t);\n', 3), ('CharBuffer', 3), ('parts', 3), ('ChannelHandler}', 3), ('nThreads', 3), ('\n}\n', 3), ('hide}', 3), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.from.Future.png"', 3), ('Function<Object,', 3), ('java.lang.reflect.Modifier;\nimport', 3), ('WindowBoundaryMainSubscriber(Subscriber<?', 3), ('unsafeCreate}', 3), ('exist', 3), ('Validates', 3), ('basic()', 3), ('-99",', 3), ('phase', 3), ('elements;', 3), ('leo', 3), ('flatMap(Function<?', 3), ('(TimeoutException', 3), ('Tenant', 3), ('propagated).\n', 3), ('((state', 3), ('WildcardType)', 3), ('WindowBoundaryMainObserver(Observer<?', 3), ('Singleton', 3), ('TimeUnit.NANOSECONDS);\n', 3), ('apply(Single<Integer>', 3), ('filter(@NonNull', 3), ('RegularImmutableSortedSet', 3), ('getClass().getResource("testdata/i18n.txt");\n', 3), ('concatArray}', 3), ('cbuf,', 3), ('requests.get(0).intValue());\n', 3), ('mergeDelayError(Flowable.fromArray(source1,', 3), ('"src/test/java")));\n\n', 3), ('implementation\n', 3), ('pp.onNext(0);\n\n', 3), ('detect', 3), ('Maybe.fromFuture(ft)\n', 3), ('disposer)', 3), ('it);\n', 3), ('check,', 3), ('assertTrue(Thread.interrupted());\n', 3), ('?"))', 3), ('validator', 3), ('ScalarCallable<Object>', 3), ('!done)', 3), ('12/13/15', 3), ('ObjectInputStream', 3), ('m.setAccessible(true);\n', 3), ('accept(List<Object>', 3), ('o.onSubscribe(d);\n', 3), ('afterDownstream()', 3), ('.assertOf(SubscriberFusion.<Integer>assertFusionMode(QueueFuseable.NONE))\n', 3), ('assertTrue(o.isUnsubscribed());\n\n', 3), ('cal.setTime(dt);\n', 3), ('a.onError(new', 3), ('ConcatWithObserver<T>\n', 3), ('.assertValueSet(Arrays.asList(1,', 3), ('com.google.common.primitives.Ints;\nimport', 3), ("'\\n')", 3), ('filtering.', 3), ('event[0]', 3), ('ElementType.CONSTRUCTOR,', 3), ('baseClassName);\n', 3), ('ConcatWithSubscriber<T>\n', 3), ('Us.\n', 3), ('ts.onSubscribe(new', 3), ('Flowable.just(1);\n\n', 3), ('executor\n', 3), ('factory.\n', 3), ('display', 3), ('mergeDelayError(Iterable<?', 3), ('packet', 3), ('io.reactivex.internal.subscribers.SinglePostCompleteSubscriber;\nimport', 3), ('Optional<LotteryTicket>', 3), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.flatMap.png"', 3), ('networks.\n', 3), ('ScheduledFuture<V>', 3), ('res.getDateList())', 3), ('cancelRace()', 3), ('WashingMachine();\n', 3), ('ParallelFlowable\n', 3), ('Completable.merge(Flowable.just(pp.ignoreElements())).test();\n\n', 3), ('prefer', 3), ('s.toUpperCase();\n', 3), ('TrampolineScheduler', 3), ('subscriber;\n\n', 3), ('e);\n\n', 3), ('extension', 3), ('syncFused)', 3), ('testSimple()', 3), ('times(1)).onError(any(NullPointerException.class));\n', 3), ('field)', 3), ('Publisher<String>()', 3), ('executed.\n', 3), ('UnsupportedOperationException', 3), ('Flushable}', 3), ('map(@NonNull', 3), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.toObservable.png"', 3), ('AmbInnerObserver<T>[]', 3), ('k3,', 3), ('"disposer', 3), ('only,', 3), ('io.reactivex.single;\n\nimport', 3), ('getOwnerType(Class<?>', 3), ('DataMapperException("Student', 3), ('"txt");\n', 3), ('using(resourceSupplier,', 3), ('disposerThrows,', 3), ('!m.signature.contains("ObservableSource"))', 3), ('assertTrue(aste.getMessage(),', 3), ('RxJavaPlugins.resetAssemblyTracking();\n//', 3), ('ASF', 3), ('"unexpectedly".\n', 3), ('"Maybe");\n', 3), ('JoinDisposable<TLeft,', 3), ('-----------------------------------\n', 3), ('bh);\n', 3), ('!(throwable', 3), ('to2.assertNotComplete();\n', 3), ('(em', 3), ('BasicIntQueueSubscription<R>\n', 3), ('.subscribe();\n\n', 3), ('using(\n', 3), ('Notify', 3), ('delay(delay,', 3), ('call.\n', 3), ('Completable.complete()))\n', 3), ('"onEvent', 3), ('q.offer(now,', 3), ('MaybeOperator}', 3), ('active.get();\n', 3), ('group', 3), ('key.', 3), ('continuation.\n', 3), ('13,', 3), ('getClass().getClassLoader()))\n', 3), ('Maybe.fromFuture(ft,', 3), ('phase,', 3), ('BackpressureHelper.addCap(1,', 3), ('doOnSubscribe}', 3), ('macro-fused', 3), ('times(1)).onError(any(Throwable.class));\n', 3), ('unequal', 3), ('ConnectableObservable', 3), ('w.subscribe(ts2);\n\n', 3), ('}});\n', 3), ('MaybeNo2Dot0Since.findSource(baseClassName);\n', 3), ('Observable.Operator', 3), ('retry.\n', 3), ('cache}', 3), ('EqualCoordinator<T>', 3), ('TestSubscriber<Integer>(0L);\n', 3), ('observer2;\n\n', 3), ('fail("No', 3), ('!m.signature.contains("Single")\n', 3), ('evictedGroups;\n\n', 3), ('care', 3), ('lowestFrequencyChar', 3), ('subject;\n', 3), ('Supplier<Heavy>', 3), ('(!q.isEmpty())', 3), ('Let', 3), ('hurts', 3), ('student)', 3), ('irrelevant\n', 3), ('ParallelFailureHandling}\n', 3), ('(mutable)', 3), ('AM\n', 3), ('onEvent));\n', 3), ('next.\n', 3), ('numbers.\n', 3), ('intended\n', 3), ('Subscribers\n', 3), ('dummy;\n', 3), ('ArrayList<T>();\n', 3), ('value.', 3), ('Factory,', 3), ('bh.consume(true);\n', 3), ('(errors[0]', 3), ('1000000;', 3), ('Set<Object>', 3), ('Maybe.just(v).toObservable();\n', 3), ('com.google.common.collect.testing.features.CollectionFeature.KNOWN_ORDER;\n\nimport', 3), ('io.reactivex.internal.operators.flowable.*;\nimport', 3), ('CustomDriftScheduler', 3), ('jar', 3), ('delay:\n', 3), ('terminates?\n', 3), ('argument.\n', 3), ('delay(time,', 3), ('this.value;\n', 3), ('doFinally(Action', 3), ('methods:', 3), ('Just', 3), ('assertEquals("Error', 3), ('GuardedQueue();\n', 3), ('com.iluwatar.mute;\n\nimport', 3), ('GenericDeclaration>', 3), ('get(FUTURE_INDEX);\n', 3), ("donstream's", 3), ('rawType)', 3), ('non-null.\n', 3), ('IntFunction<T>', 3), ('relaying', 3), ('writer\n', 3), ('Class-Path', 3), ('requirements,', 3), ('Set<CakeLayer>', 3), ('observer}', 3), ('assertTrue(task.isCancelled());\n', 3), ('fully', 3), ('delivering', 3), ('this.run', 3), ('subject.onComplete();\n\n', 3), ('2).elementAt(-1,', 3), ('io.reactivex.internal.subscribers.*;\nimport', 3), ('withPublisherDispose()', 3), ('com.iluwatar.event.aggregator;\n\nimport', 3), ('parent.innerError(index,', 3), ('line-termination', 3), ('.assertOf(SubscriberFusion.<Integer>assertNotFuseable())\n', 3), ('{\n}\n', 3), ('disposer.accept((R)resource);\n', 3), ('q.offer(i);\n', 3), ('contract', 3), ('UnicastProcessor.create();\n', 3), ('onTerminateDetach()', 3), ('java.io.FilterInputStream;\nimport', 3), ('bind()', 3), ('incur', 3), ('placed', 3), ('enables', 3), ('assertTrue(Comparators.isInOrder(asList(0,', 3), ('spell', 3), ('schedule();\n', 3), ('RxJavaPlugins.onSingleLift(oop));\n//\n//', 3), ('leaking', 3), ('DelayMaybeObserver(MaybeObserver<?', 3), ('BaseTck<List<Integer>>', 3), ('Schedulers.from(exec).createWorker();\n', 3), ('onCompleteCleansUp()', 3), ('java.lang.ref.WeakReference\n', 3), ('end");\n', 3), ('t2);\n', 3), ('direct', 3), ('(Entry<?', 3), ('<p>...would', 3), ('derivedSuites.add(createSubmapSuite(parentBuilder,', 3), ('potential', 3), ('com.iluwatar.front.controller;\n\nimport', 3), ('newArrayList(),', 3), ('value),', 3), ('upstream.', 3), ('atomicLong.get());\n', 3), ('"predicate");\n', 3), ('Prototype', 3), ('exec.execute(task);\n', 3), ('assertTrue(e.getCause()', 3), ('OperatorWindowBoundaryOpenSubscriber<T,', 3), ('TestObserver<Object>(o);\n\n', 3), ('2.0.2', 3), ('com.google.common.collect.SortedSetMultimap;\nimport', 3), ('"Elven', 3), ('result;\n\n', 3), ('(element', 3), ('buf,', 3), ('Factory', 3), ('indirection', 3), ('edge,', 3), ('accept(T', 3), ('recently', 3), ('TestHelper.checkDisposed(Observable.<Integer>just(1).hide()\n', 3), ('setId(Long', 3), ('directly\n', 3), ('ara', 3), ('.forEach(i', 3), ('TestException())));\n', 3), ('java.net.InetSocketAddress;\nimport', 3), ('length()', 3), ('expected,', 3), ('concatDelayError}', 3), ('dependentPromise.get();\n', 3), ('Relays', 3), ('asynchronously.\n', 3), ('observer.onError(error);\n', 3), ('!cancelled.isDisposed())', 3), ('TrampolineWorker', 3), ('Observer>()', 3), ('amb(final', 3), ('accum;\n', 3), ('innerSet', 3), ('external', 3), ("map's", 3), ('io.reactivex.observers.SerializedObserver;\nimport', 3), ('defer(final', 3), ('get(Object', 3), ('port);\n', 3), ('QS', 3), ('ParallelPeek<T>', 3), ('20', 3), ('ConcatMaybeObserver<T>\n', 3), ('(SchedulerMultiWorkerSupport)Schedulers.computation();\n\n', 3), ('(ownerType', 3), ('0);\n\n', 3), ('#onError(Throwable)}\n', 3), ('call(Object', 3), ('assertEquals(ScheduledRunnable.SYNC_DISPOSED,', 3), ('ImmutableSet.copyOf(options);\n', 3), ('call(Operator', 3), ('hasValue', 3), ('ns.onSubscribe(new', 3), ('test(final', 3), ('Flowable.error(exception);\n', 3), ('null,\n', 3), ('entities\n', 3), ('rootLocaleFormat(\n', 3), ('directly.', 3), ('FINISHED', 3), ('capacity)', 3), ('transformation,', 3), ('easily', 3), ('io.reactivex.internal.subscriptions.EmptySubscription;\nimport', 3), ('deprecated', 3), ('c.get();\n\n', 3), ('fulfills', 3), ('actual.onNext(value);\n\n', 3), ('so\n', 3), ('.test(0L)\n', 3), ('9).equals("(Publisher"))', 3), ('StoreStore\n', 3), ('numInstances;\n', 3), ('guarantee', 3), ('actual.add(Multisets.immutableEntry(element,', 3), ('dependencies', 3), ('AutoCloseable', 3), ('exec;\n', 3), ('.assertOf(ObserverFusion.<Integer>assertFusionMode(QueueFuseable.ASYNC))\n', 3), ('URISyntaxException', 3), ('log("Result', 3), ('library', 3), ('replaceValues(K', 3), ('Support', 3), ('r);\n\n', 3), ('(t.getName().startsWith("Rx"))', 3), ('io.reactivex.internal.observers.QueueDrainObserver;\nimport', 3), ('dataSource)', 3), ('updates', 3), ('to(Function<?', 3), ('System.out.println("subscribing"))\n', 3), ('assertEquals("count', 3), ('ObjectHelper.requireNonNull(callable,', 3), ('SpscArrayQueue<T>(prefetch);\n\n', 3), ('DataMapperException', 3), ('exec);\n', 3), ('returned,', 3), ('C>(s,', 3), ('BaseFilterSubscriber<T>', 3), ('PublishProcessor.\n', 3), ('fail(e.getMessage());\n', 3), ('OperatorWindowBoundaryCloseObserver<T,', 3), ('java.util.concurrent.PriorityBlockingQueue;\nimport', 3), ('bufferedReader', 3), ('20;', 3), ('(Student', 3), ('"fallback', 3), ('.map(v', 3), ('initialCapacity)', 3), ('num', 3), ('FileChannel#map(MapMode,', 3), ('rail\n', 3), ('timeout,\n', 3), ('err.initCause(ex);\n', 3), ('assertFalse(rco.isDisposed());\n\n', 3), ('container.\n', 3), ('follows', 3), ('rules,', 3), ('Functions.justFunction(cs)\n', 3), ('observable.blockingLast();\n', 3), ('numCalls', 3), ('orders', 3), ('entry)', 3), ('rmo.dispose();\n\n', 3), ('observers.dispose();\n', 3), ('RxJavaPlugins.onObservableLift(oop));\n//\n//', 3), ('toSingle(Flowable.<T>fromFuture(future,', 3), ('typeName(Type', 3), ('bh.consume(value);\n', 3), ('processors', 3), ('capacity;', 3), ('determines', 3), ('(MaybeSource<?', 3), ('s.scheduleDirect(r);\n\n', 3), ('d.request(Long.MAX_VALUE);\n', 3), ('InitializingOnDemandHolderIdiom', 3), ('characters,', 3), ('Cancellable\n', 3), ('Facade<?>', 3), ('.assertResult(true);\n\n', 3), ('List<LogRecord>', 3), ('definitionStart', 3), ('urls', 3), ('out)', 3), ('window;\n', 3), ('program', 3), ('AnEnum[]', 3), ('readFile(File', 3), ('Dimitris', 3), ('observeOn(final', 3), ('replacement', 3), ('Thread(r).start();\n', 3), ('pp.switchMapCompletable(Functions.justFunction(cs)).test();\n\n', 3), ('s[i]', 3), ('counter[0]);\n', 3), ('cdl.await();\n\n', 3), ('(boolean', 3), ('requested(n);\n', 3), ('as[i]', 3), ('FlatMapSingleObserver<R>', 3), ('well.', 3), ('ro.add(d);\n\n', 3), ('Observable.just(1).subscribe(new', 3), ('setUp;\n', 3), ('Type}', 3), ('makeActions(workers,', 3), ('onErrorMapper,', 3), ('*/\n@GwtIncompatible', 3), ('Transforms', 3), ('perform\n', 3), ('this.testFolder.newFile();\n', 3), ('edge)', 3), ('Type...', 3), ('to1.dispose();\n', 3), ('bug', 3), ('bottomShelf.add(factory.createPotion(PotionType.POISON));\n', 3), ('lim)', 3), ('details.\n', 3), ('#io()}', 3), ('Double', 3), ('specifying', 3), ('javax.sql.DataSource;\n\nimport', 3), ('com.google.common.primitives.Primitives;\nimport', 3), ('Operating', 3), ('(IllegalAccessException', 3), ('line;\n\n', 3), ('Maybe.<Integer>empty().toFlowable();\n', 3), ('than\n', 3), ('Single&lt;Integer>', 3), ('validation.\n', 3), ('DebounceSubscriber<T,', 3), ('assertThat(command).isInstanceOf(WrappedRunnable.class);\n', 3), ('slow', 3), ('bufferSize', 3), ('candidate;\n', 3), ('newDir("dir-1");\n', 3), ('FuseToFlowable<Boolean>', 3), ('GeneratorDisposable<T,', 3), ('o[0]', 3), ('Reports', 3), ('outer;\n', 3), ('boundaryObserver.dispose();\n', 3), ('onErrorCrashes()', 3), ('Filter</a>\n', 3), ('Maybe.zip(new', 3), ('objects,', 3), ('non-fuseable', 3), ('String)}\n', 3), ('onFinally', 3), ('exist.\n', 3), ('error.addThrowable(exc);\n', 3), ('ExecutionException(exception);\n', 3), ('this.onCancel', 3), ('.assertFailure(IOException.class);\n\n', 3), ('end);\n', 3), ('height="385"', 3), ('doAfterSuccess}', 3), ('Andreou\n', 3), ('#mergeDelayError(Publisher)\n', 3), ('(this.d', 3), ('.distinctUntilChanged(new', 3), ('.sorted(Functions.naturalComparator())\n', 3), ('singleFunction,\n', 3), ('assertTrue(w.tasks.hasSubscriptions());\n//\n//', 3), ('accum', 3), ('testers', 3), ('checkNotNull(type);\n', 3), ('BufferCloseSubscriber<T,', 3), ('.assertError(err)\n', 3), ('Feature<?>>', 3), ('read.\n', 3), ('assertTrue(run.isDisposed());\n', 3), ('BufferBoundarySupplierObserver<T,', 3), ('UsingSubscriber<T,', 3), ('prototype;\n', 3), ('Appender', 3), ('to.assertFailure(IOException.class);\n\n', 3), ('world.\n', 3), ('Completable.mergeArrayDelayError(Completable.complete(),', 3), ('cakeToppingInfo;\n', 3), ('strategy,', 3), ('to.dispose();\n', 3), ('<K>', 3), ('upstream;\n', 3), ('this.serial', 3), ('update;\n', 3), ('#%d', 3), ('MaybeTimeoutPublisher<T,', 3), ('(as', 3), ('Completable.mergeDelayError(new', 3), ('ParallelReduceFullMainSubscriber<T>', 3), ('java.util.Enumeration;\nimport', 3), ('System.currentTimeMillis();\n', 3), ('Observable.Operator()', 3), ('DataBus', 3), ('Observer<Long>', 3), ('java.util.concurrent.TimeoutException;\n\n/**\n', 3), ('mergeArray(source1,', 3), ('other,\n', 3), ('Collection<V>>)', 3), ('onNext},', 3), ('threadFactory;\n', 3), ('managed', 3), ('prefetch.\n', 3), ('HashMap}', 3), ('variant', 3), ('(field.get()', 3), ('FuseToObservable)', 3), ('Flowable.timer(counter.get(),', 3), ('Deque<T>', 3), ('most\n', 3), ('sort', 3), ('OperatorWindowBoundaryCloseSubscriber<T,', 3), ('dir1', 3), ('executeService.submit(new', 3), ('values);\n\n', 3), ('DoFinallyObserver<T>(s,', 3), ('delayErrors', 3), ('ConcatMaybeObserver<T>', 3), ('mutually', 3), ('scalar()', 3), ('verify(underlying).dispose();\n', 3), ('IllegalArgumentException}', 3), ('Maps.newHashMap();\n', 3), ('object}', 3), ('groups;\n', 3), ('safeguards', 3), ('Schedulers.computation().createWorker();\n', 3), ('.collect(Collectors.toList());\n\n', 3), ('second);\n', 3), ('transformer)', 3), ('SchedulerMultiWorkerSupport', 3), ('pendingWrite,', 3), ('call(CompletableSubscriber', 3), ('ListenableFuture},', 3), ('};\n\n\n', 3), ('"transformer', 3), ('Subject}', 3), ('e.append("', 3), ('AtomicReference<SwitchMapInnerObserver<T,', 3), ('CakeToppingInfo', 3), ('(b.length()', 3), ('Subscriptions.empty();\n//\n//', 3), ('compatible.\n', 3), ('8600231336733376951L;\n\n', 3), ('never()).onNext(2);\n', 3), ('map(File', 3), ('assertFalse("The', 3), ('Page', 3), ('OnNext', 3), ('advanced', 3), ('party', 3), ('rso.add(d);\n\n', 3), ('e.execute(new', 3), ('nSources', 3), ('COMPLETED)', 3), ('subscribers.dispose();\n', 3), ('"task', 3), ('System.out.println(t);\n', 3), ('toObservable}', 3), ('repeatUntil}', 3), ('(the\n', 3), ('gson.fromJson(jsonElement,', 3), ('recursion', 3), ('s));\n', 3), ('testMap()', 3), ('whole', 3), ('disposeTwice()', 3), ('node\n', 3), ('readable', 3), ('path.\n', 3), ('com.google.common.collect.ImmutableSortedMultiset;\nimport', 3), ('s.onNext(t);\n', 3), ('requiring', 3), ('bo', 3), ('boxedLast.isPresent()', 3), ('IteratorBasedImmutableMap<K,', 3), ('.assertResult(0,', 3), ('subscribes,', 3), ('MergeObserver<T,', 3), ('MissingBackpressureException("Can\'t', 3), ('BlockingBaseSubscriber<T>', 3), ('predicate);\n', 3), ('sr;\n', 3), ('oldValue,', 3), ('UndeliverableException', 3), ('cd.dispose();\n', 3), ('remaining;\n\n', 3), ('advance();\n', 3), ('ordering,\n', 3), ('arguments);\n', 3), ('innerError(int', 3), ('SwitchMapObserver<T,', 3), ('d2.dispose();\n', 3), ('fromActionThrows()', 3), ('-------------------------------------------------------------------------\n', 3), ('<p>A', 3), ('hasNext;\n\n', 3), ('"Single");\n', 3), ('java.lang.reflect.Array;\nimport', 3), ('oldValue', 3), ('Operator', 3), ('rmo.complete);\n', 3), ('?>)', 3), ('io.reactivex.functions;\n\nimport', 3), ('.flatMap(e', 3), ('fileA', 3), ('com.google.common.collect.testing.features.MapFeature.SUPPORTS_REMOVE;\n\nimport', 3), ('-----------------------------------------------------------\n', 3), ('disposerThrows)\n', 3), ('mo.onSubscribe(Disposables.empty());\n\n', 3), ('@SuppressWarnings("CheckReturnValue")', 3), ('io.reactivex.subjects.SingleSubject;\nimport', 3), ('Publisher<R>', 3), ('e.setCancellable(new', 3), ('next.dispose();\n', 3), ('cls)', 3), ('System.out.println();\n', 3), ('onXXX}', 3), ('(Date', 3), ('(SortedSet<V>)', 3), ('collector', 3), ('gson.toJsonTree(domainEvent,', 3), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/retry.png"', 3), ('limited', 3), ('get}\n', 3), ('isEqual)', 3), ('onComplete();\n\n', 3), ('Future}.', 3), ('ownership.', 3), ('(Class<?>)', 3), ('hot', 3), ('promise.get(1000,', 3), ('subject.onComplete();\n', 3), ('E,', 3), ('parameters;\n', 3), ('window.\n', 3), ('Function<Maybe,', 3), ('contributor', 3), ('SingleDisposable<T>', 3), ('tested\n', 3), ('repeat(long', 3), ('completableFunction,', 3), ('queueOverflow()', 3), ('FlatMapMaybeObserver(MaybeObserver<?', 3), ('now\n', 3), ('drainNormal();\n', 3), ('assertFalse(rso.isDisposed());\n\n', 3), ('numCalls.incrementAndGet();\n', 3), ('HashMultiset}', 3), ('assertEquals(set.comparator(),', 3), ('break",', 3), ('bridges', 3), ('property}.\n', 3), ('Following', 3), ('skip(long', 3), ('ImmediateThinScheduler.INSTANCE;\n', 3), ('.takeWhile(e', 3), ('submit', 3), ('potions', 3), ('org.junit.jupiter.api.Disabled;\nimport', 3), ('complicated', 3), ('U>(subscriber,', 3), ('assertEquals(Integer.valueOf(10),', 3), ('findLast(stream.boxed());\n', 3), ('so.', 3), ('Lists.newArrayList(v0(),', 3), ('DebounceTimedSubscriber<T>', 3), ('Flowable<Object>,', 3), ('max)', 3), ('parent.innerNext(index,', 3), ('doOnError}', 3), ('Functions.justFunction(Single.error(new', 3), ('scheduler}', 3), ('QueueDisposable', 3), ('outside', 3), ('ObservableEmitter}', 3), ('channel;\n', 3), ('InvocationHandler', 3), ('Collects', 3), ('BufferExactBoundaryObserver<T,', 3), ("'/')", 3), ('EnumHashBiMap}', 3), ('fileName)', 3), ('Normally', 3), ('testNulls()', 3), ('ScheduledExecutorService)', 3), ('this.delayError;\n\n', 3), ('-----------------------------------\n\n', 3), ('Flowable<List<T>>', 3), ('nextCancelRace()', 3), ('inner.done', 3), ('this.key', 3), ('BlockingQueue<Object>', 3), ('Maybe.concatArray(Maybe.just(1),', 3), ('bounded.onNext(1);\n', 3), ('T...', 3), ('mainErrorInnerErrorRace()', 3), ('interruptibly', 3), ('Preconditions.checkNotNull(task,', 3), ('MaybeObserver,', 3), ('AtomicReference<Object>(NotificationLite.COMPLETE);', 3), ('href="http://reactivex.io/documentation/operators/do.html">ReactiveX', 3), ('conventions', 3), ('Single.<Integer>create(new', 3), ('++classesInitialized;\n', 3), ('Schedulers.io());\n', 3), ('(domainEvent', 3), ('action\n', 3), ('dummyValue;\n}\n', 3), ('observer.onNext(t);\n', 3), ('cache()', 3), ('System.out.println("Done!");\n', 3), ('instances)', 3), ('1L;\n', 3), ("Observer}'s", 3), ('.doOnSubscribe(s', 3), ('memberSupplier)', 3), ('observer.assertValues(1,', 3), ('-=', 3), ('schedule(Callable<V>', 3), ('List<K>', 3), ('agreements.', 3), ('visitTypeVariable(TypeVariable<?>', 3), ('OnComplete(),', 3), ('pp1.onComplete();\n', 3), ('onCompleteCrash()', 3), ('(delay', 3), ('com.iluwatar.reader.writer.lock.utils.InMemoryAppender;\nimport', 3), ('instance.', 3), ('amount);\n', 3), ('assertEquals(multimap().valueComparator(),', 3), ('next.cancel();\n', 3), ('fail\n', 3), ('io.reactivex.processors.*;\nimport', 3), ('java.util}', 3), ('us.onComplete();\n\n', 3), ('0))', 3), ('height="483"', 3), ('FlowableEmitter<T>', 3), ('.map(Functions.<Object>identity())\n', 3), ('X', 3), ('io.reactivex.TestHelper;\n\npublic', 3), ('2.13</a>)\n', 3), ('MaybePeek<T>', 3), ('com.google.common.base.Stopwatch;\nimport', 3), ('onTerminateDetach}', 3), ('backpressureSpec', 3), ('"10000"})\n', 3), ('ExceptionHelper.terminate(error);\n', 3), ('<N>', 3), ('optimize', 3), ('numberOfSubscribers)', 3), ('fail(ex.toString());\n', 3), ('Maybe.just(2),', 3), ('taskCompleted();\n', 3), ('assertNotNull(\n', 3), ('RxJavaPlugins.clearAssemblyTracking();\n//\n//', 3), ('Each', 3), ('ScalarCallable<T>', 3), ('SpscLinkedArrayQueue<U>(bufferSize);\n', 3), ('EmptySubscription.error(new', 3), ('Features', 3), ('ambArray(this,', 3), ('G', 3), ('f))', 3), ('Flowable"))', 3), ('.assertResult(6);\n', 3), ('ScheduledRunnable(new', 3), ('generator.generateFresh(type));\n', 3), ('height="190"', 3), ('clean', 3), ('to.assertFailureAndMessage(TestException.class,', 3), ('faultTolerantFuture', 3), ('cancelWhileRunning()', 3), ('MergeSubscriber<T,', 3), ('TestSortedMapGenerator<K,', 3), ('assertNotNull(t);\n', 3), ('getJavaChannel()', 3), ('terminate,', 3), ('transformation\n', 3), ('dirs', 3), ('scheduler.createWorker();\n', 3), ('//then\n', 3), ('java.util.Calendar;\nimport', 3), ('Input', 3), ('hasSubscribers()', 3), ('dispatchAction(new', 3), ('scheduler}\n', 3), ('Entry<AnEnum,', 3), ('(returned', 3), ('complain', 2), ('LEFT_CLOSE)', 2), ('executor);\n\n', 2), ('IllegalStateException}.\n', 2), ('has(Stats', 2), ('caught', 2), ('fusedSync()', 2), ('scheduler).subscribe(to);\n\n', 2), ('failOnEmpty;\n\n', 2), ('reduceWithCovariantObjects()', 2), ('Maybe.just(1))\n', 2), ('TreeMultiset<E>', 2), ('bunch', 2), ('assertNull(converter.reverse().convert(null));\n', 2), ('java.util.stream.Collector;\n\n/**\n', 2), ('DisposableSubscriber<Notification<T>>', 2), ('TimeUnit.NANOSECONDS);', 2), ('accept(List<Boolean>', 2), ('genericDeclaration,', 2), ('containsAll(Collection<?>', 2), ('defaultValue}', 2), ('(update', 2), ('values[j]', 2), ("observer's", 2), ('List<Word>', 2), ('sourceCode.indexOf(annotation,', 2), ('readObject', 2), ('rain."});\n', 2), ('Function7<?', 2), ('OutputStream.class,\n', 2), ('splitr', 2), ('TestSubscriber<String>(10L);\n', 2), ('fallback).test();\n\n', 2), ('assertEquals(ImmutableMap.of(),', 2), ('dir,', 2), ('videos.put(3,', 2), ('o[i]', 2), ('SingleSource},', 2), ('(ImmutableMap<K,', 2), ('eventually.\n', 2), ('disposeExcept(int', 2), ('observer.assertNoValues();\n\n', 2), ('spliterator.trySplit();\n', 2), ('Table<R,', 2), ('setResource,', 2), ('Legacy', 2), ('.assertFailure(NullPointerException.class)\n', 2), ('(curr', 2), ('ms.getThrowable()', 2), ('elements}', 2), ('THIS', 2), ('setDone()', 2), ('spellbookDao;\n', 2), ('-7251123623727029452L;\n', 2), ('ObjectHelper.requireNonNull(bufferClose.apply(token),', 2), ('ps.switchMapCompletable(Functions.justFunction(cs))\n', 2), ('otherDisposable;\n\n', 2), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/using.png"', 2), ('Arrays.asList(10,', 2), ('this.done', 2), ('ImmutableClassToInstanceMap.builder().build())\n', 2), ('E[]\n', 2), ('open.subscribe(os);\n', 2), ('typed', 2), ('CollectionFeature.SUPPORTS_REMOVE,\n', 2), ('fromCallable(final', 2), ('out.writeObject(object);\n', 2), ('this.channelToPendingWrites.get(key.channel());\n', 2), ('.just(Boolean.TRUE,', 2), ('assertNull(converter.convert(null));\n', 2), ('(s.contains("A', 2), ('assertNotNull(expression);\n', 2), ('o.blockingSingle());\n', 2), ('byte[n];\n', 2), ('1000', 2), ('body;\n', 2), ('(SingleDisposable<T>', 2), ('ParallelJoin<T>(this,', 2), ('adhere', 2), ('interrupted[0]);\n', 2), ('DeferredScalarSubscription<T>(s);\n', 2), ('8.\n', 2), ('assertFalse(s.isDisposed());\n', 2), ('this:\n', 2), ('match', 2), ('ms.onError(ex);\n', 2), ('dl', 2), ('emitter.onSuccess(e);\n', 2), ('boilerplate', 2), ('v3())),', 2), ('Function<Map<String,', 2), ('newAccum);\n', 2), ('this.co', 2), ('now,', 2), ('ScheduledDirectTask(RxJavaPlugins.onSchedule(run));\n', 2), ('pp1.onNext(1);\n', 2), ('ss.subscribe(this);\n', 2), ('href="http://reactivex.io/documentation/operators/just.html">ReactiveX', 2), ('DebounceTimedSubscriber<T>(\n', 2), ('EqualCoordinator(SingleObserver<?', 2), ('Math.max(1,', 2), ('mapper.apply(bad);\n\n', 2), ('IntervalObserver', 2), ('LinkedHashMultimap<?,', 2), ('Initiation', 2), ('data.', 2), ('NullPointerTester', 2), ('assertNPE(list,', 2), ('ArrayList', 2), ('this.clientName', 2), ('fromSpliterator;\n', 2), ('heuristics', 2), ('to2.assertValues(2L,', 2), ('m.javadoc.indexOf("<dd>",', 2), ('collectionSupplierIsNull()', 2), ('7240042530241604978L;\n', 2), ('ts.assertValueCount(i', 2), ('chunk);\n', 2), ('2),', 2), ('testAddAndRemove(new', 2), ('property.', 2), ('mongo', 2), ('exceptionType},', 2), ('java.util.regex.Matcher;\nimport', 2), ('RainbowFishSerializer', 2), ('completionValue', 2), ('s.onSubscribe(EmptySubscription.INSTANCE);\n', 2), ('innerError(SwitchMapSingleObserver<R>', 2), ('schedulerDoc', 2), ('tests.', 2), ('pool,', 2), ('list.isEmpty());\n', 2), ('B>(null,', 2), ('}).doOnSubscribe(new', 2), ('before));\n', 2), ('valueComparator;\n\n', 2), ('Selector', 2), ('Arrays.asList(pp1.single(-99),', 2), ('TestMapGenerator}', 2), ('defaultCapacityHint)', 2), ('com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_KEYS;\nimport', 2), ('port;\n\n', 2), ('Multimap>>', 2), ('Collection<Integer>>', 2), ('statefulBiconsumer()', 2), ('react', 2), ('testSimpleJustNext()', 2), ('onSuccess\\r\\n', 2), ('array.length;\n', 2), ('collectionSupplierThrows()', 2), ('<T9>', 2), ('(similar', 2), ('com.google.common.collect.testing.SetTestSuiteBuilder;\nimport', 2), ('update));\n', 2), ('(detected', 2), ('Stream.of("0:0",', 2), ('this.data', 2), ('putAll(multimap);\n', 2), ('})\n//', 2), ('COMPLETE_MASK)', 2), ('failOnEmpty)', 2), ('occurrences', 2), ('TLeft>', 2), ('Mongo', 2), ("MaybeObserver}'s", 2), ('consumerNull()', 2), ('java.util.PriorityQueue;\nimport', 2), ('PrintStream(new', 2), ('assertEquals(allCustomers.size(),', 2), ('PublishProcessor', 2), ('well,', 2), ('pp.concatMapMaybeDelayError(Functions.justFunction(ms),', 2), ('leftEnd', 2), ('modification', 2), ('purgeEnable', 2), ('tryOutSchedulers();\n\n', 2), ('userConverter', 2), ('containsValue(Object', 2), ('Queue<T>', 2), ('SubscriptionHelper.isCancelled(this.get());\n', 2), ('get(ci);\n', 2), ('entries.add(mapEntry(k,', 2), ('connection));\n', 2), ('cancelledOnRun()', 2), ('we\n', 2), ('timerDelayZero()', 2), ('convert)', 2), ('always\n', 2), ('InputOrder', 2), ('((Callable<R>)other).call();\n', 2), ('otherwise.', 2), ('scheduleDirect()', 2), ('java.io.BufferedWriter;\nimport', 2), ('and:\n', 2), ('expected.add(Helpers.mapEntry(k0(),', 2), ('IOException("Mark', 2), ('LongAdder', 2), ('dataProvider();\n\n', 2), ('Single.fromCallable(callable)\n', 2), ('RIGHT_VALUE)', 2), ('search', 2), ('joinHelper(0,', 2), ('assertEquals(Integer.valueOf(0),', 2), ('files\n', 2), ('listIterator(int', 2), ('wip));\n', 2), ('autoConnect(numberOfSubscribers,', 2), ('lineNumber(sourceCode,', 2), ('wip;\n', 2), ('rx2.newthread-priority}', 2), ('document.children(KEY,', 2), ('subscribers.\n', 2), ('java.util.concurrent.Semaphore;\nimport', 2), ('ss.getValue().intValue());\n', 2), ('visitor', 2), ('visit', 2), ('T>)s,', 2), ('APPEND}', 2), ('TakeUntilOtherMaybeObserver<U>', 2), ('TestObserver<?>', 2), ('ObjectHelper.requireNonNull(reducer,', 2), ('AbstractUndirectedNetworkConnections<N,', 2), ('WithNullConstant', 2), ('Scheduler[]', 2), ('Mawson\n', 2), ('account.\n', 2), ('.timeInterval(TimeUnit.SECONDS)\n', 2), ('AbstractSchedulerTests', 2), ('NonBlockingThread', 2), ('f.apply(s,', 2), ('o.throttleFirst(500,', 2), ('cd.dispose();\n\n', 2), ('Accesses', 2), ('observer.assertError(TestException.class);\n', 2), ('cc.disposable;\n', 2), ('deals', 2), ('ResourceScanner', 2), ('RxJavaPlugins#setFailOnNonBlockingScheduler(boolean)}', 2), ('publishNext(final', 2), ('SwitchMapMaybeObserver<R>\n', 2), ('Maybe"))', 2), ('objects[i', 2), ('AssertionError("malformed', 2), ('(de', 2), ('Math.abs((int)', 2), ('innerError(SwitchMapMaybeObserver<R>', 2), ('escape', 2), ('buf;\n', 2), ('blocker', 2), ('member;\n', 2), ('io.reactivex.internal.util.ConnectConsumer;\nimport', 2), ('shared,', 2), ('.concatMapMaybe(Functions.justFunction(Maybe.error(new', 2), ('"Wildcard', 2), ('DisposableHelper.setOnce(resource,', 2), ('RxJavaPlugins.initNewThreadScheduler(c));\n', 2), ('Resurgence",', 2), ('X,', 2), ('OnErrorNextSubscriber<T>', 2), ('ImmutableListMultimap.of())\n', 2), ('.assertResult(10,', 2), ('received"));\n', 2), ('max);\n', 2), ('times.get(i);\n', 2), ('HashBiMap<K,', 2), ('java.util.concurrent.Future;\n\n/**\n', 2), ('cachedEntrySet', 2), ('dest.fulfillExceptionally((Exception)', 2), ('5),\n', 2), ('fromSingle}', 2), ('"instance_"', 2), ('reportDoubleSubscription(observer);\n', 2), ('actual.onSuccess(count);\n', 2), ('org.mockito.Mockito.mock;\n\nimport', 2), ('SpscLinkedArrayQueue<R>(Observable.bufferSize());\n', 2), ('flat,', 2), ('allocates', 2), ('selfLoopCount);\n', 2), ("action's", 2), ('sourceFused', 2), ('com.google.common.collect.testing.testers;\n\nimport', 2), ('Format', 2), ('numbers2', 2), ('fo.get();\n', 2), ('observer.onNext(5);\n', 2), ('unrecoverable', 2), ('true);\n\n', 2), ('Builder(int', 2), ('methodNotThrowingAnyException());\n', 2), ('Callable<Long>()', 2), ('upstreamCount', 2), ('moRef.get().onError(new', 2), ('to.assertResult(0,', 2), ('ObjectInputStream(new', 2), ('S>\n', 2), ('predecessor,\n', 2), ('Cast', 2), ('numbers.add(num);\n', 2), ('protects', 2), ('resultSet.close();\n', 2), ('startWithEmpty()', 2), ('assertEquals(INVENTORY_SIZE,', 2), ('LOGGER.info("Enumerating', 2), ('u2);\n', 2), ('assertEquals(value,', 2), ('FlattenIterableObserver<T,', 2), ('2.0)\n', 2), ('Casts', 2), ('accumulator));\n', 2), ('PlayerDetails("bob@foo.bar",', 2), ('easiest\n', 2), ('MaybeNever', 2), ('layers;\n', 2), ('list.add(w);\n', 2), ('logger.finer(Platform.format("%s:', 2), ('(Scheduler', 2), ('RAII', 2), ('RowSortedTable<R,', 2), ('fileB,', 2), ('FlowableSubscriber<CompletableSource>,', 2), ('(except', 2), ('awaited', 2), ('create();\n', 2), ('EmptyDisposable.error(t,', 2), ('enumClass,', 2), ('awaiting', 2), ('chur', 2), ('createDerivedSuites(\n', 2), ('rainbowFish,', 2), ('SpscArrayQueue<T>(bufferSize());\n', 2), ('ResourceInfo("a/b/c.txt",', 2), ('well-behaved\n', 2), ('5).reduce(0,', 2), ('SimpleMessage', 2), ('suitable', 2), ('120,', 2), ('Moreover,', 2), ('boundaryError(Disposable', 2), ('scheduling:', 2), ('lio;\n', 2), ('command.run();\n//', 2), ('sref', 2), ('this.clients', 2), ('subscribeActual()', 2), ('testDoOnUnSubscribeWorksWithRefCount()', 2), ('ordering\n', 2), ('(ServerSocketChannel)', 2), ('Amb', 2), ('Thread.currentThread().getContextClassLoader();\n', 2), ('manner,', 2), ('fromActionTwice()', 2), ('3));\n', 2), ('relying', 2), ('pp.switchMapCompletable(Functions.justFunction(cs))\n', 2), ('this.operator', 2), ('DebounceTimedObserver<T>\n', 2), ('parent.emit(idx,', 2), ('parent.\n', 2), ('upgraded");\n', 2), ('f.get().get(1));\n', 2), ('Function<SingleSource,', 2), ('journal.\n', 2), ('Single.just(v).subscribeOn(Schedulers.computation());\n', 2), ('Optional::toJavaUtil}', 2), ('shoot', 2), ('Arrays.toString(a);\n', 2), ('io.reactivex.internal.functions;\n\nimport', 2), ('observer.awaitTerminalEvent(1,', 2), ('AtomicReference<Future<?>>();\n', 2), ('18,', 2), ('3000,', 2), ('Determines', 2), ('occurs?\n', 2), ('writable.\n', 2), ('TestException()).blockingLatest().iterator();\n\n', 2), ('RuntimeException("Journal', 2), ('forwarded.\n', 2), ('cls', 2), ('parent.otherError(new', 2), ('zipWith}', 2), ('fails,', 2), ('right);\n', 2), ('"three"', 2), ('"next()");\n', 2), ('Anno",', 2), ('Schedulers.computation().scheduleDirect(new', 2), ('testValuesRemove()', 2), ('testOnErrorCalledOnScheduler()', 2), ('ps1.onNext(1);\n', 2), ('ErrorMode.BOUNDARY));\n', 2), ('ownerType,', 2), ('TimeoutSubscriber(Subscriber<?', 2), ('milli', 2), ('task.setRest(f2);\n\n', 2), ('io.reactivex.internal.observers.ResumeSingleObserver;\nimport', 2), ('types.', 2), ('Object[]>()', 2), ('LogRecord', 2), ('itemTimeoutPublisher', 2), ('PublisherBufferOverlappingSubscriber<T,', 2), ('assertFalse(it.hasNext());\n\n', 2), ('SortedJoinSubscription<T>', 2), ('cakeBean', 2), ('checkArgument(!from.equals(to),', 2), ('1]);\n', 2), ('++complete', 2), ('EncodingOption', 2), ('readers\n', 2), ('executed\n', 2), ('Assert.assertEquals(Integer.valueOf(3),', 2), ('TimerSubscriber', 2), ('tailMap(key,', 2), ('HashMultimap.create();\n', 2), ('Function6<Integer,', 2), ('ListFeature[]', 2), ('Observable.never().blockingLatest().iterator();\n\n', 2), ('ClassInfo("Foo.class",', 2), ('inner.isDone();\n\n', 2), ('FlowableCollect<T,', 2), ('Iterator#hasNext()}', 2), ('Scheduler.createWorker()}', 2), ('CompletableSubject.create();\n', 2), ('nww', 2), ('u2', 2), ('TestObserver<Object>();\n', 2), ('lastInitialDelay', 2), ('CompletableSubject.create(),\n', 2), ('testSingleSourceManyIterators()', 2), ('reader.readObject();\n\n', 2), ('com.google.common.base.Optional<T>', 2), ('RandomNumberGenerator', 2), ('3562861878281475070L;\n', 2), ('flatMapCompletable;\n\n', 2), ('assertNull(((Callable<Void>)m).call());\n\n', 2), ('enable', 2), ('AtomicLongArray', 2), ('parent.innerComplete(index);\n', 2), ('Observer<R>', 2), ('java.util.concurrent.ConcurrentNavigableMap;\nimport', 2), ('parallelism;\n\n', 2), ('contains\n', 2), ('DisposableHelper.dispose(boundary);\n', 2), ('parent.innerNext(this,', 2), ('fuseToMaybe()', 2), ('AssertionError("Inner', 2), ('bijection.\n', 2), ('StringWriter.class,\n', 2), ('definitionStart);\n\n', 2), ('CollectionSize[]', 2), ('asMap().get(Object)}', 2), ('zipArray}', 2), ('SomeAbstractClass()', 2), ('superclass', 2), ('lotteryTicket', 2), ('TestSubscriber<Object>(0);\n\n', 2), ('car.getModel().get());\n', 2), ('TypeVisitor()', 2), ('bug.\n', 2), ('serialized.', 2), ('cast}', 2), ('context.getBean(CakeDao.class);\n', 2), ('generateMap(K', 2), ('Re-subscribe', 2), ('java.io.PrintStream;\nimport', 2), ('r1,', 2), ('zipArray(Function<?', 2), ('written.\n', 2), ('this.seed', 2), ('this.rights', 2), ('sell', 2), ('checkSource(Completable.class.getSimpleName(),', 2), ('takeNext()', 2), ('parent.emit(index,', 2), ('DisposableHelper.replace(resource,', 2), ('evictedGroups', 2), ('flowable.blockingFirst();\n', 2), ('ac.subscribe(sources);\n', 2), ('ms.getValue().intValue());\n', 2), ('Item', 2), ('"defaultValue', 2), ('instanceId,', 2), ('iteration.', 2), ('count.incrementAndGet()', 2), ('ListenableFuture}.\n', 2), ('s.list.size());\n', 2), ('http://javamex.com/tutorials/random_numbers/xorshift.shtml\n', 2), ('"Smith",', 2), ('System.out.println("UI', 2), ('requested.getAndSet(0L);\n', 2), ('notificationHandler}\n', 2), ('prettyPrint(String', 2), ('validate(Disposable', 2), ('p.subscribe(bc);\n', 2), ('DisposableHelper.isDisposed(mainDisposable.get());\n', 2), ('Wiki:\n', 2), ('TimeUnit.DAYS);\n', 2), ('reduced.blockingFirst();\n', 2), ('Schedulers.from(exec);\n\n', 2), ('super.write(cbuf,', 2), ('onError(t.getError());\n', 2), ('JarFileFinder', 2), ('*/\n@GwtCompatible\nclass', 2), ('(Entry<?,', 2), ('body\n', 2), ('tracking', 2), ('seconds\n', 2), ('"onRequest', 2), ('this.factory.get();\n', 2), ('#replace(Disposable)\n', 2), ('SingleDisposable[]', 2), ('FuseToObservable<U>', 2), ('McKay\n', 2), ('SpscLinkedArrayQueue<T>(prefetch);\n', 2), ('AlbumListPage', 2), ('assertTrue(filter.accept(dir,', 2), ('N>create(EXPECTED_DEGREE),', 2), ('described', 2), ('"a"));\n', 2), ('Observables.\n', 2), ('nullness', 2), ('ticket3', 2), ('Enum<?>', 2), ('inner[index].id', 2), ('TestHelper.checkUtilityClass(FlowableToFuture.class);\n', 2), ('TreeBasedTable<R,', 2), ('timeout()', 2), ('LOGGER.info("Deleting', 2), ('1L;\n\n', 2), ('EqualSubscriber<T>(this,', 2), ('TestHelper.checkUtilityClass(BackpressureHelper.class);\n', 2), ('synthetic', 2), ('60000)\n', 2), ('boundarySupplier;\n\n', 2), ('sources.length;\n\n\n', 2), ('SingleTransformer}', 2), ('RS");\n', 2), ('BiFunction<Single,', 2), ('TestResourceSingleObserver<Integer>();\n', 2), ('action;\n\n', 2), ('.blockingMostRecent(1)\n', 2), ('Math.min(Thread.MAX_PRIORITY,\n', 2), ('innerError', 2), ('0).toFlowable().blockingSingle().intValue());\n', 2), ('otherSignalsAndCompletes()', 2), ('<li>To', 2), ('false}.\n', 2), ('pluginNull()', 2), ('assertNotEquals(value,', 2), ('DisposableMaybeObserver&lt;Integer&gt;()', 2), ('available.', 2), ('LOGGER.info("Black', 2), ('loader.\n', 2), ('TestSubscriber<U>', 2), ('onNextInnerCompleteRace()', 2), ('(checkResult.getResult().equals(CheckResult.WIN_PRIZE))', 2), ('Consumer<Long>()', 2), ('.put("\\\\n', 2), ('Math.random', 2), ('ExceptionHelper.wrapOrThrow(new', 2), ('bytes.length);\n', 2), ('DelayMaybeObserver<T>', 2), ('AbstractSetMultimap<K,', 2), ('@Footprint\n', 2), ('this.df', 2), ('List<UnicastProcessor<T>>', 2), ('TestObserver<Integer>(),', 2), ('a.equals(b);\n', 2), ('TakeUntilMainMaybeObserver(MaybeObserver<?', 2), ('rx2.computation-threads}', 2), ('MaybeTakeUntilPublisher<T,', 2), ('scalarMapperCrash()', 2), ('little', 2), ('this.factory.apply("name");\n', 2), ('builderWithExpectedSize(int', 2), ('io.reactivex.functions.Consumer;\n\npublic', 2), ('LongStream', 2), ('q.poll().intValue());\n', 2), ('AtomicReference<Subscription>\nimplements', 2), ('TestSubscriber<U>();\n\n', 2), ('(readerMutex)', 2), ('inverse', 2), ('NPE");\n//', 2), ('Single<Integer>[]', 2), ('forwarded', 2), ('RxJavaPlugins.onCompletableLift(cop));\n//\n//', 2), ('requested);\n//', 2), ('------------------------------------------------------------------\n\n', 2), ('java.util.concurrent.CompletableFuture#handle}', 2), ('it).</dd>\n', 2), ('result.getExceptionList().size());\n', 2), ('syncArray()', 2), ('publish', 2), ('(E[])', 2), ('truncating', 2), ('assertTrue(ss.hasValue());\n', 2), ('reference.', 2), ('Callable<Single<Integer>>()', 2), ('NullPointerException(RuntimeException(IOException))");\n', 2), ('<b>synchronous', 2), ('errorCount', 2), ('source.connect(connection);\n', 2), ('innerCloseError(Throwable', 2), ('ceilingEntry(K', 2), ('Semaphore', 2), ('database.', 2), ('mixed()', 2), ('increase', 2), ('TimeoutMainObserver<T>', 2), ('Flowable<Integer>>', 2), ('here,', 2), ('(Long)q.peek();\n\n', 2), ('futureResult2', 2), ('Collections.addAll(innerList,', 2), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concat.png"', 2), ('OptionalDouble', 2), ('next();\n', 2), ('"Japanese"));\n', 2), ('Part', 2), ('Single<Object>()', 2), ('Flowable.just(o1,', 2), ('org.mockito.Mockito.times;\nimport', 2), ('first4', 2), ('Simple', 2), ('mainSuccess()', 2), ('ballItem', 2), ('5).mergeWith(\n', 2), ('.named("TreeSet,', 2), ('ExceptionType', 2), ('subscribers.getAndSet(TERMINATED);\n', 2), ('PublishProcessor<Object>', 2), ('parseJavaClassPath()', 2), ('LinkedList<>(MinimalCollection.of(elements));\n', 2), ('com.google.common.collect.ArrayListMultimap;\nimport', 2), ('from(Iterable<E>', 2), ('testWithMultipleSubscribersStartingAtSameTime()', 2), ('Explicitly', 2), ('height="400"', 2), ('PARAMETER,', 2), ('TestResourceObserver<Integer>();\n', 2), ('collects', 2), ('(normally', 2), ('stat,', 2), ('nextNotification', 2), ('newFile("dir-1/dir-2");\n\n', 2), ('tasks.', 2), ('build()', 2), ('TestException("hasNext()");\n', 2), ('SinglePostCompleteSubscriber<Integer,', 2), ('subscription.get()', 2), ('checkNotNull(enumClass);\n', 2), ('"-XX:MaxInlineLevel=20"', 2), ('Document("_id",', 2), ('URL("file:///c:/Documents', 2), ('.testEquals();\n', 2), ('w/out', 2), ('setWaiting()', 2), ('[0,', 2), ('LOGGER.info("Red', 2), ('expectedSize)', 2), ('createTestSuite()', 2), ('Assert', 2), ('restriction,\n', 2), ('Feature', 2), ('ConcatMapMaybeMainObserver<T,', 2), ('fromRunnable()', 2), ('retryWhen(Function<?', 2), ('12:05")))\n', 2), ('res.getDateList().size()', 2), ('groups.clear();\n', 2), ('Collection<V>', 2), ('otherIterable,', 2), ('serialization\npublic', 2), ('#lift}', 2), ('idx))', 2), ("Observer's", 2), ('(!m.signature.contains("SingleSource"))', 2), ('(Comparator<?', 2), ('onSubscribe,', 2), ('record', 2), ('strategy.\n', 2), ('Iterator();\n', 2), ('io.reactivex.internal.operators.observable.*;\nimport', 2), ('Uses', 2), ('assertable\n', 2), ('retrieving', 2), ('height="200"', 2), ('other);\n\n', 2), ('MoneyTransferEvent.class);\n', 2), ('this.initialValue', 2), ('SafeTreeMap<>();\n', 2), ('ie)', 2), ('themselves\n', 2), ('flattenAsObservable}', 2), ('this));\n\n', 2), ('onOverflow,', 2), ('AnyObserver<T>(t,', 2), ('(u.getName().endsWith(".java"))', 2), ('lastKey()', 2), ('car.getPrice().get());\n', 2), ('uses\n', 2), ('listener,', 2), ('TestCompletable();\n\n', 2), ('predicates', 2), ('expectedDateValues', 2), ('java.io.FileReader;\nimport', 2), ('Callable<S>', 2), ('innerDone', 2), ('com.iluwatar.servicelayer.common.BaseEntity;\nimport', 2), ('elementAtOrErrorMultipleElements()', 2), ('Object>();\n\n', 2), ('FluentFuture<T>', 2), ('inventory\n', 2), ('(sa.isDisposed())', 2), ('forEachWile()', 2), ('making', 2), ('RuntimeException("an', 2), ('indicator', 2), ('(e.g.', 2), ('Assert.fail();\n//', 2), ('flattened', 2), ('raw.\n', 2), ('studentId)', 2), ('(!ws.isEmpty())', 2), ('events.add(t);\n', 2), ('delegate.hashCode();\n', 2), ('case.\n', 2), ('things', 2), ('long\n', 2), ('(ServiceConfigurationError', 2), ('joined', 2), ('normally,\n', 2), ('randomIntFrom0to(numInstances),', 2), ('resourceSupplier}', 2), ('guarantees', 2), ('DisposableHelper.dispose(timer);\n', 2), ('nextNotification.getError();\n', 2), ('Thread.sleep(30);\n', 2), ('pp.test(Long.MAX_VALUE,', 2), ('size)\n', 2), ('compositeList(to.errors().get(0));\n\n', 2), ('CountDownLatch(NITERS);\n', 2), ('TestSubscriber<Integer>(2)', 2), ('sourceLoop;\n', 2), ('suite()}', 2), ('(CompletableDisposable', 2), ('firstKey()', 2), ('callback)', 2), ('doOnDispose(Action', 2), ('subscribeActual(@NonNull', 2), ('a.onComplete();\n\n', 2), ('get(Stats', 2), ('FetchType.EAGER)\n', 2), ('records.\n', 2), ('<code>port</code>.\n', 2), ('md.actual.onError(e);\n', 2), ('assertEquals(Arrays.asList(3,', 2), ('ServerSocketChannel', 2), ('hence', 2), ('hide', 2), ('lock.wait();\n', 2), ('assertThat(e).isInstanceOf(IllegalStateException.class);\n', 2), ('map.entrySet();\n', 2), ('PublishDisposable<T>', 2), ('size++;\n', 2), ('com.google.common.hash;\n\nimport', 2), ('unsupported', 2), ('Executor}', 2), ('serial.update(d);\n', 2), ('assertEquals(response,', 2), ('machine', 2), ('TestHelper.checkUtilityClass(ExceptionHelper.class);\n', 2), ('TestSubscriber<Integer>(0));\n\n', 2), ('createFluentIterable(integers).last();\n', 2), ('Consumer<Emitter<Event>>', 2), ('npe.initCause(t);\n', 2), ('nextInnerSuccessRace()', 2), ('User>', 2), ('afterSuccess', 2), ('Thread()', 2), ('assertFalse(dependentPromise.isCancelled());\n', 2), ('Synchronizes', 2), ('(!ScalarXMapZHelper.tryAsCompletable(source,', 2), ('race(final', 2), ('Completable.mergeDelayError(Flowable.just(new', 2), ('inner.getAndSet(INNER_DISPOSED);\n', 2), ('java.util.regex.Pattern;\n\nimport', 2), ('"Future', 2), ('lock.newCondition();\n', 2), ('be:\n', 2), ('object);\n}\n', 2), ('cold."});\n', 2), ('recursively).\n', 2), ('#transform}.\n', 2), ('assertNotNull(first4);\n', 2), ('sourceCount)', 2), ('strategy;\n\n', 2), ('API,\n', 2), ('never()).onNext(3);\n', 2), ('before,', 2), ('executorService.execute(washingMachine::wash);\n', 2), ('.withFeatures(CollectionFeature.GENERAL_PURPOSE,', 2), ('org.openjdk.jmh.annotations.*;\n\n@BenchmarkMode(Mode.Throughput)\n@Warmup(iterations', 2), ('assertNotNull(last);\n', 2), ('TreeSet<E>', 2), ('SingleFlatMapMaybe<T,', 2), ('src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/B.next.png"', 2), ('publish\n', 2), ('MoneyDepositEvent.class);\n', 2), ('toMaybe()', 2), ('sub,', 2), ('(WindowOperation<T,', 2), ('function);\n\n', 2), ('&lt;=', 2), ('said', 2), ('Completable.amb(Arrays.asList(Completable.complete(),', 2), ('<code>\n', 2), ('choose', 2), ('Gson', 2), ('reuse', 2), ('com.google.common.testing.GcFinalization;\nimport', 2), ('IOException},', 2), ('Gson();\n', 2), ('whitespace.\n', 2), ('ballThread.start();\n\n', 2), ('Overriding', 2), ('RUNNING)', 2), ('onNext}', 2), ('io.reactivex.internal.fuseable.QueueDisposable;\n\n/**\n', 2), ('logger.finer(\n', 2), ('size.', 2), ('assertEquals("Observer', 2), ('errorOnFewer));\n', 2), ('ArrayList<>(spellbook.getWizards());\n', 2), ('using(Callable<?', 2), ('clear\n', 2), ('assertEquals(I18N,', 2), ('c.subscribe(to);\n', 2), ('com.google.common.collect.HashMultiset;\nimport', 2), ('(defaultValue', 2), ('(initialDelay', 2), ('Document("ticketId",', 2), ('getOwnerType()', 2), ('DoubleFunctionWithIndex<R>', 2), ('(instanceMethodDef', 2), ('/[sibling', 2), ('assertTrue(rco.errors.isEmpty());\n\n', 2), ('(Class<Throwable>)classes[i],', 2), ('.elementAtOrError(-1);\n', 2), ('flowableBlockingFirst()', 2), ('until)', 2), ('toRequest;\n', 2), ('calls[1]++;\n', 2), ('TestSingle<Integer>();\n\n', 2), ('!m.signature.contains("TestSubscriber"))', 2), ('innerScheduler', 2), ('disposerThrows()', 2), ('#RACE_LONG_LOOPS\n', 2), ('testHandledErrorIsNotDeliveredToThreadHandler()', 2), ('(others', 2), ('delegate.isEmpty();\n', 2), ('errors.\n', 2), ('MapMode}.\n', 2), ('marker', 2), ('AsyncProcessor', 2), ('index))', 2), ('directly;', 2), ('e.setAccessible(true);\n\n', 2), ('tightly', 2), ('jdkTypeDuplicatesOwnerName()', 2), ('ticket2', 2), ('javadocStart', 2), ('RejectedExecutionException();\n', 2), ('lists.size());\n\n', 2), ('deserializes', 2), ('out");\n', 2), ('shorter', 2), ('bo))', 2), ('Observable>', 2), ('WrappedHashMapGenerator', 2), ('r2,', 2), ('allocating', 2), ('(getById(customer.getId()).isPresent())', 2), ('Serdar', 2), ('Executors.newFixedThreadPool(3);\n\n', 2), ('onAfterSuccess.accept(t);\n', 2), ('Went', 2), ('dotIndex', 2), ('SubscriptionHelper.deferredRequest(upstream,', 2), ('assertEquals(7,', 2), ('assertTrue(future.isCancelled());\n\n', 2), ('incidentEdgeMap)', 2), ('check.\n', 2), ('NullPointerException("Null', 2), ('RegularImmutableList}.\n', 2), ('mname', 2), ('(ci', 2), ('verify(func).call();\n', 2), ('this.iterable', 2), ('").append(inDoc).append("', 2), ('needs.\n', 2), ('FlowableSubscriber<U>,', 2), ('turn"));\n', 2), ('ListenableFuture}\n', 2), ('Flowable.just(1).concatWith(Flowable.<Integer>never())\n', 2), ('missedRequested,', 2), ('(inclusive)\n', 2), ('fixed.\n', 2), ('BOUNDARY_DISPOSED', 2), ('merge(this,', 2), ('along\n', 2), ('remaining--', 2), ('singleFunction,', 2), ('.concatMapMaybe(Functions.justFunction(Maybe.just(1)))\n', 2), ('source4)', 2), ('ts.assertComplete();\n\n', 2), ('Class#getPackage},', 2), ('EmptySubscription.complete(subscriber);\n', 2), ('TestException("Second"));\n\n', 2), ('topShelf.add(factory.createPotion(PotionType.STRENGTH));\n', 2), ('this.scheduler;\n', 2), ('ConcatMapSingleSubscriber<T,', 2), ('mainErrorInnerSuccessDelayError()', 2), ('java.util.function.BiFunction;\nimport', 2), ('(str.length()', 2), ('ofClassAndContents(Object.class,', 2), ('key");\n', 2), ('4).lift(new', 2), ('Function4<Integer,', 2), ('.assertResult(Arrays.asList(5,', 2), ('sources,\n', 2), ('emissions', 2), ('isDone();\n', 2), ('.doAfterSuccess(new', 2), ('tearDown;\n', 2), ('Locale', 2), ('FileInputStream', 2), ('assertFalse(SubscriptionHelper.replace(s,', 2), ('lineBuf', 2), ('spellbooks;\n', 2), ('java.lang.annotation.ElementType.PARAMETER;\nimport', 2), ('testDoOnSubscribe2()', 2), ('TestsForQueuesInJavaUtil', 2), ('GenericArrayType)', 2), ('(currentReaderCount', 2), ('(groupCount.decrementAndGet()', 2), ('Wrapper', 2), ('scanJarFile(ClassLoader', 2), ('pp1.singleElement().timeout(pp2,', 2), ('fromCallableInvokesLazy()', 2), ('s.setDisposable(d);\n', 2), ('Biffle\n', 2), ('request,', 2), ('java.util.Spliterators;\nimport', 2), ('Collection<V>>(keyComparator));\n', 2), ('parent.innerNext();\n', 2), ('elementAtIndex0OnEmptySource()', 2), ('drastogi\n', 2), ('NITERS;', 2), ('ConcatMapInnerObserver(this);\n', 2), ('iteratorNotification;\n\n', 2), ('mergeArray}', 2), ('Flowable.intervalRange(Long.MAX_VALUE', 2), ('SwitchMapCompletableObserver<?>', 2), ('(containsKey(key)', 2), ('input);\n\n', 2), ('longer\n', 2), ('"1");\n', 2), ('threads.add(t);\n', 2), ('baseName\n', 2), ('variants', 2), ('cal.get(Calendar.YEAR));\n', 2), ('cakeToppingInfo', 2), ('TestHelper.checkDisposed(PublishSubject.create().elementAt(0,', 2), ('.put(\n', 2), ('IllegalArgumentException.class);\n', 2), ('com.google.common.collect.testing.features.TesterAnnotation;\nimport', 2), ('calls[1]);\n', 2), ('com.iluwatar.flux.action.MenuAction;\nimport', 2), ('(innerCompleted)', 2), ('fileTreeChildren(file);\n', 2), ('second.cancel();\n', 2), ('BasicQueueDisposable<T>', 2), ('Single)', 2), ('@VisibleForTesting\n', 2), ('through\n', 2), ('WrappedHashMapGenerator()', 2), ('Throwable.class}', 2), ('java.util.concurrent.ThreadPoolExecutor;\nimport', 2), ('notifications.\n', 2), ('frq)', 2), ('.map(Functions.<Integer>identity())\n', 2), ('55556);\n', 2), ('FileOutputStream(file);\n', 2), ('subscriber.assertError(error);\n', 2), ('UnsupportedOperationException}:\n', 2), ('testMostRecentNull()', 2), ('c.subscribe(new', 2), ('testDoOnError()', 2), ('this.', 2), ('w.schedulePeriodically(r,', 2), ('ScheduledRunnable(decoratedRun,', 2), ('NUM_NUMBERS', 2), ('terms', 2), ('fusedPollThrows()', 2), ('TcpLoggingClient("Client', 2), ('presenting', 2), ('CrashingMappedIterable<Maybe<Integer>>(100,', 2), ('moveToNext()', 2), ('ImmutableSet<V>>', 2), ('flatMapObservable(Function<?', 2), ('Runnable>()', 2), ('<A,', 2), ('writer.writeObject(instance.comparator());\n\n', 2), ("you're", 2), ('assertEquals(Collections.emptyList(),', 2), ('migrate', 2), ('U>(value,', 2), ('.expectCollects(Collections.emptyList());\n', 2), ("orcs'", 2), ('assertEquals(allCustomers.get(0).getFirstName(),', 2), ('Executors.newFixedThreadPool(3);\n', 2), ('Burst<T>(error,', 2), ('AmbCoordinator<T>(s,', 2), ('-5955289211445418871L;\n\n', 2), ('-3517602651313910099L;\n\n', 2), ('<code>runnable</code>', 2), ('CompletableResult<T>', 2), ('user.', 2), ('batchSize)', 2), ('LotteryTicketCheckResult', 2), ('observable.blockingFirst();\n', 2), ('<E>\n', 2), ('org.junit.runner.RunWith;\nimport', 2), ('#isEmpty()}</li>\n', 2), ('FilterInputStream', 2), ('worker.schedule(de,', 2), ('AssertionError("Message', 2), ('source9);\n', 2), ('HashMultimap<K,', 2), ('Exception\n', 2), ('s.request(Long.MAX_VALUE);\n\n', 2), ('subscribers.get())', 2), ('generator.generateFresh(\n', 2), ('properties.put(stat,', 2), ('javax.persistence.Column;\nimport', 2), ('observables', 2), ('field.setAccessible(true);\n', 2), ('FlowableSubscriber<Integer>()', 2), ('19.0', 2), ('<p>By', 2), ('bs2));\n\n', 2), ('request(2);\n', 2), ('Scheduler}.\n', 2), ('doAfterTerminate(Action', 2), ('Arrays.asList(pp0.singleElement(),', 2), ('(!SubscriptionHelper.validate(this.s,', 2), ('expect,', 2), ('customer.getLastName());\n', 2), ('customerId;\n', 2), ('Function<U,', 2), ('(ts.errorCount()', 2), ('newGroup', 2), ('SpscArrayQueue<U>(maxConcurrency);\n', 2), ('mergeDelayError(MaybeSource<?', 2), ('NoSuchElementException);\n', 2), ('iters++)', 2), ('assertTrue(css[0].hasObservers());\n\n', 2), ('reduceCovariance()', 2), ('rainbowFish.getAge()));\n', 2), ('sd.set(d);\n\n', 2), ('System.out.println("Wait', 2), ('loop.\n', 2), ('NotificationLite.error(t);\n', 2), ('innerErrorThenMainError()', 2), ('resourceDisposer.accept(resource);\n', 2), ('onCallback)', 2), ('setName(String', 2), ('testHonorsContractWhenThrows()', 2), ('avoiding', 2), ('set");\n', 2), ('actual.hasThrowable();\n', 2), ('TestsForListsInJavaUtil', 2), ('dis.emit();\n', 2), ('uiEventLoop.getThread());\n', 2), ('disposed?!",', 2), ('again");\n', 2), ('a[0].subscribe(new', 2), ('-5556924161382950569L;\n\n', 2), ('crashOnNext)', 2), ('StringBuilder.class,\n', 2), ('AtomicReference<SwitchMapSingleObserver<R>>();\n', 2), ('never()).onNext(0);\n', 2), ('SubscriptionHelper.setOnce(mainSubscription,', 2), ('f.getParentFile();\n', 2), ('Arrays.spliterator(new', 2), ('Upstream', 2), ('java.util.regex.PatternSyntaxException;\nimport', 2), ('observable.materialize().dematerialize();\n\n', 2), ('main.subscribe(new', 2), ('a.onNext(u);\n', 2), ('QueueFuseable.ASYNC)\n', 2), ('expectedEntries', 2), ('AtomicReference<Notification<T>>', 2), ('Subscriber.', 2), ('Stream.of();\n', 2), ('NotificationLite', 2), ('acquiring', 2), ('Package}', 2), ('other.dispose();\n\n', 2), ('s.onNext("two");\n', 2), ('com.google.common.io.CharSink;\nimport', 2), ('ba4)', 2), ('testDoOnSubscribe()', 2), ('choice', 2), ('AnySubscriber<T>(s,', 2), ('syncRange()', 2), ('entryOf(k1,', 2), ('AtomicReference<Observer<?>>();\n', 2), ('constructor;\n', 2), ('LeftRightObserver(parent,', 2), ('ObservableSource<Long>()', 2), ('ConnectableFlowable', 2), ('RepeatUntilObserver<T>', 2), ('mapper.apply(value).iterator();\n\n', 2), ('<p>To', 2), ('BOUNDARY_DISPOSED)', 2), ('higherEntry(K', 2), ('prefix,\n', 2), ('unit);\n}\n', 2), ('logPatternCompilerError(e);\n', 2), ('handles.\n', 2), ('valueFunction)', 2), ('source-like', 2), ('honored', 2), ('OtherObserver<T>(subscriber,', 2), ('href="http://reactivex.io/documentation/operators/refcount.html">ReactiveX', 2), ('onNext()', 2), ('(inCompletable)', 2), ('metaHorrors', 2), ('true;', 2), ('worked\n\n', 2), ('(compareAndSet(FUTURE_INDEX,', 2), ('spans)', 2), ('FlattenIterableSubscriber<T,', 2), ('bounds\n', 2), ('bounds', 2), ('transformation', 2), ('(null,', 2), ('Class<K>', 2), ('Anthony', 2), ('leave(int', 2), ('never()).onNext(anyLong());\n', 2), ('java.util.concurrent.atomic.AtomicInteger;\n\n/**\n', 2), ('com.iluwatar.fluentinterface.fluentiterable;\n\nimport', 2), ('(FlowableScalarXMap.tryScalarXMapSubscribe(source,', 2), ('syncIterable()', 2), ('List<T>,', 2), ('SwitchMapMaybeSubscriber<T,', 2), ('testsForLinkedList()', 2), ('Schedulers.single(),', 2), ('arrays', 2), ('listed', 2), ('reactor.changeOps(key,', 2), ('.concatMapSingle(\n', 2), ('lottery\n', 2), ('.switchMapCompletable(Functions.justFunction(cs))\n', 2), ('doubleFilter()', 2), ('OnErrorNextObserver<T>', 2), ('populated', 2), ('firstObserver', 2), ('org.junit.jupiter.api.Assertions.assertSame;\nimport', 2), ('topShelf', 2), ('testGetWithEmptyFlowable()', 2), ('XORShift', 2), ('condition.signalAll();\n', 2), ('DomainEvent', 2), ('Set>>', 2), ('Spliterator<K>', 2), ('"Producer");\n', 2), ('non-terminated', 2), ('isSelfLoop)', 2), ('item(T', 2), ('lefts;\n\n', 2), ('activeCount--;\n', 2), ('w.subscribe(to1);\n', 2), ('s;\n//', 2), ('Completable[]', 2), ('QueueSubscription.NONE)', 2), ('io.reactivex.internal.subscribers.FutureSubscriber;\nimport', 2), ('SequenceEqual</a>\n', 2), ('com.google.common.collect.CollectPreconditions.checkNonnegative;\n\nimport', 2), ('resumeSingleInCaseOfError}', 2), ('started.\n', 2), ('q.add(err);\n', 2), ('to.assertValueCount(0);\n', 2), ('hac', 2), ('TestHelper.checkDoubleOnSubscribeObservableToMaybe(new', 2), ('item.toString();\n', 2), ('nextFunction;\n\n', 2), ('toSortedList(@NonNull', 2), ('mainErrorAfterInnerError()', 2), ('V1', 2), ('2).materialize();\n', 2), ('viverra', 2), ('"foo2",', 2), ('Comparable<E>>', 2), ('pp1.single(-99).ambWith(pp2.single(-99)).test();\n\n', 2), ('ObjectHelper.requireNonNull(comparator,', 2), ('<code>', 2), ('disposable\n', 2), ('weaker', 2), ('create(final', 2), ('NotificationLite.next(args);\n', 2), ('orderings', 2), ('unsafeSubscribe', 2), ('Fusce', 2), ('facade.get();\n', 2), ('"@SchedulerSupport",', 2), ('Note,', 2), ('MockReference', 2), ('onNext;\n\n', 2), ('counter[0]);\n//\n//', 2), ('eager', 2), ('signalled.</dd>\n', 2), ('SingleElementObserver<T>', 2), ('nextFunction)', 2), ('Flowable.timer(100,', 2), ('FileVisitResult', 2), ('bufferOpen,', 2), ('Maybe.fromCallable(callable)\n', 2), ('checkDisposed()', 2), ('(NotificationLite.isComplete(buf))', 2), ('trim(scheduler.now(unit),', 2), ('this.keys', 2), ('s.onNext(i);\n', 2), ('Enumeration<?>', 2), ('nonempty', 2), ('libraryFunctionActingOnMovieObservables(horrorMovies);\n', 2), ('executorService.awaitTermination(30,', 2), ('negotiation', 2), ('Maybe<Integer>[]', 2), ('LEFT_VALUE)', 2), ('fail("timed', 2), ('List<ListenableFuture<T>>', 2), ('simpleObjects', 2), ('emitLast;\n\n', 2), ('KingJoffrey', 2), ('LinkedHashSet<E>', 2), ('takeUntil(new', 2), ('Thread.setDefaultUncaughtExceptionHandler(handler);\n', 2), ('valueFunction,\n', 2), ('cnt', 2), ('LinkedHashMultimap<Object,', 2), ('bounds);\n', 2), ('clazz.getMethods())', 2), ('CollectionSize.ZERO)\n', 2), ('Close>\n', 2), ('RuntimeException("error"))\n', 2), ('interleaving', 2), ('this.frc', 2), ('io.reactivex.observable.ObservableCovarianceTest.*;\n\npublic', 2), ('ignore)', 2), ('drained', 2), ('produced(p);\n', 2), ('Callable<?>', 2), ('java.util.concurrent.LinkedBlockingQueue;\nimport', 2), ('fails,\n', 2), ('.\n', 2), ('createKeySet()', 2), ('latch.\n', 2), ('autoConnect()', 2), ('MostRecentSubscriber<T>', 2), ('annotation.",', 2), ('AtomicReference<Thread>();\n\n', 2), ('href="http://en.wikipedia.org/wiki/Filename_extension">file', 2), ('assertEquals("Plugin', 2), ('MockExecutor();\n', 2), ('bufferHelper(String', 2), ('observer.onNext(Notification.createOnError(new', 2), ('secondObservable', 2), ('Object[].class,\n', 2), ('(ts', 2), ('AbstractSortedKeySortedSetMultimap<K,', 2), ('utilize', 2), ('(Callable)INSTANCE;\n', 2), ('(prefix', 2), ('assertFalse("Dispose', 2), ('purposes', 2), ('Nam', 2), ('request:', 2), ('TreasureChest())', 2), ('Observable.<Integer>', 2), ('sumErr', 2), ('schedulers...");\n', 2), ('assertTrue(listenerLatch.await(5,', 2), ('rco.complete);\n', 2), ('value.set(1);\n', 2), ('(!elements.hasNext())', 2), ('32;', 2), ('next.getName(),', 2), ('SerializedSubscriber<T>(s),\n', 2), ('fromActionNull()', 2), ('unexpected', 2), ('TakeSubscriber<T>(s,', 2), ('returnList', 2), ('"Flowable",', 2), ('CompletableFromUnsafeSource(source));\n', 2), ('a[n++]', 2), ('-7650903191002190468L;\n\n', 2), ('replaceResource(int', 2), ('newArrayList(E...', 2), ('AtomicReference<String>', 2), ('io.reactivex.Observer}s', 2), ('lock.readLock());\n', 2), ('bufs.put(idx,', 2), ('onDrop)', 2), ('Stream.of(optional.get())', 2), ('ObjectHelper.requireNonNull(source9,', 2), ('AtomicReference<V>', 2), ('heavy.get();\n', 2), ('resource-tracking', 2), ('singleFunction;\n', 2), ('RIGHT_VALUE', 2), ('o.dematerialize();\n', 2), ('onSuccess;\n\n', 2), ('height="300"', 2), ('ScanSeedObserver<T,', 2), ('(nextNotification.isOnComplete())', 2), ('assertInnerError(int', 2), ('expectedValuesPerKey)', 2), ('onCancel;\n', 2), ('general-purpose', 2), ('Stream.of(streams).flatMapToLong(stream', 2), ('(LeftRightEndSubscriber)val;\n\n', 2), ('this.lefts', 2), ('directory,', 2), ('Thread.setDefaultUncaughtExceptionHandler(originalHandler);\n', 2), ('set(Stats', 2), ('DisposableHelper.dispose(d);\n\n', 2), ('countZero()', 2), ('ts.assertValue(1)\n', 2), ('ClassInfo("a/b/Bar$1.class",', 2), ('QueueFuseable<T>,', 2), ('Observer>', 2), ('com.google.common.collect.ClassToInstanceMap;\nimport', 2), ('entry:', 2), ('updating/replacing', 2), ('verify(observer).onNext(true);\n', 2), ('exc),', 2), ('MaybeZipArray<T,', 2), ('FileOutputStream(filename);\n', 2), ('merge(Flowable.fromIterable(sources));\n', 2), ('exception"\n', 2), ('single;\n\n', 2), ('added...");\n', 2), ('jdx)', 2), ('NavigableMapTestSuiteBuilder.using(\n', 2), ('rightEnd,', 2), ('observer.onNext(Notification.createOnComplete());\n', 2), ('during\n', 2), ('ObjectHelper.requireNonNull(onCancel,', 2), ('"a', 2), ('MissingBackpressureException("queue', 2), ('While', 2), ('java.util.Random;\n\n/**', 2), ('result[2]', 2), ('prefetch);\n\n', 2), ('globalMutex.add(this);\n', 2), ('conditions', 2), ('AtomicInteger>());\n', 2), ('testDeferFunctionThrows()', 2), ('Given', 2), ('#toSerialized()}', 2), ('reduceInts()', 2), ('(george.aristy@gmail.com)\n', 2), ('numStripes', 2), ('happens</dd>\n', 2), ('completion/cancellation.\n', 2), ('System.out.println("t:', 2), ('Transform', 2), ('Unsafe,', 2), ('Bound.EXCLUSIVE));\n', 2), ('com.google.caliper.api.VmOptions;\nimport', 2), ('assertNull(error[0]);\n', 2), ('AppTest', 2), ('lazily', 2), ('crossbow', 2), ('assertFalse(subject.hasObservers());\n', 2), ('multimap.asMap();\n', 2), ('"Avatar",', 2), ('<li>Due', 2), ('ImmutableMap}', 2), ('-8466418554264089604L;\n\n', 2), ('UnitVisitor', 2), ('(inner.isUnbounded())', 2), ('state[1]);\n\n', 2), ('ASYNC_DISPOSED)', 2), ('observable.subscribe(observer);\n\n', 2), ('unsubscribeWhenSubscribeOnAndUnsubscribeOnAreOnSameThread()', 2), ('(TRight)val;\n\n', 2), ('iterable.', 2), ('array[i++]', 2), ('otherIterable;\n\n', 2), ('ObservableSource[count', 2), ('ObservableOperator<?', 2), ('File(entry).toURI().toURL());\n', 2), ('this.resources', 2), ('numberOfSubscribers;\n', 2), ('disposedOnCall()', 2), ('FileInputStream(file),', 2), ('ss.onError(new', 2), ('checkNotNull(charset);\n', 2), ('s.request(bufferSize);\n', 2), ('suppressForLinkedList()', 2), ('ClassPath', 2), ('testTimeInterval()', 2), ('Collections.synchronizedSet(new', 2), ('.first(4)\n', 2), ('restrictions\n', 2), ('occurs', 2), ('booleans)', 2), ('ObjectHelper.requireNonNull(errorSupplier,', 2), ('client.\n', 2), ('io.reactivex.CompletableSource;\nimport', 2), ('setRace()', 2), ('queue.offer(buffers.remove(idx));\n', 2), ('Consumer<TestObserver<Object>>()', 2), ('lastDelay);\n', 2), ('b.set(true);\n', 2), ('java.nio.channels.Selector;\nimport', 2), ('12/19/15', 2), ('ObservableSource)', 2), ('binding', 2), ('[NSA]"));\n', 2), ('com.iluwatar.fluentinterface.fluentiterable.FluentIterable;\n\n/**\n', 2), ('TestException("One"));\n', 2), ('Generate', 2), ('Single.zip(pp0.single(0),', 2), ('From', 2), ('java.util.concurrent.BlockingQueue;\n\n/**\n', 2), ('assertTrue(ms.hasComplete());\n', 2), ('testMergeCovariance3()', 2), ('com.google.common.io.CharSource;\nimport', 2), ('SingleObserver#onError(Throwable)}', 2), ('size.\n', 2), ('"Interstellar",', 2), ('Observable<Object>()', 2), ('leftEnd,', 2), ('asCallable()', 2), ('Observable.just(1).hide().flatMap(new', 2), ('stop.getAsBoolean();\n', 2), ('#observeOn\n', 2), ('(!has)', 2), ('BiFunction<NumberExpression,', 2), ('Serialization.readCount(stream);\n', 2), ('(allowFatal', 2), ('buf);\n', 2), ('KNOWN_ORDER', 2), ('timeout(timeout,', 2), ('children(String', 2), ('dispatcher;\n', 2), ('edgesConnecting(N', 2), ('observers.length;\n', 2), ('Sandberg\n', 2), ('"tom@hanks.com");\n', 2), ('Ordering<T>', 2), ('checkNotNull(entry.getKey());\n', 2), ('Function5<?', 2), ('railSorted', 2), ('getValues()', 2), ('com.iluwatar.databus.data.MessageData;\nimport', 2), ('source.subscribe(subscribe(s,', 2), ('this.it;\n\n', 2), ('V>>>\n', 2), ('-8003404460084760287L;\n\n', 2), ('TakeUntilMainSubscriber.this,', 2), ('.limit(2)\n', 2), ('SingleDelayWithObservable<T,', 2), ('de.setResource(d);\n', 2), ('ts.assertValueCount(Flowable.bufferSize());\n', 2), ('bs1));\n\n', 2), ("singleton's", 2), ('SubscribeOn</a>\n', 2), ('Function<Single<Integer>,', 2), ('6695226475494099826L;\n\n', 2), ('leaks', 2), ('Maybe>()', 2), ('rco.onSubscribe(d);\n\n', 2), ('Element', 2), ('badSourceObservable()', 2), ('flowable.blockingLast();\n', 2), ('pp.doOnCancel(new', 2), ('Completable[1024];\n', 2), ('customerDao)', 2), ('apply(File', 2), ('bf.onSubscribe(s);\n\n', 2), ('System.out.println("unsubscribe', 2), ('Resources.readLines(resource,', 2), ('io.reactivex.").append(baseClassName)\n', 2), ('CompletableObserverImplementation(CompletableObserver', 2), ('task.setFirst(new', 2), ('Timer</a>\n', 2), ('array,', 2), ('->\n', 2), ('run();\n', 2), ('LOGGER.info("Retrieving', 2), ('MILLISECONDS,', 2), ('groups.values())', 2), ('testMergeCovariance()', 2), ('assertFalse(rso.isDisposed());\n', 2), ('observer.takeNext();\n', 2), ('equals()', 2), ('dest', 2), ('manually', 2), ('related\n', 2), ('Giving', 2), ('ImmutableBiMap.of())\n', 2), ('#tryOnError(Throwable)}\n', 2), ('ss.subscribe(inner);\n', 2), ('single\n', 2), ('baseName', 2), ('Converter<UserDto,', 2), ('com.iluwatar.hexagonal.domain.LotteryTicketId;\n\n/**\n', 2), ('SimplePlainQueue<R>', 2), ('otherIterable;\n', 2), ('java.util.Collection', 2), ('com.google.common.collect.ImmutableClassToInstanceMap;\nimport', 2), ('lock.\n', 2), ('Long.MAX_VALUE\n', 2), ('mainErrorAfterTermination()', 2), ('hiding', 2), ('TimeUnit.SECONDS).blockingSubscribe();\n\n', 2), ('source.test();\n', 2), ('rails\n', 2), ('node,', 2), ("DON'T", 2), ('declares', 2), ('boundarySupplier,', 2), ('SortedJoinInnerSubscriber<T>[]', 2), ('below', 2), ('FlatMapCompletableMainObserver<T>', 2), ('Subscriber"))', 2), ('resources;\n\n', 2), ('-6071216598687999801L;\n\n', 2), ('AtomicReference<String>();\n', 2), ('Function7<Integer,', 2), ('fulfillExceptionally(Exception', 2), ('writer.write(initialString);\n', 2), ('-7965400327305809232L;\n\n', 2), ('onAfterTerminate,', 2), ('super.getJavaChannel();\n', 2), ('-1266041316834525931L;\n\n', 2), ('aboveSamplesLesser()', 2), ('.put("1', 2), ('NonFinalFieldIgnored', 2), ('innerQueue', 2), ('io.reactivex.exceptions.MissingBackpressureException}', 2), ('map(Functions.castFunction(clazz));\n', 2), ('integerObservable\n', 2), ('this.nextFunction', 2), ('Iterator}\n', 2), ('SerializableTester.reserializeAndAssert(map.keySet());\n', 2), ('anyway\n', 2), ('not\\\\11-12', 2), ('"reducer");\n', 2), ('LinkedList<E>', 2), ('paramName)', 2), ('cls,', 2), ('LOGGER.info("Program', 2), ('Files.asCharSource(file,', 2), ('NullPointerTester()\n', 2), ('composite.add(w);\n', 2), ('windy', 2), ('ArrayList<Thread>();\n', 2), ('e5,', 2), ('MaybeTransformer}', 2), ('intems', 2), ('dateList', 2), ('observableBlockingFirst()', 2), ('Function<SingleSource<?', 2), ('TestHelper.checkDoubleOnSubscribeFlowableToSingle(new', 2), ('Enums.getIfPresent(shadowTestEnum,', 2), ('t.onError(ex);\n', 2), ('"2")\n', 2), ('operation\n', 2), ('timer(final', 2), ('newTypeVariableImpl(\n', 2), ('mostRecent(s,', 2), ('assertTrue(rso.errors.isEmpty());\n\n', 2), ('resource.dispose();\n', 2), ('com.google.common.collect.MapDifference;\nimport', 2), ('FileWriterAction', 2), ('Invoked', 2), ('*/\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Target({ElementType.METHOD,', 2), ('FileByteSourceFactory', 2), ('(stop)', 2), ('concatenated', 2), ('executeService.submit(reader1);\n', 2), ('terminated.', 2), ('NullByteSink', 2), ('"1:1",', 2), ('s.onError(t);\n', 2), ('AlwaysEqual.INSTANCE)\n', 2), ('assertEquals(Arrays.asList(1),', 2), ('onSuccessMapper;\n\n', 2), ('.assertResult(Arrays.asList(1,', 2), ('testDistinctOfNormalSource()', 2), ('ProtocolViolationException\n', 2), ('#onSuccess(Object)},\n', 2), ('keyIterator()', 2), ('ballThread.setTwin(ballItem);\n\n', 2), ('createCollection()', 2), ('update)', 2), ('has;\n', 2), ('SwitchMapSingleObserver<Object>', 2), ('source.subscribe(left);\n', 2), ('MergeCompletableObserver', 2), ('disintegration', 2), ('experimental', 2), ('super(n);\n', 2), ('set.add(freshElement);\n', 2), ('ParallelConcatMap<T,', 2), ('com.google.common.collect.TreeMultiset;\nimport', 2), ('map(file,', 2), ('w.subscribeOn(Schedulers.newThread()).observeOn(Schedulers.computation())\n', 2), ('values.length;', 2), ('this.onSuccess', 2), ('méar', 2), ('Processor', 2), ('q.setFirst(err);\n', 2), ('autoConnectImmediately()', 2), ('observer.onNext(Notification.createOnNext(1));\n', 2), ('m.javadoc.indexOf("Observable",', 2), ('mapKey', 2), ('this.mainSubscription', 2), ('client\n', 2), ('consumerIndex.get();\n', 2), ('u),', 2), ('testExecutor', 2), ('(resultSet.next())', 2), ('.assertValueCount(1)\n', 2), ('Offer', 2), ('descendingKeySet()', 2), ('main,', 2), ('FlowableOperator<?', 2), ('cast(final', 2), ('cycles;\n', 2), ('innerSuccess(T', 2), ('task.runner', 2), ('ts2.assertValues(2L,', 2), ('File(entry).getAbsolutePath()));\n', 2), ('Settings/"),', 2), ('testElementAtWithMinusIndex()', 2), ('.timestamp()\n', 2), ('(innerQueue', 2), ('(!empty', 2), ('assertSame(unsubscribeThread,', 2), ('TakeUntilObserver<T>', 2), ('With', 2), ('T>>\nextends', 2), ('SUPPORTS_ITERATOR_REMOVE),\n\n', 2), ('href="http://reactivex.io/documentation/operators/sequenceequal.html">ReactiveX', 2), ('call(CompletableOperator', 2), ('"XX";\n', 2), ('Publisher)', 2), ('Arrays.asList(3,', 2), ('12,', 2), ('(!ScalarXMapZHelper.tryAsSingle(source,', 2), ('FlowableToListSingle(Flowable<T>', 2), ('after);\n', 2), ('input.size).subscribeOn(Schedulers.computation());\n', 2), ('checkResult', 2), ('Observable.just(null,', 2), ('LOGGER.info("InterruptedException', 2), ('pp2.onNext(2);\n', 2), ('Assert.assertEquals(Integer.valueOf(1),', 2), ('HashSet<String>());\n\n', 2), ('m.invoke(null));\n//', 2), ('assume', 2), ('clickable', 2), ('s.assertValue(10);\n', 2), ('scanFor(b,', 2), ('disposedUpfront()', 2), ('runnableDisposedAsync()', 2), ('pp.onNext(4);\n', 2), ('<C', 2), ('ConcatMapInnerObserver(ConcatMapCompletableObserver<?>', 2), ('ceilingKey(K', 2), ("Observable'\\r\\n", 2), ('capacity.', 2), ('shouldNotInvokeFuncUntilSubscription()', 2), ('dis))', 2), ('BufferSkipObserver<T,', 2), ('worker.schedule(new', 2), ('LOGGER.info("Treasure', 2), ('PromiseSupport<T>', 2), ('(type.isArray())', 2), ('"main");\n', 2), ('System.out.println(Thread.currentThread()', 2), ('asList()', 2), ('b.indexOf(")",', 2), ('Optional#absent}', 2), ('ts.awaitDone(5,', 2), ('True,', 2), ('created.\n', 2), ('testHonorsContractWhenCompleted()', 2), ('names\n', 2), ('scheduler,\n', 2), ('mainDisposable;\n\n', 2), ('io.reactivex.internal.operators.completable.*;\nimport', 2), ('fail("Iterator', 2), ('Windows', 2), ('s.get().request(1);\n', 2), ('reduceWithObjects()', 2), ('ObjectHelper.requireNonNull(defaultValue,', 2), ('innerError(ex);\n', 2), ('nextSupplier.apply(t);\n', 2), ('*/\n/*', 2), ('cancelCrash()', 2), ('ImmutableMultimap.of())\n', 2), ('super/extends', 2), ('DeferredScalarDisposable<T>(s);\n', 2), ('Watch', 2), ('height="445"', 2), ('io.reactivex.internal.util.QueueDrainHelper;\n\n/**\n', 2), ('state)', 2), ('ScalarXMapFlowable<T,', 2), ('offer(E', 2), ('seconds', 2), ('assertEquals(Float.valueOf(0),', 2), ('Functions.emptyConsumer());\n\n', 2), ('AbstractDirectTask', 2), ('lvConsumerNode()', 2), ('ObjectHelper.requireNonNull(transformer,', 2), ('persistence', 2), ('p.subscribe(cl);\n', 2), ('ParallelCollect<T,', 2), ('Schedulers.single())\n', 2), ('filesystem', 2), ('".class";\n', 2), ('cancelAllBut(int', 2), ('onSubscribed', 2), ('extends\n', 2), ('extension</a>', 2), ('bt.hasNext()', 2), ('unmodifiable', 2), ('copy;\n', 2), ('@}GwtCompatible(serializable', 2), ('proves', 2), ('catch(UnsubscribeFailedException', 2), ('inner.queue;\n\n', 2), ('scheduler.advanceTimeTo(1000,', 2), ('Optional.of(id);\n', 2), ('testCancelledRetention(w,', 2), ('bad,', 2), ('ps1.onError(ex);\n', 2), ('Excalibur', 2), ('SpscLinkedArrayQueue<Integer>', 2), ('INNER_DISPOSED;\n', 2), ('ConcatMapMaybeObserver<R>', 2), ('@Ignore("Unhandled', 2), ('FakeExecutor', 2), ('InternalError());\n', 2), ('V>(t,', 2), ('(--crashOnHasNext', 2), ('consists', 2), ('Observable.just(o1,', 2), ('testCollectorFailureDoesNotResultInErrorAndCompletedEmissions()', 2), ('this.cakeToppingInfo', 2), ('java.lang.annotation.Target;\n\nimport', 2), ('javadocEnd);\n', 2), ('OtherObserver<T>\n', 2), ('(Callable)Functions.createArrayList(defaultCapacityHint);\n', 2), ('concatenating', 2), ('(badValue', 2), ('subscriber.onError(ex);\n', 2), ('6812032969491025141L;\n\n', 2), ('ObjectHelper.requireNonNull(publisher,', 2), ('mirror', 2), ('Observer}s.', 2), ('MaybeOnErrorNext<T>(this,', 2), ('unspecified,', 2), ('com.iluwatar.abstractdocument.domain.HasParts;\nimport', 2), ('merger.apply(Arrays.asList(2,', 2), ('testTimerOnce()', 2), ('buffer.', 2), ('assertEquals(Boolean.FALSE,', 2), ('complete++;\n', 2), ('numInstances));\n', 2), ('get(String', 2), ('m.javadoc.indexOf("Single",', 2), ('(!fallback.hasObservers())', 2), ('this.child', 2), ('LinkedHashMultimap<K,', 2), ('AsyncResult<String>', 2), ('VideoResource}', 2), ('Lists.newArrayList(SerializableTester.reserialize(map.values())));\n', 2), ('CompactHashSet.create(Arrays.asList(elements));\n', 2), ('NullPointerTester\n', 2), ('flatMapPublisher(Function<?', 2), ('FIRST', 2), ('find(int', 2), ('WindowBoundaryInnerSubscriber(WindowBoundaryMainSubscriber<T,', 2), ('window,', 2), ('Map</a>\n', 2), ('(Comparator<Object>)', 2), ('com.iluwatar.mediator;\n\nimport', 2), ('bufferClose,\n', 2), ('this.evictedGroups', 2), ('CountDownLatch(count);\n', 2), ('s.onComplete();\n\n', 2), ('file2', 2), ('SingleEmitter<T>', 2), ('io.reactivex.internal.util.EmptyComponent;\nimport', 2), ('p.drain();\n', 2), ('Observable.\n', 2), ('Reactive-Streams', 2), ('Constructor<?>', 2), ('(!innerLatch.await(30,', 2), ('S>(s,', 2), ('source.switchMapCompletable(new', 2), ('interpreted', 2), ('AtomicLong>', 2), ('UnknownHostException', 2), ('executor.submit((Callable<Object>)sr);\n', 2), ('FuseToFlowable<U>', 2), ('"!!', 2), ('fromRunnableInvokesLazy()', 2), ('"observer', 2), ('assertTrue(cs.hasComplete());\n', 2), ('str,', 2), ('bounds.\n', 2), ('inner.get()', 2), ('Collections.sort(copy);\n', 2), ('ConcatMapSingleObserver<R>\n', 2), ('!isNextConsumed', 2), ('RIGHT_VALUE,', 2), ('nextVal', 2), ('Function<ParallelFlowable,', 2), ('initialString)', 2), ('this.onSuccessMapper', 2), ('processed.', 2), ('sref.set(s);\n', 2), ('io.reactivex.internal.schedulers.*;\nimport', 2), ('Item(ItemType.RING,', 2), ('<strong>Advanced', 2), ('href="http://reactivex.io/documentation/operators/map.html">ReactiveX', 2), ('(successfully', 2), ('"Suppress"', 2), ('User("Kate",', 2), ('parent.innerNext(this);\n', 2), ('winner.lazySet(-1);\n\n', 2), ('recommend', 2), ('Consumes', 2), ('1))\n', 2), ('Based', 2), ('countBefore', 2), ('TypeToken<Optional<String>>()', 2), ('times(1)).onNext("four");\n', 2), ('LOGGER.info("Reactor', 2), ('SingleFlatMapIterableFlowable<T,', 2), ('Function<Subscription,', 2), ('Flowable.interval(100,', 2), ('Disposables', 2), ('introduce', 2), ('getValues(T[]', 2), ('replays', 2), ('OnErrorNotImplementedException(e));\n', 2), ('Accept', 2), ('@Column(name', 2), ('to.assertFailure(CompositeException.class);\n\n', 2), ('ObjectHelper.requireNonNull(combiner.apply(new', 2), ('Collections.sort(list);\n', 2), ('a2', 2), ('AtomicReference<Notification<T>>();\n\n', 2), ('false.</li>\n', 2), (".}'.\n", 2), ('globalMutex.notifyAll();\n', 2), ('PublishDisposable[]', 2), ('Subject}s\n', 2), ('Shuts', 2), ('DoAfterObserver<T>(s,', 2), ('runnableDisposedAsyncTimed()', 2), ('resultSet)', 2), ('InterruptedException))', 2), ('initialBytes.length,', 2), ('LeftRightSubscriber(parent,', 2), ('expressions\n', 2), ('.assertFailure(IOException.class);\n', 2), ('dictum', 2), ('1,\\"title\\":', 2), ('values.put("count200",', 2), ('svq.isEmpty())', 2), ('(!m.signature.contains("Maybe")\n', 2), ('(NotificationLite.isError(buf))', 2), ('Forwarding', 2), ('ObjectOutputStream(fileOut))', 2), ('a)\n', 2), ('EqualSubscriber<T>', 2), ('SingleDisposable[0];\n\n', 2), ('child);\n\n', 2), ('mutex', 2), ('source7,\n', 2), ('indicated', 2), ('subject1.test();\n', 2), ('scheduler.scheduleDirect(ios,', 2), ('testTimerPeriodically()', 2), ('Object>(null);\n\n', 2), ('non-overlappingly', 2), ('testExceptionWithMoreThanOneElement()', 2), ('printCustomerDetails(allCustomers);\n\n', 2), ('emitter.onComplete();\n', 2), ('list.add(t);\n//', 2), ('testInterval()', 2), ('VirtualMachineError}).</li>\n', 2), ('zero\n', 2), ('ObjectHelper.requireNonNull(leftEnd.apply(left),', 2), ('"HONDA")).hasValue(TestEnum.HONDA);\n', 2), ('1024.0,', 2), ('SpscArrayQueue<Object>(16);\n', 2), ('Adding', 2), ('preceding', 2), ('timeout(timer(timeout,', 2), ('junit.framework.Assert.fail;\n\nimport', 2), ('predictable', 2), ('assertFalse(fo.isDone());\n\n', 2), ('assertThat(Files.fileTraverser().breadthFirst(file)).containsExactly(file);\n', 2), ('getTesters();\n\n', 2), ('Optional.<T>absent()', 2), ('cnt;\n', 2), ('apply(Callable<Scheduler>', 2), ('factory.getExpected(new', 2), ('assertions', 2), ('.safeSubscribe(observer);\n\n', 2), ('DebounceEmitter(T', 2), ('length;', 2), ('Movie()\n', 2), ('id\n', 2), ('"ObservableFromPublisher");\n', 2), ('Java,', 2), ('railReduced', 2), ('ReadLock', 2), ('Completable.fromAction(run)\n', 2), ('errorTimeoutRace()', 2), ('dbName,', 2), ('TestsForSetsInJavaUtil', 2), ('ba2)', 2), ('countNegative()', 2), ('MaybeSubject.create();\n', 2), ('getSomeNumbers();\n', 2), ('assertTrue(ss.hasThrowable());\n', 2), ('bottomShelf.add(factory.createPotion(PotionType.HOLY_WATER));\n', 2), ('TimeUnit.SECONDS).blockingForEach(Functions.emptyConsumer());\n\n', 2), ('ByteBuffer}', 2), ('assertFalse(taskDone);\n', 2), ('Schedulers.single().createWorker();\n', 2), ('t.onError(new', 2), ('ss.test().assertEmpty().cancel();\n', 2), ('DAO', 2), ('transform(Function<?', 2), ('"producers");\n', 2), ('times(2)).call();\n', 2), ('subscribeConsumerConsumer()', 2), ('SortedSetMultimap<K,', 2), ('@Generates', 2), ('cnt++;\n', 2), ('re-subscribes', 2), ('(logger.isLoggable(FINER))', 2), ('workers', 2), ('queue()', 2), ('future.get());\n', 2), ('m.javadoc.indexOf("onSuccess",', 2), ('customer.getFirstName());\n', 2), ("Letter('t'),", 2), ('TimeoutFallbackMaybeObserver(MaybeObserver<?', 2), ("f.getParentFile().getAbsolutePath().replace('\\\\',", 2), ('wr.get());\n\n', 2), ('observable.', 2), ('(BufferedReader', 2), ('Observable.just(1).doOnSubscribe(new', 2), ('Stream.of(streams).flatMapToInt(stream', 2), ('throttlePeriod;\n', 2), ('Matcher', 2), ('AppClient', 2), ('mask', 2), ('ImmutableList<URL>', 2), ('NullPointerException("next', 2), ('inner));\n', 2), ('Collector}.', 2), ('classesInitialized);\n\n', 2), ('interruptibly);\n', 2), ("it's\n", 2), ('T&gt;', 2), ('currentWeather', 2), ('ps.concatMap(new', 2), ('patternCompiler', 2), ('assertEquals(ImmutableMultiset.of(),', 2), ('TestHelper.assertError(ts,', 2), ('io.reactivex.internal.schedulers.TrampolineScheduler;\n\npublic', 2), ('costly', 2), ('safe)\n', 2), ('upstream.request(scalarLimit);\n', 2), ('ObjectHelper.requireNonNull(combiner.apply(objects),', 2), ('SingleDisposable[n', 2), ('contents);\n', 2), ('MoreFiles.asCharSink(file,', 2), ('reduce(Functions.<T>createArrayList(ch),', 2), ('Count>());\n', 2), ('shivering', 2), ('BlockingObservableIterator<Integer>(128);\n', 2), ('List.\n', 2), ('org.junit.jupiter.api.Assertions.assertTimeout;\n\n/**\n', 2), ('(TLeft)val;\n\n', 2), ('notify.acquire();\n', 2), ('random.nextInt(3);\n', 2), ('this.inner;\n', 2), ('Iterable<String>', 2), ('ObjectHelper.requireNonNull(close.apply(wo.open),', 2), ('Wizard()', 2), ('errors.get(0).getCause();\n', 2), ('identify\n', 2), ('boilerplate\n', 2), ('delay)', 2), ('com.iluwatar.datatransfer;\n\nimport', 2), ('java.lang.reflect.WildcardType;\nimport', 2), ('execute(final', 2), ('t.onNext((Integer)value', 2), ('ImmutableMap.copyOf(entries);\n', 2), ('super.createSource', 2), ('servers', 2), ('initialCrash()', 2), ('lowerEntry(K', 2), ('classes[i]);\n', 2), ('selector.wakeup();\n', 2), ('table;\n', 2), ('assertTrue(cs.hasThrowable());\n', 2), ('include\n', 2), ('this.unit;\n', 2), ('source.subscribe(child);\n', 2), ('LinkedHashMap<E,', 2), ('Annotation[]', 2), ('consumable', 2), ('consumerThrows()', 2), ('p.drink();\n', 2), ('TimerDisposable(s);\n', 2), ('super(capacity);\n', 2), ('Functions.justFunction(Observable.just(1)),\n', 2), ('!cancelled\n', 2), ('globalMutex.remove(this);\n', 2), ('Emit', 2), ('TRight', 2), ('T}', 2), ('downstream.onNext(current.item);\n\n', 2), ('Builder(List<T>', 2), ('G>', 2), ('testDistinctOfNoneWithKeySelector()', 2), ('.limit(6)\n', 2), ('from,\n', 2), ('stopped', 2), ('exists\n', 2), ('COMPLETED;\n', 2), ('verifyZeroInteractions(factory);\n\n', 2), ('this.start', 2), ('streamA,', 2), ('testerClass', 2), ('increasing', 2), ('MaybeZipIterable<T,', 2), ('multiple\n', 2), ('upon', 2), ('FileWriteMode.APPEND);\n', 2), ('m.doAfterSuccess(afterSuccess);\n', 2), ('com.google.common.base.Preconditions.checkState;\n\nimport', 2), ('errs.addThrowable(ex);\n', 2), ('(syncb.get()', 2), ('warlord', 2), ('serialize()', 2), ('Masks', 2), ('assertEquals(u1,', 2), ('0).toObservable().blockingSingle().intValue());\n', 2), ('componentType', 2), ('onNext(final', 2), ('"above', 2), ('asCharSource(from,', 2), ('(relay)', 2), ('generator;\n\n', 2), ('CharSource>', 2), ('Notification.createOnError(ex);\n', 2), ('assertEquals("zero",', 2), ('succeeds,', 2), ('collectionSupplier,', 2), ('bounded', 2), ('TimeoutTask', 2), ('AtomicDoubleArray}', 2), ('"Godzilla', 2), ('Helpers.assertEmpty(\n', 2), ('kdx))\n', 2), ('verify', 2), ('keys\n', 2), ('nullable', 2), ('capped', 2), ('(requested.compareAndSet(r,', 2), ('TimeoutOtherMaybeObserver(TimeoutMainMaybeObserver<T,', 2), ('java.util.function.BinaryOperator;\nimport', 2), ('NotificationLite.next(value);\n', 2), ('Single.using(Functions.justCallable(Disposables.empty()),\n', 2), ('NumberFormatException', 2), ('onSubscribe.accept(d);\n', 2), ('RxJavaPlugins.onError(t.getError());\n', 2), ('java.lang.annotation.ElementType.LOCAL_VARIABLE;\nimport', 2), ('DelayErrorInnerObserver<R>', 2), ('randomIntFrom0to(4000));\n', 2), ('assertTrue(q.offer(3,', 2), ('FlowableSingle<T>(source,', 2), ('Single.<Integer>never(),', 2), ('soldier\n', 2), ('BaseEntity', 2), ('attaches', 2), ('.collect(\n', 2), ('as,', 2), ('super.keySet();\n', 2), ('assertEquals("Overflow!', 2), ('database\n', 2), ('completeAsync()', 2), ('rainbowFish.getWeightTons()));\n', 2), ('debouncer', 2), ('Maps.newLinkedHashMap();\n', 2), ('(arg1,', 2), ('subtract', 2), ('Original', 2), ('DateFormat', 2), ('MaybeObservers', 2), ('BaseTck<Map<Integer,', 2), ('(iter.hasNext())', 2), ('io.reactivex.annotations.NonNull;\n\nimport', 2), ('LongFunctionWithIndex<R>', 2), ('repeatWhen(Function<?', 2), ('TypeVariable\n', 2), ('ts.assertNoErrors().assertComplete();\n', 2), ('-4403180040475402120L;\n\n', 2), ('toCompletable()', 2), ('TestException("error"));\n', 2), ('foo', 2), ('Flowable.defer(factory);\n\n', 2), ('TestHelper.compositeList(to.errors().get(0));\n', 2), ('this.d;\n', 2), ('"id",', 2), ('mock(BallItem.class);\n', 2), ('PQ_SUPPRESS;\n', 2), ('TreasureChest()', 2), ('account,', 2), ('customers.\n', 2), ('synchronously.', 2), ('validateClass(Class<?', 2), ('@Ignore("Different', 2), ('ara.length();\n', 2), ('TimeUnit.MILLISECONDS;\n\n', 2), ('java.util.function.Predicate}', 2), ('checkNotNull((Comparator<?', 2), ('flattenAsFlowable(final', 2), ('skips\n', 2), ('(size)', 2), ('SelectionKey.OP_READ);\n', 2), ('"Inner', 2), ('T}.\n', 2), ('ConcurrentHashMap<>();\n', 2), ('Functions.emptyConsumer());\n', 2), ('produced++;\n\n', 2), ('table', 2), ('Builder}s\n', 2), ('run).\n', 2), ('null-friendly', 2), ('onSubscribed.incrementAndGet();\n', 2), ('observer.dispose();\n\n', 2), ('Boolean.FALSE)\n', 2), ('this.runtime', 2), ('FlowableToList<T,', 2), ('assertEquals(method,', 2), ('c))', 2), ('org.junit.Assert.assertNull;\nimport', 2), ('.timestamp(TimeUnit.SECONDS)\n', 2), ('lazySet(t);\n', 2), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.flatMapObservable.png"', 2), ('parent.innerError(e,', 2), ('.startWithArray("zero").toList().blockingGet();\n\n', 2), ('long)}', 2), ('fail("Wrong', 2), ('goldmine', 2), ('two.\n', 2), ('/root\n', 2), ('multimap().asMap()).testEquals();\n', 2), ('TestObserver&lt;Integer&gt;', 2), ('StringReader', 2), ('contains()', 2), ('Maybe.just(v).subscribeOn(Schedulers.computation());\n', 2), ('assertArrayEquals(lists.get(0).toArray(new', 2), ('EqualsTester()\n', 2), ('ps.onNext(i);\n', 2), ('count.set(0);\n', 2), ('MultimapFeature[]', 2), ('#race(Runnable,', 2), ('System#getProperty', 2), ('service.shutdown();\n', 2), ('onSuccess},', 2), ('this.initialString', 2), ('o.observeOn(Schedulers.newThread())\n', 2), ('ConcatMapSingleObserver<R>(this);\n', 2), ('this.execTime', 2), ('(property', 2), ('fromAction}', 2), ('this.contents', 2), ('Close>\nextends', 2), ('assertTrue(cs.getThrowable().toString(),', 2), ('counters.\n', 2), ('Stream#forEach}', 2), ('reduce(@NonNull', 2), ('</ol>\n', 2), ('sequenceEqual(MaybeSource<?', 2), ('ImmutableSortedSet\n', 2), ('CollectionSize.ONE)\n', 2), ('GWT.\npublic', 2), ('assertEquals(checkResult.getPrizeAmount(),', 2), ('Lists.newArrayList(new', 2), ('assertThat(Thread.currentThread().isInterrupted()).isFalse();\n', 2), ('scheduler).subscribe(observer);\n', 2), ('ImmutableSet<V>', 2), ('Thread.interrupted();\n', 2), ('doOnEach.subscribe(subscribedObserver);\n', 2), ('TimeUnit.SECONDS).blockingLatest().iterator().hasNext();\n\n', 2), ('LotteryNumbers\n', 2), ('producerNode', 2), ('SwitchMapSingleMainObserver<T,', 2), ('asyncFused()', 2), ('so.request(1);\n\n', 2), ('Ctor.\n', 2), ('occur\n', 2), ('testDistinctOfNormalSourceWithKeySelector()', 2), ('startWithIterable()', 2), ('futureResult3', 2), ('workers.\n', 2), ('close,\n', 2), ('currentIndex;\n\n', 2), ('TestException("inner"))))\n', 2), ('times(1)).onNext(0L);\n', 2), ('appendable', 2), ('assertTrue("Fusion', 2), ('Functions.justFunction(cs)).test();\n\n', 2), ('"%s', 2), ('Objects\n', 2), ('createFluentIterable(integers).first();\n', 2), ('protocol\n', 2), ('errorCallableThrows()', 2), ('(emitLast)', 2), ('Executors.newSingleThreadScheduledExecutor();\n\n', 2), ('futureResult2.get();\n', 2), ('.assertNoErrors();\n', 2), ('.concatMapCompletable(Functions.justFunction(Completable.complete()))\n', 2), ('java.util.Optional;\n\n/**\n', 2), ('-99);\n', 2), ('allowed.', 2), ('(!(ex', 2), ('covariants\n', 2), ('usual', 2), ('AbstractMap<String,', 2), ('deque;\n', 2), ('java.io.FilterReader;\nimport', 2), ('joinHelper(1,', 2), ('(!hasValue)', 2), ('TimeOutObserver', 2), ('(add(as))', 2), ('sequential}', 2), ('-3807491841935125653L;\n', 2), ('Math.max(Thread.MIN_PRIORITY,', 2), ('"if0243"));\n', 2), ('ConcatMapMaybeObserver<R>(this);\n', 2), ('stream.readInt();\n', 2), ('evaluate\n', 2), ('prefetch,\n', 2), ('ConnectableObservable.', 2), ('ScalarXMapObservable<T,', 2), ('.assertResult(5L,', 2), ('elementAtOrErrorError()', 2), ('orderEntriesByKey(insertionOrder);\n', 2), ('other.subscribe(s);\n', 2), ('TestHelper.checkDisposed(Maybe.just(1)\n', 2), ('browser', 2), ('sd.dispose();\n', 2), ('e.g.', 2), ('Supplier<S>', 2), ('SkipUntilMainSubscriber.this,', 2), ('Observable.error(error);\n\n', 2), ('ts.assertError(new', 2), ('first(1).iterator();\n', 2), ('dead', 2), ('Completables.', 2), ('s.drift', 2), ('source6);\n', 2), ('Bostock\n', 2), ('CollectSpliterators.flatMap(\n', 2), ('TimeoutFallbackMaybeObserver<T>\n', 2), ('Observable"))', 2), ('Stopwatch', 2), ('suite.addTest(testsForLinkedList());\n', 2), ('(ws.remove(wo.w))', 2), ('</code>\n', 2), ('barrier.await(1,', 2), ('that.', 2), ('signalAfterDispose()', 2), ('multipleOnError()', 2), ('getFile();\n', 2), ('inlined', 2), ('ll', 2), ('java.io.OutputStream;\n\n/**\n', 2), ('invoke(Object', 2), ('(longs.compareAndSet(i,', 2), ('(!ScalarXMapZHelper.tryAsMaybe(source,', 2), ('.concatMapCompletable(\n', 2), ('Then', 2), ('Contains</a>\n', 2), ('#isEmpty()}', 2), ('Throwable.class")\n', 2), ('ArrayList<List<Integer>>', 2), ('consumerNode.value', 2), ('SUPPORTS_ADD,\n', 2), ('method)', 2), ('not/11-12', 2), ('(lo.latch.getCount()', 2), ('getClassPathUrls()', 2), ('exceptionally', 2), ('CheckResult.TICKET_NOT_SUBMITTED);\n', 2), ('com.google.common.io.ByteSource;\nimport', 2), ('exc,', 2), ('Statement', 2), ('numbers[i]', 2), ('BinaryOperator<V>', 2), ('isEqual;\n\n', 2), ('assertTrue(cd.isDisposed());\n\n', 2), ('ParallelCollectSubscriber<T,', 2), ('FlatMapIterableObserver(Subscriber<?', 2), ('suites.\n', 2), ('Flowable.fromArray(new', 2), ('hang', 2), ('pp.concatMapCompletableDelayError(\n', 2), ('ParallelMapSubscriber<T,', 2), ('result.add(line);\n', 2), ('CLAIM,\n', 2), ('completions;\n\n', 2), ('toFlowable().repeatWhen(handler);\n', 2), ('receiver;\n', 2), ('message);\n', 2), ('C>();\n', 2), ('<ol>\n', 2), ('ObservableToList<T,', 2), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/flattenAsFlowable.png"', 2), ('MaybeFlatMapSingle<T,', 2), ('zipIterableTwoIsNull()', 2), ('args;\n', 2), ('TestStringSortedMapGenerator()', 2), ('completionValue;\n', 2), ('"Yates");\n', 2), ('Thread.currentThread().setUncaughtExceptionHandler(null);\n\n', 2), ('changing', 2), ('this.d.dispose();\n', 2), ('Combines', 2), ('particular.\n', 2), ('name.equals(that.getName())\n', 2), ('navigableKeySet()', 2), ('BlockingSubscriber<Integer>(new', 2), ('org.junit.jupiter.api.Assertions.assertNull;\n\n/**\n', 2), ('Fall', 2), ('result.getDateList().size());\n', 2), ('\\"Avatar\\",\\"length\\":', 2), ('java.lang.reflect.GenericArrayType;\nimport', 2), ('Video(1,', 2), ('(cancelOthers', 2), ('retrying\n', 2), ('Functions.ON_ERROR_MISSING,', 2), ('com.google.common.io.ByteSink;\nimport', 2), ('requestCrash()', 2), ('Single<Integer>>', 2), ('this.inner;\n\n', 2), ('testOnNextErrorAcrossThread()', 2), ('maybe\n', 2), ('Deque<Command>', 2), ('calls.getAndIncrement();\n', 2), ('sa.update(s);\n', 2), ('concurrentItem', 2), ('amount)', 2), ('MaybeDelayOtherPublisher<T,', 2), ('call(Subscription', 2), ('elementAtIndex1WithDefaultOnEmptySourceObservable()', 2), ('UnicastProcessor.create();\n\n', 2), ('ImmutableSetMultimap.of())\n', 2), ('propagated!",', 2), ('onOverflow;\n', 2), ('customScheduler()', 2), ('matcher)', 2), ('cs.onSuccess(0);\n', 2), ('TimeoutFallbackSubscriber(Subscriber<?', 2), ('V>();\n', 2), ('testCollectorFailureDoesNotResultInTwoErrorEmissions()', 2), ('queue.offer(NotificationLite.complete());\n', 2), ('fetch\n', 2), ('.window(3)\n', 2), ('rso.onSubscribe(d);\n\n', 2), ('#CANCELLED}\n', 2), ('invokeAll', 2), ('Burst<T>', 2), ('com.google.common.collect.testing.testers.CollectionCreationTester.getCreateWithNullUnsupportedMethod;\nimport', 2), ('operations\n', 2), ('-8219729196779211169L;\n\n', 2), ('12/29/15', 2), ('waiting.set(1);\n', 2), ('contents.ensureCapacity(contents.size()', 2), ('upstream.get().dispose();\n', 2), ('Switches', 2), ('innerError(SwitchMapInnerObserver', 2), ('CompletableConsumable', 2), ('complete}', 2), ('eventstream', 2), ('ConcatMapCompletableObserver<T>(s,', 2), ('type}', 2), ('bufferOpen;\n\n', 2), ('Maybe.just(1).delay(100,', 2), ('TestException("next()");\n', 2), ('rethrows', 2), ('testThrottlingWithError()', 2), ('runnableDisposedAsyncCrash()', 2), ('Thread(new', 2), ('way\n//', 2), ('Lock,', 2), ('testUnhandledErrorIsDeliveredToThreadHandler()', 2), ('LocalDateTime.of(2017,', 2), ('best', 2), ('rawType}', 2), ('observers.get().length;\n', 2), ('assertFalse(subj.hasObservers());\n', 2), ('Observable.defer(factory);\n\n', 2), ('ObserveOn</a>\n', 2), ('actual.onNext(new', 2), ('remainingElementsCount', 2), ('"1024",', 2), ('"1212-121212",', 2), ('testFasterSource()', 2), ('250;\n', 2), ('s.assertValue(1);\n', 2), ('executor.schedule((Callable<Object>)sr,', 2), ('PublishDisposable[n', 2), ('testUnsubscribesFromUpstream()', 2), ('10),', 2), ('PublishSubscription<T>', 2), ('boundarySubscriber;\n\n', 2), ('onNext.accept(v);\n', 2), ('subscribeWith(new', 2), ('fusing', 2), ('NonStaticFieldIgnored', 2), ('Maybe.never();\n', 2), ('indexInTail', 2), ('(period', 2), ('socketChannel', 2), ('Undeliverable', 2), ('2.13</a>', 2), ('this.valueComparator', 2), ('SubscriberFusion.assertFusion(ts,', 2), ('assertTrue(SubscriptionHelper.replace(s,', 2), ('Hamzaogullari', 2), ('negotiating\n', 2), ('Implementations', 2), ('Chaudhari\n', 2), ('assertTrue(ms.hasThrowable());\n', 2), ('testJustTwoEmissionsObservableThrowsError()', 2), ('reportDoubleSubscription(subscriber);\n', 2), ('integerObservable)', 2), ('times.size());\n\n', 2), ('findAll()', 2), ('EmptyComponent', 2), ('SerializableTester.reserializeAndAssert(map.entrySet());\n', 2), ('fromRunnableTwice()', 2), ('clazz;\n', 2), ('testScheduler.advanceTimeBy(1000,', 2), ('impl;\n\n', 2), ('onNextMapper,\n', 2), ('so.onNext(null);\n\n', 2), ('"name', 2), ('read,', 2), ('RecreateSimpleObjects', 2), ('SchedulerPoolFactory.create(threadFactory);\n', 2), ('filter}', 2), ('co;\n', 2), ('"new"d', 2), ('AbstractExecutorService\n', 2), ('source.blockingFirst());\n', 2), ('Enum<E>>', 2), ('highly', 2), ('FileNotFoundException(file.toString());\n', 2), ('collectInto()', 2), ('UsingSingleObserver<T,', 2), ('typed,', 2), ('assign', 2), ('baseClassName,', 2), ('t.onSubscribe(ps);\n', 2), ('log(name', 2), ('(q.size()', 2), ('List<Document>', 2), ('*/\n/*\n', 2), ('swallowIOException}', 2), ('co.onError(e);\n', 2), ('disposeOnNextAfterFirst()', 2), ('document', 2), ('NotificationLite.getValue(buf);\n', 2), ('milliseconds,', 2), ('example.\n', 2), ('move', 2), ('this.cycles', 2), ('sequentially\n', 2), ('java.util.concurrent.CompletableFuture#handle}\n', 2), ('com.iluwatar.observer.WeatherType;\n\nimport', 2), ('enough', 2), ('listenerLatch.getCount());\n', 2), ('ticket)', 2), ('OnErrorNotImplementedException.class);\n', 2), ('Benchmark', 2), ('source3)', 2), ('ticketsCollectionName,\n', 2), ('Mockito.never()).onNext("two");\n', 2), ('shared.onComplete();\n', 2), ('processor\n', 2), ('emptyOther()', 2), ('assertEqualIgnoringOrder(getSampleElements(),', 2), ('MalformedURLException,', 2), ('observableBlockingLast()', 2), ('children)', 2), ('Movie>', 2), ('AllSubscriber', 2), ('(Feature<?>', 2), ('mainCompletes()', 2), ('ParallelMap<T,', 2), ('DebounceTimedObserver(Observer<?', 2), ('href="http://reactivex.io/documentation/operators/timer.html">ReactiveX', 2), ('Asynchronously', 2), ('cl', 2), ('"1000"})\n', 2), ('MaybeTakeUntilMaybe<T,', 2), ('Class<?>[]', 2), ('assertEquals(Integer.valueOf(2),', 2), ('objOut.writeObject(map);\n', 2), ('is.dispose();\n', 2), ('io.reactivex.Observable},', 2), ("'null'", 2), ('containsKey(Object', 2), ('t.start();\n', 2), ('timestampWithScheduler()', 2), ('keeping', 2), ('completionValue)', 2), ('Modifies', 2), ('ParameterizedType,', 2), ('testGetAfterCancel()', 2), ('V>(keyType)),\n', 2), ('}\n}\n\n', 2), ('(q.consumerIndex()', 2), ('Cancel', 2), ('ss.onSubscribe(d);\n\n', 2), ('delay),', 2), ('Comparable}', 2), ('Observable.intervalRange(Long.MAX_VALUE', 2), ('AtomicReference<SwitchMapInnerObserver>', 2), ('flatMapObservable}', 2), ('achievable', 2), ('(LeftRightEndObserver)val;\n\n', 2), ('dragonSlayer.changeStrategy(new', 2), ('two\n', 2), ('java.util.concurrent.FutureTask\n', 2), ('Object());\n\n', 2), ('PublishSubject', 2), ('ps.concatMapMaybeDelayError(Functions.justFunction(ms),', 2), ('syncRangeHidden()', 2), ('(Long)q.peek();\n', 2), ('Function9<Integer,', 2), ('com.google.common.base.StandardSystemProperty.PATH_SEPARATOR;\nimport', 2), ('subscribeActualThrows()', 2), ('java.util.function.Supplier}', 2), ('list.get(index)', 2), ('onTerminate.run();\n', 2), ('encoding;\n\n', 2), ('delegate.submit(task);\n', 2), ('comparer)', 2), ('next.getCalories()));\n', 2), ('TimeUnit.DAYS);\n//\n//', 2), ('prior', 2), ('(inventory.addItem(new', 2), ('NextIterator<T>', 2), ('(5', 2), ('SwitchMapMaybeMainObserver<T,', 2), ('maps,', 2), ('pollLastEntry()', 2), ('cs.onSubscribe(d);\n\n', 2), ('.take(elements)\n', 2), ('wip)', 2), ('ScheduledExecutorService\n', 2), ('Long.MIN_VALUE', 2), ('BiFunction<List<T>,', 2), ('TestByteSink', 2), ('com.google.common.collect.testing.features.ListFeature;\nimport', 2), ('Helpers.mapEntry("~~', 2), ('testCollectorFailureDoesNotResultInErrorAndOnNextEmissions()', 2), ('s.schedulePeriodicallyDirect(Functions.EMPTY_RUNNABLE,', 2), ('value.getAndSet(args)', 2), ('Single.ambArray(ps1.singleOrError(),', 2), ('falls', 2), ('Comparator<byte[]>', 2), ('sources[i].subscribe(this);\n', 2), ('ImmutableSortedSet.of())\n', 2), ('InnerQueuedSubscriberSupport<T>', 2), ('com.google.common.collect.SortedMapDifference;\nimport', 2), ('addition', 2), ('bufferSize);\n', 2), ('(count.decrementAndGet()', 2), ('ps2.singleOrError()).test();\n\n', 2), ('cleanup()', 2), ('IoScheduler();\n', 2), ('map}', 2), ('Object[n', 2), ('assertEquals(numbers.getNumbers().size(),', 2), ('ParallelReduceFullInnerSubscriber<T>[]', 2), ('rawType.getEnclosingClass();\n', 2), ('scanner.getResources());\n', 2), ('Observable.concat(Observable.just(1,', 2), ('Stream<A>', 2), ('com.iluwatar.lazy.loading;\n\nimport', 2), ('fileThreadLocal.set(file);\n', 2), ('(!enter())', 2), ('notifies', 2), ('rightEnd', 2), ('UnsupportedOperationException("remove");\n', 2), ('5).concatWith(Flowable.<Integer>error(new', 2), ('*/\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\n@Beta\npublic', 2), ('lots', 2), ('3))\n', 2), ('done()', 2), ('this.callback.ifPresent(ac', 2), ('testElementAt()', 2), ('Collection_CustomFieldSerializerBase.deserialize(reader,', 2), ('in.readLine();\n\n', 2), ('restrictions', 2), ('striped', 2), ('countBefore.incrementAndGet();\n', 2), ('EventEmitter', 2), ('ms.subscribe(observer);\n', 2), ('5).map(new', 2), ('values.add(-e);\n', 2), ('Compare', 2), ('(subscribers.size()', 2), ('timeout(2000).atLeastOnce()).draw();\n', 2), ('source.concatMapCompletable(new', 2), ('start.countDown();\n', 2), ('Out', 2), ('statement,', 2), ('onSuccessMapper;\n', 2), ('values()', 2), ('criterion', 2), ('GwtIncompatible}', 2), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/flattenAsObservable.png"', 2), ('v);\n}\n', 2), ('(fastEnter())', 2), ('set)', 2), ('ObservableToList(ObservableSource<T>', 2), ('ObjectHelper.requireNonNull(s,', 2), ('alternate\n', 2), ('Appendable.class,\n', 2), ('previousSpell', 2), ('500ms', 2), ('handlers.\n', 2), ('AsyncResult<Integer>', 2), ('Stream<DocumentImplementation>', 2), ('g,\n', 2), ('assertFalse(Comparators.isInStrictOrder(asList(0,', 2), ('"doAfterSuccess', 2), ('App();\n', 2), ('Observable.interval(50,', 2), ('actual.onSubscribe(s);\n', 2), ('MpscLinkedQueue<Runnable>', 2), ('getChecked(validator,', 2), ('innerNext(R', 2), ('somewhat\n', 2), ('7000911171163930287L;\n\n', 2), ('loader);\n\n', 2), ('6));\n\n', 2), ('returnList;\n', 2), ('LOGGER.error(e.getMessage());\n', 2), ('logContains(String', 2), ('Throwable)}', 2), ('ClassInfo("a/b/Bar$Foo.class",', 2), ('.containsExactly(fullpath("base/relative.jar"));\n', 2), ('java.util.concurrent.RejectedExecutionException;\nimport', 2), ('java.nio.file.OpenOption...)}.\n', 2), ('"Christopher', 2), ('.blockingSubscribe(cons,', 2), ('CukeGlueAbstract', 2), ('recommended.', 2), ('fileThreadLocal.get();\n', 2), ('statement.setString(2,', 2), ('Single.equals(Single.just(1),', 2), ('bc', 2), ('java.util.function.BiConsumer;\nimport', 2), ('this.s;\n', 2), ('consumerNode', 2), ('DebounceEmitter<T>(t,', 2), ('randomIntFrom0to(300));\n', 2), ('.concatMapSingle(Functions.justFunction(Single.just(1)))\n', 2), ('"Hideaki', 2), ('flatMapCompletable.subscribeWith(new', 2), ('CustomSingleOperator&lt;Integer&gt;())\n', 2), ('(ignored)\n', 2), ('Flowable.just(Maybe.just(1),', 2), ('classDefPassed', 2), ('fs.cancel();\n\n', 2), ('SUPPLIER', 2), ('B>)', 2), ('state[0]);\n', 2), ('locale', 2), ('.toURI());\n', 2), ('"Expected', 2), ('otherArray,', 2), ('"32",', 2), ('requested();\n\n', 2), ("sequence's", 2), ('appears', 2), ('AtomicReference<LinkedQueueNode<T>>', 2), ('customerStream', 2), ('Scheduler\n', 2), ('CollectionFeature[]', 2), ('Interrupter(currentThread()));\n', 2), ('GenericArrayType', 2), ('ambArrayOrder()', 2), ('SerializedSubscriber<U>(s),', 2), ('MaybeSource)', 2), ('MaybeSource<?>', 2), ('spellbook', 2), ('do.\n', 2), ('MostRecentObserver<T>', 2), ('assertEquals(t1,', 2), ('fromCallable()', 2), ('referred', 2), ('w.onNext(NotificationLite.<T>getValue(o));\n', 2), ('create(array);\n', 2), ('onNext(Open', 2), ('numbers3', 2), ('innerQueue.isEmpty()))', 2), ('.assertValue(10)\n', 2), ('source.blockingMostRecent(-1L);\n\n', 2), ('sa.unbounded', 2), ('Function3<Integer,', 2), ('RxJavaPlugins.getInstance().registerSingleExecutionHook(new', 2), ('ImmutableMultiset.of())\n', 2), ('Resources.getResource("no', 2), ('assertEquals(ImmutableMultimap.of(),', 2), ('io.reactivex.internal.fuseable.HasUpstreamMaybeSource;\n\npublic', 2), ('Functions.alwaysTrue());\n', 2), ('loaded,', 2), ('randomIntFrom0to(500));\n', 2), ('mock(Consumer.class);\n', 2), ('derivedSuites', 2), ('initialBytes;\n', 2), ('Multimap<?', 2), ('"C");\n', 2), ('<p>Useful', 2), ('innerValue(boolean', 2), ('#newThread()}', 2), ('drain-loop).</li>\n', 2), ('promise.get();\n', 2), ('ArrayList<User>', 2), ('eventsAfterDematerializedTerminal()', 2), ('actual.onNext(true);\n', 2), ('collect\n', 2), ('cancelTimer()', 2), ('operator.', 2), ('ScalarCallable);\n\n', 2), ('should\n', 2), ('ObjectHelper.requireNonNull(onCompleteSupplier.call(),', 2), ('ipsum', 2), ('CompletableFuture}', 2), ('dq', 2), ('innerErrorDelayError()', 2), ('arrive', 2), ('delegating', 2), ('getSomeOptionalInt();\n', 2), ('key")))', 2), ('ScalarDisposable<R>', 2), ('href="#bitEquals">bitwise', 2), ('source}\n', 2), ('"128",', 2), ('value();\n}\n', 2), ('elements)\n', 2), ('entity.getName());\n', 2), ('checkSource(Maybe.class.getSimpleName(),', 2), ('Operator<?', 2), ('empty",', 2), ("ParallelFlowable's,\n", 2), ('ch', 2), ('TestExecutor();\n', 2), ('TIME_UNIT', 2), ('"foo3"),\n', 2), ('@Ignore("null', 2), ('BasicIntQueueDisposable<T>', 2), ('item,\n', 2), ('initialString;\n', 2), ('io.reactivex.exceptions.CompositeException;\nimport', 2), ('AllObserver<T>', 2), ('supported.', 2), ('ignored,', 2), ('Piyush', 2), ('indication\n', 2), ('annotation.length();\n', 2), ('IndexOutOfBoundsException("More', 2), ('(called', 2), ('itemTimeoutPublisher.subscribe(consumer);\n', 2), ('(delayTime', 2), ('range()', 2), ('last4', 2), ('lift));\n', 2), ('emitter;\n', 2), ('"%s:', 2), ('com.iluwatar.threadpool;\n\nimport', 2), ('java.util.concurrent;\n\nimport', 2), ('outputStreamOpened;\n', 2), ('`reduce`', 2), ('validator;\n', 2), ('MultiInputStream', 2), ('onErrorComplete()', 2), ('AllObserver<T>(t,', 2), ('enqueued\n', 2), ('construct\n', 2), ('schedulerDoc);\n', 2), ('Observable.fromIterable(Arrays.asList(1,', 2), ('RepeatSubscriber<T>(s,', 2), ('RxJavaPlugins.onSchedule(run).run();\n', 2), ('100)\n', 2), ('subscription;\n\n', 2), ('ft.run();\n\n', 2), ('com.google.common.base.Preconditions.checkState;\nimport', 2), ('assertThat(Files.fileTraverser().breadthFirst(rootDir))\n', 2), ('TypeVariableImpl<?>', 2), ('observers.add(obs);\n', 2), ('-10;', 2), ('freshness.incrementAndGet();\n', 2), ('assertNotEquals(Thread.currentThread(),', 2), ('bufferSize();\n', 2), ('this.initialBytes', 2), ('cancelled();\n\n', 2), ('InnerQueuedObserverSupport<T>', 2), ('assertCompositeExceptions(TestObserver<?>', 2), ('#clear()}</li>\n', 2), ('TestObserver<Boolean>();\n\n', 2), ('inputs);\n', 2), ('(emitted', 2), ('org.reactivestreams.Publisher;\n\n/**\n', 2), ('clientName,', 2), ('})', 2), ('ImmutableMap<Class<?>,', 2), ('Serialization.writeMultimap(this,', 2), ('(SubscriptionHelper.setOnce(this.upstream,', 2), ('Comparable>', 2), ('lazySet(THREAD_INDEX,', 2), ('all)', 2), ('WeakScalarSubscription<R>(vr,', 2), ('(int)index', 2), ('(CompositeException)to.errors().get(0);\n', 2), ('expires\n', 2), ('lambda\n', 2), ('assertTrue(r.get());\n\n', 2), ('map.\n', 2), ('sum()', 2), ('Stream.of("foo1",', 2), ('when(factory.call()).thenReturn(firstObservable,', 2), ('futureResult1.get();\n', 2), ('.concatMapSingleDelayError(new', 2), ('concurrentItem;\n', 2), ('WireTransfers', 2), ('COMPLETE_MASK', 2), ('(initialString', 2), ('manner\n', 2), ('testMergeCovariance2()', 2), ('inventorySize;\n', 2), ('lazySet(FINISHED);\n', 2), ('ts.dispose();\n\n', 2), ('cachedValues', 2), ('token)', 2), ('sourceCode.indexOf(inDoc,', 2), ('(!isSelfLoop)', 2), ('npe.initCause(e);\n', 2), ('"IOException', 2), ('concatMap(\n', 2), ('Thread.sleep(400);\n\n', 2), ('Iterable}', 2), ('originalHandler', 2), ('carProperties.put(HasParts.PROPERTY,', 2), ('accept(Emitter<Event>', 2), ('Stream<B>', 2), ('f.switchMapCompletable(Functions.justFunction(Completable.never()));\n', 2), ('node.\n', 2), ('scalarCallable()', 2), ('TimeUnit.SECONDS).blockingNext().iterator().hasNext();\n\n', 2), ('topping', 2), ('apply(ConnectableObservable', 2), ('this.suppressThrows', 2), ("dragon's", 2), ('"source9', 2), ('channels.\n', 2), ('(task', 2), ('io.reactivex.disposables.Disposable#dispose()}.', 2), ('Object[capacityHint', 2), ('-8938804753851907758L;\n\n', 2), ('Otherwise', 2), ('CustomDriftScheduler();\n\n', 2), ('Failure");\n', 2), ('Flowable.never().blockingLatest().iterator();\n\n', 2), ('assertTrue(SubscriptionHelper.set(s,', 2), ('properties:\n', 2), ('runMe', 2), ('ara.get(i);\n', 2), ('augue.', 2), ('wish', 2), ('MaybeSource[8];\n', 2), ('DEFAULT_VALUES_PER_KEY);\n', 2), ('fact', 2), ('assertEquals((Object)2,', 2), ('startOffset', 2), ('AccountCreateEvent.class);\n', 2), ('presented', 2), ('fail("Future', 2), ('videoResource.getDetails(3,', 2), ('java.util.Optional.of(state.get());\n', 2), ('stateSupplier.call();\n', 2), ('(observers.size()', 2), ('DisposableHelper.setOnce(otherDisposable,', 2), ('error"))\n', 2), ('testIssue1677()', 2), ('doAfter();\n', 2), ('"42309fd"),', 2), ('onDrop;\n\n', 2), ('placeholder', 2), ('Burst(Throwable', 2), ('add(long', 2), ('serial.onComplete();\n', 2), ('lazySet(FUSED_CONSUMED);\n', 2), ('Assert.assertEquals(Integer.valueOf(6),', 2), ('com.iluwatar.retry;\n\nimport', 2), ('worker.isDisposed();\n', 2), ('request(3);\n', 2), ('to.assertNotComplete();\n\n', 2), ('carriage', 2), ('completionValueSupplier,', 2), ('remain', 2), ('streamed\n', 2), ('AtomicReference<WindowBoundaryInnerSubscriber<T,', 2), ('r--;\n', 2), ('purging', 2), ('com.google.common.collect.HashMultimap;\nimport', 2), ('DisposableHelper.set(resource,', 2), ('scheduler.advanceTimeTo(400,', 2), ('apply(List<T>', 2), ('way.\n', 2), ('matched', 2), ('lm', 2), ('uniqueId++);\n', 2), ('"CHEETO")).hasValue(TestEnum.CHEETO);\n', 2), ('Integer[items];\n', 2), ('to.assertFailure(IOException.class)\n', 2), ('OnNext(T', 2), ('(times--', 2), ('domainapp.dom.modules.simple.SimpleObject;\nimport', 2), ('ts.assertError(TestException.class)\n', 2), ('reportError(subscribers,', 2), ('(size', 2), ('RuntimeException("bad"));\n', 2), ('subscribe(Functions.emptyConsumer(),', 2), ('testCollectToList()', 2), ('#onError}.\n', 2), ('BlockingQueue<Notification<T>>', 2), ('buffer,', 2), ('error[0]', 2), ('ss.subscribe(observer);\n', 2), ('loaded.\n', 2), ('U>(new', 2), ('c);\n', 2), ('leftIndex++;\n', 2), ('ArrayList<K>(multimap().keySet());\n', 2), ('skip,\n', 2), ('4;', 2), ('others.length;\n', 2), ('<p>Unfortunately,', 2), ('SpliteratorTester.of(\n', 2), ('com.iluwatar.flux.action.ContentAction;\nimport', 2), ('@CollectionFeature.Require(absent', 2), ('come', 2), ('SECONDS);\n', 2), ('org.junit.Assert.assertNotNull;\n\nimport', 2), ('effect', 2), ('Functions.justFunction(Maybe.empty()));\n', 2), ('fromActionInvokesLazy()', 2), ('ZERO)\n', 2), ('5000,', 2), ('Subscription)\n', 2), ('set(int', 2), ('reject', 2), ('Casting', 2), ('<D', 2), ('flatMapCompletable}', 2), ('subscriptions\n', 2), ('o.elementAt(0);\n', 2), ('CakeBakingService', 2), ('t\n', 2), ('this.publisher', 2), ('element);\n', 2), ('SUPPORTS_ADD_WITH_INDEX})\n', 2), ('orc', 2), ('end;\n\n', 2), ('overriding', 2), ('Implementing', 2), ('verifyZeroInteractions(func);\n\n', 2), ('predecessors()', 2), ('CustomScheduler', 2), ('verifyNoMoreInteractions(ballItem);\n', 2), ('parameter-less', 2), ('safeSubscriberAlreadySafe()', 2), ('Functions.justFunction(Observable.just(2)),\n', 2), ('Publisher<Map<Integer,', 2), ('completableFunction,\n', 2), ('.append(file.getName()).append(":")\n', 2), ('crashOnIterator;\n\n', 2), ('io.reactivex.observers.*;\n\npublic', 2), ('Predicate<Entry<String,', 2), ('reason.', 2), ('ListIterator}\n', 2), ('v3())));\n', 2), ('List<Thread>', 2), ('(finish', 2), ('org.mockito.Matchers.any;\nimport', 2), ('CapturingUncaughtExceptionHandler();\n', 2), ('AllSubscriber<T>(s,', 2), ('System.out.println("', 2), ('execTime)', 2), ('testMergeCovariance4()', 2), ('hasValue);\n', 2), ('(Stream<?', 2), ('.assertResult(10);\n\n', 2), ('.delaySubscription(new', 2), ('RuntimeException");\n', 2), ('List<CakeToppingInfo>', 2), ('timeout(Publisher<U>', 2), ('ConcatInnerObserver(CompletableObserver', 2), ('contains(final', 2), ('COMPUTATION', 2), ('DisposableHelper.setOnce(parent,', 2), ('descendingMap()', 2), ('added.', 2), ('ds[0].dispose();\n', 2), ('assertFreshInstance(TypeToken<?>', 2), ('Before', 2), ('ThreadLocal<>();\n\n', 2), ('belowSamplesGreater()', 2), ('observer1.dispose();\n', 2), ('assertTrue(s.getClass().getSimpleName(),', 2), ('processLine(String', 2), ('counting', 2), ('Put', 2), ('this.pattern', 2), ('UnsignedBytesBenchmark', 2), ('Iterator<CakeTopping>', 2), ('(DebounceEmitter<T>)d;\n', 2), ('dq.poll();\n', 2), ('.mergeWith(Single.<Integer>error(new', 2), ('subscriber.onError(e);\n', 2), ('Lists.transform(\n', 2), ('ObjectHelper.requireNonNull(zipper.apply(values),', 2), ('.mergeWith(Maybe.<Integer>empty())\n', 2), ('supplied");\n', 2), ('}).blockingSingle();\n', 2), ('Throwable();\n', 2), ('assertEquals(delay,', 2), ('charset));\n', 2), ('getAndSet(Long.MAX_VALUE);\n', 2), ('xBits', 2), ('Builder<T>(Arrays.asList(items));\n', 2), ('notes', 2), ('#request(long)}\n', 2), ('sourceCode,', 2), ('com.iluwatar.producer.consumer;\n\nimport', 2), ('ConcatInnerObserver(s,', 2), ('boundarySupplier)', 2), ('parent.error(this,', 2), ('situation)\n', 2), ('too\n', 2), ('ws.clear();\n', 2), ('800;\n', 2), ('onErrorReturnItem}', 2), ('rely', 2), ('data\n', 2), ('bean.save(new', 2), ('(error.compareAndSet(null,', 2), ('arcu', 2), ('(debouncer.compareAndSet(d,', 2), ('newByteSource(0,', 2), ('Sci-Fi",', 2), ('height="370"', 2), ('TreeMultimap<>(Ordering.natural(),', 2), ('create(AnEnum[]', 2), ('s.request(request);\n', 2), ('onErrorInner(ex);\n', 2), ('DONE)', 2), ('generator.generateFresh(int[].class);\n', 2), ('createTempDirectory("ClassPathTest");\n', 2), ('resource:', 2), ('2.0.7\n', 2), ('UTF_8));\n', 2), ('java.lang.annotation.Annotation;\nimport', 2), ('different",', 2), ('RxJavaPlugins.initIoScheduler(c));\n', 2), ('boundary)', 2), ('TimeoutFallbackMaybeObserver<T>(actual)', 2), ('package.', 2), ('seems', 2), ('(items.size()', 2), ('increment()', 2), ('(ZipSubscriber<T,', 2), ('assertEquals("java.lang",', 2), ('CacheDisposable[n', 2), ('"15.11.2015");\n\n', 2), ('DisposableHelper.isDisposed(this.get());\n', 2), ('serialDisposable.update(second);\n', 2), ('cause);\n', 2), ('itemTimeoutObservableSource.subscribe(consumer);\n', 2), ('onNext(5)\n', 2), ('sources[0].subscribe(new', 2), ('entry);\n', 2), ('DeferredScalarSubscriber<T,', 2), ('java.class.path}', 2), ('*/\n@GwtCompatible\n@FunctionalInterface\npublic', 2), ('way,', 2), ('stripedLocal', 2), ('Observable.fromArray(Observable.just(1),', 2), ('test)', 2), ('s.dispose();\n//\n//', 2), ('RxJavaPlugins.getInstance().registerObservableExecutionHook(new', 2), ('Collection>...', 2), ('io.reactivex.internal.observers.BasicIntQueueDisposable;\nimport', 2), ('(!nonEmpty)', 2), ('javadocStart);\n', 2), ('"onAfterNext', 2), ('TestException()).blockingLatest().iterator().next();\n', 2), ('this.firstTimeoutIndicator', 2), ('this.boundarySubscriber', 2), ('interestedOps;\n', 2), ('copy.add(iterator.next());\n', 2), ('f.mergeWith(Maybe.just(1));\n', 2), ('Observable.just(v', 2), ('options));\n', 2), ('offer(@NonNull', 2), ('assertFalse(task.isCancelled());\n\n', 2), ('create(Iterable<?', 2), ('carProperties.put(HasPrice.PROPERTY,', 2), ('MaybeObserver>()', 2), ('queue.remove();\n', 2), ('LineProcessor<List<String>>()', 2), ('single;\n', 2), ('executor.execute(task);\n', 2), ('PureJavaLongAddable', 2), ('CompletableFuture}.', 2), ('assertTrue(bs.isCancelled());\n\n', 2), ('(Callable<R>)', 2), ('observer.onSubscribe(md);\n', 2), ('arbiter)', 2), ('Flowable.just(1).doOnSubscribe(new', 2), ('Math.random());\n', 2), ('eager);\n\n', 2), ('singletonList;\n', 2), ('!NotificationLite.isComplete(buf);\n', 2), ('assertEquals("Our', 2), ('Optional<Customer>', 2), ('1300', 2), ('p.onNext(v);\n', 2), ('noSubsequentSubscription()', 2), ('TestException()).doOnTerminate(new', 2), ('At', 2), ('Iterator<B>', 2), ('Platform.format(\n', 2), ('fetchCounters().catchingAsync(\n', 2), ('com.google.common.collect.HashBasedTable;\nimport', 2), ('DD.MM.YYY\n', 2), ('concat(this,', 2), ('.observeOn(Schedulers.single())\n', 2), ('byte[initialBytes.length', 2), ('AsyncSubscription[n', 2), ('U>)inner[j];\n\n', 2), (').subscribe(new', 2), ('SingleTakeUntil<T,', 2), ('verify(future,', 2), ("fileName.lastIndexOf('.');\n", 2), ('Math.max(0,', 2), ('<Movie>\n', 2), ('inventory,', 2), ('io.reactivex.subscribers.DisposableSubscriber;\n\npublic', 2), ('someday', 2), ('QueueSubscription<R>', 2), ('java.util.concurrent.locks.Condition;\nimport', 2), ('iterator(),', 2), ('declaration,', 2), ('IllegalArgumentExceptio");\n', 2), ('OtherSubscriber();\n', 2), ('one-time', 2), ('LOGGER.info("Green', 2), ('sd;\n\n', 2), ('size));\n', 2), ('TestHelper.assertError(to,', 2), ('secondObservable);\n\n', 2), ('Common', 2), ('ObjectHelper.requireNonNull(other.call(),', 2), ('actual.onNext(t.getValue());\n', 2), ('interface:\n', 2), ('videos.put(1,', 2), ('Observable.just("Boo!").all(new', 2), ('testWithMultipleStaggeredSubscribersAndPublish()', 2), ('assertFalse(tc.isDisposed());\n\n', 2), ('pollFirstEntry()', 2), ('offers', 2), ('predicateThrows()', 2), ('EmptyEnum', 2), ('io.reactivex.flowables.GroupedFlowable;\nimport', 2), ('"~~', 2), ('concat,', 2), ('java.nio.file.Files.write(file,', 2), ('org.mockito.Mockito.spy;\n\n/**\n', 2), ('setWaiting();\n', 2), ('ToFlowablePerf', 2), ('onSuccess}.\n', 2), ('oldContextLoader', 2), ('u);\n//', 2), ('RegularImmutableList', 2), ('observer.onNext(goodValue);\n', 2), ('MaybeOnSubscribe<Integer>()', 2), ('assertUndeliverable(List<Throwable>', 2), ('ConcatMapCompletableObserver<T>\n', 2), ('SUPPLIER.get();\n', 2), ('badSource2()', 2), ('Helpers.assertEqualIgnoringOrder(expectedEntries,', 2), ('SingleMap.MapSingleObserver<T,', 2), ('assertTrue(q.offer(1,', 2), ('Comparator<T>', 2), ('BufferedReader(reader))', 2), ('assertEquals(integers.get(1),', 2), ('doOnEvent(final', 2), ('sourceSupplier,', 2), ('ConcatMapDelayErrorObserver<T,', 2), ('future.get(0,', 2), ('TestException("Mapper-run"));\n', 2), ('frequency.\n', 2), ('cycle,\n', 2), ('Creates,', 2), ('zipArrayOneIsNull()', 2), ('ConcatMapCompletableObserver(CompletableObserver', 2), ('Bound.INCLUSIVE,', 2), ('Assert.fail("Incomplete!', 2), ('singleSupplier)', 2), ('used.\n', 2), ('longOverflow()', 2), ('multipleOnNext()', 2), ('Emitter<T>\n', 2), ('css', 2), ('interestedOps)', 2), ('Iterator<A>', 2), ('(sourceFused', 2), ('CollectorTester}', 2), ('AtomicReference<ScheduledExecutorService>', 2), ('String.format(Locale.ROOT,', 2), ('"Hanks",', 2), ('MapFeature.ALLOWS_NULL_VALUES,\n', 2), ('nature', 2), ('size()\n', 2), ('QueueFuseable.NONE)\n', 2), ('bufferedReader.readLine())', 2), ('source.subscribe(parent.observers[i]);\n', 2), ('expected.put(k0(),', 2), ('strip', 2), ('account\n', 2), ('#requestFusion(int)}\n', 2), ('cancel;\n', 2), ('OptionalState', 2), ('FlowableConcatMapPublisher(sources,', 2), ('Observable.merge(o1,', 2), ('EdgesConnecting<E>(((BiMap<E,', 2), ('ParallelReduce<T,', 2), ('fused()', 2), ('readLines(File', 2), ('java.util.Arrays#copyOf(Object[],', 2), ('ClassPath.Scanner', 2), ('source.flatMapCompletable(new', 2), ('ms.onSubscribe(d);\n\n', 2), ('dir2);\n', 2), ('collections.\n', 2), ('fulfill(T', 2), ('height="510"', 2), ('.andThen(Maybe.empty())\n', 2), ('remaining.lazySet(n);\n', 2), ('ConcatMapImmediate<T,', 2), ('QueueDisposable<R>', 2), ('flattenAsFlowable}', 2), ('mode.', 2), ('Function<ConnectableFlowable,', 2), ('#serialize()}', 2), ('replenishMain++;\n', 2), ('getMainQueue();\n', 2), ('FilenameFilter', 2), ('AtomicReferenceArray,', 2), ('serialization).', 2), ('never()).onNext("two");\n', 2), ('CacheDisposable[]', 2), ('100000;\n', 2), ('IDEs', 2), ('RxJavaPlugins.onSingleError(new', 2), ('lifting', 2), ('com.iluwatar.flux.action.Content;\nimport', 2), ('from.equals(to)}\n', 2), ('mergeArrayDelayError}', 2), ('50).call();\n', 2), ('subsystems.\n', 2), ('Joiner', 2), ('cpu));\n', 2), ('callback("Callback', 2), ('@MethodSource("expressionProvider")\n', 2), ('ConnectableFlowable>()', 2), ('runLatch.await();\n', 2), ('onRequest,', 2), ('enumValue)', 2), ('parent.done();\n', 2), ('firstTimeoutIndicator,\n', 2), ('(ListenableFuture<T>)', 2), ('AlwaysEqual', 2), ('com.iluwatar.databus.data.StartingData;\nimport', 2), ('rejected",', 2), ('TestObserver<Boolean>', 2), ('Flowable<List<Integer>>', 2), ('ExceptionHelper.wrapOrThrow(NotificationLite.getError(buf));\n', 2), ('worker3.schedule(createPrintAction(key', 2), ('testHasNextThrows()', 2), ('Observable.just(2).delay(500,', 2), ('"+34332322");\n', 2), ('Single.fromCallable(func);\n\n', 2), ('testDistinctOfNone()', 2), ('SwitchIfEmptyMaybeObserver<T>\n', 2), ('offending', 2), ('errorRace()', 2), ('assertEquals(expectedDetails,', 2), ('System.setProperty(PATH_SEPARATOR.key(),', 2), ('ListenableFutureTask}', 2), ('3610901111000061034L;\n\n', 2), ('instanceId', 2), ('subscribe()\n', 2), ('2018', 2), ('dedicated', 2), ('isDirectory()', 2), ('exceptionClass)', 2), ('inMaybe;\n\n', 2), ('stripes;\n', 2), ('TestInputStream', 2), ('begin\n', 2), ('OtherObserver(SingleObserver<?', 2), ('doOnTerminateComplete()', 2), ('SwitchMapSingleObserver<Object>(null);\n\n', 2), ('flatMapPublisher}', 2), ('Thread.currentThread().setContextClassLoader(oldContextLoader);\n', 2), ('last4.get(0));\n', 2), ('inOrder.verify(observer).onNext(1);\n', 2), ('action;\n', 2), ('DisposableSingleObserver<T>', 2), ('treat', 2), ('collection.add(ObjectHelper.requireNonNull(keySelector.apply(v),', 2), ('never()).cancel(true);\n', 2), ('observable.dematerialize();\n\n', 2), ('CustomMaybeOperator&lt;Integer&gt;())\n', 2), ('obs.reduce(new', 2), ('occurred\n', 2), ('super(runnable);\n', 2), ('Connectable', 2), ('npe));\n', 2), ('builder()', 2), ('plus', 2), ('CompletableSource)', 2), ('assertLastMethodCalled(String', 2), ('prefix.getExactSizeIfKnown()', 2), ('NoSuchElementException("No', 2), ('V>(this,', 2), ('mapperCancels()', 2), ('fromRunnable}', 2), ('Java.', 2), ('assertEquals(0L,', 2), ('consumed\n', 2), ('RuntimeException(IOException)");\n', 2), ('adipiscing', 2), ('BusinessException', 2), ('FlatMapCompletableObserver<T>\n', 2), ('java.sql.ResultSet;\nimport', 2), ('when(future.get()).thenThrow(e);\n\n', 2), ('cycles;\n\n', 2), ('(files', 2), ('(positive,', 2), ('AsyncFunction.apply}.', 2), ('RegularImmutableSortedSet<?>', 2), ('VALUE);\n', 2), ('represented', 2), ('apply(Boolean', 2), ('handy', 2), ('promises', 2), ('TimeoutTask(long', 2), ('directories.', 2), ('consumerNode.get();\n', 2), ('ArrayList<List<Integer>>();\n\n', 2), ('BasicFuseableConditionalSubscriber<T,', 2), ('}).toFlowable().blockingSingle();\n\n', 2), ('this.threadFactory', 2), ('address', 2), ('SingleSource)', 2), ('periodicWrapper', 2), ('SwitchMapMaybeObserver<Object>', 2), ('https://github.com/Netflix/RxJava/issues/1451\n', 2), ('replaceResource', 2), ('T9>', 2), ('.inOrder();\n', 2), ('fileLocation)', 2), ('assertEquals(Integer.valueOf(8),', 2), ('SafeSubscriber', 2), ('CollectionType', 2), ('(newValue', 2), ('java.util.concurrent.Executors;\n\n/**\n', 2), ('PublisherBufferExactSubscriber<T,', 2), ('onAfterNext,\n', 2), ('throwOnGet();\n', 2), ('source9\n', 2), ('CompletableDisposable[n', 2), ('"Feature', 2), ('ConcatArraySubscriber<T>', 2), ('(v1', 2), ('junit.framework.TestCase;\n\n/**', 2), ('ReplaySubject.create();\n', 2), ('cancelled/interrupted', 2), ('pp2.onNext(1);\n', 2), ('serializable.\n', 2), ('onNextNoSubscription()', 2), ('FutureDisposable', 2), ('backpressureDoc', 2), ('preparation', 2), ('effect:', 2), ('returnList.add(cal.get(Calendar.DAY_OF_MONTH)', 2), ('com.iluwatar.abstractdocument.domain.HasModel;\nimport', 2), ('TestHelper.compositeList(errors.get(0));\n\n', 2), ('it).\n', 2), ('zero.\n', 2), ('testDematerialize2()', 2), ('Lists.newArrayList(map.values()),\n', 2), ('source.blockingLatest();\n', 2), ('{url1},', 2), ('lastTime;\n\n', 2), ('#DISPOSED}', 2), ('sd.replace(s);\n', 2), ('iterator);\n', 2), ('manner.', 2), ('onErrorCancelRace()', 2), ('this.port', 2), ('fallback.subscribe(otherObserver);\n', 2), ('input.get()}', 2), ('SUPPLIER;\n\n', 2), ('dr;\n', 2), ('delaySubscription(Publisher<U>', 2), ('In\n', 2), ('maxAttempts;\n', 2), ('pub', 2), ('start.await();\n', 2), ('times(1)).call();\n', 2), ('onCompleteNoSubscription()', 2), ('helping', 2), ('obj);\n}\n', 2), ('CharSequence', 2), ('"Action', 2), ('1000);', 2), ('oo', 2), ('coordination.\n', 2), ('SomeAbstractClass', 2), ('source.onNext(1);\n\n', 2), ('"error', 2), ('assertArrayEquals(new', 2), ('Set<Method>', 2), ('LineReader', 2), ('SimpleQueue<?>', 2), ('Transformer', 2), ('signals,', 2), ('ts.assertNoErrors();\n\n', 2), ('iterable.iterator();\n\n', 2), ('(InnerSubscriber<?,', 2), ('boundary.subscribe(bs);\n\n', 2), ('2).takeUntil(new', 2), ('CountDownLatch(count);\n\n', 2), ('onNext(V', 2), ('(compareAndSet(r,', 2), ('double}', 2), ('longs.get(i);\n', 2), ('debounceSelector));\n', 2), ('mage', 2), ('.switchMapCompletable(Functions.justFunction(Completable.error(new', 2), ('2")));\n//\n//', 2), ('User("Marti",', 2), ('readFile(f);\n\n', 2), ('winningNumbers);\n', 2), ('nullSourceSuccessRace()', 2), ('fail(ex);\n', 2), ('f.mergeWith(Single.just(1));\n', 2), ('bs1);\n', 2), ('#bind()}', 2), ('getWrappedRunnable()', 2), ('System.arraycopy(bytes,', 2), ('assertTrue(valueCollection', 2), ('(Integer)q.poll();\n\n', 2), ('lambda.\n', 2), ('TypeToken<Optional<OneConstantEnum>>()', 2), ('v3,', 2), ('zone', 2), ('futureResult1', 2), ('(that', 2), ('groups\n', 2), ('ar', 2), ('Exception))', 2), ('io.reactivex;\n\n/**\n', 2), ('IntStream', 2), ('nextFunction;\n', 2), ('ObjectHelper.requireNonNull(zipper.apply(t,', 2), ('libero', 2), ('((FuseToMaybe<T>)this).fuseToMaybe();\n', 2), ('Flowable.<Media>', 2), ('(!buf.offer(toOffer))', 2), ('testGetWithASingleNullItem()', 2), ('completeDetaches()', 2), ('references\n', 2), ('19,', 2), ('ps.onNext(m);\n', 2), ('n;\n\n', 2), ('ConcatMapSingleObserver<R>', 2), ('state:', 2), ('qs.poll();\n\n', 2), ('w.subscribeOn(uiEventLoop).observeOn(Schedulers.computation())\n', 2), ('Observer"))', 2), ('apply(CompletableObserver', 2), ('super(skip);\n', 2), ('IllegalArgumentException();\n\n', 2), ('addString3)\n', 2), ('TestObserver<T>();\n', 2), ('inner);\n\n', 2), ('latch.getCount()', 2), ('sc', 2), ('ExceptionHelper.wrapOrThrow(n.getError());\n', 2), ('ZipIterableSubscriber<T,', 2), ('buf.take();\n', 2), ('connect(cc);\n', 2), ('other.subscribe(right);\n', 2), ('Action.values())', 2), ('resourceDisposer\n', 2), ('initialBytes;\n\n', 2), ('.concatMapMaybeDelayError(new', 2), ('stateSupplierThrows()', 2), ('Completable"))', 2), ('merge()}', 2), ('expectedSize', 2), ('height="267"', 2), ('input.observable.map(new', 2), ('FileChannel#map(java.nio.channels.FileChannel.MapMode,', 2), ('.concatMapCompletable(completableError())\n', 2), ('b));\n', 2), ('tryTerminate();\n', 2), ('Collection.toArray', 2), ('(SubscriptionHelper.validate(this.subscription,', 2), ('assertNotNull(Resources.getResource("com/google/common/io/testdata/i18n.txt"));\n', 2), ('this.get()}', 2), ('operation.', 2), ('NOTE:', 2), ('\n\n', 2), ('boundaryObserver;\n\n', 2), ('uncommented', 2), ('Flowable.fromArray(array);\n\n', 2), ('cancelled/disposed\n', 2), ('SingleZipArray<T,', 2), ('ambFirstDone()', 2), ('equal</a>', 2), ('java.sql.SQLException;\nimport', 2), ('AbstractTester)', 2), ('assertFalse(task.isCancelled());\n', 2), ('c.subscribe(o);\n', 2), ('</li>\n', 2), ('super.write(c);\n', 2), ('FruitBowl', 2), ('specification</a>.\n', 2), ('type:', 2), ('(min', 2), ('QueueDrainHelper.drainLoop(queue,', 2), ('hashCode', 2), ('f.collect(Functions.justCallable(new', 2), ('Scheduler()', 2), ('SingleObserver&lt;?', 2), ('B2BService', 2), ('<p>Use', 2), ('Observable[8];\n', 2), ('repeated', 2), ('this.subscribers;\n', 2), ('Do', 2), ('merge(metaHorrors);\n', 2), ('Month.APRIL,', 2), ('178,', 2), ('assertTrue(ms.getThrowable().toString(),', 2), ('(q.accept(actual))', 2), ('disposeOther()', 2), ('b.append("at', 2), ('mws.createWorkers(max,', 2), ('expectedCount', 2), ('org.mockito.Mockito.verify;\n\n/**\n', 2), ('SerializationStreamReader', 2), ('ss.getThrowable()', 2), ('java.nio.file.Files#copy(java.nio.file.Path,', 2), ('RxJavaPlugins.initSingleScheduler(c));\n', 2), ('blockingAwait}', 2), ('first.cancel();\n', 2), ('io.reactivex.subscribers.DefaultSubscriber;\n\n/**\n', 2), ('callbacks,', 2), ('cn', 2), ('SwitchMapSingleObserver<R>\n', 2), ('SpscLinkedArrayQueue<Object>(bufferSize());\n', 2), ('TimeoutFallbackSubscriber<T>(s,', 2), ('RIGHT_CLOSE', 2), ('getResult()', 2), ('thread;\n', 2), ('href="http://reactivex.io/documentation/operators/observeon.html">ReactiveX', 2), ('"C");\n\n', 2), ('ObjectHelper.requireNonNull(onAfterSuccess,', 2), ('11:44', 2), ('platform', 2), ('(Potion', 2), ('InnerQueuedSubscriber', 2), ('ObjectHelper.requireNonNull(resumeFunction,', 2), ('signature.\n', 2), ('this.stop', 2), ('observer2.dispose();\n', 2), ('Defers', 2), ('must\n', 2), ('Mike', 2), ('pattern,', 2), ('reentrance', 2), ('toFlowable().repeatUntil(stop);\n', 2), ('AtomicReference<InnerSubscriber<?,', 2), ('q.clear();\n\n', 2), ('in.available());\n', 2), ('features.\n', 2), ("iterator's", 2), ('Single>()', 2), ('port;\n', 2), ('buffers,', 2), ('checkNotNull(value);\n', 2), ('source.switchMapSingle(new', 2), ('Stream.of("bar1",', 2), ('(numberOfSubscribers', 2), ('Single.zip(\n', 2), ('retrievedMsg', 2), ('QueueSubscription#NONE}.\n', 2), ('pooled', 2), ('testWithMultipleStaggeredSubscribers()', 2), ('urlString)', 2), ('source.onNext(7);\n', 2), ('ReduceSeedObserver(SingleObserver<?', 2), ('Flowable.fromIterable(iterate(elements));\n', 2), ('onCompleteCancelRace()', 2), ('this.time;\n\n', 2), ('com.iluwatar.servicelayer.spell.Spell;\nimport', 2), ('Maybe[3];\n', 2), ('((Callable<R>)r).call();\n', 2), ('(Publisher<?>)', 2), ('(wip.incrementAndGet()', 2), ('{url2},', 2), ('this.src', 2), ('len2', 2), ('512;', 2), ('.collect(Functions.justCallable(new', 2), ('Stream.of(streams).flatMapToDouble(stream', 2), ('bytes;\n', 2), ('64-bit', 2), ('co.onSubscribe(d);\n', 2), ('this.context', 2), ('disposeOther();\n\n', 2), ('ios.setResource(d);\n', 2), ('(T)', 2), ('lemons', 2), ('assertThat(Thread.currentThread().interrupted()).isTrue();\n', 2), ('countAfter.incrementAndGet();\n', 2), ('javax.persistence.FetchType;\nimport', 2), ('FlowableElementAt<T>(source,', 2), ('downstream.onSuccess(str);\n', 2), ('onComplete.run();\n\n', 2), ('Collection<Integer>>>', 2), ('ImmutableSortedMultiset.of())\n', 2), ('#hasComplete()},', 2), ('disposeState.accept(s);\n', 2), ('possible,', 2), ('sergeant\n', 2), ('buf.poll();\n\n', 2), ('OtherObserver<T,', 2), ('eventLoop.scheduleDirect(new', 2), ('isCancelled', 2), ('AnySubscriber<T>', 2), ('executorService.awaitTermination(5,', 2), ('s.onSubscribe(EmptyDisposable.NEVER);\n', 2), ('(non-null)', 2), ('(active', 2), ('java.util}\n', 2), ('Receiver', 2), ('TestHelper.checkEnum', 2), ('NotificationLite.complete();\n', 2), ('scheduler.advanceTimeBy(400,', 2), ('Observable.just(1).flatMap(new', 2), ('inner.request(n);\n', 2), ('SchedulerTestHelper.testHandledErrorIsNotDeliveredToThreadHandler(getScheduler());\n', 2), ('fall', 2), ('#reportSubscriptionSet()}', 2), ('Throttler', 2), ('error();\n\n', 2), ('communication', 2), ('list.add(value);\n', 2), ('Movie(),', 2), ('java.io.FilterOutputStream;\nimport', 2), ('Object#equals}.\n', 2), ('parameter.\n', 2), ('condition;\n\n', 2), ('handle,', 2), (').toObservable().subscribe(new', 2), ('initialState;\n', 2), ('"Main");\n', 2), ('actual.get();\n', 2), ('Object[0];\n', 2), ('com.iluwatar.databus.DataType;\nimport', 2), ('MapFeature.GENERAL_PURPOSE,\n', 2), ('MergeWithObserver(Observer<?', 2), ('Uninterruptibles', 2), ('dir1,', 2), ('vulputate.', 2), ('com.iluwatar.flux.dispatcher;\n\nimport', 2), ('Maybe.zipArray(Functions.justFunction(null),', 2), ('ss.onSuccess(1);\n\n', 2), ('TestByteSource', 2), ('thrown")\n', 2), ('in)', 2), ('TimeUnit.SECONDS).intValue());\n', 2), ('pendingWrite;\n', 2), ('18:59', 2), ('windows.lazySet(1);\n', 2), ('((DisposableContainer)o).delete(this);\n', 2), ('callback.\n', 2), ('assertCompositeExceptions(TestSubscriber<?>', 2), ('OnError(t),', 2), ('reflection).\n', 2), ('LeftRightSubscriber', 2), ('disposeResourceAfter()', 2), ('(wip.get()', 2), ('Flowable.bufferSize()));\n', 2), ('onCompleteThrows2()', 2), ('Connect', 2), ('multisets', 2), ('testOnStartCalledOnceViaSubscribe()', 2), ('io.reactivex.schedulers.Schedulers;\n\nimport', 2), ('w.onError(e);\n', 2), ('List<T>[]', 2), ('this.mainDisposable', 2), ('testNextThrows()', 2), ('(CakeLayer', 2), ('leak!\n', 2), ('value();\n', 2), ('running\n', 2), ('App.main(args);\n', 2), ('identical', 2), ('lazySet(ci,', 2), ('instance3);\n', 2), ('reference.\n', 2), ('nullValue()', 2), ('items);\n', 2), ('timeout(MaybeSource<U>', 2), ('sense', 2), ('signal;', 2), ('OutOfMemoryError}.', 2), ('mattis', 2), ('System.out.println("Can\'t', 2), ('boundaries', 2), ('others,', 2), ('rainbowFish.getName());\n', 2), ('arbiter;\n', 2), ('generator)', 2), ('Optional<T>}', 2), ('assumptions', 2), ('Annotates', 2), ('Math.pow(Math.random(),', 2), ('IntStream.range(0,', 2), ('List<Customer>', 2), ('MongoDatabase', 2), ('FlatMapCompletableMainSubscriber<T>(observer,', 2), ('bulk', 2), ('Fulfills', 2), ('use.', 2), ('(AmbInnerSubscriber<T>', 2), ('checkBadSource()', 2), ('numbers.', 2), ('consumerIndex()', 2), ('Collections.addAll(all,', 2), ('TestException("error"),', 2), ('multimap().entries());\n', 2), ('ParallelMapTry<T,', 2), ('href="https://github.com/ReactiveX/RxJava/wiki/Implementing-Your-Own-Operators">RxJava', 2), ('assertTrue(onError.get()', 2), ('opens."));\n', 2), ('ts.assertFailureAndMessage(NullPointerException.class,', 2), ('spotted', 2), ('com.iluwatar.tolerantreader;\n\nimport', 2), ('IntFunctionWithIndex<R>', 2), ('(LinkageError', 2), ('assertTrue(f1.isCancelled());\n', 2), ('DisposableHelper.setOnce(FlatMapMaybeObserver.this,', 2), ('source5);\n', 2), ('SingleObserver#onSuccess', 2), ('Enums.getIfPresent', 2), ('helper', 2), ('times(0)).onNext("three");\n', 2), ('valueComparator', 2), ('source8);\n', 2), ('throws\n', 2), ('Arrays.fill(a,', 2), ('(V)', 2), ('assertSame(Single.never(),', 2), ('w.schedule(r));\n\n', 2), ('sed', 2), ('SpscLinkedArrayQueue<T>(bufferSize);\n\n', 2), ('io.reactivex.internal.queue.SpscLinkedArrayQueue;\n\npublic', 2), ('DocumentImplementation::new);\n', 2), ('AtomicReference<Subscriber<?>>();\n', 2), ('automation', 2), ('(dotIndex', 2), ('(CompositeException)ts.errors().get(0);\n', 2), ('work,', 2), ('Action}\n', 2), ('input.\n', 2), ('fromAction(final', 2), ('DoAfterObserver<T>', 2), ('this.ds', 2), ('java.util.PrimitiveIterator;\nimport', 2), ('assertEquals(ImmutableBiMap.of(),', 2), ('forbidden.\n', 2), ('R>)', 2), ('values.put("count5xx",', 2), ('Calculates', 2), ('objOut', 2), ('06.08.2017.\n', 2), ('B>(observer,', 2), ('assertEquals(CANCELLED,', 2), ('ec.executeChild(this,', 2), ('Lists.newArrayList(Sets.newTreeSet(insertionOrder));\n', 2), ('1),', 2), ('QueueFuseable.SYNC)\n', 2), ('U>(observer);\n', 2), ('f.timeInterval();\n', 2), ('generatorThrows()', 2), ('q.isEmpty())', 2), ('creation)\n\n', 2), ('-4606175640614850599L;\n', 2), ('selected', 2), ('}).subscribe();\n\n', 2), ('potions\\n");\n\n', 2), ('de;\n', 2), ('Subscription>()', 2), ('onAfterTerminate()', 2), ('Download', 2), ('eyes."});\n', 2), ('TypeToken<com.google.common.base.Optional<String>>()', 2), ('normalBackpressured()', 2), ('ListIterator<T>', 2), ('frequency\n', 2), ('TestObserver<T>();\n\n', 2), ('Arrays.copyOf(others,', 2), ('ben', 2), ('testDematerialize1()', 2), ('op', 2), ('Stream<Arguments>', 2), ("'null'\n", 2), ('Observable<T>,', 2), ('scheduler.schedulePeriodicallyDirect(runnable,', 2), ('paramNumber', 2), ('Builder', 2), ('dropped.', 2), ('AND\n', 2), ('doubleToRawLongBits(nextVal);\n', 2), ('featureEnumClass));\n', 2), ('doOnTerminateError()', 2), ('io.reactivex.internal.util.CrashingMappedIterable;\nimport', 2), ('itemTimeoutIndicator,', 2), ('DO', 2), ('concurrently\n', 2), ('href="http://reactivex.io/documentation/operators/using.html">ReactiveX', 2), ('}).publish().refCount()\n', 2), ('RxJavaPlugins.onError(e);\n\n', 2), ('arguments)', 2), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.flatMapSingle.png"', 2), ('FluentIterable<?', 2), ('<?', 2), ('2");\n//\n//', 2), ('rainbowFish.getLengthMeters()));\n', 2), ('validate(Subscription', 2), ('initialized;\n', 2), ('publisher;\n\n', 2), ('CompletableOperator>()', 2), ('signals,\n', 2), ('sum)\n', 2), ('s1.onSubscribe(a);\n', 2), ('task.run();\n', 2), ('navigate', 2), ('Assert.fail("Failed', 2), ('produced.</dd>\n', 2), ('testOnceObserverThrows()', 2), ('map.keySet())', 2), ('.filter(Functions.alwaysFalse(),', 2), ('onFailure(Throwable', 2), ('distribute,\n', 2), ('(no', 2), ('1015244841293359600L;\n\n', 2), ('upstream.get().cancel();\n', 2), ('b";\n', 2), ('at.hasNext()', 2), ('DisposableHelper.dispose(otherDisposable);\n', 2), ('StudentRepository', 2), ('checkSource(Observable.class.getSimpleName(),', 2), ('Reflection', 2), ('serialize();\n\n', 2), ('try-with-resources', 2), ('AtomicReference<Observer<?>>', 2), ('LinkageError());\n', 2), ('InterruptedException;\n}\n', 2), ('(upstream.get()', 2), ('assertEquals(ScheduledRunnable.DONE,', 2), ("'rails'.\n", 2), ('map.put("lengthMeters",', 2), ('open(Open', 2), ('java.sql.Connection;\nimport', 2), ('ReserializingTestCollectionGenerator<E>', 2), ('SubscriptionHelper.replace(s,', 2), ('len1', 2), ('Function<Unit[],', 2), ('flatMap\n', 2), ('cover', 2), ('ArrayListMultimapGwtSerializationDependencies<K,', 2), ('compile(String', 2), ('.doAfterTerminated(new', 2), ('getAndSet(i,', 2), ('TestException()).subscribe(new', 2), ('exaclty', 2), ('testDummyMethod()', 2), ('SerializedSubscriber', 2), ('System.out.println("Interrupted!', 2), ('assertFalse(css[0].hasObservers());\n', 2), ('DeferredScalarSubscription<Boolean>', 2), ('futureResult4', 2), ('EvictionAction<K,', 2), ('(integer', 2), ('RequestEarly', 2), ('vr;\n\n', 2), ('LinkedBlockingDeque.class);\n', 2), ('sumErr).map(new', 2), ('CollectionFeature.REMOVE_OPERATIONS,\n', 2), ('java.nio.channels.ServerSocketChannel;\nimport', 2), ('Charsets.UTF_8,', 2), ('io.reactivex.functions.Action;\n\npublic', 2), ('ObservableCollect<T,', 2), ('Observer}s\n', 2), ('io.reactivex.schedulers.Timed;\n\npublic', 2), ('FreshValueGenerator().generateFresh(String.class),\n', 2), ('AsyncSubscription<T>', 2), ('com.iluwatar.unitofwork;\n\nimport', 2), ('LinkedQueueNode<E>', 2), ('contract}\n', 2), ('RxJavaPlugins.onError(error);\n', 2), ('MaybeFromFuture<T>(future,', 2), ('height="320"', 2), ('Observable}\n', 2), ('fromObservable}', 2), ('assertEquals(TestException.class,', 2), ('(SortedMap<K,', 2), ('Those', 2), ('keyType)', 2), ('com.iluwatar.balking;\n\nimport', 2), ('threadsafe', 2), ('architecture,', 2), ('io.reactivex.internal.util.TestingHelper.*;\nimport', 2), ('com.google.common.annotations.VisibleForTesting;\nimport', 2), ('file")\n', 2), ('Single"))', 2), ('QUEUE_LINK_SIZE', 2), ('testMostRecentWithException()', 2), ('org.reactivestreams.*;\n\n/**\n', 2), ('rights.put(idx,', 2), ('operator;\n', 2), ('ParallelMapConditionalSubscriber<T,', 2), ('write(String', 2), ('disposeBeforeSwitchInOnNext()', 2), ('AsyncSubscription[]', 2), ('(ObservableSource<?>)', 2), ('ArrayList<Document>());\n', 2), ('1644750035281290266L;\n\n', 2), ('clearScalarQueue();\n', 2), ('SingleDelayWithSingle<T,', 2), ('Functions.justFunction(Maybe.just(1)),', 2), ('Arrays.copyOf(array,', 2), ('producerIndex;\n', 2), ('2746389416410565408L;\n\n', 2), ('list.size();\n', 2), ('key()', 2), ('backpressure.\n', 2), ('fromCallableThrows()', 2), ('AsyncSubscription[0];\n\n', 2), ('Range<C>', 2), ('super(mapper,', 2), ('nextNotification.getValue();\n', 2), ('connection.createStatement())', 2), ('port:', 2), ('testScheduler;\n', 2), ('javax.persistence.Table;\n\nimport', 2), ('.assertError(RuntimeException.class)\n', 2), ('idx1', 2), ('source.reduce(0,', 2), ('successDetaches()', 2), ('io.reactivex.internal.subscribers.DeferredScalarSubscriber;\nimport', 2), ('Function3<?', 2), ('FlatMapCompletableObserver<T>(s,', 2), ('ms.onError(new', 2), ('Runnable)}', 2), ('OptionalLong', 2), ('this.selector', 2), ('AssertionError(e);\n', 2), ('null")\n', 2), ('(--crashOnIterator', 2), ('Subscriber<T>[]', 2), ('SwitchMapCompletableObserver<T>(s,', 2), ('ScheduledExecutorService.\n', 2), ('WindowOperation)', 2), ('meaning', 2), ('LoggerFactory.getLogger(App.class);\n', 2), ('SingleElementSubscriber<T>\n', 2), ('list.get(i);\n', 2), ('BlockingObservableIterator<Integer>(128);\n\n', 2), ('DebounceTimedSubscriber(Subscriber<?', 2), ('ex;\n//', 2), ('cancel\n', 2), ('Different', 2), ('iterator.");\n', 2), ('wrappers', 2), ('("fail".equals(s))', 2), ('HashSet<>(Arrays.asList(11,', 2), ('IllegalArgumentException("Cannot', 2), ('rawType;\n', 2), ('Set<IteratorFeature>', 2), ('"command', 2), ('ClassValue}', 2), ('actual.onNext(count++);\n', 2), ('TypeToken<ImmutableSortedSet<String>>()', 2), ('invocation\n', 2), ('periodicWrapper.setFirst(f);\n', 2), ('NullPointerException());\n', 2), ('ElementType.METHOD,', 2), ('obtain\n', 2), ('checkedException;\n', 2), ('ps2.onError(ex2);\n', 2), ('estimatedSize', 2), ('DisposableObserver<Notification<T>>', 2), ('otherCompletes()', 2), ('iters);\n', 2), ('assertEquals(ImmutableSortedMap.of(),', 2), ('TLeft', 2), ('U>)d;\n', 2), ('parent.disposables.add(left);\n', 2), ('@CollectionSize.Require(absent', 2), ('.toCompletable()\n', 2), ('crashOnIterator,', 2), ('Schedulers.from(exec)', 2), ('doOnSubscribe(Consumer<?', 2), ('SpellbookDao', 2), ('io.reactivex.annotations;\n\n/**\n', 2), ('newFile("some-file");\n\n', 2), ('actual.onSuccess(u);\n', 2), ('arrives', 2), ('s.onSubscribe(inner.sd);\n', 2), ('belongs', 2), ('assertTrue("Did', 2), ('!(t', 2), ('count[0]);\n\n', 2), ('strategy;\n', 2), ('do,', 2), ('.suppressing(suppressForLinkedList())\n', 2), ('.test(2L)\n', 2), ('org.reactivestreams.tck.*;\nimport', 2), ('empty();\n\n', 2), ('Subscription}.\n', 2), ('.withFeatures(CollectionFeature.SERIALIZABLE,', 2), ('NotificationLite.error(e);\n', 2), ('FilterOutputStream', 2), ('deleteRecursivelyOrLog(root);\n', 2), ('name[0]', 2), ('drain();\n}\n', 2), ('testDistinctOfSourceWithExceptionsFromKeySelector()', 2), ('queue.offer(NotificationLite.error(t));\n', 2), ('SerializedSubscriber<T>', 2), ('application.\n', 2), ('callable(Runnable', 2), ('TestException("second"));\n', 2), ('LambdaSubscriber<T>', 2), ('carProperties.put(HasModel.PROPERTY,', 2), ('fromActionErrorsDisposed()', 2), ('io.reactivex.internal.fuseable.ScalarCallable;\nimport', 2), ('"onCancel', 2), ('assertThat(e).hasMessage("Cannot', 2), ('latch.await();\n\n', 2), ('numbers.length;', 2), ('TimeUnit.SECONDS).blockingGet();\n\n', 2), ('o.elementAt(0,', 2), ('Entry<E,', 2), ('#CANCELLED}', 2), ('LoadLoad\n', 2), ('interrupted!",', 2), ('AsyncDisposable[0];\n\n', 2), ('looking', 2), ('(wasNotAvailable)', 2), ('testTakeLastZeroProcessesAllItemsButIgnoresThem()', 2), ('.unsubscribeOn(Schedulers.single()));\n', 2), ('doOnComplete(Action', 2), ('workDone)', 2), ('deferred.subscribe(firstObserver);\n\n', 2), ('this.instanceId', 2), ('Single.just(1),', 2), ('right);\n\n', 2), ('com.iluwatar.flux.action.MenuItem;\nimport', 2), ('assertThat(Files.fileTraverser().breadthFirst(rootDir)).containsExactly(rootDir,', 2), ('aa', 2), ('hasNextThrows()', 2), ('relevant', 2), ('data.getWhen();\n', 2), ('listenerLatch.await(5,', 2), ('end.countDown();\n', 2), ('scanDirectory(ClassLoader', 2), ('UndeliverableException))', 2), ('StripBoundary<Object>(null))\n', 2), ('this(prefix,', 2), ('.build();\n\n', 2), ('numElements;\n', 2), ('invalid\n', 2), ('ObjectHelper.requireNonNull(onAfterNext,', 2), ('(inMaybe)', 2), ('q.poll();', 2), ('(oo', 2), ('closes."));\n', 2), ('Callable<Void>', 2), ('assertEquals(Optional.empty(),', 2), ('RxJavaPlugins.setOnBeforeBlocking(new', 2), ('ArrayDeque.class);\n', 2), ('OrcsTest()', 2), ('com.google.common.annotations;\n\nimport', 2), ('belowSamplesLesser()', 2), ('io.reactivex.disposables.Disposables;\n\n/**\n', 2), ('capacityHint));\n', 2), ('console.\n', 2), ('moRef.set(observer);\n', 2), ('types;', 2), ('per-key', 2), ('multimap().asMap());\n', 2), ('number;\n', 2), ('.suppressing(parentBuilder.getSuppressedTests())\n', 2), ('(CompletableSource)', 2), ('groups,', 2), ('Stream<Customer>', 2), ('cancelOnError()', 2), ('com.google.common.collect.LinkedHashMultimap;\nimport', 2), ('ObservableWithLatestFromMany(@NonNull', 2), ('connected', 2), ('*everything*\n', 2), ('Event>', 2), ('backingMap)', 2), ('thread;\n\n', 2), ('actual.onNext(false);\n', 2), ('getClass().getClassLoader();\n', 2), ('PerfAsyncConsumer(bh)).await(items);\n', 2), ('RegularImmutableList<?>', 2), ('MergeInnerCompletableObserver(s,', 2), ('(i,', 2), ('assertEquals(unit,', 2), ('Consumer<List<Integer>>()', 2), ('assertTrue(cs.hasObservers());\n', 2), ('to.onSubscribe(Disposables.empty());\n\n', 2), ('SerializableTester.reserialize(map);\n', 2), ('fusedClear()', 2), ('"publisher', 2), ('document.put(KEY,', 2), ('com.google.common.reflect.TypeToken;\nimport', 2), ('DeferredScalarSubscriber<Integer,', 2), ('Poll', 2), ('K>(observer,', 2), ('already\n', 2), ('true)\n@Ignore', 2), ('compositeList(ts.errors().get(0));\n\n', 2), ('Set<?>', 2), ('onErrorOnComplete()', 2), ('obs.toList().toFuture();\n', 2), ('testDistinctOfSourceWithNulls()', 2), ('projection', 2), ('eventual', 2), ('onComplete/onError', 2), ('makeEmptyMap()', 2), ('.map(a', 2), ('this.stateSupplier', 2), ('w.toSortedList(new', 2), ('AtomicInteger\nimplements', 2), ('CompletableObserver>', 2), ('testAccept()', 2), ('ParameterizedTypeImpl', 2), ('tryEmit(U', 2), ('level,\n', 2), ('Publisher[count', 2), ('U>(this);\n', 2), ('request()}.\n', 2), ('spells;\n', 2), ('mainErrorInnerCompleteDelayError()', 2), ('DisposableLambdaObserver<Integer>(\n', 2), ('CollectionFeature.NONE,\n', 2), ('d.isDisposed());\n', 2), ('state[3]);\n', 2), ('"Observable",', 2), ('o))', 2), ('Object)}', 2), ('assertTrue(appender.logContains("Treasure', 2), ('sd.run();\n', 2), ('Resources.getResource(tempFile.getName());\n', 2), ('Observable.interval(100,', 2), ('super.submit(task);\n', 2), ('(last', 2), ('downstream.', 2), ('calls.\n', 2), ('br;\n', 2), ('MaybeObserver#onError},', 2), ('finalizeReferent()', 2), ("'/');\n", 2), ('ConcatMapSingleMainObserver<T,', 2), ('mixedLong()', 2), ('Arrays.asList("15.11.2015",', 2), ('moRef', 2), ('reduce(BiFunction).\n', 2), ('TestSuite("java.util', 2), ('UnicastProcessor.create(capacityHint,', 2), ('css[1].onComplete();\n\n', 2), ('TimeoutFallbackObserver<T>(s,', 2), ('getChunkedReader(input,', 2), ('Predicate<Boolean>()', 2), ('MaybeOnSubscribe<T>', 2), ('Collections.unmodifiableMap(values);\n', 2), ('interrupted",', 2), ('doubleComplete()', 2), ('Set<Spellbook>', 2), ('edges', 2), ('assertEquals(ImmutableTable.of(),', 2), ('facade', 2), ('.switchMapSingle(Functions.justFunction(Single.just(1)))\n', 2), ('(!inner.get())', 2), ('}).blockingGet().toString();\n\n', 2), ('CompletableDisposable[0];\n\n', 2), ('assertNull(q.peek());\n', 2), ('super.asMap();\n', 2), ('qd.isEmpty();\n\n', 2), ('"default").iterator();\n\n', 2), ('5L);\n', 2), ('executor.execute(Runnables.doNothing());\n', 2), ('com.iluwatar.visitor;\n\nimport', 2), ('e);', 2), ('normalEmpty()', 2), ('table.put(row,', 2), ('nonEmpty)', 2), ('boundarySupplier));\n', 2), ('supported.");\n', 2), ('keyType;\n', 2), ('Completable.fromCallable(callable)\n', 2), ('assertTrue(ft.isCancelled());\n', 2), ('io.reactivex.annotations.Beta;\n\n/**\n', 2), ('innerLatch', 2), ('bq.cancel();\n\n', 2), ('buf;\n\n', 2), ('pp.mergeWith(cs).test(0);\n\n', 2), ('WindowBoundaryInnerSubscriber<Object,', 2), ('item}\n', 2), ('Set<Spell>', 2), ('doubleToRawLongBits(update));\n', 2), ('resource.cancel();\n', 2), ('3256698449646456986L;\n\n', 2), ('++)', 2), ('onLift(Operator<?', 2), ('io.reactivex.internal.fuseable.QueueDisposable;\nimport', 2), ('(MalformedURLException', 2), ('maxConcurrency);\n\n', 2), ('merger.apply(Collections.<Integer>emptyList(),', 2), ('(outputFused', 2), ('TimeoutException}.\n', 2), ('com.google.common.collect.testing.features.MapFeature.ALLOWS_NULL_VALUES;\n\nimport', 2), ('freezing', 2), ('(!ObjectHelper.equals(message,', 2), ('interrupt()', 2), ('entryOf(k4,', 2), ('Flowable}\n', 2), ('ParallelReduceSubscriber<T,', 2), ('DisposeTask', 2), ('message.\n', 2), ('obligation', 2), ('studentDatabase', 2), ('concatReportsDisposedOnComplete()', 2), ('maybeSupplier', 2), ('initialBytes)', 2), ('com.google.common.base.Optional.absent(),\n', 2), ('entry;\n', 2), ('assertTrue(rso.isDisposed());\n', 2), ('array[1]', 2), ('bt.next()', 2), ('collection,', 2), ('PurgeProperties', 2), ('ItemQueue', 2), ('testElementAtOrDefault()', 2), ('raw', 2), ('interest', 2), ('demonstrated', 2), ('asMap()', 2), ('builder.put(method.getReturnType(),', 2), ('invoked.', 2), ('TakeUntilMainSubscriber<T>', 2), ('SingleFlatMapCallback<T,', 2), ('List}.', 2), ('BiPredicate<String,', 2), ('checkedException', 2), ('onErrorInnerErrorRace()', 2), ('implementation)', 2), ('queue.offer(TERMINATED);\n', 2), ('this.maxAttempts', 2), ('.assertError(RuntimeException.class);\n', 2), ('doubleError2()', 2), ('assertFreshInstance(type,', 2), ('.assertFailure(IllegalStateException.class,', 2), ('LineBuffer', 2), ('resumeFunction\n', 2), ('World!").doOnCancel(new', 2), ('other.set(bs);\n\n', 2), ('-8612022020200669122L;\n\n', 2), ('ImmutableMap.Builder<Class<?>,', 2), ("implementation's\n", 2), ('otherIterable)', 2), ('5).concatWith(Flowable.<Integer>error(ex))\n', 2), ('mainSubscription.get().request(c);\n', 2), ('java.util.concurrent.CopyOnWriteArrayList;\nimport', 2), ('actual.onError', 2), ('defaultItem));\n', 2), ('MpscLinkedQueue<Object>());\n', 2), ('height="410"', 2), ('k4,', 2), ('Comparable<?>>', 2), ('2.', 2), ('actual.hasComplete();\n', 2), ('emitLast)', 2), ('Charset)}.\n', 2), ('AtomicReference<Observer<?', 2), ('skipped', 2), ('EOF",', 2), ('Schedulers.single();\n', 2), ('XMap', 2), ('fallback));\n', 2), ('entrySet().add()', 2), ('assertEquals(Arrays.asList(1,2,3,4,5),', 2), ('iteratorNotification.isOnError())', 2), ('4827726964688405508L;\n\n', 2), ('NonPublicConstantIgnored', 2), ('clients;\n\n', 2), ('java.util.concurrent.locks.*;\n\nimport', 2), ('prime', 2), ('Maybe.zip(pp0.singleElement(),', 2), ('cs.onSuccess(1);\n\n', 2), ('onCompleteNoSubscription();\n', 2), ('BlockingQueue<Message>', 2), ('assertEquals(allCustomers.get(0).getLastName(),', 2), ('(staticMethodDef', 2), ('reuses', 2), ('Single.just(1).doOnDispose(new', 2), ('s.onNext("one");\n', 2), ('RIGHT_CLOSE,', 2), ('(clients.incrementAndGet()', 2), ('QueueSubscription#BOUNDARY}', 2), ('6668));\n', 2), ('2;', 2), ('java.util.TreeMap;\n\n/**\n', 2), ('works\n', 2), ('ts.assertResult(0,', 2), ('onNext.test(t);\n', 2), ('customerDao.add(customer);\n', 2), ('io', 2), ('++scalarEmitted', 2), ('OrcsTest', 2), ('Subjects.\n', 2), ('Steve', 2), ('------------------------------------------------------------------\n', 2), ('#get()}.\n', 2), ('MapNotificationSubscriber<T,', 2), ('producers', 2), ('cause:', 2), ('(checkTerminated(empty,', 2), ('floorEntry(K', 2), ('Flowable.merge(os).subscribe(o);\n', 2), ('expectedResult,', 2), ('incidentEdges();\n', 2), ('Runnable\n', 2), ('(nextNotification.isOnNext())', 2), ('"subscriber', 2), ('testDematerialize3()', 2), ('this.dest', 2), ('TestException("Two"));\n\n', 2), ('wasNotAvailable', 2), ('Flowable<Flowable<Media>>', 2), ('Disposables.disposed();\n', 2), ('org.junit.jupiter.params.provider.MethodSource;\nimport', 2), ('delta);\n', 2), ('windows;\n', 2), ('(name', 2), ('5904473792286235046L;\n\n', 2), ('ex.getMessage()))', 2), ('(onError', 2), ('singles', 2), ('matches', 2), ('"";\n', 2), ('pp.single(-99);\n', 2), ('publishCompleted(final', 2), ('one,', 2), ('Thread.currentThread();\n\n', 2), ('flows', 2), ('Y,', 2), ('Exceptions.throwIfFatal(new', 2), ('winner.lazySet(0);', 2), ('executeService.submit(writer1);\n', 2), ('.dematerialize()\n', 2), ('SingleSource<U>', 2), ('*/\n@Retention(RetentionPolicy.CLASS)\n@Target({ElementType.TYPE,', 2), ('never()).onNext(any(String.class));\n', 2), ('TestException("iterator()");\n', 2), ('drop()', 2), ('com.google.common.collect.testing.Helpers.orderEntriesByKey;\n\nimport', 2), ('@Param({"4",', 2), ('ro.dispose();\n\n', 2), ('MaybeSubject.create()\n', 2), ('registering', 2), ('java.io.FilterWriter;\nimport', 2), ('Properties', 2), ('"Value_"', 2), ('backpressureDoc);\n', 2), ('testMostRecent()', 2), ('values.put("count4xx",', 2), ('Function<Type,', 2), ('emitLast;\n', 2), ('source5,\n', 2), ('ConcurrentHashMultiset<String>', 2), ('f.getName().replace(".java",', 2), ('CompletableSource}s,', 2), ('"Outer', 2), ('DefaultSubscriber<Integer>', 2), ('File(basepath', 2), ('obs.blockingIterable().iterator();\n\n', 2), ('compatibility', 2), ('common.base\n', 2), ('TestException("Outer', 2), ('os))', 2), ('distinct\n', 2), ('V>>();\n', 2), ('ds;\n\n', 2), ('NITERS', 2), ('fastPathEmit(b,', 2), ('tasks);\n', 2), ('(SubscriptionHelper.cancel(this))', 2), ('native', 2), ('35);\n', 2), ('(winner.compareAndSet(0,', 2), ('.iterator();\n\n', 2), ('(addInner(inner))', 2), ('Collection_CustomFieldSerializerBase.serialize(writer,', 2), ('topping;\n', 2), ('inputStreamOpened;\n', 2), ("Observer'\\r\\n", 2), ('dataSource;\n', 2), ('wo', 2), ('onCompleteOnError()', 2), ('Consumer<TestSubscriber<Object>>()', 2), ('this.ws', 2), ('flows.\n', 2), ('3");\n//', 2), ('CODE\n', 2), ('resolve', 2), ('Collections.<Integer>emptyList());\n\n', 2), ('.rebatchRequests(1)\n', 2), ('.subscribeOn(Schedulers.io());\n', 2), ('MapFeature[]', 2), ('super.addAll(elements);\n', 2), ('com.iluwatar.abstractdocument.domain.HasType;\nimport', 2), ('2).elementAt(2).blockingGet());\n', 2), ('this.crashOnIterator', 2), ('subscribeInner(p);\n', 2), ('io.reactivex.internal.util.NotificationLite;\n\npublic', 2), ('WindowBoundaryInnerObserver<Object,', 2), ('@Target(ElementType.METHOD)\n', 2), ('equality.\n', 2), ('Exception())\n', 2), ('subscribeOn(final', 2), ('executeOne()', 2), ("ParallelFlowable's", 2), ('a[i].subscribe(parent.observers[i]);\n', 2), ('floorKey(K', 2), ('Single.just(4))\n', 2), ('temporarily', 2), ('completionValueSupplier', 2), ('System.out.println("Diff', 2), ('Serialized', 2), ("'A", 2), ('line;', 2), ('parent.onAfterTerminated.run();\n', 2), ('inOrder.verify(observer).onNext(3);\n', 2), ('href="https://github.com/reactive-streams/reactive-streams-jvm#reactive-streams">Reactive-Streams', 2), ('os.subscribe(ts);\n\n', 2), ('bf.blockingGet();\n', 2), ('lefts.remove(end.index);\n', 2), ('write(Object', 2), ('wildcard', 2), ('testObserver(WeatherType', 2), ('downstream.onError(t);\n', 2), ('TestObserver<Object>(o);\n', 2), ('INPUTS_MASK]);\n', 2), ('CompletableOnSubscribe', 2), ('Fully', 2), ('reactor.', 2), ('(cancel)', 2), ('{"a",', 2), ('TreeTraverser<File>', 2), ('PotatoPeelingTask(3));\n', 2), ('com.iluwatar.converter;\n\nimport', 2), ('Thread:', 2), ('cs.observerCount());\n', 2), ('verify(observer).onSuccess(true);\n', 2), ('FlowableSubscriber<String>()', 2), ('nulls.\n', 2), ('generator.generateFresh(String[].class);\n', 2), ('(!iterator.hasNext())', 2), ('producerIndex();\n', 2), ('FinalizableWeakReference<Object>', 2), ('io.reactivex.Observer;\n\npublic', 2), ('observer.onNext(1);\n\n', 2), ('studentsToOperate', 2), ('RxJavaPlugins.onError()}', 2), ('fromPublisher}', 2), ('onNextRequestRace()', 2), ('URLClassLoader\n', 2), ('result[3]', 2), ('range.flatMap(new', 2), ('drops', 2), ('text.', 2), ('Collection<V>>>', 2), ('ConnectConsumer();\n', 2), ('OnError(e),', 2), ('Preconditions.checkNotNull(command,', 2), ('CrashingMappedIterable<Single<Integer>>(100,', 2), ('lines.size();', 2), ('null}.', 2), ('RxThreadFactory(THREAD_NAME_PREFIX,', 2), ('connection);\n\n', 2), ('servant.name);\n', 2), ('second,', 2), ('Java\n', 2), ('reuse\n', 2), ('ex,\n', 2), ('outEdgeMap,', 2), ('writeObject\n', 2), ('compose}.\n', 2), ('source!",', 2), ('#poll()},', 2), ('ObservableSource.");\n', 2), ('MaybeConverter<T,', 2), ('equivalence', 2), ('REJECTS_DUPLICATES_AT_CREATION,\n\n', 2), ('LOCAL_VARIABLE})\n@Retention(value', 2), ('lineBuf.finish();\n', 2), ('Integer>>();\n', 2), ('50000', 2), ('drainExactRequestCancel()', 2), ('connection.prepareStatement("SELECT', 2), ('stopped");\n', 2), ('(though', 2), ('this.valueSelector', 2), ("assertEquals(Character.valueOf('\\0'),", 2), ('ArrayList<Integer>()),\n', 2), ('consumedOne(replenish);\n', 2), ('commodo', 2), ('EMPTY)', 2), ('Functions.EMPTY_RUNNABLE;\n', 2), ('opposite', 2), ('(!tryOnNext(t)', 2), ('endregion\n\n', 2), ('Callable<NoSuchElementException>', 2), ('consumerIndex;\n\n', 2), ('m.backpressureKind', 2), ('errs', 2), ('com.iluwatar.abstractdocument.domain.Car;\nimport', 2), ('error/completion', 2), ('createCompletable().subscribe(ts);\n//\n//', 2), ('rights.clear();\n', 2), ('aOrAn(StringBuilder', 2), ('capacity)\n', 2), ('val', 2), ('BackpressureHelper.multiplyCap(skip,', 2), ('unit.convert(drift,', 2), ('supported")\n', 2), ('NullPointerException("onSuccess', 2), ('this.op', 2), ('rightIndex;\n\n', 2), ('sourceCount;\n\n', 2), ('subscription.request(n);\n', 2), ('super(run);\n', 2), ('Target', 2), ('TimeoutConsumer(long', 2), ('given.', 2), ('fulfillmentAction', 2), ('testOnNextError()', 2), ('lefts.values())', 2), ('serialDisposable.dispose();\n\n', 2), ('slowdowns', 2), ('completableFunction;\n', 2), ('ts.assertValue(1L);\n', 2), ('publisher;\n', 2), ('assertEquals("The', 2), ('TestException("main"));\n', 2), ('starts', 2), ('this.connection', 2), ('assertEquals(Byte.valueOf((byte)', 2), ('org.mockito.Mockito;\nimport', 2), ('testElementAtOrDefaultWithMinusIndex()', 2), ('equivalent\n', 2), ('indeed', 2), ('for.\n', 2), ('checkSource(Flowable.class.getSimpleName(),', 2), ('sanity', 2), ('"epic', 2), ('timers', 2), ('SingleObserver>()', 2), ('500;', 2), ('2L);\n\n', 2), ('BallItem', 2), ('using()', 2), ('fromRunnableNull()', 2), ('sourcesIterable,\n', 2), ('r++;\n', 2), ('constructorshouldbeprivate()', 2), ('countAfter', 2), ('LinkedHashMap<String,', 2), ('accept(TestObserver<Object>', 2), ('verify(observer).onError(checkedException);\n', 2), ('com.google.common.primitives;\n\nimport', 2), ('remove(as);\n', 2), ('assertFalse(qd.isEmpty());\n\n', 2), ('startFirstTimeout(Publisher<?>', 2), ('V>(entryOf(k1,', 2), ('v.unsubscribeOn(Schedulers.single());\n', 2), ('DisposableHelper.trySet(this,', 2), ('examples:\n', 2), ('action.run();\n', 2), ('IndexOutOfBoundsException', 2), ('methodTestCancelled()', 2), ('posting', 2), ('Helpers.mapEntry("!!', 2), ('Multimap},', 2), ('this.action', 2), ('mergeFunction)', 2), ('bytes.length];\n', 2), ('Completable.mergeDelayError(Flowable.just(pp1.ignoreElements(),', 2), ('state[3]', 2), ('dependentPromise.get(1000,', 2), ('RxJavaPlugins.reset();\n//\n//', 2), ('ParallelFlowable#sequentialDelayError()\n', 2), ('lock.readLock(),', 2), ('List<ListenableFuture<T>>}', 2), ('exceptionClass);\n', 2), ('ex0', 2), ('requestMore(1);\n', 2), ('OnErrorNotImplementedException("Message",', 2), ('ts.assertFailure(TestException.class);\n\n', 2), ('eager\n', 2), ('links,', 2), ('reportSubscriptionSet();\n', 2), ('ByteArrayInputStream(bytes.toByteArray()));\n', 2), ('remember,', 2), ('.named("SafeTreeSet', 2), ('BlockingObservableLatestIterator<T>', 2), ('CountDownLatch(8);\n\n', 2), ('io.reactivex.subscribers.DisposableSubscriber;\n\n/**\n', 2), ('elementAtIndex0WithDefaultOnEmptySource()', 2), ('suppressForPriorityBlockingQueue()', 2), ('Flowable.interval(50,', 2), ('DwarvenGoldmineFacade', 2), ('"Flowable");\n\n', 2), ('o.materialize().dematerialize();\n\n', 2), ('(ImmutableSet<E>)', 2), ('MaybeToSingle<T>(this,', 2), ('or(T', 2), ('sd.replace(scheduler.scheduleDirect(new', 2), ('throwIf(WRITE_THROWS);\n', 2), ('reason,', 2), ('AtomicReference<Object>\n', 2), ('onObservableLift.call(lift);\n//', 2), ('RunnableFuture<T>', 2), ('Callable<Observable<String>>', 2), ('Callable<Flowable<String>>', 2), ('Flowable.just(1,2,3,4,5).subscribe(new', 2), ('chained\n', 2), ('SubscriptionHelper.deferredSetOnce(upstream,', 2), ('returned),\n', 2), ('recegnized");\n', 2), ('RepeatSubscriber(Subscriber<?', 2), ('1.', 2), ('CakeLayer', 2), ('com.iluwatar.throttling;\n\nimport', 2), ('evictedGroups;\n', 2), ('onSubscribe.accept(s);\n', 2), ('FileReader(fileLocation);\n', 2), ('scelerisque', 2), ('<p>will', 2), ('"three");', 2), ('behavior,', 2), ('JarFile', 2), ('5629876084736248016L;\n\n', 2), ('e.serialize();\n', 2), ('parent.disposables.add(right);\n\n', 2), ('assertEquals(expectedToString,', 2), ('parent.innerError(new', 2), ('disposed.', 2), ('"Ring', 2), ('Optional<Long>', 2), ('BlockingObservable.\n', 2), ('testDoOnCompleted()', 2), ('read);\n', 2), ('Source', 2), ('(errs.addThrowable(t))', 2), ('bytes,', 2), ('ExceptionHelper.wrapOrThrow(iteratorNotification.getError());\n', 2), ('Publisher.");\n', 2), ('ByteBuffer.allocate(0))\n', 2), ('getAndIncrement();\n', 2), ('sleep(1000);\n\n', 2), ('java.util.Queue;\n\n/**\n', 2), ('TestHelper.compositeList(error);\n', 2), ('org.reactivestreams.Subscription;\n\npublic', 2), ('occurred.\n', 2), ('#connect}', 2), ('interrupts', 2), ('"two").startWith(li).toList().blockingGet();\n\n', 2), ('line)', 2), ('valueSelector,', 2), ('ms.onSuccess(3);\n', 2), ('SorterFunction<T>(comparator));\n\n', 2), ('relayed', 2), ('sa.request(Long.MAX_VALUE);\n\n', 2), ('TypeVariableInvocationHandler', 2), ('ambWithOrder()', 2), ('observer.waiting', 2), ('VideoResource', 2), ('CPUs</li>\n', 2), ('mainErrors()', 2), ('SECOND', 2), ('autoConnect(1);\n', 2), ('#RACE_DEFAULT_LOOPS\n', 2), ('pile', 2), ('6));\n', 2), ('opened', 2), ('issues', 2), ('message",', 2), ('lefts.put(idx,', 2), ('accumulators', 2), ('observers.get().length', 2), ('SampleTimedNoLast<T>', 2), ('2000,', 2), ('generator.', 2), ('navigable', 2), ('PublishSubject.\n', 2), ('rootDir', 2), ('Media());\n', 2), ('Completable.concat(Flowable.just(Completable.complete()),', 2), ('ts.assertSubscribed();\n\n', 2), ('(DisposableHelper.replace(other,', 2), ('assertTrue(f2.isCancelled());\n', 2), ('parent.task.replace(f);\n\n', 2), ('suppressForTreeSetNatural()', 2), ('notify.release();\n', 2), ('subtype', 2), ('.put("\\\\r', 2), ('split\n', 2), ('declared', 2), ('distinctElements}', 2), ('(Specifically,\n', 2), ('definitionStart)', 2), ('strong', 2), ('startId', 2), ('"four");', 2), ('host', 2), ('exists,', 2), ('FluentIterable.copyToList(iterable);\n', 2), ('comparators.', 2), ('uniqueId;\n', 2), ('initialDelay', 2), ('(Function)INSTANCE;\n', 2), ('"Reynolds");\n', 2), ('when(factory.call()).thenThrow(new', 2), ('dispatching', 2), ('beta', 2), ('CompletableSource\n', 2), ("Flowable'\\r\\n", 2), ('LinkedHashMap<Long,', 2), ('Observable.just(1).subscribe(tc);\n\n', 2), ('ClassInfo', 2), ('TestMaybe<Integer>();\n\n', 2), ('Mute', 2), ('ObjectHelper.requireNonNull(convert,', 2), ('.assertErrorMessage("The', 2), ('source7);\n', 2), ('.named("ConcurrentSkipListSet,', 2), ('state;\n', 2), ('wip.addAndGet(-missed);\n', 2), ('A>,', 2), ('horrors', 2), ('Flowable.merge(os).toList().blockingGet();\n\n', 2), ('pendingWrite', 2), ('ps.concatMapSingleDelayError(Functions.justFunction(ms),', 2), ('s;', 2), ('verify(run,', 2), ('accept(@NullableDecl', 2), ('wrong', 2), ('SpellDao', 2), ('this.exception', 2), ('cycles)', 2), ('.retry(new', 2), ('PURGE_PERIOD_SECONDS,', 2), ('assertFalse(SubscriptionHelper.set(s,', 2), ('Mutable', 2), ('Arrays.asList(pp0.single(0),', 2), ('io.reactivex.subscribers.DefaultSubscriber;\n\npublic', 2), ('java.util.concurrent.CompletableFuture\n', 2), ('ObjectHelper.requireNonNull(exception,', 2), ('violated:', 2), ('suppressForCheckedSet()', 2), ('lift,', 2), ('timeoutIndicator}', 2), ('both.add(s2);\n', 2), ('Assert.assertEquals(NITERS,', 2), ('pp.onNext(i', 2), ('(errors.addThrowable(error))', 2), ('bottomShelf', 2), ('b.indexOf("/**",', 2), ('((m.getModifiers()', 2), ('requestMore(long', 2), ('list.iterator();\n', 2), ('ObservableOnSubscribe<T>', 2), ('remove(md);\n', 2), ('otherSource', 2), ('mutate', 2), ('SingleSource[8];\n', 2), ('end,', 2), ('onError}.\n', 2), ('completableSupplier', 2), ('java.util.concurrent.TimeoutException;\n\nimport', 2), ('#catching}.\n', 2), ('socket,', 2), ('doubleToRawLongBits(expect),', 2), ('(ParameterizedType)', 2), ('toObservable().flatMap(mapper);\n', 2), ('List<Date>', 2), ('multiset.count(key);\n', 2), ('Pattern\n', 2), ('rx2.computation-priority}', 2), ('SwitchMapInnerObserver(SwitchMapCompletableObserver<?>', 2), ('com.iluwatar.strategy;\n\nimport', 2), ('shouldUnsubscribeFromUnderlyingSubscriptionOnDispose()', 2), ('"unsubscrib");\n', 2), ('fileB', 2), ('parent.innerComplete(index,', 2), ('(vr', 2), ('getter', 2), ('them.', 2), ('Function6<?', 2), ('Callable<List<Object>>()', 2), ('rmo.onSubscribe(d);\n\n', 2), ('futureResult.get();\n', 2), ('.mergeWith(Maybe.<Integer>error(new', 2), ('AtomicReference<SwitchMapMaybeObserver<R>>();\n', 2), ('4375739915521278546L;\n\n', 2), ('SerializedObserver<T>(t);\n', 2), ('serialDisposable.update(underlying);\n\n', 2), ('AtomicReferenceArray<Object>(n);\n', 2), ('when(future.get()).thenReturn(value);\n\n', 2), ('QueueDrainHelper.request(s,', 2), ('sourceSupplier\n', 2), ('lacus', 2), ('Loops', 2), ('HashBiMap.<E,', 2), ('Pool\n', 2), ('bs))', 2), ('ExecutorSchedulerTest.testCancelledRetention(w,', 2), ('specify\n', 2), ('.assertResult(-1,', 2), ('flag\n', 2), ('(verified)\n', 2), ('(waiting.getAndSet(0)', 2), ('calcElementOffset(long', 2), ('target;\n\n', 2), ('AbstractSchedulerConcurrencyTests', 2), ('nextNode.getAndNullValue();\n', 2), ('(Publisher<?', 2), ('response)', 2), ('MaybeObserver\n', 2), ('(boundary.compareAndSet(null,', 2), ('bs;\n\n', 2), ('(hasNext)', 2), ('PublisherBufferSkipSubscriber<T,', 2), ('float', 2), ('(get(0)', 2), ('runOn(@NonNull', 2), ('AsyncFunction}', 2), ('contains(@NullableDecl', 2), ('SpscLinkedArrayQueue<?>', 2), ('doOnLifecycle(\n', 2), ('build', 2), ('ts.awaitTerminalEvent(5,', 2), ('FlatMapCompletableMainObserver<T>(observer,', 2), ('src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/publishConnect.png"', 2), ('java.util.concurrent.TimeoutException;\n\n/**', 2), ('0));\n', 2), ('Serialization.populateMultimap(this,', 2), ('this.numInstances', 2), ('RxJavaPlugins.getInstance().registerCompletableExecutionHook(new', 2), ('assertFalse(pp2.hasSubscribers());\n', 2), ('max,', 2), ('apples', 2), ('Block', 2), ('v);\n', 2), ('ERROR,\n', 2), ('testCollectToString()', 2), ('FlowableOnBackpressureDrop(Flowable<T>', 2), ('"title",', 2), ('<li>fold', 2), ('Car', 2), ('this.cakeLayerInfos', 2), ('computation\n', 2), ('cel.get(index).getMessage());\n', 2), ('relative', 2), ('mutableClasses)', 2), ('io.reactivex.exceptions.TestException;\n\n/**\n', 2), ('AtomicLong(0));\n', 2), ('win(int', 2), ('delayed\n', 2), ('B>(subscriber,', 2), ('currently\n', 2), ('java.util.AbstractMap;\nimport', 2), ('vr', 2), ('empty();\n', 2), ('inDoc,\n', 2), ('zipper,\n', 2), ('.filter(a', 2), ('TimeUnit.SECONDS).toFuture().get();\n\n', 2), ('pp2.single(-99));\n', 2), ('#onError}', 2), ('wo.w;\n', 2), ('observer.assertValue(1);\n', 2), ('requestMoreOnNext()', 2), ('t7,', 2), ('TestHelper.checkDisposed(PublishProcessor.create().elementAt(0,', 2), ('find()', 2), ('java.lang.Thread.UncaughtExceptionHandler#uncaughtException(Thread,', 2), ('w.connect();\n\n', 2), ('URL("file",', 2), ('integers\n', 2), ('Observable},', 2), ('skipped,', 2), ('Find', 2), ('assertTrue(fo.isDone());\n\n', 2), ('javax.persistence.ManyToMany;\nimport', 2), ('winner', 2), ('(CacheDisposable<T>', 2), ('integers)', 2), ('Java8Holder', 2), ('from(source,', 2), ('Throwable.class,\n', 2), ('handler.count);\n', 2), ('(FileOutputStream', 2), ('super(predicate);\n', 2), ('add(int', 2), ('SourceObserver<?,', 2), ('ScheduledThreadPoolExecutor', 2), ('done();\n\n', 2), ('o.blockingSingle().intValue());\n', 2), ('SingleObserver<R>,', 2), ('args.\n', 2), ('this.comparer', 2), ('downstream.onNext(current.item);\n', 2), ('event)', 2), ('onNextInnerErrorRace()', 2), ('caught;\n', 2), ('inMaybe', 2), ('.doOnEvent(new', 2), ('assertThat(scanner.getResources()).isEmpty();\n', 2), ('Zana\n', 2), ('ArrayDeque<C>', 2), ('ObservableElementAt<T>(source,', 2), ('<i>explicit</i>', 2), ('Integer[5000];\n', 2), ('first4.get(0));\n', 2), ('LOGGER.info(\n', 2), ('co.onComplete();\n', 2), ('io.reactivex.internal.schedulers.TrampolineScheduler;\nimport', 2), ('Completable.complete());\n\n', 2), ('*/\n@Entity\n@Table(name', 2), ('p.subscribe(dis);\n', 2), ('expected.add(Helpers.mapEntry(k1(),', 2), ('exception:', 2), ('(sync.get()', 2), ('resource");\n', 2), ('(15.11.2015).', 2), ('items(item);\n', 2), ('wrap()', 2), ('sequentially', 2), ('.expectCollects(Arrays.asList(1),', 2), ('assertTrue(qd.isEmpty());\n', 2), ('delta,', 2), ('onSubscribe.accept(this);\n', 2), ('SortedMap},', 2), ('MERCHANTABILITY,', 2), ('Observer\n', 2), ('(concurrentItem', 2), ('objects.', 2), ('Iterator\n', 2), ("Letter('a'))));\n", 2), ('CollectionFeature.SUPPORTS_REMOVE);\n\n', 2), ('"_Thread_"', 2), ('input.observable.flatMap(new', 2), ('Helpers.getMethod(ListListIteratorTester.class,', 2), ('anchor', 2), ('1");\n//\n//', 2), ('AtomicReference<ScheduledExecutorService>();\n\n', 2), ('#hasObservers()}', 2), ('completions++;\n', 2), ('buf.size());\n', 2), ('byte[0]))\n', 2), ('are:', 2), ('inCompletable;\n\n', 2), ('assertEquivalent(expectedResult,', 2), ('Iterables.addAll(multiset,', 2), ('nextValue;\n', 2), ('.assertResult(100,', 2), ('905,', 2), ('-674404550052917487L;\n\n', 2), ('fileThreadLocal.remove();\n', 2), ('failure\n', 2), ('(String)classes[i', 2), ('numbers.first();\n', 2), ('matcher.find();\n', 2), ('cd.assertInnerError(0,', 2), ('observerCount()', 2), ('orderly\n', 2), ('cancelOnComplete()', 2), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/filter.png"', 2), ('into\n', 2), ('TestObserver&lt;Object&gt;', 2), ('Arrays.<Feature<?>>asList(\n', 2), ('TakeUntilMainMaybeObserver<?,', 2), ('Potion', 2), ('complete(true);\n', 2), ('3")));\n//\n//', 2), ('replace\n', 2), ('CompletableObserver.\n', 2), ('apply(ConnectableFlowable', 2), ('LOGGER.error("exception', 2), ('&lt;', 2), ('"internal/operators/"', 2), ('prototype)', 2), ('assertEquals(Integer.valueOf(3),', 2), ('s.onSubscribe(ios);\n\n', 2), ('CollectionFeature.ALLOWS_NULL_VALUES,', 2), ('sp', 2), ('Composite\n', 2), ('IllegalStateException(\n', 2), ('Function5<Integer,', 2), ('prefix;\n', 2), ('reflect', 2), ('complete(false);\n', 2), ('Video(3,', 2), ('(leave(-1)', 2), ('assertFalse(future.isDone());\n', 2), ('NULL_KEY;\n', 2), ('(List)', 2), ('MaybeEmpty', 2), ('exhaustively', 2), ('sa.missedSubscription.set(bs1);\n\n', 2), ('@id,', 2), ('optionalInt.or(0.5);', 2), ('first()', 2), ('paramName', 2), ('inner.setSubscription(new', 2), ('javax.persistence.OneToMany;\nimport', 2), ('.dispose();\n\n', 2), ('parses', 2), ('requests.add(n);\n', 2), ('com.google.common.base.Charsets.UTF_8;\nimport', 2), ('SwitchMapCompletableObserver<T>', 2), ('(Optional)', 2), ('InputForMergeN', 2), ('DateFormatCallable\n', 2), ('FromIterableDisposable<T>', 2), ('caching', 2), ('IllegalArgumentException("No', 2), ('timerInterruptible()', 2), ('to.assertResult(2);\n', 2), ('seedSupplier', 2), ('suite.tests();\n', 2), ('keys.', 2), ('this.until', 2), ('actual.onSuccess(0L);\n', 2), ('randomEvent(String', 2), ('LongAddables', 2), ('Observable.range(2,', 2), ('product', 2), ('rights;\n\n', 2), ('"resumeFunction', 2), ('PublishSubscription[]', 2), ('iterations");\n', 2), ('class;', 2), ('*/\n@CanIgnoreReturnValue', 2), ('initialString;\n\n', 2), ('ScalarSubscription<Integer>(ts,', 2), ('headMap(toKey,', 2), ('com.google.common.util.concurrent.ListenableFuture;\nimport', 2), ('(buf', 2), ('characterToFrequency.put(c,', 2), ('MaybeUsing<T,', 2), ('AmbSingleObserver<T>', 2), ('MaybeCallbackObserver<Integer>(Functions.<Integer>emptyConsumer(),\n', 2), ('newlines', 2), ('some\n', 2), ('first4.size());\n\n', 2), ('(add(md))', 2), ('TimeoutMainMaybeObserver(MaybeObserver<?', 2), ('(also', 2), ('lines)', 2), ('ImmutableList.Builder<URL>', 2), ('5).onBackpressureLatest().subscribe(ts);\n\n', 2), ('ObjectHelper.requireNonNull(subscriber,', 2), ('}).take(1).doOnSubscribe(new', 2), ('NumberExpression', 2), ('System.out.println("Runs:', 2), ('TestOutputStream(OutputStream', 2), ('elapsed', 2), ('m\n', 2), ('executor.get();\n', 2), ('aborting', 2), ('violates', 2), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/from.Future.png"', 2), ('multiset,', 2), ('keySpliterator()', 2), ('Single.just(1)),', 2), ('Multiple', 2), ('assertTrue(it.hasNext());\n\n', 2), ('NumberExpression,', 2), ('ListFeature.SUPPORTS_SET,\n', 2), ('demonstrate', 2), ('java.net.URISyntaxException;\nimport', 2), ('ImmutableMap#toImmutableMap(Function,', 2), ('SubscriberCompletableObserver<T>', 2), ('casting', 2), ('uses.\n', 2), ('first4.get(1));\n', 2), ('2).test();\n\n', 2), ('testDateValues()', 2), ('evictedGroups.clear();\n', 2), ('subMap(fromKey,', 2), ('propagate}', 2), ('super.clear();\n', 2), ('2).elementAt(1).blockingGet()\n', 2), ('RetryBiObserver<T>', 2), ('o.safeSubscribe(observer);\n\n', 2), ('incorrect', 2), ('PublishSubscriber,', 2), ('terminate;\n\n', 2), ('both.add(s1);\n', 2), ('SwitchMapMaybeObserver<R>(this);\n\n', 2), ('BallThread();\n\n', 2), ('assertMocksSatisfied();\n', 2), ('MaybeFlatMapSingleElement<T,', 2), ('startWith1()', 2), ('successful.', 2), ('Collection)', 2), ('subject.onNext(3);\n', 2), ('App}', 2), ('(times', 2), ('Traverser}', 2), ('MaybeFlatMapIterableFlowable<T,', 2), ('times(1)).onNext(value);\n', 2), ('AtomicInteger(3);\n\n', 2), ('checkNotNull(key);\n', 2), ('io.reactivex.internal.subscriptions.SubscriptionArbiter;\nimport', 2), ('w.schedule(run);\n', 2), ('onComplete)?</code></pre>\n', 2), ('java.nio.file.Files.newBufferedWriter(file,', 2), ('Indexed<E>', 2), ('assertTrue(DisposableHelper.DISPOSED.isDisposed());\n', 2), ('relinquish', 2), ('RxJavaPlugins.getInstance().reset();\n//', 2), ('Specifies', 2), ('TreeMultiset.create();\n', 2), ('"A', 2), ('algorithm', 2), ('(SingleSource<?', 2), ('SwitchMapInnerObserver<Object,', 2), ('dragonSlayer.changeStrategy(()', 2), ('keyType', 2), ('bf.cancelled', 2), ('future;\n\n', 2), ('getClass().getClassLoader()).getPackageName());\n', 2), ('assertEquals(11,', 2), ('TestSubscriber<List<Integer>>', 2), ('AtomicReference<LinkedQueueNode<T>>();\n', 2), ('runnables', 2), ('(inner.get()', 2), ('ZipIterableObserver<T,', 2), ('writer.write(string);\n', 2), ('ObjectHelper.equalsPredicate());\n', 2), ('AtomicReference<Subscriber<?>>', 2), ('FileInputStream(file);\n', 2), ('CompositeException.class);\n\n', 2), ('Publisher<Timed<Integer>>', 2), ('Observable()', 2), ('Schedulers.newThread())\n', 2), ('benchmark', 2), ('keyComparator', 2), ('ms.onError(ex2);\n', 2), ('com.google.common.util.concurrent.ListeningScheduledExecutorService;\nimport', 2), ('"2",', 2), ('10).hide()\n', 2), ('#onNext}', 2), ('pp.parallel(2)\n', 2), ('Maybe.just(2)),', 2), ('wind."});\n', 2), ('newValue);\n', 2), ('(innerDone', 2), ('BackpressureHelper.multiplyCap(2,', 2), ('cast:\n', 2), ('io.reactivex.internal.subscriptions.*;\n\npublic', 2), ('pattern;\n\n', 2), ('fromPublisher(toFlowable().retry(predicate));\n', 2), ('WeakReference', 2), ('"second");\n', 2), ('map.put("weightTons",', 2), ('CascadeType.ALL)\n', 2), ('back.\n', 2), ('assertEquals(TASK_COUNT,', 2), ('slots.\n', 2), ('lio', 2), ('assertEquals(expectedCount,', 2), ('security', 2), ('com.google.gwt.user.client.rpc.core.java.util.Collection_CustomFieldSerializerBase;\nimport', 2), ('CancellationException());\n', 2), ('io.reactivex.schedulers.Timed;\n\n@Test\npublic', 2), ('"s', 2), ('selfLoopCount)', 2), ('Function8<?', 2), ('iterator;\n\n', 2), ('this.e', 2), ('minimum', 2), ('ignored.\n', 2), ('BUT\n', 2), ('wip--;\n', 2), ('PRODUCTION', 2), ('SingleUsing<T,', 2), ('this.strategy', 2), ('FAILED;\n', 2), ('invoked,', 2), ('serverPort;\n', 2), ('duty', 2), ('DisposableObserver<T>', 2), ('data.length);\n', 2), ('doAfterSuccess(Consumer<?', 2), ('Amb(once,', 2), ('User("Camile",', 2), ('error);', 2), ('innerList', 2), ('.named("LinkedList")\n', 2), ('port,', 2), ('worker2', 2), ('TimeUnit.SECONDS).blockingSingle();\n\n', 2), ('traversing', 2), ('.assertResult("5");\n', 2), ('concatMap', 2), ('DebounceTimedObserver<T>(\n', 2), ('shelf\n', 2), ('Helpers.assertEmpty(list);\n', 2), ('of(T', 2), ('q2', 2), ('Subject<String>', 2), ('either\n', 2), ('cakeLayerInfos;\n', 2), ('com.iluwatar.hexagonal.domain.LotteryNumbers;\nimport', 2), ('solution', 2), ('checkNotNull(entry.getValue());\n', 2), ('items(T...', 2), ('collectionSupplier));\n', 2), ('p.onComplete();\n', 2), ('rights.clear();\n\n', 2), ('download(DEFAULT_URL)\n', 2), ('WithPrivateConstructor', 2), ('source.subscribe(us);\n', 2), ('innerScheduler;\n', 2), ('5).concatWith(Observable.<Integer>never())\n', 2), ('subscriber,\n', 2), ('casual', 2), ('.named("SafeTreeMap', 2), ('ignoreCancel()', 2), ('Javadoc', 2), ('owner', 2), ('getIterable()', 2), ('invokeGeneratorMethod(emptyGenerate);\n', 2), ('ImmutableSet.of(\n', 2), ("Subscriber'\\r\\n", 2), ('@Partially.GwtIncompatible("AVAILABLE', 2), ('videos', 2), ('(exec', 2), ('source9,\n', 2), ('source.subscribe(parent.subscribers);\n', 2), ('disposedOnArrival()', 2), ('finished\n', 2), ('SingleOnSubscribe<T>', 2), ('parent.tryEmit(t,', 2), ("Single's\n", 2), ('RepeatObserver(Observer<?', 2), ('CakeDao', 2), ('Currency', 2), ('this.otherDisposable', 2), ('Disposables.empty());\n', 2), ('Iterator<T>,', 2), ('Emitter<T>(s);\n', 2), ('onTerminate;\n', 2), ('java.io.PrintStream;\n\nimport', 2), ('innerObserver.onSubscribe(Disposables.empty());\n', 2), ('assertThat(ClassPath.Scanner.getClassPathEntries(child))\n', 2), ('range;\n\n', 2), ('o.subscribe(observer);\n', 2), ('List>>', 2), ('wo.w.onComplete();\n\n', 2), ('Observable.merge(os).toList().blockingGet();\n\n', 2), ('V>(this);\n', 2), ('cleaning', 2), ('thread.set(Thread.currentThread());\n', 2), ('emitter.dispose();\n', 2), ('B>>();\n', 2), ('threads)', 2), ('-2187421758664251153L;\n\n', 2), ('++calls[0];\n', 2), ('s.request(10);\n', 2), ('fromRunnableThrows()', 2), ('org.springframework.transaction.annotation.Transactional;\n\n/**\n', 2), ('SingleObserver#onError}', 2), ('O,', 2), ('cdl;\n', 2), ('Flowable.intervalRange(0,', 2), ('.doOnLifecycle(Functions.emptyConsumer(),\n', 2), ('statement.executeUpdate()', 2), ('(count.get()', 2), ('SUPPORTS_SET,\n', 2), ('rx2.single-priority}', 2), ('value.run();\n', 2), ('testOnStartCalledOnceViaUnsafeSubscribe()', 2), ('Cliff', 2), ('assertTrue(rco.isDisposed());\n', 2), ('<li>support', 2), ('sum).map(new', 2), ('svq.poll();\n\n', 2), ('(remaining.decrementAndGet()', 2), ('check\n', 2), ('Observable<Observable<Media>>', 2), ('MILLISECONDS));\n\n', 2), ('"below', 2), ('assertTrue(f1.isCancelled());\n\n', 2), ('assertFalse(rco.isDisposed());\n', 2), ('SecurityManager', 2), ('artificialDelayOf(100);\n', 2), ('LoadBalancer', 2), ('subscriber.assertError(IllegalArgumentException.class);\n', 2), ('LongAddable}', 2), ('onDispose.run();\n', 2), ('handler);\n', 2), ('nextThrows()', 2), ('genericDeclaration;\n', 2), ('current.cancel();\n', 2), ('SocketChannel', 2), ('assertTrue(ss.getThrowable().toString(),', 2), ('Serialization', 2), ('flushable', 2), ('f.elementAt(0,', 2), ('a.onNext(null);\n\n', 2), ('specialization', 2), ('ByToString', 2), ('DisposableHelper.dispose(inner);\n', 2), ('testToFuture()', 2), ('toSingle(toFlowable().retry(predicate));\n', 2), ('com.iluwatar.singleton;\n\n/**\n', 2), ('backpressure-aware', 2), ('current.cancel(runner', 2), ('work-stealing', 2), ('THREAD_NAME_PREFIX', 2), ('TimeoutSubscriber<T>(s,', 2), ('ex,', 2), ('io.reactivex.disposables.*;\n\npublic', 2), ('attempts.\n', 2), ('cs.getThrowable()', 2), ('"A","a",', 2), ('io.reactivex.internal.fuseable.ScalarCallable;\n\n/**\n', 2), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/sequenceEqual.png"', 2), ('CyclicBarrier', 2), ('qd.requestFusion(QueueFuseable.ANY);\n\n', 2), ('scanner.scan(root.toFile(),', 2), ('opens', 2), ('collection.add(t);\n', 2), ('if,', 2), ('this.cdl', 2), ('BorderLayout());\n', 2), ('CLASS)\npublic', 2), ('Class<X>', 2), ('count\n', 2), ('assertEquals(expectedName,', 2), ('visitParameterizedType(ParameterizedType', 2), ('innerErrorAfterTermination()', 2), ('(inner[j].id', 2), ('ParallelDoOnNextTry<T>(this,', 2), ('GeneratorSubscription<T,', 2), ('badValue,', 2), ('waiter,', 2), ('Flowable.just(1).takeLast(1).subscribe(s);\n', 2), ('pools,', 2), ('testGetWithTimeoutAfterCancel()', 2), ('RxJavaObservableExecutionHook()', 2), ('SingletonArrayFunc()).subscribeActual(s);\n', 2), ('s.request(e);\n', 2), ('ObjectHelper.requireNonNull(debounceSelector.apply(t),', 2), ('warning', 2), ('onSuccess.accept(value);\n', 2), ('}.test();\n', 2), ('disposables.delete(sender);\n', 2), ('apply(@NullableDecl', 2), ('secondObserver', 2), ('io.reactivex.internal.subscriptions.DeferredScalarSubscription;\n\npublic', 2), ('height="430"', 2), ('seed;\n', 2), ('ImmutableMap.of())\n', 2), ('(k', 2), ('SingleObserver<Object>', 2), ('Consider', 2), ('AnyObserver<T>', 2), ('in.readLine())', 2), ('(int)elements))\n', 2), ('startFirstTimeout(ObservableSource<?>', 2), ('ArrayList<Integer>()),', 2), ('createSingle().subscribe(ts);\n//\n//', 2), ('ends', 2), ('s.blockingMostRecent("default").iterator();\n\n', 2), ('2.1.8', 2), ('Utilities', 2), ('org.apache.log4j.Logger;\n\n/**\n', 2), ('System.out.println("The', 2), ('resumeFunction)', 2), ('Queue<Runnable>', 2), ('ts.assertComplete();\n//\n//', 2), ('blocks!', 2), ('elementAtOrErrorNegativeIndex()', 2), ('execTime,', 2), ('errors.get());\n//', 2), ('serialDisposable.update(first);\n', 2), ('CompletableToSingle<T>(this,', 2), ('IllegalArgumentException("Error");\n', 2), ('isEqual;\n', 2), ('12:05"));\n', 2), ('iteratorNotification.getValue();\n', 2), ('Functions.justCallable(Observable.just(3))\n', 2), ('headMap(key,', 2), ('Observable",', 2), ('oranges', 2), ('files,', 2), ('rangeObservable.flatMap(new', 2), ('(IndexOutOfBoundsException', 2), ('Publisher"))', 2), ('ScheduledDirectTask(decoratedRun);\n', 2), ('"HashMap', 2), ('doOnSuccess}', 2), ('arbiter.setSubscription(s);\n', 2), ('termination.', 2), ('chunk', 2), ('scheduler).publish();\n\n', 2), ("Completable'\\r\\n", 2), ('Maybe.just(3)),', 2), ('assertEquals(allCustomers.get(0).getId(),', 2), ('channel)', 2), ('input.size);\n', 2), ('(goodValue', 2), ('java.nio.channels.FileChannel.MapMode;\nimport', 2), ("that's\n", 2), ('goodValue,', 2), ('UnmodifiableIterator<K>', 2), ('s.onSubscribe(as);\n', 2), ('testToFutureList()', 2), ('TestResourceMaybeObserver<Integer>();\n', 2), ('diff);\n', 2), ('WithPublicConstructorAndConstant', 2), ('scheduler.createWorker());\n', 2), ('TakeUntilOtherMaybeObserver<U>(this);\n', 2), ('Function8<Integer,', 2), ('<Movie>', 2), ('reportError(Subscriber<?>[]', 2), ('.concatMapMaybe(\n', 2), ('total++;\n', 2), ('2005', 2), ('fromRunnable(final', 2), ('Functions.ON_ERROR_MISSING);\n', 2), ('SampleElements<V>', 2), ('spliterator.forEachRemaining(state::set);\n', 2), ('SwitchMapMaybeObserver<Object>(null);\n\n', 2), ('20;\n', 2), ('topping=%s', 2), ('nextInnerErrorRace()', 2), ('Account', 2), ('serialized,', 2), ('addString3', 2), ('type;\n\n', 2), ('Flowable.fromArray(sources),', 2), ('serial,', 2), ('wait\n', 2), ('happy', 2), ('Sentence(words);\n\n', 2), ('RepeatObserver<T>(s,', 2), ('b}', 2), ('fits\n', 2), ('Video(2,', 2), ('equals}', 2), ('exec.shutdown();\n\n', 2), ('attach', 2), ('derivedSuites;\n', 2), ('Clear', 2), ('"="', 2), ('actual.getThrowable();\n', 2), ('create(\n', 2), ('(requested.compareAndSet(current,', 2), ('producerIndex.getAndIncrement();\n', 2), ('reaching', 2), ('Thread.yield();\n', 2), ('getting', 2), ('#"', 2), ('java.util.concurrent.CompletableFuture#exceptionally}.', 2), ('Set<Entry<Class<?', 2), ('deferred.subscribe(secondObserver);\n\n', 2), ('factory.apply(first,', 2), ('SingleFlatMap<T,', 2), ('testLastOfManyReturnsLast()', 2), ('result);\n\n', 2), ('ObservableDelaySubscriptionOther<T,', 2), ('futureResult3.get();\n', 2), ('Microbenchmark', 2), ('last()', 2), ('getter.invoke(null);\n\n', 2), ('moveToNext();\n', 2), ('navigableKeySet();\n', 2), ('FlowableWithLatestFromMany(@NonNull', 2), ('"Street', 2), ('href="http://reactivex.io/documentation/operators/subscribeon.html">ReactiveX', 2), ('putIfAbsent(K', 2), ('non-null,', 2), ('connect(@NonNull', 2), ('resourceSupplier\n', 2), ('simplified', 2), ('(md.isDisposed())', 2), ('createMultimap();\n', 2), ('s.assertNoValues();\n', 2), ('DelayedRunnable(new', 2), ('assertNotNull(last4);\n', 2), ('frequency,', 2), ('wait,', 2), ('sourceCode.lastIndexOf("/**",', 2), ('SerializedSubscriber(Subscriber<?', 2), ('*/\n@GwtCompatible\nfinal', 2), ('QueueSubscription.requestFusion', 2), ('sleep', 2), ('Functions.EMPTY_ACTION)\n', 2), ('Command', 2), ('drama', 2), ('f.get();', 2), ('carProperties', 2), ('as.onError(t);\n', 2), ('thread).\n', 2), ('java.util.concurrent.AbstractExecutorService;\nimport', 2), ('enter();\n\n', 2), ('6.7).', 2), ('AnEnum[length];\n', 2), ('exception");\n\n', 2), ('flatMapCompletable(Blackhole', 2), ('assertFalse(task.isDone());\n', 2), ('successors()', 2), ('Long.MAX_VALUE",', 2), ('transfer', 2), ('.blockingSubscribe(Functions.emptyConsumer());\n', 2), ('".";\n', 2), ('verify(observer).onError(error);\n', 2), ('Throwable>...', 2), ('.append(")\\r\\n");\n', 2), ('field/parameter/variable/return', 2), ('LongAdder();\n', 2), ('delayed.', 2), ('stateSupplier,', 2), ('getDelay(TimeUnit', 2), ('(FileInputStream', 2), ('state[1]', 2), ("representation's", 2), ('interrupted[0]', 2), ('SampleTimedNoLast<T>(serial,', 2), ('allowFatal);\n', 2), ('child.onSubscribe(parent);\n\n', 2), ('"Doe",', 2), ('List<E>}', 2), ('parent.subscribe(others,', 2), ('Object>(next,', 2), ('(t.isOnComplete())', 2), ('ways', 2), ('assertUndeliverable(errors,', 2), ('b",', 2), ('FileWriter', 2), ('as;\n', 2), ('makePopulatedMap()', 2), ('Function<Runnable,', 2), ('Maybe<U>', 2), ('Charsets.UTF_8));\n', 2), ('ParallelFlowable<C>', 2), ('state[2]', 2), ('elements");\n', 2), ('leading', 2), ('ts.assertValues(expected);\n', 2), ('Set<Wizard>', 2), ('notDoneFuture;\n', 2), ('source.parallelism(),', 2), ('expectedValuesPerKey', 2), ('blocker.blockingLatest();\n', 2), ('failOnEmpty;\n', 2), ('Future}.)\n', 2), ('@SuppressWarnings("rawtypes")', 2), ('parent.unique)', 2), ('flowableBlockingLast()', 2), ('s.onSubscribe(sd);\n', 2), ('wizards;\n', 2), ('char[]', 2), ('Flowable.error(error)\n', 2), ('testGetPackageName()', 2), ('ambIterableOrder()', 2), ('ts.errors().get(0);\n', 2), ('assertEquals(Double.valueOf(0),', 2), ('leftIndex;\n\n', 2), ('Function4<?', 2), ('Optional<TestEnum>', 2), ('lowerKey(K', 2), ('state[0]', 2), ('1).getMessage();\n', 2), ('insert', 2), ('reserialize(T', 2), ('heavy', 2), ('TakeUntilOtherMaybeObserver<U>\n', 2), ('delayTime', 2), ('(StackTraceElement', 2), ('necessary,', 2), ('Future<List<String>>', 2), ('speed.\n', 2), ('actual.onNext(poll());\n', 2), ('source.subscribe(it);\n', 2), ('"fail",', 2), ('ambLots()', 2), ('err[0]', 2), ('f\n', 2), ('doOnComplete}', 2), ('source.flatMapSingle(new', 2), ('scalarLimit)', 2), ('normalJust()', 2), ('EventConsumer', 2), ('com.iluwatar.abstractdocument.domain.HasPrice;\nimport', 2), ('default\n', 2), ('set!"));\n', 2), ('onSuccessMapper,', 2), ('last;\n', 2), ('FlowableDelaySubscriptionOther<T,', 2), ('SingleElementSubscriber<T>(s,', 2), ('this.connect(connection);\n', 2), ('ConnectableFlowable.', 2), ('(sp', 2), ('TimeoutObserver<T>(s,', 2), ('multimap().forEach((k,', 2), ('endProcess(AsyncResult<T>', 2), ('dates\n', 2), ('testPeriodicObserverThrows()', 2), ('lazySet(1);\n', 2), ('field.\n', 2), ('schedulers.\n', 2), ('Connection', 2), ('selector;\n', 2), ('io.reactivex.internal.util.NotificationLite;\nimport', 2), ('QueueDrainHelper.drainMaxLoop(queue,', 2), ('res.getDateList()', 2), ('DistinctSubscriber<T,', 2), ('b.indexOf("</dd>",', 2), ('ThreadLocal.', 2), ('convenience', 2), ('Set<Entry<String,', 2), ('shouldAllowToThrowCheckedException()', 2), ('interfaces,\n', 2), ('LatestSubscriberIterator<T>', 2), ('Constructor.', 2), ('PrimitiveIterator.OfInt', 2), ('LongConsumer,', 2), ('keyComparator,', 2), ('AtomicReference<InnerObserver<?,', 2), ('bufferClose', 2), ('SortedSet}.', 2), ('assertDrained(q);\n', 2), ('"comparator', 2), ('createObservable().subscribe(ts);\n//\n//', 2), ('TestException("inner"))),', 2), ('current.compareAndSet(curr,', 2), ('SubscriptionHelper.set(s,', 2), ('completableSupplier)', 2), ('Completables.\n', 2), ('assertNotEquals(t1,', 2), ('accept(TestSubscriber<Object>', 2), ('"256"})\n', 2), ('Observable.never()\n', 2), ('tearDown)', 2), ('is.run();\n\n', 2), ('this.onNextMapper', 2), ('.window(50)\n', 2), ('absent,', 2), ('again\n', 2), ('itemTimeoutObservableSource', 2), ('elements.length);\n', 2), ('error.get())', 2), ('fromPublisher(final', 2), ('inclusive)', 2), ('(NoSuchElementException', 2), ('Completable.complete().delay(10,', 2), ('cachedKeySet', 2), ('promise,', 2), ('?>[n', 2), ('FuseToMaybe)', 2), ('ms.subscribe(this);\n', 2), ('(res', 2), ('delta)', 2), ('RetryBiSubscriber<T>', 2), ('this.source.subscribe(new', 2), ('thread/worker.\n', 2), ('fo.cancel(true);\n', 2), ('units', 2), ('ParallelFilterTry<T>(this,', 2), ('member.partyAction(action);\n', 2), ('initialized\n', 2), ('expectedCount;', 2), ('(!upstream.compareAndSet(null,', 2), ('list.toString();\n', 2), ('super(checkNotNull(out));\n', 2), ('onAfterSuccess', 2), ('ParallelFlowable.fromArray(Flowable.<Integer>error(new', 2), ('database;\n', 2), ('correctly.', 2), ('o.throttleLast(500,', 2), ('int),', 2), ('adjacentNodes();\n', 2), ('isEmpty/clear', 2), ('getPath();\n', 2), ('Access', 2), ('when(func.call()).thenReturn(new', 2), ('this.ws;\n', 2), ('firstEntry()', 2), ('ObserverFusion.newTest(QueueFuseable.ASYNC);\n\n', 2), ('SetMultimap}.\n', 2), ('this(actual,', 2), ('Luke', 2), ('sourceCode.indexOf("{",', 2), ('testScheduler.advanceTimeBy(3000,', 2), ('parent.close(this);\n', 2), ('elementAtOrErrorOneElement()', 2), ('expectedDetails', 2), ('reduced.blockingGet();\n', 2), ('Schedulers.io().scheduleDirect(new', 2), ('producerIndex;\n\n', 2), ('#subscribeOn\n', 2), ('truncated', 2), ('Function9<?', 2), ('PureJavaLongAddable();\n', 2), ('get(i);\n', 2), ('java.util.HashSet;\n\nimport', 2), ('java.lang.reflect.*;\nimport', 2), ('indicator.\n', 2), ('Return', 2), ('thread-safe\n', 2), ('grandParent', 2), ('TimeUnit.SECONDS).blockingIterable().iterator().next();\n\n', 2), ('sourceLoop:\n', 2), ('8;\n\n', 2), ('protocol:\n', 2), ('2));\n\n', 2), ('fine\n', 2), ('ws.poll().onComplete();\n', 2), ('times(1)).onNext("E");\n', 2), ('TRight>();\n', 2), ('Schedulers.from(executor);\n', 2), ('length\n', 2), ('JavaVersion', 2), ('ImmutableSortedMap.of("one",', 2), ('subscribed.\n', 2), ('subscribe(ObservableSource<?', 2), ('customerDao.getAll())', 2), ('io.reactivex.internal.subscribers.BasicFuseableSubscriber;\nimport', 2), ('produced(c);\n', 2), ('ReplayProcessor.create();\n', 2), ('super(checkNotNull(in));\n', 2), ('switchOverDelayError()', 2), ('Maybe.<Integer>empty().subscribeOn(Schedulers.computation());\n', 2), ('java.lang.reflect.Array\npublic', 2), ('index.getAndSet(Long.MAX_VALUE);\n', 2), ('format,', 2), ('Sets.newHashSet();\n', 2), ('locks', 2), ('<dd>Backpressure', 2), ('ConnectableObservable>()', 2), ('stopWindows.get();\n', 2), ('comparator);\n', 2), ('<i>consistent', 2), ('{FIELD,', 2), ('kingJoffrey', 2), ('ps1.onError(ex1);\n', 2), ('(++size', 2), ('-9102637559663639004L;\n', 2), ('.takeWhile(new', 2), ('periodicWrapper;\n', 2), ('eventLoop', 2), ('complete(p);\n', 2), ('SerializedObserver<U>(t),', 2), ('windows.getAndIncrement();\n', 2), ('Nothing', 2), ('modify', 2), ('Own', 2), ('requests.size());\n', 2), ('Maybe.just(1),', 2), ('scheduler.', 2), ('w.subscribe(ts1);\n', 2), ('deep-copy,', 2), ('10).reduce((a,', 2), ('ImmutableBiMap.copyOf(entries);\n', 2), ('calls.get());\n//', 2), ('CompletableObserverImplementation', 2), ('Maybe}.', 2), ('400\n', 2), ("Can't", 2), ('Functions.justFunction((Maybe<Integer>)null),\n', 2), ('shutdownRejects()', 2), ('Close>(\n', 2), ('thread,\n', 2), ('testShouldUseUnsafeSubscribeInternallyNotSubscribe()', 2), ('}).toObservable();\n', 2), ('super(delegate);\n', 2), ('CompletableSource},', 2), ('Disposable#dispose()}', 2), ('onSuccessFastPathBackpressuredRace()', 2), ('memberSupplier.get();\n\n', 2), ('completed.compareAndSet(false,', 2), ('AsyncFunction<?', 2), ('assertTrue(multimap().asMap().remove(key)', 2), ('value[1]', 2), ('OneSizeTestContainerGenerator<Collection<E>,', 2), ('(").append(baseClassName).append(".java:")\n', 2), ('ObjectHelper.requireNonNull(e,', 2), ('ImmutableBiMap}.\n', 2), ('permits).\n', 2), ('PublishSubscription[n', 2), ('super(100L);\n', 2), ('ParallelFlowable>()', 2), ('verify(observer).onError(any(TestException.class));\n', 2), ('flush(flushable,', 2), ('globalMutex.wait();\n', 2), ('observers.poll();\n\n', 2), ('set(true);\n', 2), ('removal', 2), ('later', 2), ('!m.signature.contains("SingleSource"))', 2), ('InnerCompletableCache[0];\n\n', 2), ('DatagramChannel}', 2), ('FuseToMaybe<T>', 2), ('onDrop;\n', 2), ('fail.append("java.lang.RuntimeException:', 2), ('forEachWileWithError()', 2), ('fileThreadLocal', 2), ('assertTrue(dependentPromise.isDone());\n', 2), ('activeCount;\n\n', 2), ('log.stream().anyMatch(event', 2), ('boundary));\n', 2), ('expensive\n', 2), ('com.iluwatar.databus.Member;\nimport', 2), ('previousSpell);\n', 2), ('ds[0]', 2), ('"convert', 2), ('resultSelector);\n\n', 2), ('syncIterableHidden()', 2), ('Exceptions.propagate(new', 2), ('(BackpressureHelper.add(this,', 2), ('com.iluwatar.monad;\n\nimport', 2), ('css[v];\n', 2), ('custom.createWorker();\n', 2), ('subject;\n\n', 2), ('EqualObserver<T>', 2), ('com.google.common.util.concurrent.testing;\n\nimport', 2), ('equal.\n', 2), ('name)SchedulerHandler()}', 2), ('SimpleFileWriter}', 2), ('this.failOnEmpty', 2), ('item:', 2), ('overlapping', 2), ('.assertResult()\n', 2), ('QueuingExecutor', 2), ('arg2)', 2), ('dir2', 2), ('(!started)', 2), ('df;', 2), ('java.util.stream.Collector;\nimport', 2), ('ConcatMapEagerMainObserver<T,', 2), ('*/\n@SuppressWarnings("serial")', 2), ('fallback\n', 2), ('"Source', 2), ('.limit(0)\n', 2), ('(FluentFuture<T>)', 2), ('AsyncDisposable[n', 2), ('LeftRightEndSubscriber(this,', 2), ('LeftRightObserver', 2), ('assertSame(subscription,', 2), ('lastEntry()', 2), ('newFile("dir-1/file-b");\n', 2), ('IllegalArgumentException(paramName', 2), ('(");\n', 2), ('s.onSubscribe(deferred);\n\n', 2), ('testDefer()', 2), ('Subscription\n', 2), ('.forEachWhile(Functions.alwaysTrue());\n', 2), ('8708641127342403073L;\n\n', 2), ('get(0)', 2), ('expectedKeys,', 2), ('MissingBackpressureException("Inner', 2), ('assertTrue(ms.hasValue());\n', 2), ('SwitchMapInnerObserver(null);\n\n', 2), ('is.done;\n', 2), ('noRequestOnError()', 2), ('disposables.dispose();\n\n', 2), ('x)', 2), ('ListMultimap<K,', 2), ('ObjectHelper.requireNonNull(supplier.call(),', 2), ('BasicFuseableSubscriber', 2), ('SampleTimedEmitLast<T>', 2), ('EmptyCompletableObserver', 2), ('innerObserver)', 2), ('SerialDisposable', 2), ('assertError(TestSubscriber<?>', 2), ('CommonMatcher', 2), ('shouldDrain', 2), ('(SingleSource<?>)', 2), ('ImmutableMap<String,', 2), ('ReduceSubscriber<T>', 2), ('producerIndex()', 2), ('SingleConverter<T,', 2), ('head;\n', 2), ('almost', 2), ('j);\n\n', 2), ('NullPointerTester();\n', 2), ('NEW_THREAD', 2), ('<pre><code>', 2), ('@}GwtCompatible\n', 2), ('tasks.add(sr);\n\n', 2), ('separate\n', 2), ('WindowBoundaryInnerObserver(WindowBoundaryMainObserver<T,', 2), ('runner;\n\n', 2), ('collection));\n', 2), ("CompletableObserver}'s", 2), ("Observer}'s\n", 2), ('onSuccessSlowPathBackpressured()', 2), ('hats', 2), ('bare', 2), ('"Luther",', 2), ('cc', 2), ('newIndex)', 2), ('TreeSet}', 2), ('throwable.getCause());\n', 2), ('asyncResult)', 2), ('element.\n', 2), ('f.get().get(0));\n', 2), ('sources.poll();\n', 2), ('Maybe.zip(\n', 2), ('R>(t,', 2), ('only:</strong>', 2), ('this.errorMode;\n\n', 2), ('emerges.");\n', 2), ('com.google.common.collect.LinkedHashMultiset;\nimport', 2), ('int)\n', 2), ('scalarEmitted', 2), ('.append(fn)\n', 2), ('10000;\n\n', 2), ('co;\n\n', 2), ('!concurrentItem.isOnNext())', 2), ('Readable}', 2), ('assertEquals(Arrays.asList(100),', 2), ('failOnNonBlockingScheduler}', 2), ('customers.add(customer);\n\n', 2), ('never()).run();\n', 2), ('error.initCause(e);\n', 2), ('AtomicReference<SwitchMapInnerObserver>();\n', 2), ('undirected', 2), ('(syncb.decrementAndGet()', 2), ('Observable.<Integer>empty()\n', 2), ('signalConsumer()', 2), ('NullPointerException("The', 2), ('to.assertError(TestException.class);\n', 2), ('Single.just(1).delaySubscription(100,', 2), ('compareTo(Object', 2), ('remove(Stats', 2), ('EqualCoordinator<T>\n', 2), ('assertTrue(checkResult.getResult()', 2), ('Handle', 2), ('HorrorMovie(),\n', 2), ('R>(source,', 2), ('assertEquals(Short.valueOf((short)', 2), ('inclusive));\n', 2), ('set.add(scheduler.scheduleDirect(new', 2), ('audio', 2), ('sources[i]', 2), ('multipleOnComplete()', 2), ('assertArrayEquals(lists.get(1).toArray(new', 2), ('cursus', 2), ('Observable>()', 2), ('com.iluwatar.composite;\n\nimport', 2), ('habitasse', 2), ('AsyncDisposable[]', 2), ('"Test', 2), ('OS', 2), ('collector.accumulator().accept(newAccum,', 2), ('ordering,', 2), ('"onNext(1)");\n', 2), ('read(byte[]', 2), ('Flowable.defer(new', 2), ('Publisher}\n', 2), ('IllegalAccessException', 2), ('Event(type,', 2), ('ultrices', 2), ('ordinary', 2), ('state);\n', 2), ('.test(3)\n', 2), ('wizardDao;\n', 2), ('access).\n', 2), ('ex.getCause());\n', 2), ('multimap().asMap().entrySet()).testEquals();\n', 2), ('InnerCompletableCache[n', 2), ('ArrayList<Throwable>();\n//\n//', 2), ('.assertValue(2);\n', 2), ('FluentIterable}', 2), ('switchIfEmpty}', 2), ('testSet()', 2), ('<b>asynchronous', 2), ('<X', 2), ('Predicate<T>', 2), ('DisposableMaybeObserver<T>', 2), ('inner.next();\n', 2), ('parent.openComplete(this);\n', 2), ('StringBuffer.class,\n', 2), ('COMPLETED', 2), ('this.iterator', 2), ('testForEach()', 2), ('MaybeObserver&lt;?', 2), ('s.request(m);\n', 2), ('subscribeActual(Subscriber', 2), ('flattenAsObservable(final', 2), ('tasks.dispose();\n', 2), ('onNextSlowPathCreateQueue()', 2), ('multi.skip(-1));\n', 2), ('assertTrue(fo.isCancelled());\n', 2), ('ticket1', 2), ('LOGGER.info("Bound', 2), ('this.time;\n', 2), ('AllSubscriber<T>', 2), ('ConcatMapEagerDelayErrorSubscriber<T,', 2), ('observer.\n', 2), ('assertNotNull(onError.get());\n', 2), ('connect(Consumer', 2), ('Additionally', 2), ('ut', 2), ('readUsingReader(input,', 2), ('{@code\n\n', 2), ('href="http://www.gwtproject.org/">Google', 2), ('D>(s,', 2), ('TestException("First")));\n', 2), ('(only', 2), ('nonexistent', 2), ('outer:\n', 2), ('weather,', 2), ('-4875965440900746268L;\n\n', 2), ('toFlowable().repeat(times);\n', 2), ('onErrorThrows2()', 2), ('continuing', 2), ('1024;', 2), ('Rule', 2), ('Documentation', 2), ('this.isEqual', 2), ('Aristy', 2), ('ArrayList<>(input);\n', 2), ('(cancelOthers)', 2), ('iterator,', 2), ('cast(type,', 2), ('reportDisposableSet();\n', 2), ('SwitchMapCompletableObserver(CompletableObserver', 2), ('o)\n', 2), ('java.util.concurrent.atomic.AtomicBoolean;\nimport', 2), ('observer.onNext(badValue);\n', 2), ('lock.writeLock());\n\n', 2), ('LOGGER.info("Read', 2), ('lazySet(parent);\n', 2), ('CompletableObserver[]', 2), ('open)', 2), ('railReduced.map(new', 2), ('LOCK_SUPPLIER);\n', 2), ('Map<AnEnum,', 2), ('interrupted.\n', 2), ('ScheduledExecutorServices', 2), ('maxElements,', 2), ('apply(ParallelFlowable', 2), ('domainEvent;\n', 2), ('invalidPrefetch()', 2), ('MaybeCallbackObserver<Integer>', 2), ('ListAddBiConsumer.<T>instance());\n', 2), ('Item()))', 2), ('lastTime;\n', 2), ('a";\n', 2), ('capacityHint);\n\n', 2), ('1")));\n//\n//', 2), ('to.', 2), ('falling', 2), ('this.comparators', 2), ('SetFeature[]', 2), ('doOnSubscribe', 2), ('parameter.', 2), ('THREAD_COUNT', 2), ('SchedulerTestHelper.testUnhandledErrorIsDeliveredToThreadHandler(getScheduler());\n', 2), ('e1);\n', 2), ('Callable<List<T>>', 2), ('hold\n', 2), ('(values[j]', 2), ('cachedService', 2), ('java.util.Queue;\n\nimport', 2), ('publishError(final', 2), ('apply(int', 2), ('at.next()', 2), ('1.x,', 2), ('FAILED', 2), ('consumers', 2), ('SafeSubscriberTestException("onNextFail");\n', 2), ('testElementAtWithIndexOutOfBounds()', 2), ('Keeps', 2), ('doExpectCollects(expectedResult,', 2), ('t.sendOnCompleted();\n', 2), ('returns.', 2), ('generateList(freshElement);\n', 2), ('componentType}.', 2), ('sun."});\n', 2), ('w.isDisposed();\n', 2), ('queue.offer(NotificationLite.COMPLETE);\n', 2), ('Customer>', 2), ('tailMap(fromKey,', 2), ('Single.just(2)),', 2), ('setup(final', 2), ('assertTrue(tc.isDisposed());\n', 2), ('testEntrySetEquals()', 2), ('Observable.empty();\n\n', 2), ('ObjectOutputStream(bytes);\n', 2), ('"Tough",', 2), ('bimap;\n', 2), ('7\n', 2), ('CharMatcher', 2), ('implemented.\n', 2), ('timer;\n\n', 2), ('(e1', 2), ('FileVisitResult.CONTINUE;\n', 2), ('generics.\n', 2), ('Flowable.<Long>never()\n', 2), ('commander\n', 2), ('baseClassName', 2), ('end.await();\n', 2), ('this.condition', 2), ('SingleOnErrorReturn<T>(this,', 2), ('i;\n\n', 2), ('write(char[]', 2), ('never()).onNext(any(Integer.class));\n', 2), ('customerDao.getAll());\n', 2), ('https://github.com/google/guava/issues/2996\n', 2), ('vaporizes', 2), ('"hasNext()");\n', 2), ('criteria,', 2), ('Assertions::assertNotNull);\n', 2), ('error-delaying', 2), ('resembles', 2), ('Files.asCharSink(file,', 2), ('Comparator.naturalOrder()))\n', 2), ('design.\n', 2), ('objects?\n', 2), ('cause,', 2), ('previously', 2), ('checkSource(Single.class.getSimpleName(),', 2), ('others[n++]', 2), ('subscribeActual(Observer', 2), ('zip(this,', 2), ('s.advanceTimeTo(1800,', 2), ('"String["', 2), ('sequenceEqual}', 2), ('rights.remove(end.index);\n', 2), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/repeat.on.png"', 2), ('bade', 2), ('(E', 2), ('<R', 2), ('Due', 2), ('traverser', 2), ('this.file', 2), ('Single[i];\n\n', 2), ('Delete', 2), ('Observers.\n', 2), ('10000)', 2), ('3323743579927613702L;\n\n', 2), ('invoked:', 2), ('NONE', 2), ('os)', 2), ('other.dispose();\n', 2), ('5;\n', 2), ('this.entries', 2), ('variable\n', 2), ('"[]";\n', 2), ('Class.forName(basepackage', 2), ('version,', 2), ('setResource(int', 2), ('AsyncDisposable<T>', 2), ('Single.just(1).doOnSubscribe(new', 2), ('iteratorNotification.isOnNext();\n', 2), ('WildcardTypeImpl(new', 2), ('https://github.com/ReactiveX/RxJava/issues/2998\n', 2), ('m.javadoc.indexOf("SingleSource",', 2), ('StandardOpenOption.APPEND);\n', 2), ('(!unbounded', 2), ('mapperThrows()', 2), ('ConcurrentHashMap(int', 2), ('InnerConsumer', 2), ('Latin', 2), ('ObservableToListSingle(ObservableSource<T>', 2), ('Consumer<Object>,', 2), ('ArrayBlockingQueue<Notification<T>>(1);\n', 2), ('numberOfObservers;\n', 2), ('ScanSeedSubscriber<T,', 2), ('ArrayList<>(getMultiset().entrySet());\n', 2), ('#hasObservers()}.\n', 2), ('INPUTS_MASK]));\n', 2), ('Video>', 2), ('testToFutureWithException()', 2), ('scheduler.scheduleDirect(parent);\n\n', 2), ('Iterable<Entry<String,', 2), ('CompletableEmitter', 2), ('source.distinctUntilChanged(new', 2), ('msg', 2), ('others.length)', 2), ('FlatMapSingleSubscriber<T,', 2), ('Splitter.on(PATH_SEPARATOR.value()).split(JAVA_CLASS_PATH.value()))', 2), ('k++)', 2), ('assertNull(aste);\n//', 2), ('Platform()', 2), ('Observable.timer(100,', 2), ('InnerCompletableObserver', 2), ('testCancelledTaskRetention()', 2), ('FlatMapCompletableObserver(CompletableObserver', 2), ('constructed\n', 2), ('comparer,', 2), ('errorCount.incrementAndGet();\n', 2), ('MaybeEmitter<T>', 2), ('FlowableProcessor<String>', 2), ('SafeSubscriberTestException("onErrorFail");\n', 2), ('handleLine(String', 2), ('SimpleFileWriter', 2), ('src,', 2), ('").append(className).append("', 2), ('assertFalse(DisposableHelper.trySet(ref,', 2), ('itemTimeoutObservableSource;\n\n', 2), ('Completable.complete().delay(1,', 2), ('onOverflow;\n\n', 2), ('badValue', 2), ('.takeUntil(new', 2), ('child.onSubscribe(serial);\n\n', 2), ('throwException', 2), ('task.setRest(new', 2), ('169,', 2), ('OptionalInt', 2), ('Timed<T>(t,', 2), ('Files\\\\Apache', 2), ('pub;\n', 2), ('links', 2), ('arg2)\n', 2), ('Result[]', 2), ('assertError(List<Throwable>', 2), ('of(\n', 2), ('EqualObserver<T>(this);\n', 2), ('observer}\n', 2), ('Object[0],', 2), ('TestHelper.checkDisposed(Observable.just(1).hide()\n', 2), ('timestampWithScheduler2()', 2), ('(spliterator.getExactSizeIfKnown()', 2), ('count()', 2), ('InnerObserver<U>', 2), ('predicate.test(++retries,', 2), ('rx2.io-priority}', 2), ('Configures', 2), ('Exception("test', 2), ('assertTrue(ex.getCause().getMessage().contains("Boo!"));\n', 2), ('unsubscribeWhenSubscribeOnAndUnsubscribeOnAreOnDifferentThreads()', 2), ('dispose(S', 2), ('exception"', 2), ('finishes\n', 2), ('vanishes', 2), ('org.mockito.runners.MockitoJUnitRunner;\n\nimport', 2), ('Using</a>\n', 2), ('serves', 2), ('zipIterableOneIsNull()', 2), ('onSubscribe));\n', 2), ('(checkTerminated(done,', 2), ('DisposeOnCancel', 2), ('WrappingScheduledExecutorService', 2), ('inner.length;\n\n', 2), ('assertNotNull(children);\n', 2), ('itemTimeoutIndicator)', 2), ('rutrum', 2), ('assertTrue(appender.logContains("Sliding', 2), ('OtherSubscriber(SingleObserver<?', 2), ('key.channel();\n', 2), ('(GroupedUnicast<K,', 2), ('SerializedObserver(@NonNull', 2), ('system,', 2), ('onErrorReturnItem(final', 2), ('observer.onNext(4);\n', 2), ('code\n', 2), ('singleSupplier', 2), ('wrap(final', 2), ('times.', 2), ('observer.setWaiting();\n', 2), ('TakeUntilOtherMaybeObserver(TakeUntilMainMaybeObserver<?,', 2), ('formatFeatureSet(features));\n\n', 2), ('lists.add(xs);\n', 2), ('SerializedObserver<T>(t),\n', 2), ('live', 2), ('ts.assertNoErrors();\n//', 2), ('inOrder.verify(observer).onNext(0L);\n', 2), ('issue', 2), ('value[0]);\n', 2), ('graph', 2), ('elementAtOrErrorNoElement()', 2), ('baseClassName);\n\n', 2), ('getItems()', 2), ('empty");\n', 2), ('concatMapDelayError(\n', 2), ('ImmutableTable.of())\n', 2), ('innerComplete(SwitchMapInnerObserver', 2), ('last4.get(2));\n', 2), ('?>[]>', 2), ('found");\n', 2), ('startWithObservable()', 2), ('fs.cancel(true);\n', 2), ('Builder()', 2), ('GWT.\n', 2), ('assertTrue(list.isEmpty());\n', 2), ('disposeState)', 2), ('SwitchMapSingleObserver<R>(this);\n\n', 2), ('w.schedulePeriodically(action,', 2), ('for:', 2), ('(TRight', 2), ('resources.delete(w);\n', 2), ('NextIterator<T>(source,', 2), ('Assert.assertEquals(Long.valueOf(-1),', 2), ('newLatchedObserver()', 2), ('e.setDisposable(d);\n', 2), ('assertTrue(subject.hasObservers());\n\n', 2), ('explicitly', 2), ('found.\n', 2), ('Flowable.concat(\n', 2), ('performance.\n', 2), ('baseTypeName);\n\n', 2), ('#lift}.', 2), ('java.util.concurrent.atomic}', 2), ('-1185974347409665484L;\n', 2), ('failure",', 2), ('p.active', 2), ('lastUnit);\n', 2), ('onNextThenOnCompleteTwice()', 2), ('SingleObserver<List<Integer>>', 2), ('Consumer<List<Boolean>>()', 2), ('content,', 2), ('org.junit.jupiter.api.Assertions.assertTimeout;\nimport', 2), ('evictedGroups)', 2), ('documents\n', 2), ('TreeBasedTable.create()', 2), ('Iterator<CakeLayer>', 2), ('selector.\n', 2), ('mongoClient;\n', 2), ('errors.addThrowable(new', 2), ('.takeLast(0).count().blockingGet();\n', 2), ('fakePool.runAll();\n', 2), ('verify(sub,', 2), ('parameters,', 2), ('(stack)', 2), ('<p>Any', 2), ('Album', 2), ('Subscribing', 2), ('TestException("Inner', 2), ('soElement(offset,', 2), ('first.or(0.5);', 2), ('Flowable.merge(os).subscribe(o);\n\n', 2), ('TimeoutFallbackObserver(Observer<?', 2), ('5638352172918776687L;\n\n', 2), ('START', 2), ('.isEmpty();\n', 2), ('result.', 2), ('MaybeMap.MapMaybeObserver<T,', 2), ('Iterator<Flowable<T>>', 2), ('monad', 2), ('wip.getAndIncrement();\n\n', 2), ('Map<Headers,', 2), ('DisposableHelper.isDisposed(s.get());\n', 2), ('MultisetFeature[]', 2), ('(resources.add(cl))', 2), ('manipulation', 2), ('modifiable.\n', 2), ('aboveSamplesGreater()', 2), ('RxJavaPlugins.initComputationScheduler(c));\n', 2), ('this.boundaryObserver', 2), ('WithExceptionalConstructor', 2), ('"{\\"id\\":', 2), ('io.reactivex.internal.observers.DeferredScalarDisposable;\nimport', 2), ('getInterestedOps()', 2), ('#onComplete()}\n', 2), ('SpscLinkedArrayQueue<Object[]>', 2), ('assertEquals(Long.MIN_VALUE,', 2), ('testOnStartCalledOnceViaLift()', 2), ("'as'\n", 2), ('mainCompletesinnerErrorDelayed()', 2), ('list.listIterator(index);\n', 2), ('backingMap;\n\n', 2), ('com.google.common.collect.PeekingIterator;\nimport', 2), ('actions.stream()\n', 2), ('wip.compareAndSet(0,', 2), ('r.readLine())', 2), ('lands', 2), ('values.set(index,', 2), ('PublishSubject<String>', 2), ('f.concatMapMaybeDelayError(\n', 2), ('onErrorMapper;\n\n', 2), ('classInfo(Class<?>', 2), ('sorted(@NonNull', 2), ('assertError(TestObserver<?>', 2), ('DirectedNetworkConnections<>(\n', 2), ('to.assertFailure(TestException.class,', 2), ('"iterator()");\n', 2), ('contract.\n', 2), ('failed");\n', 2), ('Concurrent\n', 2), ('this.validator.validator;\n', 2), ('safe.onComplete();\n//', 2), ('(it.hasNext())', 2), ('java.util.concurrent.ConcurrentSkipListMap;\nimport', 2), ('f.get().get(2));\n', 2), ('inOrder.verify(observer).onNext("one");\n', 2), ('!args.isOnNext())', 2), ('null").apply(this));\n', 2), ('Flowable.fromIterable(Arrays.asList(1,', 2), ('cause.getCause())', 2), ('AssertionError("Outer', 2), ('ObservableSource#subscribe(Observer)}', 2), ('allowFatal;\n\n', 2), ('contains:', 2), ('(add(ps))', 2), ('java.nio.file.Path;\nimport', 2), ('SingleSubject.create()\n', 2), ('result.add(new', 2), ('resumeFunction,', 2), ('TestLogHandler', 2), ('(Stream<Customer>', 2), ('f.get(Long.MAX_VALUE,', 2), ('SubscriberFusion.newTest(QueueFuseable.ANY);\n\n', 2), ('com.iluwatar.hexagonal.domain.LotteryTicketId;\nimport', 2), ('endOfData();\n', 2), ('ObjectHelper.requireNonNull(observer,', 2), ('bowl.\n', 2), ('onLift)', 2), ('RxJavaPlugins.onCompletableError(new', 2), ('3).toSortedList(new', 2), ('writer)', 2), ('predecessor,', 2), ('futureResult', 2), ('(iMax', 2), ('createBuffer();\n', 2), ('on.</dd>\n', 2), ('10).takeLast(1).subscribe(s);\n', 2), ('TimeoutException());\n\n', 2), ('checkTerminate()', 2), ('(!worker.disposed)', 2), ('testScheduler.advanceTimeBy(2000,', 2), ('pub.subscribe(s);\n', 2), ('innerClose(boolean', 2), ('cakeLayerInfos)', 2), ('FileCharSourceFactory', 2), ('ForwardingImmutableSet<E>', 2), ('atomically.\n', 2), ('10000;\n', 2), ('interfaceType,', 2), ('absent', 2), ('IOException()),', 2), ('com.google.common.collect.testing.features.CollectionSize.SEVERAL;\nimport', 2), ('inCompletable', 2), ('ts.assertFailure(IOException.class)\n', 2), ('TestException("Outer"));\n\n', 2), ('Single.fromPublisher(Flowable.just(1))\n', 2), ('serializer', 2), ('request(n);\n', 2), ('.thenAccept(\n', 2), ('Implementors', 2), ('(ObservableSource<?', 2), ('Sven', 2), ('compares', 2), ('r1);\n', 2), ('(error.equals(cause))', 2), ('assertTrue(multimap().asMap().get(key)', 2), ('toFlowable().flatMap(mapper);\n', 2), ('Thread.sleep(3000);\n', 2), ('TestHelper.emit(us,', 2), ('<p>{@link', 2), ('sibling', 2), ('minFrequency', 2), ('q.lazySet(null);\n', 2), ('fashion\n', 2), ('token', 2), ('")");\n', 2), ('gson', 2), ('IntervalRangeSubscriber', 2), ('sources[0].subscribe(s);\n', 2), ('spConsumerNode(nextNode);\n', 2), ('action);\n', 2), ('deserialize(\n', 2), ('@GwtIncompatible}', 2), ('q.setFirst(NotificationLite.error(t));\n', 2), ('offer(v2);\n', 2), ('videos.put(2,', 2), ('-6671519529404341862L;\n\n', 2), ('elementAtIndex1OnEmptySource()', 2), ('upstreamCount.incrementAndGet();\n', 2), ('testLastOfEmptyReturnsEmpty()', 2), ('testViewSerialization()', 2), ('main\n', 2), ('Thread.NORM_PRIORITY)));\n\n', 2), ('fastPathEmitMax(b,', 2), ('hasValue;\n\n', 2), ('@Param({"10",', 2), ('iteratorThrows()', 2), ('serialized.\n', 2), ('MapMaker', 2), ('postFulfillment();\n', 2), ('9));\n', 2), ('fromDto;\n', 2), ('BaseTck<Timed<Integer>>', 2), ('otherObserver;\n', 2), ('CompletableObservers', 2), ('com.iluwatar.partialresponse;\n\nimport', 2), ('subscribe(MaybeEmitter<Integer>', 2), ('achieve', 2), ('List<UnicastSubject<T>>', 2), ('super(0);\n', 2), ('Flowable.never();\n', 2), ('(sync.decrementAndGet()', 2), ('(say,', 2), ('Semaphore(0);\n', 2), ('Map>>', 2), ('requested.\n', 2), ("Publisher'\\r\\n", 2), ('//TLTL', 2), ('Observer}\n', 2), ('w);\n\n', 2), ('otherArray;\n\n', 2), ('magical', 2), ('innerNext()', 2), ('"124sad"),\n', 2), ('UTF_8);\n', 2), ('getEventStream(final', 2), ('toArray(T[]', 2), ('countersCollectionName)', 2), ('s.advanceTimeTo(1300,', 2), ('testCovarianceOfMerge()', 2), ('(LegacyComparable)', 2), ('*/\n@Documented\n@Target(value', 2), ('future.");\n', 2), ('"UTF-8")))', 2), ('higherKey(K', 2), ("Maybe'\\r\\n", 2), ('FreshInvocationHandler', 2), ('Exceptions.throwIfFatal(e);\n\n', 2), ('Language', 2), ('drainAndCancel();\n', 2), ('parentBuilder)', 2), ('task.setFirst(f1);\n\n', 2), ('(pendingWrites', 2), ('this.numElements', 2), ('assertTrue(fo.isDisposed());\n', 2), ('List<Single<Integer>>', 2), ('java.lang.annotation.*;\n\n/**\n', 2), ('hashCodeSum', 2), ("Single'\\r\\n", 2), ('from}\n', 2), ('subject.timeInterval(testScheduler);\n', 2), ('.takeUntil(s)\n', 2), ('ImmutableBiMap<Object,', 2), ('toMaybe}', 2), ('TestSubscriber.create(0L);\n\n', 2), ('fromFutureTimeout()', 2), ('remove(ps);\n', 2), ('assertEquals(Long.valueOf(0),', 2), ('assertFalse(cd.isDisposed());\n\n', 2), ('suppressForCheckedList()', 2), ('assertNull(onError.get());\n', 2), ('//here', 2), ('JoinSupport', 2), ('map.put("name",', 2), ('itemTimeoutIndicator);\n', 2), ('.elementAtOrError(3)\n', 2), ('testErrorPassThru()', 2), ('innerLatch.countDown();\n', 2), ('server:-");\n', 2), ('true)\n@SuppressWarnings("serial")', 2), ('MaybeObservers.\n', 2), ('assertFalse(o.hasCustomOnError());\n', 2), ('delay.</dd>\n', 2), ('onErrorComplete(final', 2), ('java.util.concurrent.CopyOnWriteArraySet;\nimport', 2), ('a.onNext(t);\n', 2), ('SwitchMapInnerObserver(this);\n\n', 2), ('@Rule\n', 2), ('doOnError(Consumer<?', 2), ('FlatMapCompletableObserver<T>', 2), ('io.reactivex.functions.Consumer;\n\n/**\n', 2), ('depends', 2), ('.assertValueCount(500)\n', 2), ('onNextNoSubscription();\n', 2), ('avoids', 2), ('MaybeObserver<Object>', 2), ('Observer<List<Integer>>', 2), ('cd.assertInnerError(1,', 2), ('Function}</a>.\n', 2), ('Iterator#next()}', 2), ('Map<Character,', 2), ('SpscArrayQueue<Object>', 2), ('}.visit(type);\n', 2), ('validated)', 2), ('LongAdder();', 2), ('list.add(freshElement);\n', 2), ('rights.values())', 2), ('parent.onTimeoutError(idx,', 2), ('requires\n', 2), ('"four");\n', 2), ('onCancel\n', 2), ('particular,', 2), ('OneSizeTestContainerGenerator<Map<K,', 2), ('allFeatures', 2), ('needed,', 2), ('consumed++;\n\n', 2), ('TypeVariable)', 2), ('fromInclusive,', 2), ('RxJavaPlugins.setOnObservableSubscribe(new', 2), ('Maybe<Void>', 2), ('associates', 2), ('event,', 2), ('t.join();\n', 2), ('TestResourceCompletableObserver();\n', 2), ('2).flatMap(new', 2), ('this.fileName;\n', 2), ('freshness', 2), ('topShelf.add(factory.createPotion(PotionType.HEALING));\n', 2), ('java.util.concurrent.BlockingDeque;\nimport', 2), ('RxJavaPlugins.onObservableError(new', 2), ('Single.just(7),', 2), ('v3),', 2), ('HashSet<>(MinimalCollection.of(elements));\n', 2), ('testWindow()', 2), ('completable,', 2), ('assertNotNull(first);\n', 2), ('actual.onNext(0L);\n', 2), ('shift', 2), ('convertDatesToString(Result', 2), ('requested.set(0);\n\n', 2), ('.delay(0,', 2), ('<i>not</i>', 2), ('assertSame(instance1,', 2), ('guarded', 2), ('com.google.common.base.Predicates;\nimport', 2), ('you.");\n', 2), ('"exception', 2), ('invalidDeferredRequest()', 2), ('ss.observerCount());\n', 2), ('testJustSingleItemObservable()', 2), ('func)', 2), ('arrays,', 2), ('upstreamCount.get());\n', 2), ('getAndAdd(x);\n', 2), ('syncArrayHidden()', 2), ('exceptionList', 2), ('org.mockito.Mockito.when;\n\n/**\n', 2), ('2L);\n', 2), ('runNext()', 2), ('dolor', 2), ('RxJavaPlugins.onAssembly(this);\n', 2), ('visitClass(Class<?>', 2), ('.append(countLine(s,', 2), ('ranging', 2), ('o.scan(0,', 2), ('Optional<Number>', 2), ('className,', 2), ('a.onNext(value);\n', 2), ('ObjectHelper.requireNonNull(keySelector.apply(value),', 2), ('Like', 2), ('Handler<E>', 2), ('maybeSupplier)', 2), ('emits.\n', 2), ('TRAMPOLINE', 2), ('last4.get(1));\n', 2), ('ts.onError(e);\n', 2), ('concatReportsDisposedOnError()', 2), ('RetrySubscriber<T>', 2), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/switchifempty.m.png"', 2), ('casting,', 2), ('windows', 2), ('K>)', 2), ('assertTrue(q.offer(5,', 2), ('ImmutableMap.of();\n', 2), ('Users', 2), ('java.util.Iterator<T>', 2), ('zipper);\n', 2), ('exceptionType;\n', 2), ('MergeWithObserver(Subscriber<?', 2), ('implementation,', 2), ('writeFile(FileWriter', 2), ('assertTrue(Comparators.isInStrictOrder(asList(0,', 2), ('Object>,', 2), ('len;\n', 2), ('ws.add(w);\n', 2), ('ConcatMapMaybeSubscriber<T,', 2), ('SingleDelayWithPublisher<T,', 2), ('(compareAndSet(d,', 2), ('QueueFuseable.NONE)', 2), ('com.google.common.base.Charsets.UTF_8;\n\nimport', 2), ('refCount()', 2), ('.blockingSubscribe(ts);\n\n', 2), ('totalElementsCount', 2), ('onSuccess;\n', 2), ('stop\n', 2), ('FlowableRange(1,', 2), ('Observable.<Media>', 2), ('nextValue', 2), ('normalLongRequestExact()', 2), ('File.toURI', 2), ('assertEquals("name",', 2), ('throwIf(closed);\n', 2), ('java.lang.annotation.RetentionPolicy.CLASS;\n\n/**\n', 2), ('h;\n', 2), ('Service}\n', 2), ('cause.getCause();\n', 2), ("'/');\n\n", 2), ('ByteBuffer.allocate(1024);\n', 2), ('assertNotEquals(Thread.currentThread().getName(),', 2), ('cons', 2), ('Car(carProperties);\n\n', 2), ('(WildcardType)', 2), ('handler");\n', 2), ('m.getName().substring(3));\n', 2), ('64,', 2), ('assertTrue(ss.hasObservers());\n', 2), ('queue.isEmpty())', 2), ('identity-based\n', 2), ('"empty', 2), ('linked', 2), ('Blackhole.consumeCPU(cycles);\n', 2), ('pairs,', 2), ('dataSource;\n\n', 2), ('fromPublisher()', 2), ('f.concatMapSingleDelayError(\n', 2), ('assertNotNull(state[2]);\n', 2), ('(marked', 2), ('requestRace()', 2), ('isolate', 2), ('w.schedulePeriodically(new', 2), ('CompletableSubject[]', 2), ('MongoClient', 2), ('DisposableHelper.dispose(oo);\n', 2), ('input}', 2), ('times(0)).onNext("one");\n', 2), ('pp.hasSubscribers())', 2), ('Completable.fromRunnable(run)\n', 2), ('.last(4)\n', 2), ('Subscriber.onError",', 2), ('ThreadLocalRandom.current().nextLong(10))));\n', 2), ('randomIntFrom0to(int', 2), ('TimeoutObserver(Observer<?', 2), ('exceptions.</li>\n', 2), ('emitting,', 2), ('artificial', 2), ('setFuture(Future<?>', 2), ('(cancelled.compareAndSet(false,', 2), ('Scheduler#scheduleDirect(Runnable)}', 2), ('wildcard");\n', 2), ('RefCount</a>\n', 2), ('found.");\n', 2), ('List<Exception>', 2), ('});\n\n\n', 2), ('mainSubscription;\n\n', 2), ('ahead!");\n', 2), ('covariant\n', 2), ('failure")).subscribe(\n', 2), ('Thread.getDefaultUncaughtExceptionHandler();\n', 2), ('grandParent);\n', 2), ("cls.getName().replace('.',", 2), ('Scheduler.clockDriftTolerance();\n\n', 2), ('GwtIncompatible', 2), ('visitation', 2), ('ObjectHelper.requireNonNull(other.iterator(),', 2), ('lastMethodCalled);\n', 2), ('Throwable("test");\n', 2), ('error.addThrowable(e);\n', 2), ('samples', 2), ('Consumer<Throwable>,', 2), ('InstantPeriodicTask(decoratedRun,', 2), ('RuntimeException("failed', 2), ('s.onSubscribe(this);\n', 2), ('BlockingSubscriber<T>', 2), ('qs[j];\n', 2), ('future.cancel(true));}.\n', 2), ('cb.await();\n', 2), ('try-with-resources).\n', 2), ('initialBytes.length);\n', 2), ('Arrays.copyOf(a,', 2), ('verify(underlying).dispose();\n\n', 2), ('addCap(r,', 2), ('Validate', 2), ('to.assertError(ex);\n', 2), ('Maps.newConcurrentMap();\n', 2), ('ScalarSubscription<Integer>', 2), ('PerfSubscriber(bh);\n', 2), ('leave(-missed);\n', 2), ('Platform', 2), ('assertEquals(ImmutableSortedSet.of(),', 2), ('writable.', 2), ('<em>not</em>', 2), ('assertTrue(safe.isUnsubscribed());\n', 2), ('otherSource.subscribe(bo);\n\n', 2), ('href="https://github.com/ReactiveX/RxJava/wiki/Connectable-Observable-Operators">RxJava', 2), ('Single.just(3))\n', 2), ('(nextDD', 2), ('Publisher[8];\n', 2), ('suppressForArraysAsList()', 2), ('ConcatMapCompletableObserver<?>', 2), ('notifications.dematerialize();\n\n', 2), ('super.write(str,', 2), ('interrupt', 2), ('BlockingHelper.awaitForComplete(cdl,', 2), ('ImmutableSortedMap.of())\n', 2), ('deleteAll()', 2), ('first4.get(2));\n', 2), ('RxJavaSingleExecutionHook()', 2), ('delegate.toString();\n', 2), ('ios', 2), ('get().request(n);\n', 2), ('null")).apply(this));\n', 2), ('Set<K>', 2), ('shifted', 2), ('seed,', 2), ('delegate().submit(task);\n', 2), ('bs2);\n', 2), ('Just</a>\n', 2), ('unsubscribeAction', 2), ('CompletableTransformer}', 2), ('value.getAndSet(null);\n', 2), ('assertEquals(expectedDateValues,', 2), ('ss.subscribe(new', 2), ('CallbackCompletableObserver', 2), ('Flowable.just(1).collect(new', 2), ('onErrorComplete(Functions.alwaysTrue());\n', 2), ('crash', 2), ('NazgulName', 2), ('drainRequestWhenLimitReached()', 2), ('message,', 2), ('assertTrue(rmo.errors.isEmpty());\n', 2), ('times(1)).onError(any(Throwable.class));\n\n', 2), ('rightIndex++;\n\n', 2), ('-2177128922851101253L;\n\n', 2), ('objects[0]', 2), ('TestObserver&lt;Void&gt;', 2), ('onAfterTerminate\n', 2), ('serializes', 2), ('now;\n', 2), ('"James', 2), ('System.out.printf("After:', 2), ('parent.innerSuccess(value,', 2), ('free.\n', 2), ('valueless', 2), ('conditions.\n', 2), ('w.schedule(r,', 2), ('Finalizer', 2), ('apply(Runnable', 2), ("Publisher's", 2), ('assuming', 2), ('sequentialDelayError}', 2), ('(compareAndSet(f,', 2), ('TestSubscriber<String>(0L);\n', 2), ('actual.run();\n', 2), ('16);\n', 2), ('WriteLock', 2), ('Entry[length];\n', 2), ('methodDefEnd', 2), ('MaybeDelaySubscriptionOtherPublisher<T,', 2), ('Prevents', 2), ('itemTimeoutPublisher;\n\n', 2), ('test(Boolean', 2), ('operator;\n\n', 2), ('c.subscribe(shared);\n', 2), ('ParallelFlowable#sequentialDelayError(int)\n', 2), ('AbstractMapBasedMultiset<E>', 2), ('o.cancel();\n', 2), ('elementAtOrErrorIndex1OnEmptySource()', 2), ('shared.onError(e);\n', 2), ('longBitsToDouble(current);\n', 2), ('byte[0]);\n', 2), ('silently', 2), ('ObjectHelper.requireNonNull(lift,', 2), ('empty.', 2), ('apply(SingleSource', 2), ('identifier\n', 2), ('LOGGER.info(new', 2), ('TimeUnit.MINUTES);\n', 2), ('HashBasedTable<R,', 2), ('1577321883966341961L;\n\n', 2), ('initialState)', 2), ('sets,', 2), ('TestHelper.checkDisposed(Flowable.just(1,', 2), ('interface,\n', 2), ('Logging', 2), ('times.get(i', 2), ('*/\n@GwtIncompatible\nabstract', 2), ('"3",', 2), ('map.put("age",', 2), ('bo.dispose();\n\n', 2), ('checkNotNull(data);\n', 2), ('TLeft>();\n', 2), ('SingleZipIterable<T,', 2), ('"2:2")}.\n', 2), ('this);\n\n', 2), ('onErrorCrash()', 2), ('IllegalStateException("onNext', 2), ('compare(Object', 2), ('LOGGER.info("Commit', 2), ('WildcardType}', 2), ('f.takeLast(1);\n', 2), ('transmitted', 2), ('create(Multisets.inferDistinctElements(elements));\n', 2), ('Single.amb(singles).test();\n\n', 2), ('.concatMapSingle(Functions.justFunction(Single.error(new', 2), ('dragonSlayer', 2), ('DebounceTimedObserver<T>', 2), ('"quis', 2), ('distinctKeys', 2), ('*/\n@AndroidIncompatible', 2), ('context;\n', 2), ("other's", 2), ('com.google.common.collect.Lists;\n\nimport', 2), ('sref.get().onComplete();\n', 2), ('"Adventure', 2), ('com.google.common.graph.GraphConstants.EXPECTED_DEGREE;\n\nimport', 2), ('necessary.\n', 2), ('(SubscriptionHelper.validate(this.upstream,', 2), ('SpscLinkedArrayQueue<T>(bufferSize());\n', 2), ('TreeTraverser}', 2), ('collection.add(key);\n', 2), ('GenericArrayTypeImpl(componentType);\n', 2), ('Executors.newCachedThreadPool();\n\n', 2), ('Completable.never(),', 2), ('executor.shutdownNow();\n', 2), ('src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/B.mostRecent.png"', 2), ('Java8', 2), ('java.util.List;\n\n\n/**\n', 2), ('SpscLinkedArrayQueue<Object>(16);\n', 2), ('options;\n\n', 2), ('WeaponFactory', 2), ('FuseToObservable<Boolean>', 2), ('Scheduler},\n', 2), ('pass\n', 2), ('OnNext(t),', 2), ('assertEquals(TimeUnit.SECONDS.hashCode()', 2), ('//NTLNTL\n', 2), ('ballThread.stopMe();\n', 2), ('testSameSourceMultipleIterators()', 2), ('consistent', 2), ('root)', 2), ('incompatible', 2), ('Drop', 2), ('eventLoop.createWorker();\n', 2), ('FreshValueGenerator.class.getDeclaredMethods())', 2), ('callError', 2), ('much', 2), ('o.all(new', 2), ('1);', 2), ('nextNode', 2), ('lift', 2), ('asserts', 2), ('java.io.FileNotFoundException;\nimport', 2), ('setOnce(AtomicReference<Disposable>', 2), ('(makeDone)', 2), ('actual.onError(npe);\n', 2), ('io.reactivex.internal.schedulers.ImmediateThinScheduler;\nimport', 2), ('SingleSource<?>', 2), ('.blockingGet();\n\n', 2), ('goodValue', 2), ('renaming', 2), ('LineBuffer()', 2), ('com.google.common.eventbus;\n\nimport', 2), ('StackOverflowException\n', 2), ('nullError()', 2), ('LinkedHashMap<K,', 2), ('this.onOverflow', 2), ('900,', 2), ('index));\n', 2), ('CompletableObserver>()', 2), ('defer', 2), ('MaybeFlatMapNotification<T,', 2), ('entry.getKey(),', 2), ('flatMapCompletable(final', 2), ('true},', 2), ('verify(o).onNext(2);\n', 2), ('systems', 2), ('MaybeObserver}\n', 2), ('Manifest();\n', 2), ('actual.onNext(vr);\n', 2), ('ObjectHelper.requireNonNull(onRequest,', 2), ('mainSubscription.get().request(lim);\n', 2), ('EmptySubscription.complete(actual);\n', 2), ('NullPointerException("subscribeActual', 2), ('ObjectHelper.requireNonNull(rightEnd.apply(right),', 2), ('observe\n', 2), ('io.reactivex.internal.subscribers;\n\n/**\n', 2), ('testElementAtOrDefaultWithIndexOutOfBounds()', 2), ('scalar-sourced', 2), ('resources.', 2), ('.suppressing(suppressForHashSet())\n', 2), ('on,', 2), ('downloaded.\n', 2), ('BasicFuseableObserver<T,', 2), ('Event(String', 2), ('((URLClassLoader)', 2), ('s.onSubscribe(sd);\n\n', 2), ('equivalence)', 2), ('Consumer<List<Object>>()', 2), ('super.put(key,', 2), ('car', 2), ('#poll()}</li>\n', 2), ('TestHelper.checkDisposed(Observable.range(1,', 2), ('!delayError)', 2), ('100)', 2), ('onSuccessNull()', 2), ('optionalInt', 2), ('URL[0]);\n', 2), ('bidirectional\n', 2), ('.append(lc).append(")").append("\\r\\n\\r\\n");\n', 2), ('FlatMapCompletableMainSubscriber<T>', 2), ('"Scheduler:",', 2), ('14.0)', 2), ('from}.', 2), ('generates', 2), ('com.google.common.collect.testing.TestStringSetGenerator;\nimport', 2), ('Function<ConnectableObservable,', 2), ('ConcurrentLinkedQueue<>();\n', 2), ('Retrieves', 2), ('ws;\n\n', 2), ('methods)', 2), ('31)', 2), ('SpscArrayQueue<U>(bufferSize);\n', 2), ('BiFunction<Completable,', 2), ('System.arraycopy(initialBytes,', 2), ('Empty', 2), ('UnsupportedOperationException.\n', 2), ('fuseable",', 2), ('multimap().size());\n', 2), ('Reader.\n', 2), ('super.now(unit)', 2), ('timeoutIndicator)', 2), ('.concatMap(Functions.<Observable<Integer>>identity())\n', 2), ('UIEventLoopScheduler()', 2), ('firstObservable', 2), ('.observeOn(Schedulers.io())\n', 2), ('set.isDisposed();\n', 2), ('lo.latch.await();\n', 2), ('SampleTimedEmitLast<T>(serial,', 2), ('SimpleDateFormat.', 2), ('assertTrue(appender.logContains("Message', 2), ('tye\n', 2), ('ArrayDeque<InnerQueuedObserver<R>>', 2), ('Function<Boolean,', 2), ('.assertValueCount(512)\n', 2), ('lines,', 2), ('s.onSuccess(null);\n', 2), ('washingMachine.wash();\n', 2), ('SwitchIfEmptyMaybeObserver<T>(observer,', 2), ('accounting)', 2), ('diff,', 2), ('DelayMaybeObserver<T,', 2), ('subscribeConsumerConsumerWithError()', 2), ('p,', 2), ('requirement', 2), ('DistinctObserver<T,', 2), ('concept', 2), ('}).subscribe(input.newSubscriber());\n', 2), ('won;\n\n', 2), ('in.readObject();\n', 2), ('(Integer)a[0]', 2), ('java.util.concurrent.SynchronousQueue;\nimport', 2), ('Long[]', 2), ('ClassInfo("a/b/Foo.class",', 2), ('(!latch.await(30,', 2), ('createFailedPublisher()', 2), ('covariant', 2), ('Completable}\n', 2), ('movie|",', 2), ('Disposable,\n', 2), ('Cameron",', 2), ('directly.\n', 2), ('SpscLinkedArrayQueue<C>(bufferSize());\n', 2), ('g.get());\n', 2), ('sit', 2), ('fromKey)', 2), ('o.dematerialize();\n\n', 2), ('IllegalArgumentException("items', 2), ('OtherSubscriber(MaybeObserver<?', 2), ('X_RETURNER);\n', 2), ('Completable.merge(new', 2), ('dripping', 2), ('(MaybeSource<?>)', 2), ('WeakReference<?>', 2), ('height="239"', 2), ('eventLoop;\n', 2), ('query', 2), ('assertEquals(num,', 2), ('life', 2), ('child.onError(ex);\n', 2), ('execTime', 2), ('assertEquals(integers.get(2),', 2), ('toRequest', 2), ('times.add(System.currentTimeMillis());\n', 2), ('SerializedObserver', 2), ('UserConverter();\n\n', 2), ('OnErrorNotImplementedException}.\n', 2), ('innerComplete(SwitchMapMaybeObserver<R>', 2), ('actual.onNext(c);\n\n', 2), ('MaybeSources.', 2), ('MutableClassToInstanceMap}', 2), ('super(handler,', 2), ('source.concatMapSingle(new', 2), ('Collection");\n', 2), ('together.\n', 2), ('many\n', 2), ('testOnCompletedThrows()', 2), ('TestingExecutors.noOpScheduledExecutor();\n', 2), ('numbers1', 2), ('ambRace()', 2), ('WellBehavedMap.wrap(new', 2), ('AtomicAction', 2), ('MapMode.READ_ONLY);\n', 2), ('AtomicReference<WindowBoundaryInnerObserver<T,', 2), ('getAll()', 2), ('expected.put(k1(),', 2), ('UdpLoggingClient("Client', 2), ('SwitchMapSingleSubscriber<T,', 2), ('Dummies.DummyScheduledThreadPoolExecutor.class);\n', 2), ('RainbowFish}', 2), ('sa.missedRequested.set(1);\n\n', 2), ('flatMap.subscribeWith(new', 2), ('stream.readObject());\n', 2), ('iterator,\n', 2), ('Math.min(chunk,', 2), ('film",', 2), ('(idx1', 2), ('thread");\n', 2), ('}).\n', 2), ('name[0]);\n', 2), ('subscribers[i];\n', 2), ('(TLeft', 2), ('SkipUntilMainSubscriber<T>', 2), ('elementAtOrErrorInvalidIndex()', 2), ('java.util.concurrent.FutureTask;\nimport', 2), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/onErrorReturn.png"', 2), ('Waiting', 2), ('expanded', 2), ('"bar2"),\n', 2), ('Single.just(1));\n\n', 2), ('onNext(CompletableSource', 2), ('perform()', 2), ('ds.dispose();\n', 2), ('warm', 2), ('becomes', 2), ('key:', 2), ('happens,', 2), ('count);\n\n', 2), ('this.emitLast', 2), ('suppressForPriorityQueue()', 2), ('testCompletePassThru()', 2), ('ticketsCollection;\n', 2), ('condition.await();\n', 2), ('skip));\n', 2), ('t.sendOnNext("two");\n\n', 2), ('wet."});\n', 2), ('controls', 2), ('BlockingQueue<String>', 2), ('parameter\n', 2), ('tracks', 2), ('Maybe.just(1)),', 2), ('q.isEmpty(),', 2), ('ObjectHelper.requireNonNull(disposer,', 2), ('100', 2), ('Schedulers.newThread(),', 2), ('io.reactivex.exceptions.Exceptions;\n\n/**\n', 2), ('io.reactivex.Scheduler.Worker#dispose()}.\n', 2), ('paramType', 2), ('sun', 2), ('onSuccessCleansUp()', 2), ('w.schedule(Functions.emptyRunnable(),', 2), ('idempotent', 2), ('elementAtIndex1WithDefaultOnEmptySource()', 2), ('params', 2), ('JsonElement', 2), ('o.throttleWithTimeout(500,', 2), ('allOdd', 2), ('((ServerSocketChannel)', 2), ('s.onError(null);\n', 2), ('shutdown");\n', 2), ('s.onNext(randomEvent(type,', 2), ('buffers.clear();\n', 2), ('assertEquals(max', 2), ('500,', 2), ('LeftRightEndObserver(this,', 2), ('Nolan",', 2), ('u));\n', 2), ('closer,', 2), ('href="http://reactivex.io/documentation/operators/contains.html">ReactiveX', 2), ('getHeavy()', 2), ('ByteSourceFactory()', 2), ('(InnerCompletableCache', 2), ('crashOnIterator;\n', 2), ('java.io.FilenameFilter;\nimport', 2), ('ConcatMapMaybeObserver<R>\n', 2), ('routine', 2), ('designated', 2), ('byte[1024];\n', 2), ('implementations,', 2), ('Restarting', 2), ('region', 2), ('valueComparator;\n', 2), ('cancelAndClear();\n\n', 2), ('mainBoundaryErrorInnerEmpty()', 2), ('2.0.4', 2), ('assertEquals(t,', 2), ('createFile()', 2), ('-2117620485640801370L;\n\n', 2), ('flatMapCompletable', 2), ('thread.get());\n', 2), ('(base', 2), ('open(B', 2), ('.assertValue(1)\n', 2), ('testLastOfOneReturnsLast()', 2), ('DisposableHelper.setOnce(mainDisposable,', 2), ('iterator.previous());\n', 2), ('V>(map));\n', 2), ('scheduler.createWorker(),', 2), ('RxJavaCompletableExecutionHook()', 2), ('org.junit.Assert.*;\n\npublic', 2), ('newAccum', 2), ('previousNode', 2), ('<p>Two', 2), ('collectionSize;\n', 2), ('testThrottlingWithCompleted()', 2), ('ObjectHelper.verifyPositive(capacityHint,', 2), ('ts.assertValueCount(1000);\n', 2), ('io.reactivex.maybe;\n\nimport', 2), ('io.reactivex.observables.ConnectableObservable;\nimport', 2), ('UnsupportedOperationException("Read-only', 2), ('Iterable<LegacyComparable>', 2), ('3256684027868224024L;\n\n', 2), ('.test(513)\n', 2), ('collections(int', 1), ('studentsToOperate);\n', 1), ('io.reactivex.internal.operators.completable.CompletableToFlowable;\nimport', 1), ('ObservableMap<T,', 1), ('assert', 1), ('code,', 1), ('e);\n}\n', 1), ('checkNotNull(readable);\n', 1), ('FilePredicate.IS_FILE;\n', 1), ('HtmlUnit', 1), ('customers;\n', 1), ('itrA', 1), ('"FlowableConcatWithSingle",\n', 1), ('list("src/test/java/io/reactivex/internal/operators/",', 1), ('SampleElements<Entry<AnEnum,', 1), ('{1}");\n', 1), ('passes\n', 1), ('(schedulerDoc', 1), ('aste.getMessage().contains("createSingle"));\n//\n//', 1), ('expectContents(elements);\n', 1), ('CompletableObserver}s.', 1), ('global\n', 1), ('apart\n', 1), ('range.observeOn(Schedulers.single());\n\n', 1), ('delegate.descendingKeySet();\n', 1), ('this.delayErrors;\n\n', 1), ('wrapTask(Runnable', 1), ('innerError(InnerQueuedSubscriber<Integer>', 1), ('comma', 1), ('.retry()\n', 1), ('ConcurrentLinkedQueue<>(MinimalCollection.of(elements));\n', 1), ('printCustomerDetails(allCustomers);\n', 1), ('(d1', 1), ('ObservableConcatMap(ObservableSource<T>', 1), ('(s.contains("java.util.concurrent.ThreadPoolExecutor"))', 1), ('setDefault(CharsetEncoder.class,', 1), ('-8583764624474935784L;\n\n', 1), ('TimeUnit.SECONDS)\n@Fork(value', 1), ('value[1]);\n', 1), ('builder.add(usedInGenericType(type));\n', 1), ('(m.getName().startsWith("set"))', 1), ('FlowableUnsubscribeOnTest', 1), ('list1', 1), ('((HasUpstreamPublisher<Integer>)o.map(Functions.<Integer>identity())).source());\n', 1), ('1).toFlowable();\n', 1), ('Function<PublishSubject<Integer>,', 1), ('.concatMapCompletableDelayError(\n', 1), ('molestie', 1), ('Observable.just("abc").takeUntil(predicate).subscribe(to);\n\n', 1), ('getNextId();\n', 1), ('onCompleteNull()', 1), ('delegate().shutdownNow();\n', 1), ('last();\n\n', 1), ('onSchedule(Worker', 1), ('this.receiver', 1), ('assertTrue(Single.error(new', 1), ('function.apply(candidate);\n', 1), ('assertEquals(ticket1,', 1), ('this.visitor', 1), ('com.google.common.collect.ImmutableSet}.', 1), ('Flowable.amb(Arrays.asList(\n', 1), ('single.subscribe(new', 1), ('SubscriptionHelper.isCancelled(other.get());\n', 1), ('.addEqualityGroup(Ordering.natural())\n', 1), ('compl[0]++;\n', 1), ('FlowableElementAtTest', 1), ('pool)', 1), ('MaybeTimer(Math.max(0L,', 1), ('FromIterableDisposable<T>(s,', 1), ('SafeSubscriber<Integer>(new', 1), ('(off', 1), ('annotationClass.getMethod(propertyName);\n', 1), ('27017;\n\n', 1), ('.map(el', 1), ('Maybe.just(1).doFinally(null);\n', 1), ('ascending', 1), ('TEST_PART_PRICE', 1), ('1).toFlowable());\n\n', 1), ('Sport},', 1), ('(componentClass.isPrimitive())', 1), ('BasicFuseableObserver', 1), ('(ParallelReduceFullInnerSubscriber<T>', 1), ('"Steel', 1), ('Observable.error(e);\n', 1), ('Thread.sleep(20);\n', 1), ('"request()");\n', 1), ('Car\n', 1), ('License:', 1), ('Validator}', 1), ('statusMember.getStarted());\n', 1), ('CompositeDisposable());\n', 1), ('MinimalCollection<E>', 1), ('e.getDeclaredMethod("valueOf",', 1), ('ObservableConcatMap(sources,', 1), ('(Timed<?>)', 1), ('FromCallableTckTest', 1), ('range:', 1), ('(elements.hasNext());\n\n', 1), ("executor's", 1), ('SequentialExecutorTest', 1), ('condition.\n', 1), ('assemblyTrackingSingle()', 1), ('ba1;\n', 1), ('guardedQueue.get();\n', 1), ('delegate().invokeAny(tasks,', 1), ('(Error)error;\n', 1), ('mapCrashConditional()', 1), ('SingleSource[count', 1), ('this.output.close();\n', 1), ('ObservableAll<T>(source,', 1), ('schedulerSpecEnd', 1), ('distinguish', 1), ('NonFinalFieldIgnored();\n\n', 1), ('JAVA_COMPILER("java.compiler"),\n\n', 1), ('cpu;\n', 1), ('assertTrue(Observable.fromArray(1)', 1), ('Resources.toString(url,', 1), ('WithExceptionalConstructor("whatever");\n\n', 1), ('CollectSpliteratorsTest', 1), ('Scout(kingsHand));\n\n', 1), ('layers=%s', 1), ('assertEquals(TEST_CAR_MODEL,', 1), ('Disposable",', 1), ('Resources.toByteArray(classfile(Resources.class));\n', 1), ('"FlowableConcatWithCompletable",\n', 1), ('com.google.common.util.concurrent.FuturesGetChecked.checkExceptionClassValidity;\nimport', 1), ('com.iluwatar.hexagonal.mongo;\n\nimport', 1), ('EmptyDisposable.complete(o);\n', 1), ('testSeveral_serialization()', 1), ('Objects#equal\n', 1), ('DefaultTableModel', 1), ('String}', 1), ('a.onNext((T)v);\n\n', 1), ('TestHelper.checkDisposed(PublishSubject.create().singleOrError().delaySubscription(Flowable.just(1)));\n', 1), ('ResourcesTest', 1), ('ArbitraryInstances.get(List.class));\n', 1), ('luck\n', 1), ('-3491074160481096299L;\n', 1), ('assertFalse(bq.isCancelled());\n\n', 1), ('beganProducing', 1), ('anyway.', 1), ('jdx);\n\n', 1), ('assertThat(ArbitraryInstances.get(StringBuilder.class).toString()).isEmpty();\n', 1), ('ObjectHelper.requireNonNull(onCompleteSupplier,', 1), ('ArrayList.class,\n', 1), ('overflown', 1), ('RxJavaPlugins.initComputationScheduler(nullResultCallable);\n', 1), ('Reflection.getPackageName(Iterable.class.getName()));\n', 1), ('AsynchronousService(BlockingQueue<Runnable>', 1), ('asyncReloader.loadAll(ImmutableList.of(new', 1), ('oldest', 1), ('enforce', 1), ('FlowableLift<R,', 1), ('msg.addHeader(Message.Headers.SENDER,', 1), ('s.schedulePeriodically(r,', 1), ('delaySubscription(SingleSource<U>', 1), ('scalarEmission++;\n', 1), ('sourceList.add(e);\n', 1), ('key.channel()).write(pendingBuffer);\n', 1), ('frc;\n\n', 1), ('TimeUnit.MICROSECONDS)\n', 1), ('encodingInputs[i]', 1), ('statement.setInt(3,', 1), ('classPath.getResources())', 1), ('String(factoryExpectedForNothing,', 1), ('(properties.containsKey(PURGE_ENABLED_KEY))', 1), ('createConsumerThrows()', 1), ('innerNext(InnerQueuedSubscriber<R>', 1), ('assertNull(RxJavaPlugins.onSingleReturn(null));\n//\n//', 1), ('input;\n\n', 1), ('FlowableTimeout(\n', 1), ('TestHelper.checkDisposed(Single.just(1).delaySubscription(Single.just(2)));\n', 1), ('delaySubscriptionSingle()', 1), ('NonNull', 1), ('cakeLayerInfos.add(new', 1), ('verifyTimedGetOnPendingFuture(Future<?>', 1), ('delayError,\n', 1), ('ClassPath.getClassName("abc/d/Abc.class"));\n', 1), ('separating', 1), ('java.util.concurrent.CompletableFuture#thenAccept}', 1), ('filterFailWithRetry()', 1), ('testDrainTimesOut(q);\n', 1), ('settingUnderlyingWhenUnsubscribedCausesImmediateUnsubscription()', 1), ('normalCancelAfterRequest1()', 1), ('Helpers.assertEqualIgnoringOrder(getSampleEntries(),', 1), ('testMultimap()', 1), ('alive:\\r\\n"', 1), ('.hasMessage(\n', 1), ('WindowOperation(UnicastProcessor<T>', 1), ('testFilter()', 1), ('testSortedListWithCustomFunctionFlowable()', 1), ('chained', 1), ('stop}', 1), ('mergeDelayErrorIterable()', 1), ('RxJavaPlugins.initSingleScheduler(nullResultCallable);\n', 1), ('createElement(int', 1), ('TypeToken<Map<String,', 1), ('performOperationsUsing(final', 1), ('TestingExecutors#sameThreadScheduledExecutor()}', 1), ('cases:\n', 1), ('SimpleFileWriter(String', 1), ('PATH_SEPARATOR("path.separator"),\n\n', 1), ('onRequest)', 1), ('drain,', 1), ('(with', 1), ('offset)', 1), ('DelayObserver(Observer<?', 1), ('.suppressing(suppressForUnmodifiableSet())\n', 1), ('requestProduceRace()', 1), ('(remaining.get()', 1), ('getSpells()', 1), ('TestsForMapsInJavaUtil', 1), ('TestHelper.checkDisposed(Single.just(1)\n', 1), ('this.output.flush();\n', 1), ('constants.\n', 1), ('"\\nempty', 1), ('(paramType.isAssignableFrom(Consumer.class))', 1), ('f.onError(ex);\n', 1), ('untilFirstMaybe()', 1), ('getClass().getGenericSuperclass();\n', 1), ('WriterTest', 1), ('com.google.common.io.CharStreams.createBuffer;\n\nimport', 1), ('.suppressing(suppressForArrayDeque())\n', 1), ('compared\n', 1), ('Collect', 1), ('System.setProperty(JAVA_CLASS_PATH.key(),', 1), ('successErrorRace()', 1), ('Errors', 1), ('addAll(Iterator<?', 1), ('java.util.concurrent.ConcurrentLinkedQueue;\n\n/**\n', 1), ('T.', 1), ('b.indexOf("*/",', 1), ('unbalanced', 1), ('a.subscribe(new', 1), ('TypeToken<HashBiMap<String,', 1), ('(NavigableMap<K,', 1), ('threadPool.shutdown();\n', 1), ('StatusMember}.\n', 1), ('LinkedQueueNode<T>();\n', 1), ('RxJavaPlugins.onSchedule(action));\n\n', 1), ('r.subscribe(observer);\n', 1), ('Multiset', 1), ('this.onSuccessCall', 1), ('mapErrorConditionalNoError()', 1), ('SingleSubject.\n', 1), ('ServiceCache', 1), ('getChunkedReadable(String', 1), ('c.setAccessible(true);\n\n', 1), ('delegate.remove(checkValid(key));\n', 1), ('SingleZipArray(SingleSource<?', 1), ('Observer<T>[]', 1), ('node.', 1), ('Single.toObservable()}', 1), ('times(1)).onNext(anyInt());\n', 1), ('Completable.mergeDelayError(pp1.map(new', 1), ('Enumeration<V>', 1), ('observable2observer', 1), ('TypeToken<ConcurrentMap<EmptyEnum,', 1), ('isCancelled.compareAndSet(false,', 1), ('initCapacity)', 1), ('menuActions.stream().map(MenuAction::getMenuItem).filter(MenuItem.HOME::equals).count());\n', 1), ('available.iterator().next();\n', 1), ('executor.submit(task);\n', 1), ('assertTrue(fs.isDone());\n\n', 1), ('SubscriptionHelper.cancel(s);\n\n', 1), ('testAllObservable()', 1), ('Observable.intervalRange(Long.MIN_VALUE,', 1), ('diffLastJava(int', 1), ('mapConditionalNoError()', 1), ("Letter('n'),", 1), ('checkValid(k);\n', 1), ('t1.join();\n', 1), ('MaybeIgnoreElementCompletable<T>(this));\n', 1), ('wrapOrThrow(Throwable', 1), ('SingleSchedulerTest', 1), ('ObjectHelper.requireNonNull(sources.next(),', 1), ('b0', 1), ('mergeWith(MaybeSource<?', 1), ('receive\n', 1), ('Supplier[]{Hobbit::new},\n', 1), ('after()', 1), ('testRangeStartAt2Count3()', 1), ('permitted', 1), ('that.getOwnerType())\n', 1), ('getY(),', 1), ('at:', 1), ('Thread.NORM_PRIORITY,', 1), ('"FlowableLastMaybe",\n', 1), ('shares', 1), ('timeoutContinueOther()', 1), ('customerOne', 1), ('TakeUntilPredicateObserver(Observer<?', 1), ('prepare()', 1), ('(context.containsKey(IUnitOfWork.MODIFY))', 1), ('compilers', 1), ('ResourceSingleObserver<T>', 1), ('Single.just(1).subscribe(tc);\n\n', 1), ('assertNull(RxJavaPlugins.onAssembly((Observable)null));\n\n', 1), ('").append(JavaVersion.CURRENT.typeName(lowerBound));\n', 1), ('ObservableFromCallableTest', 1), ('SubscribeOnMaybeObserver<T>', 1), ('"Rita");\n', 1), ('ObjectHelper.requireNonNull(completableSupplier.call(),', 1), ('org.mockito.Mockito.timeout;\nimport', 1), ('prettyPrint("A', 1), ('entrySet().iterator();\n', 1), ('loop",', 1), ('original.', 1), ('MaybeCallbackObserver<Object>(Functions.emptyConsumer(),', 1), ('onSubscribeCall;\n\n', 1), ('this.getStudents().remove(studentToBeDeleted);\n\n', 1), ('testPrototype(P', 1), ('SynchronousQueue.\n', 1), ('.append(fname)\n', 1), ('received?",', 1), ('evacuated', 1), ('(!compareAndSet(1,', 1), ('collection.asList();\n', 1), ('SingleDelay(SingleSource<?', 1), ('Maybe.just(1).delaySubscription(pp)\n', 1), ('architectural', 1), ('SimpleFileVisitor<Path>()', 1), ('TesterAnnotation', 1), ('TypeToken<LinkedList<String>>()', 1), ('jarOut.closeEntry();\n', 1), ('(fruit.isEmpty())', 1), ('subscribeActual(observer);\n', 1), ('super.create(elements);\n', 1), ("b.append(']').toString();\n", 1), ('queueType', 1), ('File("/home/build/a.jar").toURI(),\n', 1), ('ParallelRunOnTest', 1), ('ObjectHelper.equals(value,', 1), ('lastServedId;\n\n', 1), ('SingleMergeTest', 1), ('(List<HtmlAnchor>)', 1), ('mapWithIndex(LongStream', 1), ('"Shyam",', 1), ('ArrayList<>(n);\n', 1), ('FutureTask<Long>(new', 1), ('SingleToFlowable<U>(composer.apply(pp.singleElement())).subscribe(ts);\n', 1), ('1000).ignoreElements().<Integer>toFlowable()\n', 1), ('volatile.', 1), ('BackpressureDropSubscriber<T>\n', 1), ('ImmediateThinScheduler.INSTANCE.scheduleDirect(Functions.EMPTY_RUNNABLE,', 1), ('UnsubscribeOnMaybeObserver(MaybeObserver<?', 1), ('delegate.get(checkValid(key));\n', 1), ('HELPER', 1), ('Character(Type', 1), ('0).getClass();\n', 1), ('b)}', 1), ('charFrequency', 1), ('(other.numbers', 1), ('Thread.sleep(150);\n//\n//', 1), ('assertSame(errorHandler,', 1), ('RxJavaPlugins.setSingleSchedulerHandler(new', 1), ('ObservableSubscribeOn<T>', 1), ('testSchedule()', 1), ('closes', 1), ('bufferHelper("\\r\\n",', 1), ('lazily,', 1), ('ObservableUnsubscribeOn<T>', 1), ('MaybeDoAfterSuccessTest.this.values.add(t);\n', 1), ('ObservableNever', 1), ('com.google.common.collect.testing.testers.MapEntrySetTester.getContainsEntryWithIncomparableKeyMethod;\nimport', 1), ('descendingEntryIterator();\n', 1), ('TreeSet<Integer>(input).first();\n', 1), ('io.reactivex.internal.functions.Functions;\n\n@BenchmarkMode(Mode.Throughput)\n@Warmup(iterations', 1), ('dao;\n\n', 1), ('ObservableDefer<T>', 1), ('FlowableDetachTest', 1), ('(scheduler)', 1), ('ResourceScanner();\n', 1), ('FileLoader', 1), ('matcher.end();\n', 1), ('head!"\n', 1), ('serializedConcurrentOnNextOnComplete()', 1), ('FlowableDistinct(Flowable<T>', 1), ('exceptionType;\n\n', 1), ('Efficient', 1), ('valueSupplier));\n', 1), ('suite.addTest(testsForConcurrentSkipListSetNatural());\n', 1), ('addAndGet(int', 1), ('ParallelFromPublisher<T>(source,', 1), ('successors(File', 1), ('ArrayDeque<>(MinimalCollection.of(elements));\n', 1), ('.switchMapMaybe(Functions.justFunction(Maybe.error(new', 1), ('ImmutableCollection.iterator()', 1), ('expectedToString;\n', 1), ('order(\n', 1), ('com.google.common.io.MoreFiles.deleteRecursively;\nimport', 1), ('(above)\n', 1), ('FreshInvocationHandler(Class<?>', 1), ('asByteSource(from).copyTo(asByteSink(to));\n', 1), ('serialization\nfinal', 1), ('list.add(1,', 1), ('oldClassPath);\n', 1), ('PublishSelectorTckTest', 1), ('assertNull(value[1]);\n', 1), ('valuesToPut', 1), ('TypeToken<RowSortedTable<String,', 1), ('Shares', 1), ('*/\n@VmOptions({"-Xms12g",', 1), ('com.google.common.collect.testing.features.MapFeature.SUPPORTS_PUT;\n\nimport', 1), ('testIoException()', 1), ('LOGGER.info("Readers', 1), ('Scheduler.scheduleDirect}', 1), ('Invokes', 1), ('rootDir;\n\n', 1), ('cancel(K', 1), ('pattern.toString();\n', 1), ('(paramType.isAssignableFrom(Boolean.TYPE))', 1), ('delegate().await(time,', 1), ('EmptySubscription.error(error,', 1), ('emit(Processor<T,', 1), ('FlowableGroupBy<T,', 1), ('spliterator()', 1), ('Flushables', 1), ('Flowable.<String>error(error).ignoreElements();\n', 1), ('backingMap.get(key);\n', 1), ('GHobbitsTest', 1), ('delegate().isShutdown();\n', 1), ('SUPPORTS_REMOVE_WITH_INDEX);\n\n', 1), ('ARRAY_SIZE;', 1), ('Ordering#immutableSortedCopy},', 1), ('END\n}\n', 1), ('(f.isDirectory())', 1), ('otherErrorCompletable()', 1), ('repeatTimes()', 1), ('upstream);\n}', 1), ('expectedToString', 1), ('(multiset.setCount(key,', 1), ('lowestFrequencyChar;\n', 1), ('FlowableLimitTest', 1), ('(SortedJoinInnerSubscriber<T>', 1), ('height="752"', 1), ('(!succeeded)', 1), ('ReadLock();\n', 1), ('ignoreElement}', 1), ('normalDelayErrorsTillTheEnd()', 1), ('standardToArray(array);\n', 1), ('CustomScheduler();\n\n', 1), ('schedulerCallable)', 1), ('SubscriptionHelper.CANCELLED))', 1), ('is",\n', 1), ('soConsumerIndex(long', 1), ('serialDisposable.update(subscription);\n', 1), ('Single.zip(source,', 1), ('ParallelCollectTest', 1), ('JdkMatcher(Matcher', 1), ('MaybeDefer(Callable<?', 1), ('Lists.newArrayList(stack);\n', 1), ('filterWrongParallelism()', 1), ('emptyInstanceGenerated', 1), ('FlowableConcatMap(Flowable.fromArray(sources),', 1), ('"Ordering.compound("', 1), ('hook.\n', 1), ('lowerBound)', 1), ('playerDetails', 1), ('catching(\n', 1), ('com.iluwatar.property;\n\nimport', 1), ('System.getProperty(key);\n', 1), ('d.actual.onSuccess(value);\n', 1), ('ac,', 1), ('constructing', 1), ('(number', 1), ('Element)', 1), ('-1));\n', 1), ('failComputationObservableBlockingNext()', 1), ('fileByteSinkFactory()', 1), ('Maps.newTreeMap();\n', 1), ('malesuada', 1), ('AbstractObservableWithUpstream<Notification<T>,', 1), ('5;', 1), ('headers', 1), ('FutureObserver<T>', 1), ('FlowableFuseableTest', 1), ('function3', 1), ('co[0].onError(new', 1), ('generic\n', 1), ('(!parent.add(sr))', 1), ('"-d64"})\npublic', 1), ('InnerObserver(int', 1), ('"lock', 1), ('getSpliteratorNotImmutableCollectionAllowsAddMethod(),\n', 1), ('super.createCollection(key);\n', 1), ('ballThread.suspendMe();\n', 1), ('com.google.common.collect.testing.features.SetFeature;\nimport', 1), ('TestException()).delay(100,', 1), ('scheduler.scheduleDirect(Functions.EMPTY_RUNNABLE,', 1), ('statusMember.accept(stoppingData);\n', 1), ('unhandled', 1), ('full,', 1), ('IllegalStateException("Already', 1), ('generateHashSet(E', 1), ('returns.\n', 1), ('ObservableElementAt<T>', 1), ('set.', 1), ('AmbMaybeObserver(MaybeObserver<?', 1), ('WithPrivateConstructor.INSTANCE,', 1), ('indefinitely', 1), ('RDBMS.\n', 1), ("BiFunction's", 1), ('took', 1), ('"hello', 1), ('assertEquals(OptionalInt.empty(),', 1), ('LexicographicalOrdering<?>', 1), ('com.iluwatar.databus.DataBus;\nimport', 1), ('"single', 1), ('io.reactivex.internal.operators.completable.CompletableAmb.Amb;\nimport', 1), ('experienced', 1), ('"FlowableIgnoreElementsCompletable",\n', 1), ('maybeDocRefersToMaybeTypes()', 1), ('fo.get().intValue());\n', 1), ('disposeRun()', 1), ('testsForTreeSetWithComparator()', 1), ('FIND_FIRST', 1), ('order(List<Integer>', 1), ('combiner,\n', 1), ('createParentDirs(File', 1), ('ParallelFilterSubscriber<T>', 1), ('service.submitTicket(LotteryTestUtils.createLotteryTicket("arg@boo.com",\n', 1), ('JavadocForAnnotations.readFile(f);\n\n', 1), ('*/\n\n\n/*\n', 1), ('tryOutSchedulers();\n', 1), ('oldClassPath', 1), ('io.reactivex.internal.operators.observable.ObservableMapNotification.MapNotificationObserver;\nimport', 1), ('LotteryTest()', 1), ('ResourceInfo.urls()', 1), ('create(backingMap);\n', 1), ('UsingObserver(Observer<?', 1), ('Striped.lock(stripes);\n', 1), ('manifestClasspath("with/relative/dir");\n', 1), ('testCollectToListObservable()', 1), ('StripBoundary(Flowable<T>', 1), ('Type[types.size()]);\n', 1), ('Callable<List<T>>()', 1), ('MaybeError(new', 1), ('JAVA_VENDOR("java.vendor"),\n\n', 1), ('SingleFlatMap(SingleSource<?', 1), ('SchedulerPoolFactory.shutdown();\n', 1), ('requirements.getAbsentFeatures()))', 1), ('contents.addAll(builder.contents);\n', 1), ('missingBackpressure()', 1), ('ArrayList\n', 1), ('sendOnNext(String', 1), ('20));\n\n', 1), ('executions', 1), ('AllSubscriber(SingleObserver<?', 1), ('assertTrue(c.isDisposed());\n\n', 1), ('DematerializeObserver(Observer<?', 1), ('ImmediateScheduledFuture<V>', 1), ('FlowableDoOnLifecycle<T>', 1), ('await(long', 1), ('cakeToppingInfo.calories', 1), ('usingJdkPatternCompiler()', 1), ('(RegularImmutableSortedSet<Object>)', 1), ('(g.getName().equals(s', 1), ('SingleCreateTest', 1), ('layer)', 1), ('s3', 1), ('ItemQueue();\n\n', 1), ('java.nio.file.Files.walkFileTree(\n', 1), ('doTestClassUnloading();\n', 1), ('testsForCheckedList()', 1), ('computes', 1), ('d);\n}\n', 1), ('SafeSubscriber<Object>(this);\n', 1), ('step,', 1), ('Multimaps#asMap(ListMultimap)}', 1), ('bulkGetSet;\n', 1), ('SerialDisposable(@Nullable', 1), ('varargs\n', 1), ('scan(Class<?>', 1), ('fromSubscription()', 1), ('encapsulates', 1), ('SingleDefer(Callable<?', 1), ('DisposableLambdaObserver<Integer>', 1), ('reach', 1), ('ArbitraryInstances.get(DoubleBuffer.class).capacity());\n', 1), ('ParallelTransformer<T,', 1), ('asyncFusedMapCrash()', 1), ('super(GHobbits::new);\n', 1), ('notify();\n', 1), ('DoOnEachConditionalSubscriber<T>', 1), ('HashMap<Class<?', 1), ('4603919676453758899L;\n\n', 1), ('Charset.forName("UTF-16BE");\n\n', 1), ('java.lang.reflect.Proxy;\nimport', 1), ('8084,', 1), ('threadPool.submit(\n', 1), ('InnerQueuedObserver(InnerQueuedObserverSupport<T>', 1), ("fn.lastIndexOf('.');\n\n", 1), ('action);\n\n', 1), ('remaining)', 1), ('backpressureMentionedWithoutAnnotation(StringBuilder', 1), ('cs.test();\n', 1), ('mutableClass,\n', 1), ('SINGLE_THREAD_FACTORY', 1), ('Students', 1), ('testDefaultSingleSchedulerIsInitializedLazily()', 1), ('Stream.concat\n', 1), ('gaps\n', 1), ('Optional<Student>', 1), ('ArbitraryInstances.get(LongBuffer.class).capacity());\n', 1), ('entryIterator();\n', 1), ('iterator}', 1), ('UndeliverableException)', 1), ('decoratedRun),', 1), ('CharMatcher.class,\n', 1), ('Deque<Spliterator<T>>', 1), ('MergeInnerObserver', 1), ('characteristics)', 1), ('BaseEncodingBenchmark', 1), ('reaches', 1), ('NavigableMap}.\n', 1), ('pattern);\n}\n', 1), ('Completable.concat(Arrays.asList(Completable.complete(),', 1), ('ObservableTimer(long', 1), ('compliment)', 1), ('cd,', 1), ('TestIntegerSortedSetGenerator', 1), ('TakeUntilTckTest', 1), ('interact', 1), ('testsForTreeSetNatural()', 1), ('Function<GroupedFlowable<Integer,', 1), ('Iterables.toArray(comparators,', 1), ('intensive,', 1), ('SingleZipIterableTest', 1), ('type.getEnumConstants();\n', 1), ('co[0]', 1), ('SingleTask());\n\n', 1), ('logarithmic', 1), ('BiConsumerSingleObserver<T>', 1), ('MpscFillOnceSimpleQueue<T>\n', 1), ('UnsignedBytesBenchmark();\n', 1), ('sourceCount,', 1), ('"lines\\r",', 1), ('Single<Number>', 1), ('(!parent.endsWith("/"))', 1), ('UnsupportedOperationException};', 1), ('events.get(index);\n', 1), ('AtomicReferenceArray<E>(array);\n', 1), ('workaround,', 1), ('dq.isEmpty();\n', 1), ('Single.merge(source1,', 1), ('size(),', 1), ('mergeArray(CompletableSource...', 1), ('S>>\n', 1), ('#createTestSuite()}', 1), ('verifyNoMoreInteractions(children);\n', 1), ('asByteSource(file).read();\n', 1), ('assertTrue(RxJavaPlugins.isLockdown());\n', 1), ('12/15/15', 1), ('Single.never());\n', 1), ('prototype.type;\n', 1), ('blockingGet(T', 1), ('java.lang.reflect.*;\n\nimport', 1), ('EdgesConnecting}', 1), ('Optional.of(enumClass.cast(ref.get()));\n', 1), ('Helpers.copyToSet(requirements.getAbsentFeatures());\n', 1), ('both\n', 1), ('FUSED_READY', 1), ('TestHelper.checkDisposed(Flowable.intervalRange(1,', 1), ('(release)', 1), ('RxCustomThread(r,', 1), ('properties.put(key,', 1), ('<li>Sets', 1), ('(rawType.isLocalClass())', 1), ('assertEquals("maxConcurrency', 1), ('AmbSingleObserver(SingleObserver<?', 1), ('clazz.getDeclaredConstructor();\n\n', 1), ('execTime);\n', 1), ('.append(".java:").append(m.backpressureDocLine).append(")\\r\\n\\r\\n");\n', 1), ('testRequestFromFinalSubscribeWithoutRequestValue()', 1), ('31;\n', 1), ('height="281"', 1), ('JdkPattern))', 1), ('com.google.common.collect.testing.SpliteratorTester;\nimport', 1), ('List<Server>', 1), ('MERGE_RIGHT_ASSOCIATIVE', 1), ('title:', 1), ('keySelector,\n', 1), ('ArbitraryInstances.get(StringReader.class).read());\n', 1), ('manifest.read(in);\n', 1), ('com.google.common.base.Optional.absent())\n', 1), ('list.set(index,', 1), ('unblocking', 1), ('connection.prepareStatement("UPDATE', 1), ('defaultParam("number",', 1), ('cancellation/completion.\n', 1), ('innerComplete(InnerConsumer', 1), ('SourceSinkFactories()', 1), ('callback)\n', 1), ('12);\n//', 1), ('getFunds(String', 1), ('"counters";\n\n', 1), ('BigDecimal.class,\n', 1), ('mapper.apply(v).iterator();\n\n', 1), ('SingleElementSubscriber<T>(s));\n', 1), ('testStartIdempotence()', 1), ('com.google.common.base.Optional.of(value);\n', 1), ('java.util.function.DoubleFunction}', 1), ('builder\n', 1), ('TestHelper.checkUtilityClass(SingleInternalHelper.class);\n', 1), ('accounts.put(LotteryConstants.SERVICE_BANK_ACCOUNT,', 1), ('AtomicLongArray(longArray);\n', 1), ('TakeLastObserver<T>', 1), ('(Future<S>', 1), ('(Consumer)', 1), ('staticMethodDef)', 1), ('Schedulers#newThread()', 1), ('Delay(SequentialDisposable', 1), ('VALUES_BACKWARD', 1), ('assertEquals(VALUE,', 1), ('this.observers.remove(observer);\n', 1), ('timeout0(long', 1), ('"+49332322");\n', 1), ('java.util.stream.StreamSupport;\nimport', 1), ('await(CyclicBarrier', 1), ('Joiner.on(":")\n', 1), ('whilePredicateThrows()', 1), ('resumeFunctionInCaseOfError)', 1), ('limit.\n', 1), ('serialDisposable.update(another);\n', 1), ('delegate().invokeAny(tasks);\n', 1), ('ArbitraryInstances.get(OptionalLong.class));\n', 1), ('(n.startsWith("."))', 1), ('<li>§2.3:', 1), ('TestHelper.assertBadRequestReported(Flowable.never().onBackpressureLatest());\n', 1), ('toFlowable', 1), ('onNextOnSubscribeCrash()', 1), ('Reflection.initialize(A.class);\n', 1), ('java.util.logging.LogRecord;\nimport', 1), ('customers.add(customerOne);\n', 1), ('bufferHelper(\n', 1), ('OptionalInt.of(generateInt());\n', 1), ('REMOVE_EXACTLY,\n', 1), ('EmptyCompletableObserver\nextends', 1), ('MaybeFlatten(source,', 1), ('journeys', 1), ('valueOf(integer)', 1), ('mergeDelayError}\n', 1), ('type}.\n', 1), ('compare(Iterable<T>', 1), ('java.util.concurrent.Callable},', 1), ('ClassLoaders\n', 1), ('Being', 1), ('fallbackComplete()', 1), ('q.get());\n', 1), ('indexes.length;\n\n', 1), ('testScanFunctionThrowsAndUpstreamErrorsDoesNotResultInTwoTerminalEvents()', 1), ('b}.\n', 1), ('Mauris', 1), ('Integer.parseInt(map.get("weightTons")));\n', 1), ('complete(c);\n', 1), ('ids.size());\n', 1), ('Present<T>(nullableReference);\n', 1), ('ProtocolViolationException.class);\n', 1), ('Maybe.<Integer>empty().delaySubscription(100,', 1), ('delegate.clear();\n', 1), ('JdkPattern(Pattern', 1), ('LotteryNumbers.create(givenNumbers);\n', 1), ('onSuccessCall;\n\n', 1), ('ScheduledTask(),', 1), ('SafeObserver', 1), ('ARRAY_LIST(ArrayList::new),\n', 1), ('streamA.isParallel()', 1), ('a.onNext(n', 1), ('-3592821756711087922L;\n\n', 1), ('onSubscribe(new', 1), ('ObservableMergeWithSingle<T>', 1), ('((ParameterizedType)', 1), ('to1.assertResult(1);\n', 1), ('HashSet")\n', 1), ('SerializedObserver<T>(observer));\n', 1), ('SetMultimap},', 1), ('registerObserver(obs);\n', 1), ('MaybeFlatMapCompletable(MaybeSource<T>', 1), ('assertSame(o3,', 1), ('simpleMixed()', 1), ('zip6()', 1), ("File(u.toURI()).toString().replace('\\\\',", 1), ('Consumer<TestSubscriber<T>>', 1), ('batchSize;\n\n', 1), ('Single.fromFuture(Flowable.just(1).toFuture(),', 1), ('Class.forName(clazz.getName(),', 1), ('ImmutableSet.of(value).hashCode()', 1), ('Libraries', 1), ('JdkBackedImmutableBiMap}.\n', 1), ('testsForHashMapNullKeysForbidden()', 1), ('testCollectorFailureDoesNotResultInErrorAndCompletedEmissionsFlowable()', 1), ('taskLatch.countDown();\n', 1), ('height="293"', 1), ('These\n', 1), ('}*/\n}\n', 1), ('BackpressureHelper', 1), ('k);\n\n', 1), ('abc);\n\n', 1), ('AbstractList<String>()', 1), ('testListIterator_tooHigh()', 1), ('lastInitialDelay);\n', 1), ('f.forEachWhile(Functions.alwaysTrue());\n', 1), ('CharBuffer.allocate(0))\n', 1), ('ExternalConsumer', 1), ('nullThrowableSync()', 1), ('mapperCrashScalar()', 1), ('RxJavaPlugins.clear();\n//', 1), ('MaybeIsEmpty<T>(source));\n', 1), ('.concatWith(Observable.<Integer>error(new', 1), ('ConcatMapDelayErrorObserver(Observer<?', 1), ('LegacyComparable("y");\n', 1), ('function9Fail()', 1), ('assertTrue(list.add(1));\n', 1), ('href="http://reactivex.io/documentation/observable.html">ReactiveX', 1), ('parent.innerNext(t,', 1), ('GuardedQueue()', 1), ('fromSingleError()', 1), ('noun', 1), ('equal}', 1), ('(errorOnFewer)', 1), ('bytes\n', 1), ('DocumentImplementation(new', 1), ('DebounceObserver(Observer<?', 1), ('innerR', 1), ('missedSubscriptionNoPrior()', 1), ('DisposableHelper.isDisposed(inner.get());\n', 1), ('Queue.offer', 1), ('Pool', 1), ('"completionValueSupplier', 1), ('Logger.getLogger(FeatureSpecificTestSuiteBuilder.class.getName());\n\n', 1), ('upstream.request(n);\n', 1), ('DeferredScalarDisposable(Observer<?', 1), ('Set<Currency>.\n', 1), ('Comparable<CollectionSize>', 1), ('tryScalarXMapSubscribe(Publisher<T>', 1), ('CompletableObserveOn', 1), ('io.reactivex.annotations.Nullable;\n\n/**\n', 1), ('observers.add(open);\n\n', 1), ('expectedValues);\n', 1), ('ArrayList<T>(n);\n\n', 1), ('com.google.common.collect.testing.IteratorFeature.UNMODIFIABLE;\nimport', 1), ('ADVENTURES', 1), ('SingleToFlowable<T>(this));\n', 1), ('(!redoStack.isEmpty())', 1), ('delimiter,', 1), ('res.get();\n', 1), ('ArgumentCaptor<Action>', 1), ('CakeInfo(new', 1), ('lazy-loaded', 1), ('(inner.queue().offer(value))', 1), ('Function};', 1), ('scheduleDirectTimed()', 1), ('createSymbolicLink(child.resolve("grandchild"),', 1), ('BlockingQueue<T>', 1), ('stumble', 1), ('deleteAll();\n', 1), ('switchIfEmpty(just(defaultItem));\n', 1), ('ArrayList<Object>(s', 1), ('shutdown!");\n', 1), ('ConcatInnerObserver(this);\n', 1), ('ObjectHelper.requireNonNull(onAfterTerminated,', 1), ('serialize(\n', 1), ('New', 1), ('BASE64_URL(BaseEncoding.base64Url()),\n', 1), ('upperBounds)', 1), ('IUnitOfWork.INSERT);\n', 1), ('FutureDisposable(Future<?>', 1), ('getKeyNotInPopulatedMap()', 1), ('TreasureChest,', 1), ('multimap)\n', 1), ('context.put(operation,', 1), ('Examples', 1), ('LongBuffer', 1), ('mockSingleObserver()', 1), ('toObservable', 1), ('lvElement(offset);//', 1), ('disposeAction}', 1), ('UnsignedBytes.lexicographicalComparatorJavaImpl();\n', 1), ('AtomicReference<AsyncDisposable<T>[]>(EMPTY);\n', 1), ('shop.getBottomShelf();\n', 1), ('super(GOrcs::new);\n', 1), ('AbstractListeningExecutorService', 1), ('toFlowable().retryWhen(handler).singleElement();\n', 1), ('SafeTreeMap<K,', 1), ('globalMutex\n', 1), ('(TreasureChest', 1), ('s.test().assertResult(i);\n', 1), ('blockingGet(long', 1), ('(aFile.exists())', 1), ('accept(TestSubscriber<Integer>', 1), ('3481980673745556697L;\n\n', 1), ('evictedGroups.offer(value);\n', 1), ('(QueueSubscription<?>)d;\n\n', 1), ('no!");\n', 1), ('generateHashBiMap(key,', 1), ('span;\n', 1), ('videos);\n', 1), ('andThenNoInterrupt()', 1), ('[me]', 1), ('f.cancel(false);\n', 1), ('DisposableObserver}', 1), ('level\n', 1), ('shouldPutAndGetValue()', 1), ('countLines()\n', 1), ('org.junit.Assert.assertNotEquals;\n\nimport', 1), ('account.copy();\n', 1), ('junit.framework.Assert.assertFalse;\nimport', 1), ('testExecutor.scheduleAtFixedRate(DO_NOTHING,', 1), ('noDisposeOnAllSuccess2()', 1), ('FallbackSubscriber<T>(actual,', 1), ('cbuf.clear();\n', 1), ('e.hashCode();\n', 1), ('ExecutionException},', 1), ('io.reactivex.internal.schedulers.SingleScheduler.ScheduledWorker;\nimport', 1), ('16));\n', 1), ('(Integer)o[0]', 1), ('(NavigableSet<V>)', 1), ('Publisher<TLeftEnd>', 1), ('enumConstantCache.get(enumClass);\n', 1), ('generateInputStream()', 1), ('WeatherObserverTest<Orcs>', 1), ('ReadWriteLock', 1), ('BufferedReader(getChunkedReader(input,', 1), ('ObservableSource-like', 1), ('sr.setFuture(new', 1), ('ObservableGenerate(Callable<S>', 1), ('CPUs)\n', 1), ('CompletableErrorSupplier(errorSupplier));\n', 1), ('ConcatMapSingleTckTest', 1), ('MapWithIndexSpliterator<Spliterator<T>,', 1), ('noParentIsDisposed()', 1), ('initMapWithNullValue();\n', 1), ('add()', 1), ('subSequence', 1), ('SingleDeferTest', 1), ('SingleSubjects', 1), ('subscriber.onSubscribe(s1);\n\n', 1), ('buildJdkBacked()', 1), ('comparable.\n', 1), ('assertThat(ArbitraryInstances.get(Object[].class)).isEmpty();\n', 1), ('Queue<Object>>', 1), ('TestException("intentional");\n', 1), ('w1.schedule(countAction);\n\n', 1), ('!e.isCancelled();', 1), ('source)).firstElement()\n', 1), ('Logger.getLogger(MessageCollectorMember.class.getName());\n\n', 1), ('studentsToBeInserted', 1), ('java.util.Properties;\n\n/**\n', 1), ('testScanDirectory_symlinkToRootCycle()', 1), ('caller.\n', 1), ('testedPrototype.copy();\n', 1), ('testGet_collections()', 1), ('super.createTestSuite();\n', 1), ('IsEmptyMaybeObserver<T>\n', 1), ('POJO', 1), ('Element(M', 1), ('500));\n', 1), ('streamA}\n', 1), ('API\n', 1), ('RxJavaPlugins.onError()}\n', 1), ('String(reply.getData(),', 1), ('DB_URL', 1), ('RxJavaPlugins.initIoScheduler(nullResultCallable);\n', 1), ('testAddAndRemove_ConcurrentHashMap()', 1), ('toFlowable()));\n', 1), ('super.tearDown();\n', 1), ('.andThen((Maybe<Object>)', 1), ('12);\n', 1), ('FlowableRetryBiPredicate<T>', 1), ('remove(int', 1), ('!m.signature.contains("TestSubscriber")\n', 1), ('fromSpliterator.characteristics()\n', 1), ('assertThat(ArbitraryInstances.get(int[].class)).isEmpty();\n', 1), ('SpscArrayQueue<T>(batchSize);\n', 1), ('(JDK', 1), ('newReferenceArray(E[]', 1), ('(bes.createBuffer())', 1), ('MaybeCallbackObserverTest', 1), ('waited;', 1), ('LimitSubscriber<T>(s,', 1), ('cs);\n}\n', 1), ("Thread's\n", 1), ('stream(OptionalDouble', 1), ('process\n', 1), ('assertNotNull(ara.get(16));\n\n', 1), ('devices', 1), ('POJO.\n', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/empty.png"', 1), ('executorScheduler', 1), ('Maps.difference(ImmutableSortedMap.of(),', 1), ('SingleDoFinallyTest', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/SingleSubject.png"', 1), ('checkNotNull(targetNode);\n', 1), ('Single.fromPublisher(Flowable.range(1,', 1), ('toSortedListComparatorCapacity()', 1), ('Praesent', 1), ('assertNotNull(m.toString(),', 1), ('((!suppressThrows)', 1), ('FallbackSubscriber(Subscriber<?', 1), ('keys.size();\n', 1), ('concatMapToObservableEmpty;\n\n', 1), ('time()', 1), ('ScanObserver<T>(t,', 1), ('blkQueue;\n', 1), ('testers)', 1), ('ImmutableTable<R,', 1), ('RxThreadFactory("TestCustomPool"));\n\n', 1), ('ObjectHelper.requireNonNull(selector.apply(subject),', 1), ('assertEquivalent(@NullableDecl', 1), ('RecursiveDeleteOption#ALLOW_INSECURE}', 1), ('SUBSIZED', 1), ('(usually', 1), ('doWrite(pendingWrite,', 1), ('ZipCoordinator(Subscriber<?', 1), ('ObservableConcatMapCompletable(Observable<T>', 1), ('.andThen(Maybe.just(1))\n', 1), ('Maybe.concat(Flowable.just(Maybe.just(1)))\n', 1), ('multimap).expectedValuesPerKey\n', 1), ('filterNoError()', 1), ('forward()', 1), ('finished");\n', 1), ('<li>The', 1), ('java.util.TreeMap}.\n', 1), ('ImmutableEnumMap<>(map);\n', 1), ('Queue<ObservableSource<?', 1), ('asyncReloader', 1), ('routing', 1), ('actions)', 1), ('value.hashCode();\n', 1), ('suppressForEmptySet()', 1), ('testSetId()', 1), ('deleteRecursively(path);\n', 1), ('delegateCollection().size();\n', 1), ('generateStringReader();\n', 1), ('testerClass)', 1), ('(strategy)', 1), ('observer.assertValue(0);\n', 1), ('2.\n', 1), ('exceptions)\n', 1), ('Single.unsafeCreate(Single.just(1));\n', 1), ('SubscriptionHelper.deferredSetOnce(s,', 1), ('"Bar",', 1), ('testCollectionConversion()', 1), ('smaller)\n', 1), ('Arrays.copyOfRange(baseExpected,', 1), ('users);\n', 1), ('newService)', 1), ('travis', 1), ('assertThat(ArbitraryInstances.get(String[].class)).isEmpty();\n', 1), ('flowSingle', 1), ('allCustomers.forEach(customer', 1), ('generateSet(E', 1), ('ArrayList<E>();\n', 1), ('.take(TestHelper.RACE_DEFAULT_LOOPS)\n', 1), ('AtomicDoubleArray(int', 1), ('slashes\n', 1), ('eventLoop();\n', 1), ('DistinctTckTest', 1), ('asks', 1), ('this.spells', 1), ('Completable.ambArray(Completable.complete(),', 1), ('(bounds.length', 1), ('IllegalStateException\n', 1), ('RetrySubscriber<T>(s,', 1), ('comprises', 1), ('ToSingle(s));\n', 1), ('37497744973048446L;\n\n', 1), ('ArrayList<Throwable>());\n\n', 1), ('applications.', 1), ('member.getModifiers();\n', 1), ('createKeySet();\n', 1), ('4));\n\n', 1), ('io.reactivex.Observable}-,', 1), ('LOGGER.info("With', 1), ('DelaySubscriber', 1), ('3"));\n\n', 1), ('delegate.pollFirstEntry();\n', 1), ('merge4()', 1), ('java.util.concurrent},', 1), ('NonPublicClass', 1), ('AbstractDirectTask(Runnable', 1), ('CompletableMergeDelayErrorIterable(Iterable<?', 1), ('queue.poll())', 1), ('isCancelled();\n\n', 1), ('InnerQueuedSubscriber<Integer>(support,', 1), ('"Wizard";\n', 1), ('flowableNoProducers()', 1), ('handler.caught;\n', 1), ('MAX_NUMBER);\n', 1), ('.map(ParallelPerf.this);\n', 1), ('Charset.forName("US-ASCII");\n\n', 1), ('delegate.floorEntry(checkValid(key));\n', 1), ('file.getAbsolutePath());\n', 1), ('MaybeCallbackObserver(Consumer<?', 1), ('millis)', 1), ('nazguls.put(NazgulName.MURAZOR,', 1), ('!",\n', 1), ('this.loaded;\n', 1), ('10).subscribe(sub);\n\n', 1), ('Maps.newConcurrentMap());\n', 1), ('suite.addTest(testsForLinkedBlockingQueue());\n', 1), ('specific\n', 1), ('MutableClassToInstanceMap<B>(new', 1), ('common\n', 1), ('MaybeSwitchIfEmptySingle<T>(this,', 1), ('this.in', 1), ('assertTrue(ArbitraryInstances.get(BlockingQueue.class).isEmpty());\n', 1), ('Enums.stringConverter(TestEnum.class).toString());\n', 1), ('keySet().contains(null)}', 1), ('"FlowableMergeWithSingle",\n', 1), ('testQuery()', 1), ('callsAfterUnsubscribe()', 1), ('backpressureDocumentation;\n\n', 1), ('(!get()', 1), ('io.reactivex.internal.observers.BasicQueueDisposable;\n\npublic', 1), ('get}', 1), ('(int)elements).takeWhile(Functions.alwaysTrue())\n', 1), ('CANCELLED),', 1), ('q.accept(actual);\n', 1), ('CharSourceFactory()', 1), ('checkDoubleOnSubscribeSingleToFlowable(Function<Single<T>,', 1), ('R>(observer);\n\n', 1), ('this.executorService', 1), ('DisposableHelper.replace(timer,', 1), ('communications', 1), ('DummyRunnable', 1), ('jarOut);\n', 1), ('unbounded1k()', 1), ('resource.close());\n', 1), ('purging.\n', 1), ('exceptionHandler.accept(exception);\n', 1), ('taskCrash()', 1), ('createFromEntries(entries);\n', 1), ('<p><em>Note:</em>', 1), ('otherwise")\n', 1), ('testMultiplyCap()', 1), ('Single.never().timeout(100,', 1), ('java.util.SortedMap;\n\n/**\n', 1), ('assertTrue(last.isPresent());\n', 1), ('increases', 1), ('Completable.error(ex).blockingGet(1,', 1), ('ObservableConverter<T,', 1), ('BufferExactSizeTckTest', 1), ('mark.\n', 1), ('generateShort()', 1), ('handleEvent((MessageData)', 1), ('frq;\n\n', 1), ('stream.writeInt(multimap.size());\n', 1), ('rootPane', 1), ('close(BufferCloseObserver<T,', 1), ('one-element', 1), ('assertEquals(fromDtos,', 1), ('JAVA_VENDOR_URL("java.vendor.url"),\n\n', 1), ('s.schedule(r);\n\n', 1), ('Exceptions()', 1), ('MaybeUnsubscribeOn(MaybeSource<T>', 1), ('checkValid(key);\n', 1), ('.buffer(2)\n', 1), ('ExceptionHelper', 1), ('current.lazySet(null);\n', 1), ('CompletableEmpty()', 1), ('DisposableHelper.dispose(subscription);\n\n', 1), ('sameSize()', 1), ('setTopping(CakeTopping', 1), ('Observable.just(2))\n', 1), ('countersCollectionName);\n', 1), ('FlowableLift(Flowable<T>', 1), ('scheduleActual(action,', 1), ('(!parent.delayErrors)', 1), ('last(1).iterator();\n', 1), ('element:', 1), ('accessibleObject.setAccessible(flag);\n', 1), ('#offer(Object,', 1), ('Single.just(1).delaySubscription(Flowable.timer(100,', 1), ('addCustomers(customerDao);\n', 1), ('handleException(Exception', 1), ('crashRequest;\n\n', 1), ('createEntrySet();\n\n', 1), ('}).toObservable().takeLast(1);\n\n', 1), ('CallbackCompletableObserver(Consumer<?', 1), ('"onAfterTerminated', 1), ('3837284832786408377L;\n', 1), ('DEFAULT_PORT', 1), ('ticketsCollection.find(find).limit(1).into(new', 1), ('add(jsp,', 1), ('Double(generateDouble());\n', 1), ('"test-part-type";\n', 1), ('CakeInfo(CakeToppingInfo', 1), ('Publish', 1), ('this.a', 1), ('assertThat(e).hasMessage("resource', 1), ('after(sc);\n', 1), ('unwantedFeatures));\n', 1), ('AnEnum', 1), ('FlowableIntervalRange', 1), ('FlowableDefer(Callable<?', 1), ('future.get(10,', 1), ('spc.onSubscribe(new', 1), ('AbstractTester<?', 1), ('writable,', 1), ('assertFalse(q.offer(8,', 1), ('that.size())', 1), ('Completable</a>\n', 1), ('ObservableSource[8];\n\n', 1), ('onPluginsXError()', 1), ('Comparable<?>', 1), ('lit', 1), ('(F)', 1), ('Helpers.mapEntry(AnEnum.B,', 1), ('instanceField.setAccessible(true);\n', 1), ('anonymous', 1), ('findPattern("PublishSubject<.*>\\\\s+pp");\n', 1), ('.put("empty",', 1), ('Ordering<Field>()', 1), ('s.request(lim);\n', 1), ('AbstractMultisetTester<E>', 1), ('LinkedHashMultimap_CustomFieldSerializer', 1), ('java.nio.charset.StandardCharsets#UTF_16BE}', 1), ('Currency.getInstance(locale);\n', 1), ("'t'),", 1), ('scalarXMap(final', 1), ('io.reactivex.parallel.ParallelFlowable},\n', 1), ('Executors.newScheduledThreadPool(0);\n', 1), ('workDone', 1), ('SwitchIfEmptyTckTest', 1), ('SingleFlatMapMaybe(SingleSource<?', 1), ('io.reactivex.internal.schedulers.IoScheduler;\n\npublic', 1), ('closed;\n', 1), ('ZipCoordinator(SingleObserver<?', 1), ('accept\n', 1), ('InMemoryPrintStream', 1), ('LazyFluentIterable\n', 1), ('getJavaChannel()).socket().bind(\n', 1), ('CompletableFromRunnable(Runnable', 1), ('(Map)', 1), ('saved\n//', 1), ('kingJoffrey.onEvent(event);\n\n', 1), ('<i>May</i>', 1), ('FinalizableWeakReference<Object>(new', 1), ('generateString()', 1), ('OpenJdk6QueueTests', 1), ('arrayType.cast(Array.newInstance(arrayType.getComponentType(),', 1), ('"HONDA")).isPresent();\n', 1), ('(fname.endsWith(".java"))', 1), ('jarOut.putNextEntry(new', 1), ('InMemoryBank', 1), ('TestException("Two")))\n', 1), ('look\n', 1), ('ls', 1), ('testsForLinkedBlockingQueue()', 1), ('CompletableLiftTest', 1), ('QueueFuseable.NONE;\n', 1), ('*/\n@Beta\n@DoNotMock("Use', 1), ('IgnoreElements</a>\n', 1), ('MaybeCache<T>(this));\n', 1), ('atomics', 1), ('inSingle', 1), ('FakeOp(0));\n', 1), ('comparators.add((Comparator<Object>)', 1), ('BasicIntQueueSubscription<T>\n', 1), ('reduceIntsObservable()', 1), ('Queues}.\n', 1), ('delegate.invokeAll(tasks);\n', 1), ('io.reactivex.processors.ReplayProcessor;\nimport', 1), ('writerLock', 1), ('org.springframework.test.context.support.AnnotationConfigContextLoader;\nimport', 1), ('onErrorResumeNext(\n', 1), ('menuActions.size());\n', 1), ('assertThat(callable).isInstanceOf(WrappedCallable.class);\n', 1), ('MaterializeSubscriber<T>(s));\n', 1), ('//TLTL\n//', 1), ('#merge(Iterable)\n', 1), ('delegation\n', 1), ('8;\n', 1), ('RequestEarly();\n\n', 1), ('SingleMap<T,', 1), ('io.reactivex.Single;\n\npublic', 1), ('runListIteratorTest(MODIFIABLE);\n', 1), ('RepeatTckTest', 1), ('SwitchMapSingleSubscriber(Subscriber<?', 1), ('SingleFlatMapCompletable(SingleSource<T>', 1), ('java.nio.file.Files#readAllBytes}.\n', 1), ('task.run();\n\n', 1), ('method.getParameterTypes().length', 1), ('reported.\n', 1), ('BasicIntQueueDisposable<T>\n', 1), ('mutable;\n\n', 1), ('LatchedSingleObserver<T>', 1), ('\\"15.12.2015\\"");\n\n', 1), ('concatDelayError(Publisher<?', 1), ('CompositeException(errors);\n', 1), ('Queue.', 1), ('SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).first(3).asList();\n', 1), ('CrashingMapperIterator<T>(crashOnHasNext,', 1), ('getSubListOriginalListSetAffectsSubListMethod(),\n', 1), ('DbCustomerDao(dataSource);\n', 1), ('java.util.function.Consumer;\n\nimport', 1), ('com.google.common.base.Optional},', 1), ('io.reactivex.CompletableSource;\n\n/**\n', 1), ('ImmutableList<Method>', 1), ('compare(Field', 1), ('ObservableDelay<T>', 1), ('attrs)\n', 1), ('LOGGER.info("Adding', 1), ('generateHashBiMap(K', 1), ('obsMaybe', 1), ('mapperThrowsObservable()', 1), ('mar,', 1), ('java.sql.SQLException;\n\nimport', 1), ('userDto.isActive(),\n', 1), ('DatagramPacket(ByteBuffer', 1), ('unit.hashCode();\n', 1), ('error(t);\n', 1), ('disagree', 1), ('de.emit();\n', 1), ('deprecate', 1), ('value"', 1), ('testResume()', 1), ('retryTimes()', 1), ('Functions.REQUEST_MAX));\n', 1), ('connectableFlowable2ConnectableFlowable', 1), ('resourceInfo(Class<?>', 1), ('stdOut', 1), ('Flowable.just("one").doOnComplete(new', 1), ('"0', 1), ('<p><b>Warning:', 1), ('generateTicker()', 1), ('@OneToOne(cascade', 1), ('instanceMethodDef;\n', 1), ('TestHelper.assertBadRequestReported(Flowable.intervalRange(1,', 1), ('CompactLinkedHashSet.create(Arrays.asList(elements));\n', 1), ('t.onSubscribe(parent);\n', 1), ('initially', 1), ('RxJavaPlugins.setInitNewThreadSchedulerHandler(callable2scheduler);\n', 1), ('asyncResult4.await();\n', 1), ('java.io.Closeable}', 1), ('EndConsumerHelper.composeMessage(rco.getClass().getName()));\n', 1), ('iterator.set("c");\n', 1), ('assertTrue(DisposableHelper.trySet(ref,', 1), ('FUSED;\n', 1), ('Stats.values())', 1), ('FallbackObserver<T>(actual,', 1), ('createDirectory(root.resolve("child"));\n', 1), ('Comparators.lexicographical(comparator);\n\n', 1), ('aste.getMessage().contains("createObservable"));\n//\n//', 1), ('assertEquals(UnsignedInteger.ZERO,', 1), ('BiFunction<HashMap<String,', 1), ('typeVariableImpl;\n', 1), ('supertypeOf(Type', 1), ('BlockingObservableIterator(int', 1), ('subject1k()', 1), ('exposed', 1), ('Sets.newHashSet();\n\n', 1), ('MergeIterableTckTest', 1), ('assertSame(bs1,', 1), ('iterable.spliterator();\n', 1), ('Resource()', 1), ('createFluentIterable(final', 1), ('System.out.println(m.getName());\n', 1), ('Peeks', 1), ('disposeOther();\n', 1), ('d.complete(value);\n', 1), ('analyze', 1), ('member.equals(that.member);\n', 1), ('treating', 1), ('SubscribeTask<T>(parent,', 1), ('"21/06/2016"\n', 1), ('SequentialDispose(mar,', 1), ('staticMethodDef;\n', 1), ('commands', 1), ('key.channel()).receive(buffer);\n\n', 1), ('RxJavaPlugins.setErrorHandler(errorConsumer);\n', 1), ('itemType);\n', 1), ('Readable()', 1), ('testAsMapRemoveImplementsSet()', 1), ('(!right.hasNext())', 1), ('resumeFunctionInCaseOfError})', 1), ('ListMultimap<Class<?>,', 1), ('getClass().getClassLoader()),\n', 1), ('b.append(longBitsToDouble(longs.get(i)));\n', 1), ('UnsubscribeOnTckTest', 1), ('a.getType().equals(ActionType.CONTENT_CHANGED))\n', 1), ('.put(Iterable.class,', 1), ('java.io.Writer;\n\n/**\n', 1), ('?>[]>(EMPTY);\n', 1), ('ListIterator}', 1), ('MaybeJust<T>(item));\n', 1), ('TestHelper.checkDisposed(Completable.merge(Flowable.just(Completable.complete())));\n', 1), ('rangeObservableFlatMap', 1), ('TypeToken<ImmutableMultimap<String,', 1), ('Map<C,', 1), ('numArray)', 1), ('layers;\n\n', 1), ('populate(multimap);\n', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/repeatWhen.f.png"', 1), ('click\n', 1), ('AtomicReference<Cancellable>\nimplements', 1), ('Schedulers.io();\n\n', 1), ('function3Fail()', 1), ('his', 1), ('<i>may</i>', 1), ('2).blockingFirst(3).intValue());\n', 1), ('FlowableAll<T>(source,', 1), ('flatMapSingle}', 1), ('"Carl",', 1), ('InnerQueuedSubscriber(InnerQueuedSubscriberSupport<T>', 1), ('Charset.forName("ISO-8859-1");\n\n', 1), ('e4);\n', 1), ('#NONE', 1), ('methodNotThrowingAnyException()', 1), ('blockingSubscribeConsumer()', 1), ('cgcb.Optional', 1), ('scan(Single.class);\n', 1), ('SingleDelayWithCompletable<T>(next,', 1), ('obj);\n', 1), ('2).elementAt(2).toFlowable().blockingFirst(-100).intValue());\n', 1), ('java.util.concurrent.CompletableFuture;\nimport', 1), ('findLast(IntStream', 1), ('"+12421255",', 1), ('SET_COUNT:\n', 1), ('domainapp.fixture.modules.simple.SimpleObjectsTearDown;\n\n\n/**\n', 1), ('properties;\n\n', 1), ('lazily.\n', 1), ('RxJavaPlugins.createNewThreadScheduler(factory);\n', 1), ('null))\n', 1), ('sa.setSubscription(bs2);\n\n', 1), ('.flatMapCompletable(Functions.justFunction(Completable.fromAction(this).subscribeOn(Schedulers.computation())),', 1), ('organized', 1), ('testDrain_throws(q);\n', 1), ('"FlowableToListSingle",\n', 1), ('testUnsubscribeScan()', 1), ('iterB.hasNext())', 1), ('.put(BiMap.class,', 1), ('Collections.shuffle(asList,', 1), ('workers.add(doWorkOnNewTrampoline("A",', 1), ('-TimeUnit.SECONDS.toNanos(1)', 1), ('JDK8.', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concatWith.png"', 1), ('io.reactivex.Single}-,', 1), ('System.out.print(clazz2.getSimpleName());\n\n', 1), ('AtomicReferenceArray<Object>\nimplements', 1), ('notifyChange()', 1), ('content)', 1), ('AbstractListMultimap<K,', 1), ('instances!")', 1), ('b.indexOf("@SchedulerSupport(",', 1), ('ServiceExecutor', 1), ('complete(u);\n', 1), ('rename', 1), ('ObservableSource<List<Integer>>>()', 1), ('Callable#call()}', 1), ('TestSetGenerator<Map.Entry<K,', 1), ('testsForEnumSet()', 1), ('reasonable', 1), ('MpscLinkedQueue<Runnable>();\n', 1), ('repository.\n', 1), ('Enums.getField(Sport.GOLF).getAnnotation(Description.class)}.\n', 1), ('completableSubscribe0()', 1), ('"Class.isInstance".\n', 1), ('10:58', 1), ('(R)', 1), ('"]]";\n', 1), ('assertNull(result[1]);\n', 1), ('aggregator.\n', 1), ('TakeLastObserver<T>(t,', 1), ('assertTrue(ArbitraryInstances.get(Deque.class).isEmpty());\n', 1), ('non-overridable', 1), ('java.util.Arrays;\n\n/**', 1), ('suite.addTestSuite(CompactHashSetTest.class);\n', 1), ('ambSingleSource()', 1), ('list.get(i', 1), ('TestHelper.checkDisposed(pp1.singleElement().timeout(pp2,', 1), ('list.removeAll(c);\n', 1), ('need\n', 1), ('countersCollection.insertOne(doc);\n', 1), ('java.util.concurrent.TimeUnit.SECONDS;\n\nimport', 1), ('s[0].onNext(1);\n', 1), ('first-in,', 1), ('now(TimeUnit', 1), ('ArbitraryInstances.get(InputStream.class).read());\n', 1), ('callable.', 1), ('setProducer(Producer', 1), ('title\n', 1), ('scalarEmitted;\n', 1), ('user.getLastName().toLowerCase()', 1), ('SpscArrayQueue<CompletableSource>(prefetch);\n', 1), ('sleeping', 1), ('FlatMapCompletableMainObserver(CompletableObserver', 1), ('Regina', 1), ('your\n', 1), ('SUPPORTS_REMOVE_WITH_INDEX),\n\n', 1), ('FrontControllerTest', 1), ('AbstractNioChannel}s', 1), ('overflow.\n', 1), ('entries?', 1), ('.runOn(Schedulers.computation()));\n', 1), ('ExceptionHelper.TERMINATED;\n', 1), ('bounded1m()', 1), ('op,', 1), ('BlockingObservableMostRecentTest', 1), ('(compared', 1), ('fusedOnErrorCrash()', 1), ('(exc', 1), ('StudentDataMapper', 1), ('manifest;\n', 1), ('ArbitraryInstances.get(byte.class));\n', 1), ('testGetIfPresent_caseSensitive()', 1), ('Optional.of(exception)));\n', 1), ('fromObservable(ObservableSource<?', 1), ('REQUESTED))', 1), ('Disposables.fromSubscription(null);\n', 1), ('lineNumber(StringBuilder', 1), ('Monitor}.\n', 1), ('onError},\n', 1), ('Checkout', 1), ('NioServerSocketChannel', 1), ('downstream.onError(new', 1), ('SingleFlatMapIterableFlowable(SingleSource<T>', 1), ('given,', 1), ('ObservableElementAtSingle(ObservableSource<T>', 1), ('gen)', 1), ('throwIfThrowable(Throwable', 1), ('Completable.concat(Flowable.just(Completable.complete()).hide(),', 1), ('c.onSubscribe(s);\n\n', 1), ('Servant("Jenkins");\n', 1), ('create(Multimap<?', 1), ('doTestClassUnloading()', 1), ('fo.cancel(i', 1), ('bowl.', 1), ('SafeTreeMap()', 1), ('TestEnvironment(timeout));\n', 1), ('IllegalStateException(e);\n', 1), ('call)', 1), ('OperatorWindowBoundaryCloseSubscriber(WindowBoundaryMainSubscriber<T,', 1), ('(reject.get())', 1), ('Collections.singletonList(elements[0]);\n', 1), ('Banking', 1), ('this.serverPort', 1), ('asMap}', 1), ('testMultisetsSpliterator()', 1), ('defensively.\n', 1), ('FlowableConcatArray<T>', 1), ('lines.get(i);\n', 1), ('Exception)', 1), ('BaseTck(long', 1), ('Splitter', 1), ('MaybeSwitchIfEmptySingle<T>', 1), ('Schedulers.NewThreadHolder());\n\n', 1), ('jt.getSelectedRowCount();\n', 1), ('Runnable}\n', 1), ('testIssue1935NoUnsubscribeDownstreamObservable()', 1), ('videoLength', 1), ('LastSubscriber<T>', 1), ('href="http://reactivex.io/documentation/operators/amb.html">ReactiveX', 1), ('reader.readObject());\n', 1), ('io.reactivex.internal.util.ExceptionHelper;\n\nfinal', 1), ('generated.\n', 1), ('BaseEntity,', 1), ('(handler.count', 1), ('(URL', 1), ('cls.getClassLoader();\n', 1), ('ResourceSubscriber<String>', 1), ('Single.zip(Arrays.asList(null,', 1), ('item(s).\n', 1), ('Resources.copy(resource,', 1), ('cbuf[],', 1), ('BitSet.class,\n', 1), ('ArbitraryInstances.get(SortedMap.class));\n', 1), ('.put(CharSequence.class,', 1), ('IncrementingIterator', 1), ('assertFalse(list.isEmpty());\n', 1), ('DoFinallyObserver(MaybeObserver<?', 1), ('destinationBankAccount)', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.map.png"', 1), ('in.mark(readlimit);\n', 1), ('(crashOnComplete)', 1), ('ArbitraryInstances.get(ByteBuffer.class).capacity());\n', 1), ('NullByteSink.INSTANCE.asCharSink(Charsets.UTF_8))\n', 1), ('three-element', 1), ('io.reactivex.internal.functions.*;\n\npublic', 1), ('System.getProperties()', 1), ('ObservableSerialized(Observable<T>', 1), ('generateCharacter()', 1), ('exception);\n', 1), ('(!setContents.contains(e))', 1), ('(Comparator<?>', 1), ('scan(Flowable.class);\n', 1), ('suppressForSingletonSet()', 1), ('props.put(KEY,', 1), ('assertThat(ArbitraryInstances.get(StringBuffer.class).toString()).isEmpty();\n', 1), ('scheduler.scheduleDirect(countDownRunnable,', 1), ('href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator', 1), ('.named("PriorityQueue")\n', 1), ('or(Optional<?', 1), ('lotteryNumbers', 1), ('SingleThreadAbstractFutureBenchmark', 1), ('delegate.ceilingEntry(checkValid(key));\n', 1), ('maxConcurrencyOneDelayMainErrors()', 1), ('definitions', 1), ('(Runtime.getRuntime().availableProcessors()', 1), ('CompletableDefer(completableSupplier));\n', 1), ('otherwise,\n', 1), ('Soldier());\n', 1), ('ParallelFilterSubscriber(Subscriber<?', 1), ('Flowable.fromArray(array).reduce(this);\n', 1), ('order(List<Entry<String,', 1), ('Collection-related', 1), ('stripedLocal.getAt(stripesLocal[(int)', 1), ('PriorityBlockingQueue.class,\n', 1), ('RuntimeException(e.getCause());\n', 1), ('o2).map(new', 1), ('SingleZipTest', 1), ('Cancellation());\n', 1), ('c.onNext(1);\n\n', 1), ('lastTwoOfFirstFourStringMapped', 1), ('this.error;\n', 1), ('#compose(MaybeTransformer)\n', 1), ('"\\"epic', 1), ('Invokable.from(generate).getParameters();\n', 1), ('FlowableSingle<T>', 1), ('assertNull(fo.get(5,', 1), ('ObservableFlatMap(ObservableSource<T>', 1), ('library,', 1), ('testOnStartRequestsAreAdditiveAndOverflowBecomesMaxValue()', 1), ('producerNode;\n', 1), ('.named("emptySet")\n', 1), ('ByteSourceTester.tests(\n', 1), ('testImmutableList()', 1), ('checkNotNull(valueComparator,', 1), ('FlowableFlattenIterable<T,', 1), ('remove(@NonNull', 1), ('postfix', 1), ('TimeUnit.class,\n', 1), ('pattern</a>.\n', 1), ('Arrays.asList(X,', 1), ('expressionProvider();\n\n', 1), ('ImmutableMap.this.entrySet().iterator();\n', 1), ('coresponding', 1), ('s1.onSuccess(v);\n', 1), ('odd', 1), ('upperBounds.hashCode();\n', 1), ('error).test().assertValue(1);\n', 1), ('ListAddBiConsumer', 1), ('assertTrue(ArbitraryInstances.get(SetMultimap.class).isEmpty());\n', 1), ('compliment\n', 1), ('CompletableFromRunnable(run));\n', 1), ('(containsKey(key))', 1), ('(Stats', 1), ('supplier.getClass();\n\n', 1), ('exists");\n', 1), ('firstEntry();\n', 1), ('asSet();\n\n', 1), ('CollectionFeature}', 1), ('io.reactivex.disposables.*;\n\n/**\n', 1), ('upperBounds.equals(Arrays.asList(that.getUpperBounds()));\n', 1), ('samples();\n\n', 1), ('(NumberFormatException', 1), ('OnBackpressureBufferStrategySubscriber(Subscriber<?', 1), ('javaImpl;\n', 1), ('checkArgument(lowerBounds.length', 1), ('E#interpret()}\n', 1), ('compose(CompletableTransformer', 1), ('this.factory.apply(children);\n', 1), ('InMemoryPrintStream()', 1), ('ArbitraryInstances.get(Random.class).nextInt(),\n', 1), ('totalCalls.incrementAndGet();\n', 1), ('this.blkQueue', 1), ('System.out.println("Second', 1), ('mongoClient', 1), ('FileByteSource', 1), ('timeGetWithSmallTimeout(long', 1), ('o.reduce(0,', 1), ('ArcherView(),', 1), ('.flatMap(Functions.justFunction(Maybe.<Integer>error(new', 1), ('createConsumerThrowsOnError()', 1), ('feature;', 1), ('suite.addTest(testsForTreeSetNatural());\n', 1), ('.mergeWith(Maybe.<Long>empty())\n', 1), ('cs2', 1), ('realizing', 1), ('values().remove(null)}.\n', 1), ('ts.assertValueAt(i,', 1), ('ignoring\n', 1), ('assertEquals(result,', 1), ('suite.addTest(testsForUnmodifiableList());\n', 1), ('"\\r\\n"}).\n', 1), ('<li>delete', 1), ('ArbitraryInstances.get(HashMap.class).size());\n', 1), ('<p>Since', 1), ('"//NTLNTL")', 1), ('mechanism.', 1), ('OneSizeTestContainerGenerator<T,', 1), ('Supplier<Lock>', 1), ('SingleDoOnDispose<T>', 1), ('Queues.newLinkedBlockingDeque(0);\n', 1), ('ObservableWindow<T>', 1), ('Comparator[]', 1), ('assertNull(RxJavaPlugins.onSingleLift(null));\n//\n//', 1), ('assertNotNull(ArbitraryInstances.get(Joiner.class).join(ImmutableList.of("a")));\n', 1), ('assertEquals(this.sergeantResponse.get(),', 1), ('.setDefault(URL.class,', 1), ('(In\n', 1), ('kdx;', 1), ('NotOwnerException.class,\n', 1), ('newWriter(File', 1), ('unblock', 1), ('"IoSchedulerTest";\n', 1), ('latch.', 1), ('map.put("sleeping",', 1), ('TestHelper.checkEnum(ParallelFailureHandling.class);\n', 1), ('pp.switchMapCompletable(new', 1), ('type},', 1), ('CharSink}', 1), ('reentrantNoOverflowHidden()', 1), ('CompletableNever', 1), ('ObservableSwitchMapCompletablePerf', 1), ('BlockingFirstSubscriber<T>', 1), ('completableError()', 1), ('newIterator', 1), ('}).blockingForEach(System.out::println);\n', 1), ('email', 1), ('RxJavaPlugins.createComputationScheduler(factory);\n', 1), ('SortedMap/SortedSet', 1), ('runnableThrows()', 1), ('.assertSubscribed().assertNotComplete()\n', 1), ('Collections.singletonList(Multisets.immutableEntry(e0(),', 1), ('multiplyCap()', 1), ('FileInputStream(aFile),', 1), ('b.substring(backpressureDoc,', 1), ('ObservableConcatMapSinglePerf', 1), ('IS_DIRECTORY', 1), ('(DisposableHelper.dispose(upstream))', 1), ('Assert.assertTrue("All', 1), ('SwitchMapSingleSubscriber<?,', 1), ('RxJavaPlugins.setOnConnectableFlowableAssembly(new', 1), ('java.util.concurrent.CompletableFuture#thenApply}', 1), ('suppressed\n', 1), ('com.google.common.collect.testing.testers.CollectionAddTester.getAddNullSupportedMethod;\nimport', 1), ('TestHelper.checkUtilityClass(BlockingFlowableMostRecent.class);\n', 1), ('testGet_regex()', 1), ('apply(MaybeObserver)}', 1), ('TestHelper.checkDoubleOnSubscribeFlowableToCompletable(new', 1), ('assertSame(expectedInstance,', 1), ('asByteSource(file).read(processor)}.', 1), ('notifications.', 1), ('ideal', 1), ('clearScalarQueue()', 1), ('backpressure-related', 1), ('d.run();\n', 1), ('Math.max(8,', 1), ('TestCompletable();\n', 1), ('cons);\n\n', 1), ('supplier.call();\n', 1), ('Index', 1), ('(CollectStrategy', 1), ('TakeObserver<T>', 1), ('withPublisherError2()', 1), ('ArbitraryInstances.get(Table.class));\n', 1), ('CombineLatestIterableTckTest', 1), ('MostRecentObserver(T', 1), ('src="https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/B.toFuture.png"', 1), ('cascade', 1), ('SUPPORTS_SET;\n\n', 1), ('factory.createSource(bytes).slice(off,', 1), ('PURGE_ENABLED_KEY', 1), ('CompletableFromAction', 1), ('wrong.', 1), ('(this.getStudents().contains(studentToBeDeleted))', 1), ('SingleDoAfterTerminate<T>', 1), ('com.iluwatar.servicelayer.wizard.Wizard;\nimport', 1), ('testOptionalDouble()', 1), ('non-deterministic,', 1), ('TestExecutor(MockExecutor', 1), ('BigInteger.ZERO)\n', 1), ('ShareTckTest', 1), ('boundaryObserver.compareAndSet(sender,', 1), ('accommodate', 1), ('MaybeObserver<Integer>()', 1), ('testsForEmptyList()', 1), ('ObservableReduceTests', 1), ('ArrayList<RxMethod>();\n\n', 1), ('(ISO646-US).\n', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnComplete.m.png"', 1), ('him', 1), ('setImplementation(Class<T>', 1), ('2L),', 1), ('(executor.compareAndSet(current,', 1), ('Maybe.just(1).takeUntil(Flowable.just("one"))\n', 1), ('ObservableSubscribeOn(ObservableSource<T>', 1), ('laser"},\n', 1), ('PublishProcessor.create().ignoreElements().blockingAwait(1,', 1), ('AbstractUndirectedNetworkConnections(Map<E,', 1), ('testsForSingletonSet()', 1), ('onNextFailure()', 1), ('testNullsBeforeB()', 1), ('ObservableSwitchMap<T,', 1), ('videos);\n\n\n', 1), ('m.takeUntil(Maybe.never());\n', 1), ('supplied,', 1), ('Arrays.asList(new', 1), ('Queen', 1), ('a.run();\n', 1), ('serviceJndiName', 1), ('StringConverter)', 1), ('asByteSource(file).asCharSource(charset);\n', 1), ('1891866368734007884L;\n\n', 1), ('exist",', 1), ('resumeSuccess()', 1), ('fromEntity;\n\n', 1), ('(byte[]', 1), ('this(12,', 1), ('(sourceList.isEmpty())', 1), ('ForwardingCondition', 1), ('com.iluwatar.servicelayer.spell.SpellDao;\nimport', 1), ('stack)', 1), ('RetryBiSubscriber(Subscriber<?', 1), ('(!isLockFree())', 1), ('printAndCountExceptions(Result', 1), ('ARRAY_MASK', 1), ('verifyNonBlocking();\n', 1), ('ObservableDistinctUntilChangedTest', 1), ('segment', 1), ('CharSource.empty();\n', 1), ('JAVA_SPECIFICATION_VERSION("java.specification.version"),\n\n', 1), ('source.subscribe(mostRecentObserver);\n\n', 1), ('libraries.\n', 1), ('fromPublisher(toFlowable().repeat(times));\n', 1), ('from(ListenableFuture<V>', 1), ('assertTrue(((Disposable)s).isDisposed());\n', 1), ('assertEquals(Collections.<Integer>emptyList(),', 1), ('testNewProxy()', 1), ('nullableReference}', 1), ('nonBlocking)', 1), ('Tenant})', 1), ('TestHelper.checkDisposed(PublishSubject.<Integer>create().singleOrError().doAfterTerminate(afterTerminate));\n', 1), ('termination,', 1), ('BlockingHelper()', 1), ('tickets.put(id,', 1), ('ParallelReduceFullInnerSubscriber<T>(this,', 1), ('<strong>terminal', 1), ('Multiset<E>', 1), ('MaybeJust(T', 1), ('ImmediateThinSchedulerTest', 1), ('ArrayList<>(list);\n', 1), ('FileWriter(filename);\n', 1), ('completable;\n\n', 1), ('reduceWithCovariantObjectsFlowable()', 1), ('countersCollection;\n\n', 1), ('PerfBoundedSubscriber(Blackhole', 1), ('DebounceTimedSubscriber<T>\n', 1), ('mapFactory.apply(evictionAction);\n', 1), ('observers.getAndSet(CANCELLED);\n', 1), ('u.getName();\n', 1), ('xchgProducerNode(LinkedQueueNode<T>', 1), ('testRejectedExecutionThrownWithMultipleCalls()', 1), ('com.google.common.collect.testing.AbstractMapTester;\nimport', 1), ('"Sword', 1), ('compilation', 1), ('over-wrapping?\n', 1), ('TestCase.");\n', 1), ('missed)', 1), ('java.nio.file\npublic', 1), ('backpressure.', 1), ('type)).subscribeOn(Schedulers.newThread());\n', 1), ('function}', 1), ('integerList.addAll(Arrays.asList(1,', 1), ('uselessLocales', 1), ('IllegalArgumentException()));\n', 1), ('state,\n', 1), ('BufferBoundarySubscriber(Subscriber<?', 1), ('BallThreadTest', 1), ('view.display();\n', 1), ('CakeViewImpl(bakingService);\n\n', 1), ('(parent.isCancelled()', 1), ('ObservableWithLatestFromMany<T,', 1), ('records', 1), ('spuriously', 1), ('Messages', 1), ('((Collection<T>)', 1), ('hash(File', 1), ('strict.\n@GwtIncompatible\nabstract', 1), ('subscribeOn}', 1), ('be).\n', 1), ('required");\n', 1), ('Pattern.compile(generateString());\n', 1), ('source.subscribe(tus);\n', 1), ('SimpleFluentIterable', 1), ('JavaVersion.CURRENT.usedInGenericType(lowerBounds);\n', 1), ('signal()', 1), ('BackpressureHelper.addCap(size,', 1), ('this.interestedOps', 1), ('resolveClass(clazz);\n', 1), ('Futures.transform(this,', 1), ('CompletableObserveOn(this,', 1), ('night\n', 1), ('on.', 1), ('DisposableMaybeObserverTest', 1), ('settings', 1), ('ComputationScheduler();\n', 1), ('EnumMap)', 1), ('io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle.ReduceSeedObserver;\n\n/**\n', 1), ('that.getGenericComponentType());\n', 1), ('delegate.contains(object);\n', 1), ('remove(inner);\n', 1), ('error");\n', 1), ('errorAfterCancel()', 1), ('list2.add(7);\n', 1), ('albumLinks)', 1), ('publisher}', 1), ('io.reactivex.internal.operators.maybe.MaybeZipArray.ZipCoordinator;\n\npublic', 1), ('java.awt.event.ActionListener;\n\nimport', 1), ('f.requestFusion(QueueSubscription.ANY);\n', 1), ('toFunction3()', 1), ('keys.iterator();\n\n', 1), ('UnitTest<U', 1), ('Maybe.timer(2,', 1), ('grandParent,', 1), ('stub\n\n', 1), ('FlowableSampleTimed(Flowable<T>', 1), ('delegate.isTerminated();\n', 1), ('of(elements[0]);\n', 1), ('3:21', 1), ('Maybes', 1), ('TYPE_NAME)))\n', 1), ('PURGE_PERIOD_SECONDS;\n\n', 1), ('signature;\n\n', 1), ('WithLatestFromSubscriber(Subscriber<?', 1), ('SimpleFluentIterable\n', 1), ('machines.\n', 1), ('checkedEntry(final', 1), ('javadocStart);\n\n', 1), ('delegate.firstEntry();\n', 1), ('blood"));\n', 1), ('hashCode();\n\n', 1), ('create(EnumBiMap.inferKeyType(map));\n', 1), ('check("Single");\n', 1), ('"x/y/z.jar")\n', 1), ('asList().iterator();\n', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.observeOn.png"', 1), ('users</h3>\n', 1), ('FlowableTimeInterval(Flowable<T>', 1), ('encodingStream.write(encodingInputs[i', 1), ('insertion\n', 1), ('MaybeEqualSingle<T>(source1,', 1), ('schedulerSpecEnd);\n', 1), ('"test-part-model";\n', 1), ('jt', 1), ('str)', 1), ('arrayType)', 1), ('MaybeObserver<U>', 1), ('java.util.function.Supplier;\nimport', 1), ('compiler,', 1), ('printCustomerDetails(List<CustomerDto>', 1), ('mock.assertLastMethodCalled("scheduleCallable",', 1), ('SingleObserver>', 1), ('ISO', 1), ('WeakReference<ReferenceQueue<Object>>', 1), ('assertTrue(list.addAll(Arrays.asList(3,', 1), ('java.util.Timer;\nimport', 1), ('assertNotNull(ArbitraryInstances.get(Type.class));\n', 1), ('CakeViewImplTest', 1), ('afterTerminateActionNull()', 1), ('Hand:', 1), ('HashMap<>());\n\n', 1), ('Logger.getLogger(Platform.class.getName());\n', 1), ('b.substring(backpressureSpec', 1), ('ConcatMapEagerDelayErrorSubscriber(Subscriber<?', 1), ('IntBuffer.class,\n', 1), ('WrappedCallable<T>', 1), ('encode(int', 1), ('mapFailWithRetryLimited()', 1), ('withFeatures(Arrays.asList(features));\n', 1), ('SingleSubscribeTest', 1), ('findAll();\n\n', 1), ('Maps.NavigableKeySet<>(this);\n', 1), ('IllegalArgumentException("Zero', 1), ('.named("ArrayList")\n', 1), ('getJavaChannel().configureBlocking(false);\n', 1), ('parent.onComplete.run();\n', 1), ('FlowableElementAt<T>', 1), ('StudentDataMapperImpl', 1), ('org.mockito.stubbing.Answer;\nimport', 1), ('Arrays.asList(inputs);\n', 1), ('sword"},\n', 1), ('SafeSubscriber<String>(o).onComplete();\n', 1), ('NavigableMap},', 1), ('testGetClassPathFromManifest_leadingBlanks()', 1), ('StudentDatabase();\n', 1), ('apply(MaybeSource<Object>', 1), ('"rw"));\n', 1), ('((HasUpstreamObservableSource<Integer>)o.map(Functions.<Integer>identity())).source());\n', 1), ('mergeDelayError(sources,', 1), ('outEdges()', 1), ('zeroes', 1), ('ImmutableMap.<K,', 1), ('patternStr', 1), ('FilePredicate', 1), ('CollectObserver(Observer<?', 1), ('layers.\n', 1), ('8.0\n', 1), ('FlatMapCompletableMainSubscriber(CompletableObserver', 1), ("object's", 1), ('MaybeTakeUntilPublisher(MaybeSource<T>', 1), ('CakeBakingService\n', 1), ('Hao\n', 1), ('executor.invokeAll(ImmutableList.of(task),', 1), ('RunnableAdapter(Runnable', 1), ('v5));\n', 1), ('SingleResumeNext<T>(this,', 1), ('<p>Assuming', 1), ('executorService;\n\n', 1), ('elements."\n', 1), ('UnsupportedOperationException()))\n', 1), ('ErrorView(),', 1), ('subscribeActual(MaybeObserver', 1), ('rco.onError(new', 1), ('putAll}.\n', 1), ('ArrayDeque<Throwable>();\n', 1), ('fromFuture()', 1), ('moreThanMaxWorkers()', 1), ('mock(Observer.class);\n', 1), ('normalPublisher()', 1), ('risus.', 1), ('(drained', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/timeout.2.png"', 1), ('NextIterator(ObservableSource<T>', 1), ('TestReader(TestInputStream', 1), ('AmbInnerObserver[count];\n', 1), ('DatagramChannel.open());\n', 1), ('testability.', 1), ('FlowableSequenceEqual<T>(first,', 1), ('length;\n\n', 1), ('initial)', 1), ('target[0];\n', 1), ('anything:', 1), ("don't.\n\n", 1), ('MAX_LOOK_AHEAD_STEP', 1), ('testProcess()', 1), ('UncheckedThrowingFuture(RuntimeException', 1), ('Iterables.get(instances,', 1), ('source.onBackpressureLatest().subscribe(ts);\n\n', 1), ('UrlByteSourceFactory();\n', 1), ('org.mockito.Mockito;\n\nimport', 1), ('instances");\n', 1), ('single-threaded</a>,', 1), ('stop;\n\n', 1), ('subclass.getGenericSuperclass();\n', 1), ('quam.', 1), ('constant;\n', 1), ('studentDatabase.insert(student);\n', 1), ('ResourceObserver<T>', 1), ('incidentEdges()', 1), ('iterable\n', 1), ('boolean-valued', 1), ('testDrainTimesOut(BlockingQueue<Object>', 1), ('strings[i]', 1), ('"first', 1), ('ObservableReduceMaybe(ObservableSource<T>', 1), ('locks.clear();\n', 1), ('opportunity', 1), ('y.jar")\n', 1), ('unprepare()', 1), ('streamB.spliterator();\n', 1), ('suite.addTest(testerSuite);\n', 1), ('bench.setUp();\n', 1), ('TakeUntilObserver<T>(serial,', 1), ('ReduceSubscriber<T>(s,', 1), ('closer.register(raf.getChannel());\n', 1), ('RxJavaPlugins.onAssembly((Completable)source);\n', 1), ('reactorMain.shutdownNow();\n', 1), ('log("Some', 1), ('Maps.unmodifiableNavigableMap(Maps.newTreeMap()))\n', 1), ('Single.amb(Arrays.asList(Single.just(1),', 1), ('-87,', 1), ('testNonExistentFile()', 1), ('ImmutableSortedSet))', 1), ('valueFunction);\n', 1), ('Constants', 1), ('methods!\n', 1), ('blockingGetTimeout()', 1), ('mapFailWithErrorConditional()', 1), ('IteratorFeature', 1), ('Slow.', 1), ('File(System.getProperty("java.io.tmpdir"));\n', 1), ('#get()}\n', 1), ('Potion>', 1), ('concat(ObservableSource<?', 1), ('MaybeFromActionTest', 1), ('-2108443387387077490L;\n\n', 1), ('deadline)', 1), ('TimeUnit.SECONDS).blockingGet();\n', 1), ('assertTrue(q.offer(7));\n\n', 1), ('FlowableFlatMapSinglePerf', 1), ('possible).\n', 1), ('file1.equals(file2))', 1), ('assertTrue(Files.lines(temporaryFile.toPath()).allMatch(testMessage::equals));\n', 1), ('SingleDoAfterTerminate<T>(this,', 1), ('"io.reactivex:trampoline";\n', 1), ('grow', 1), ('concatMapToObservableEmpty', 1), ('-7508389464265974549L;\n\n', 1), ('Inventory(int', 1), ('supplier::get}.\n', 1), ('rmo.errors.size());\n', 1), ('org.reactivestreams.*;\n\n@BenchmarkMode(Mode.Throughput)\n@Warmup(iterations', 1), ('you!",', 1), ('discover', 1), ('p.getType().get(),', 1), ('byteSink.wasStreamOpened();\n', 1), ('other.value', 1), ('failComputationObservableToFuture()', 1), ('ConcatMapSingleObserver(ConcatMapSingleSubscriber<?,', 1), ('getImplementation(type);\n', 1), ('assertNotNull(document.toString().contains(KEY));\n', 1), ('queryFuture', 1), ('dtm.addRow(new', 1), ('onParallelAssembly()', 1), ('set.add("e");\n', 1), ('AbstractCollectionTestSuiteBuilder<CollectionTestSuiteBuilder<E>,', 1), ('FlowableConcatWithCompletable(Flowable<T>', 1), ('Arrays.asList(arrayInner);\n\n', 1), ('java.lang.AutoCloseable},', 1), ('JAVA7.usedInGenericType(type);\n', 1), ('Single.zip(Arrays.asList(Single.just(1)),', 1), ('"GwtIncompatible,"', 1), ('DROP_OLDEST:\n', 1), ('this.completionValueSupplier', 1), ('fromPublisher(toFlowable().retryWhen(handler));\n', 1), ('TimeUnit.MINUTES)\n', 1), ('LOGGER.info(Validator.of(user).validate(User::getName,', 1), ('TypeVariable<?>', 1), ('docToTicket(Document', 1), ('Buffers', 1), ('Set<SelectionKey>', 1), ('list1)', 1), ('ObservableTakeUntil<T,', 1), ('Flowable.ambArray(\n', 1), ('"FlowableCollectSingle",\n', 1), ('</i>', 1), ('getMessages()', 1), ('fileTraverser()', 1), ('Dummies.DeterministicRandom.class);\n', 1), ('entryOf(K', 1), ('RegularImmutableList(List<E>', 1), ('-100L;\n\n', 1), ('scanner.scan(jarFile,', 1), ('#mergeArrayDelayError(MaybeSource...)\n', 1), ('dr', 1), ('Acquisition', 1), ('zip(Iterable<?', 1), ('EncodingOption(BaseEncoding', 1), ('Functions.justFunction(Single.never()),', 1), ('current.shutdownNow();\n', 1), ('System#getProperty(String)}.\n', 1), ('Thread.sleep(1);\n\n', 1), ('Array.newInstance(componentType.getRawType(),', 1), ('Files.copy(jarFile,', 1), ('(!deque.isEmpty())', 1), ('StringJoiner', 1), ('singleSupplier;\n', 1), ('(emptyInstanceGenerated.get(type.getType()).intValue()', 1), ('instantiation', 1), ('List<Spell>', 1), ('testAssertContains()', 1), ('testGoogleOptional()', 1), ('flush(Flushable', 1), ('ObservableSource.', 1), ('TreeMultimap<>(checkNotNull(keyComparator),', 1), ('ObservableCollectTest', 1), ('setLayers(Set<CakeLayer>', 1), ('topShelf.add(factory.createPotion(PotionType.HEALING));\n\n', 1), ('armor"));\n', 1), ('studentsToOperate.add(student);\n', 1), ('MeleeStrategy());\n', 1), ('w.toSortedList();\n\n', 1), ('SchedulerTest', 1), ('javax.security.auth.RefreshFailedException;\n\n/**', 1), ('Iterator<SelectionKey>', 1), ('createSingle()', 1), ('FeatureSpecificTestSuiteBuilder.suppressing()}', 1), ('RxJavaPlugins.class.getMethod("get"', 1), ('org.junit.Assert.assertThat;\n\nimport', 1), ('MaybeErrorTest', 1), ('delegate.comparator();\n', 1), ('BufferBoundarySubscriber(BufferBoundarySupplierSubscriber<T,', 1), ('e.contains("RxComputationThreadPool"));\n', 1), ('CompletableLift(this,', 1), ('SingleInternalHelperTest', 1), ('Collection', 1), ('com.google.common.io.TestOption.CLOSE_THROWS;\nimport', 1), ('tasks.add(command);\n', 1), ('CompletableConcat', 1), ('stream(com.google.common.base.Optional<T>', 1), ('ArrayListMultimapGwtSerializationDependencies(Map<K,', 1), ('this(Pattern.compile(patternStr));\n', 1), ('result.set(subtypeOfComponentType(t.getUpperBounds()));\n', 1), ('connection.prepareStatement("DELETE', 1), ('service.invokeAll(tasks)\n', 1), ('createDirectory(root.resolve("right"));\n', 1), ('scalarLimit;\n\n', 1), ('get();\n}\n', 1), ('samples.e4());\n', 1), ('requested();\n', 1), ('work.', 1), ('Partial', 1), ('StringConverter<T>(enumClass);\n', 1), ('never-signalling', 1), ('this.errors.add(e);\n', 1), ('throwingError(Error', 1), ('File(dataFileName))))', 1), ('Observable&lt;Integer>', 1), ('employ', 1), ('Collections.sort(t,', 1), ('g)', 1), ('this.genericDeclaration', 1), ('googleOptional}', 1), ('suppressing(Collection<Method>', 1), ('(latchedObserver.latch.getCount()', 1), ('Object[]{"NonExistentCommand",', 1), ('spscLinkedArrayQueueNull()', 1), ('assumption,', 1), ('System.out.println("Total:', 1), ('ExecutorScheduler(@NonNull', 1), ('ThreadLocal<DateFormat>()', 1), ('Have', 1), ('Maybe.timer(1,', 1), ('NullPointerException);\n//', 1), ('fromEntity', 1), ('domain\n', 1), ('checkSchedulerBadMethod(Maybe.class.getSimpleName());\n', 1), ('this.observable', 1), ('mostly.\n', 1), ('Register', 1), ('DwarvenGoldDigger());\n', 1), ('checkNotNull(fullName);\n', 1), ('Most', 1), ('converter.convert("POODLE"));\n', 1), ('FilterTckTest', 1), ('afterScenario(cucumber.api.Scenario', 1), ('generateComparator()', 1), ('eagerMapperThrowsDisposerThrows()', 1), ('accessor.\n', 1), ('[Hi!]', 1), ('c.onSubscribe(d);\n\n', 1), ('Collection#stream}.\n', 1), ('com.google.common.collect.testing.testers.ListSubListTester.getSubListOriginalListSetAffectsSubListMethod;\nimport', 1), ('fileByteSourceFactory()', 1), ('testGetResource_relativePath_notFound()', 1), ('initMapWithNullKey();\n', 1), ('{1,', 1), ('errorTask', 1), ('ArbitraryInstances.get(Stopwatch.class).start();\n', 1), ('entire', 1), ('generateSortedMultiset(\n', 1), ('"read', 1), ('iterableCancelled()', 1), ('y)', 1), ('bar', 1), ('Splitr>', 1), ('testImmutableSet()', 1), ('Saves', 1), ('builder,', 1), ('trySet()', 1), ('FlowableSequenceEqualSingle<T>', 1), ('Producer}-{@link', 1), ('Marker', 1), ('9:\n', 1), ('SUBSIZED.\n', 1), ('t2.join();\n', 1), ('TcpLoggingClient', 1), ('IllegalStateException},', 1), ('failSingleMaybeBlockingGet()', 1), ('generateMultiset(E', 1), ('fromSpliterator.trySplit();\n', 1), ('System.out.println("Press', 1), ('idToCustomer', 1), ('List<TearDown>', 1), ('URL("file:///C:\\\\Program', 1), ('FlowableElementAtMaybe(Flowable<T>', 1), ('rail.\n', 1), ('CollectStrategy', 1), ('Placeholder', 1), ('Schedulers.computation();', 1), ('otherOnNextCompletable()', 1), ('flaw', 1), ('com.google.common.collect.testing.features.CollectionSize.ZERO;\nimport', 1), ('Arrays.fill(arrayInner,', 1), ('ReduceSubscriber(MaybeObserver<?', 1), ('MyError();\n', 1), ('InnerQueuedObserver<T>\nextends', 1), ('SourceSinkFactories.urlByteSourceFactory(),', 1), ('Math.log(n)', 1), ('gd', 1), ('toSingle(Flowable.<T>fromFuture(future));\n', 1), ('testIsInStrictOrder()', 1), ('newBuilderUsing(\n', 1), ('zipping}', 1), ('testJust()', 1), ('TimeoutMainObserver(SingleObserver<?', 1), ('#%d!",', 1), ('AlbumPage', 1), ('deque.removeFirst();\n', 1), ('AsyncSubscription<T>(s,', 1), ('testDistinctUntilChangedOfSourceWithExceptionsFromKeySelector()', 1), ('.assertFailure(InterruptedException.class);\n', 1), ('neque,', 1), ('#connect(Consumer)}', 1), ('-1L,', 1), ('interested,', 1), ('testNullPointerExceptions()', 1), ('getList().listIterator();\n', 1), ('TestException())).test();\n\n', 1), ('plus\n', 1), ('compilePattern(String', 1), ('allocate', 1), ('PURGE_ENABLED', 1), ('with.\n', 1), ('emptyActionToString()', 1), ('initialize()', 1), ('Write.\n', 1), ('TakeUntilMainObserver<?>', 1), ('IllegalArgumentException(rootLocaleFormat("%s', 1), ('indices', 1), ('dr.timed.replace(delayed);\n\n', 1), ('Thread(()', 1), ('scheduledExecutor)', 1), ('java.math},', 1), ('backport', 1), ('AbstractNavigableMap<K,', 1), ('Flowable.just(1).map(new', 1), ('printString(final', 1), ('toppingBean', 1), ('minimalist', 1), ('(!delayError)', 1), ('consumerNode.lazySet(node);\n', 1), ('BufferBoundaryObserver(Observer<?', 1), ('Lists.newArrayListWithCapacity(initialCapacity);\n', 1), ('ListenableFuture<QueryResult>', 1), ('SortedSet<R>', 1), ('SingleFlatMapIterableObservable<T,', 1), ('apply(GroupedFlowable<Integer,', 1), ('generateOrdering()', 1), ('fromCompletable(CompletableSource', 1), ("what's", 1), ('@{@link', 1), ('Completable.complete().doFinally(null);\n', 1), ('v3));\n', 1), ('generateTable(R', 1), ('makeJarUrlWithName(String', 1), ('StartingData(startTime);\n', 1), ('innerR.get());\n', 1), ('Suppliers}', 1), ('getDao()', 1), ('https://github.com/JCTools/JCTools/blob/master/jctools-core/src/main/java/org/jctools/util/Pow2.java\n', 1), ('(TestEnum', 1), ('RuntimeException.class,\n', 1), ('TestObserver<Object>());\n', 1), ('testGet_comparable()', 1), ('define\n', 1), ('decoratedRun)', 1), ('m.backpressureDocLine', 1), ('ByteSource.concat(source,', 1), ('ForEachWhileObserver(Predicate<?', 1), ('spellDao;\n', 1), ('occur";\n\n', 1), ('CopyOnWriteArrayList<>(MinimalCollection.of(elements));\n', 1), ('LOGGER.info(videoDetails);\n\n', 1), ('"SingleSchedulerTest";\n', 1), ('@Autowired\n', 1), ('Prototype>', 1), ('processing;', 1), ('ThrottleTimerImpl(int', 1), ('ObservableIntervalRange', 1), ('wrapTask(Callable<T>', 1), ('CollectionTestSuiteBuilder', 1), ('fullPath);\n', 1), ('BooleanRunnable(decoratedRun);\n\n', 1), ('dang', 1), ('DoOnSubscribeSingleObserver<T>', 1), ('asyncResult.await();\n', 1), ('java.util.function.LongConsumer;\nimport', 1), ('longerSequence()', 1), ('file.listFiles();\n', 1), ('Always', 1), ('Helpers.copyToList(super.getTesters());\n', 1), ('extension.', 1), ('Composite', 1), ('deque.offer(t);\n\n', 1), ('assertTrue(rso.errors.contains(error));\n', 1), ('errorList(TestSubscriber<?>', 1), ('Consumer)\n', 1), ('parent.innerNext();\n\n', 1), ('comparer);\n', 1), ('libraryFunctionActingOnMovieObservables(Flowable<Movie>', 1), ('final\n', 1), ('FindCustomer(String', 1), ('amet,', 1), ('ArbitraryInstances.get(float.class));\n', 1), ('OnErrorNotImplementedException(new', 1), ('menuActions', 1), ('second</li>\n', 1), ('Iterables.getOnlyElement(map.entrySet());\n', 1), ('TestException);\n\n', 1), ('differentOrder);\n', 1), ('BufferCloseObserver(BufferBoundaryObserver<T,', 1), ('Error");\n', 1), ('8567835998786448817L;\n', 1), ('menuItemSelected(MenuItem', 1), ('name";\n', 1), ('TypeToken<ImmutableCollection<EmptyEnum>>()', 1), ('LOCK_SUPPLIER', 1), ('innerComplete(InnerQueuedSubscriber<Integer>', 1), ('onCompleteSupplier', 1), ('allSampleElements', 1), ('400),', 1), ('tester.init(subjectGenerator,', 1), ('satisfy', 1), ('t.getCause();\n', 1), ('emptyEnum()', 1), ('PartiallyGwtIncompatible}', 1), ('(DisposableHelper.set(this,', 1), ('R>\nextends', 1), ('veryEnd;\n', 1), ('(numbers', 1), ('-4627193790118206028L;\n\n', 1), ('BufferSkipObserver(Observer<?', 1), ("Letter('c'),", 1), ('DirectedNetworkConnections(\n', 1), ('t2.start();\n\n', 1), ('log(String', 1), ('PrimitiveIterator.OfLong', 1), ('aliquet', 1), ('ArrayList<>(0x10000);\n', 1), ('this.lazySet(onDispose);\n', 1), ('LastObserver(SingleObserver<?', 1), ('io.reactivex.functions.BiFunction;\n\n@BenchmarkMode(Mode.Throughput)\n@Warmup(iterations', 1), ('ObjectHelper.requireNonNull(completableFunction.apply(resource),', 1), ('assertEquals(integers.get(3),', 1), ('requestInBatches()', 1), ('Deque.class,\n', 1), ('\\u22909"));\n', 1), ('AccountAggregate()', 1), ('ArbitraryInstances.get(Short.class));\n', 1), ('spells', 1), ('scalar,', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/defaultIfEmpty.png"', 1), ('testOnlyOneOpen()', 1), ('errors.addThrowable(ex))', 1), ('key.attachment();\n', 1), ('connectableFlowable)', 1), ('companion', 1), ('SimpleFluentIterable<>(copy);\n', 1), ('DecoratingIterator<T>(null)', 1), ('TypeToken<ConcurrentMap<String,', 1), ('ifPresent},', 1), ('ScheduleFuture.\n', 1), ('onSchedule(Schedulers.newThread().createWorker());\n', 1), ('LOGGER.info("Exception', 1), ('scheduler.schedulePeriodicallyDirect(this,', 1), ('System.out.printf("Peak:', 1), ('SourceObserver(PublishSubject<T>', 1), ('onSchedule(Schedulers.computation().createWorker());\n', 1), ('packets.\n', 1), ('observer.blockingGetError();\n', 1), ('WrappingExecutorServiceTest\n', 1), ('rangeFlatMap', 1), ('part.getType().get());\n', 1), ('DelaySubscriber<T>', 1), ('mapFailWithError()', 1), ('(collector.characteristics().contains(Collector.Characteristics.UNORDERED))', 1), ('onCancel));\n', 1), ('assertEquals(list.toString(),', 1), ('qd.requestFusion(QueueDisposable.ANY', 1), ('cancelNoOp()', 1), ('onSuccessThrows2()', 1), ('.parallel(1,', 1), ('MaybeFlatMapBiSelector<T,', 1), ('Maybe.concatArray(source,', 1), ('ConcatArraySubscriber(Publisher<?', 1), ('onCompleteFailure()', 1), ('innerComplete(LeftRightSubscriber', 1), ('.named("Arrays.asList")\n', 1), ('.put(Readable.class,', 1), ('isProtected()', 1), ('error(SingleInternalHelper.<T>emptyThrower());\n', 1), ('"Failure', 1), ('ConcatPublisherTckTest', 1), ('takeFirst()', 1), ('asSubscriber()', 1), ('(ThreadDeath)', 1), ('stream.spliterator();\n', 1), ('b.indexOf("<dt><b>Backpressure:</b></dt>",', 1), ('"resultSelector', 1), ('sun.misc.Unsafe)\n', 1), ('super(Platform.<K,', 1), ('file.createNewFile();\n', 1), ('SubscribeOnMaybeObserver(MaybeObserver<?', 1), ('FIFO', 1), ('URL("file:///absolute/path/to/some.jar"));\n\n', 1), ('merger.apply(Arrays.asList(3,', 1), ('ft.run();\n', 1), ('fs.get(1,', 1), ('300L);\n\n', 1), ('BurstSubscription(Subscriber<?', 1), ('builder.append(getClass().getName()).append("[");\n', 1), ('RxJavaPlugins.onError(n.getError());\n', 1), ('iterations;', 1), ('1000).any(new', 1), ('this.body', 1), ('Single.equals(Single.error(new', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.flatMap.png"', 1), ('workerDisposed()', 1), ('isStatic()', 1), ('}).toObservable().blockingLast().toString();\n\n', 1), ('computation-bound', 1), ('testSortedMap()', 1), ('(type)', 1), ('".class");\n\n', 1), ('copy-pasted', 1), ('rowKeySet();\n\n', 1), ('charset).readLines()}.\n', 1), ('RunnableAdapter<T>(task,', 1), ('nazguls.put(NazgulName.KHAMUL,', 1), ('LazyFluentIterable.from(integerList).filter(positives()).first(4).last(2)\n', 1), ('Assert.assertTrue("Some', 1), ('(!tryOnNext(t))', 1), ('assertTrue(atomicBoolean.get());\n', 1), ('LotteryNumbers.create(numbers);\n', 1), ('cope', 1), ('ImmutableSet<V>>>()', 1), ('pp.onNext(3);\n\n', 1), ('INTO', 1), ('to2.assertResult(2);\n', 1), ('scheme.result(collector,', 1), ('this.strings;\n', 1), ('releaseIndex.incrementAndGet()', 1), ('DebounceInnerSubscriber(DebounceSubscriber<T,', 1), ('AtomicInteger>', 1), ('topShelf)', 1), ('(section\n', 1), ('.put(ImmutableMultiset.class,', 1), ('Exception.class,\n', 1), ('<p>However,', 1), ('java.util.concurrent.CompletableFuture#whenComplete}', 1), ('java.util.Collections.disjoint;\nimport', 1), ('satisfied', 1), ('completeAfterMainDelayError()', 1), ('.named("singleton")\n', 1), ('assertEquals(property.key()', 1), ('MapViewOfValuesAsSingletonSets(),', 1), ('testListenerDoesNotRunUntilTaskCompletes()', 1), ('exclusive\n', 1), ('FlowableSkipLastTimed(Flowable<T>', 1), ('com.iluwatar.facade;\n\nimport', 1), ('REMOVE,\n', 1), ('testFirstCount()', 1), ('produced(AtomicLong', 1), ('testGetResource_contextClassLoader()', 1), ('FlattenRangePerf', 1), ('SequentialExecutor(\n', 1), ('collectionSize;\n\n', 1), ('boolean.\n', 1), ('overwritten\n', 1), ('LoggerFactory.getLogger(AppClient.class);\n\n', 1), ('io.reactivex.observers.DefaultObserver;\n\n@SuppressWarnings("unchecked")\npublic', 1), ('fillInStackTrace()', 1), ('"observable', 1), ('mapFactory;\n\n', 1), ('eu', 1), ('(menuItem)', 1), ('useOfLoggedMute();\n\n', 1), ('Arrays.setAll(children,', 1), ('spellbookDao.findByName(name);\n', 1), ('tasksPerThread', 1), ('checkNotNull(e.getValue()));\n', 1), ('Dispatcher}.\n', 1), ('a1);\n', 1), ('fail.append(".java:1)\\r\\n\\r\\n");\n\n', 1), ('source2.subscribe(observer2);\n', 1), ('before.\n', 1), ('SortedSetMultimapAsMapTester<K,', 1), ('Delay(set,', 1), ('Single&lt;Integer&gt;', 1), ('Suspendisse', 1), ('"email', 1), ('rangeObservable', 1), ('R>(a,', 1), ('Logger.getLogger(FileLoggerModule.class);\n\n', 1), ('testOnErrorExceptionIsThrownFromSingleSubscribe()', 1), ('onErrorInner(e);\n', 1), ('ts.assertValue(0L);\n\n', 1), ('7)));\n', 1), ('{interfaceType},', 1), ('bufferHelper("\\r\\n\\r\\n",', 1), ('assertNull(((ScalarCallable<?>)m).call());\n', 1), ('fromSingle(SingleSource<T>', 1), ('Serialization.populateMultiset(this,', 1), ('ObservableFlattenIterable(ObservableSource<T>', 1), ('Observable<T>>\n', 1), ('com.google.common.base.Objects;\nimport', 1), ('indicator,', 1), ('onAfterNext}', 1), ('DoubleStream}', 1), ('(split', 1), ('processPendingCommands()', 1), ('request(1);\n\n', 1), ('LoggerFactory.getLogger(ServiceCache.class);\n\n', 1), ('Streams</a>.\n', 1), ('FlowableOnBackpressureBufferStrategy<T>', 1), ('shouldConstructCar()', 1), ('C++', 1), ('.subscribeOn(Schedulers.newThread());\n', 1), ('wizards', 1), ('setDefault(BaseEncoding.class,', 1), ('this.rest', 1), ('(innerError', 1), ('JTable(dtm);\n', 1), ('cleanly', 1), ('TestHelper.checkUtilityClass(Schedulers.class);\n', 1), ('testsForPriorityQueue()', 1), ('ExecutorSchedulerTest', 1), ('LatestSubscriberIterator<T>();\n', 1), ('cachedValues;\n', 1), ('List<Book>', 1), ("Letter('p'),", 1), ('V>());\n', 1), ('MenuAction(menuItem));\n', 1), ('.put(BigInteger.class,', 1), ('concatWith(CompletableSource', 1), ('ClassLoader.', 1), ('7);\n\n', 1), ('"three");\n\n', 1), ('".java";\n\n', 1), ('Converter<>(\n', 1), ('k,', 1), ('LineProcessor}', 1), ('vulnerabilities,', 1), ('.sorted(new', 1), ('PAGE_URL', 1), ('ba4', 1), ('\\u22909")))', 1), ('NewThreadHolder', 1), ('topping,', 1), ('source.onNext(9);\n', 1), ('MaybeEmptyTest', 1), ('ThreadDeath());\n', 1), ('testForEachEntry()', 1), ('annotationClass.getDeclaringClass()),\n', 1), ('InfiniteRange', 1), ('assertFalse(s.isCancelled());\n', 1), ('Thread.sleep(this.delay);\n', 1), ('servers.get(lastServedId++);\n', 1), ('threaded', 1), ('special,', 1), ('").append(stat.name()).append(\':\').append(value).append(\'\\n\');\n', 1), ('identified', 1), ('FutureSubscriber<T>', 1), ('OptionalDouble.of(boxedLast.get())', 1), ('"risus', 1), ('low', 1), ('numStripes;', 1), ('ObservableDistinct(ObservableSource<T>', 1), ('buffers.iterator();\n', 1), ('callbacks.\n', 1), ('closed.\n', 1), ('actual.onSuccess(o1', 1), ('checkNotNull(delegate);\n', 1), ('Iterable<Entry<AnEnum,', 1), ('assertFalse(fo.isCancelled());\n', 1), ('QueuingExecutor();\n', 1), ('toFunction5()', 1), ('lastEntry();\n', 1), ('next.shutdownNow();\n', 1), ('testCollectorFailureDoesNotResultInTwoErrorEmissionsFlowable()', 1), ('CacheDisposable[0];\n', 1), ('merge0}', 1), ('RetrySubscriber(Subscriber<?', 1), ('java.util.concurrent.Future;\n\n/**', 1), ('o.onComplete();\n', 1), ('-6246093802440953054L;\n\n', 1), ('typeVariableInvocationHandler', 1), ('Reflection()', 1), ('mainComplete()', 1), ('ConcatMapTckTest', 1), ('testGetClassPathFromManifest_relativeDirectory()', 1), ('children(File', 1), ('resetContainer();\n\n', 1), ('setReactor(NioReactor', 1), ('io.reactivex.observers;\n', 1), ('.put(OptionalLong.class,', 1), ('first.get()', 1), ('entryIterator();\n\n', 1), ('ParallelFromPublisherTest', 1), ('SubscriptionHelper.deferredRequest(actual,', 1), ('8).equals("SingleObserver"))', 1), ('collective', 1), ('<10', 1), ('"album-list.html";\n', 1), ('o.scan("",', 1), ('fusedAsyncConditional2()', 1), ('this.consumerIndex', 1), ('TYPE_NAME', 1), ('ticketsCollection.find(new', 1), ('bankAccount)', 1), ('separates', 1), ('executor.endProcess(asyncResult3);\n', 1), ('asyncResult3', 1), ('.concatMapCompletable(completableError()));\n', 1), ('spamming', 1), ('ObservableBufferExactBoundary(ObservableSource<T>', 1), ('biConsumerIsDisposedOnSuccess()', 1), ('testAddAndRemove(mapMaker.<String,', 1), ('GcFinalization.awaitClear(queueReference);\n', 1), ('se', 1), ('createFluentIterable(integers).spliterator();\n', 1), ('AtomicReference<SingleSubject<T>>', 1), ('io.reactivex.observable.ObservableEventStream.Event;\n\npublic', 1), ('observable,', 1), ('retryPredicate()', 1), ('Sampson\n', 1), ('methods.addAll(super.suppressForConcurrentSkipListMap());\n', 1), ('LotteryNumbers.NUM_NUMBERS);\n', 1), ('rangeObservableFlatMap.subscribe(new', 1), ('checkNotNull(valueFunction);\n', 1), ('fruit', 1), ('SubscriptionHelper.deferredSetOnce(this,', 1), ('rangeObservableFlatMap(Blackhole', 1), ('FailOnBlockingTest', 1), ('RetryTckTest', 1), ('private,', 1), ('ByteArrayOutputStream());\n', 1), ('ForwardingSet<Entry<Class<?', 1), ('Observable.<String>error(new', 1), ('!pp.hasSubscribers())', 1), ('MaybeCount<T>(this));\n', 1), ('checkAndUpdateLicenses()', 1), ('isAccessible()', 1), ('crashOnComplete;\n', 1), ('MoreFiles.asByteSink(file);\n', 1), ('MapTestSuiteBuilderTests()', 1), ('MaybePeekObserver<T>', 1), ('OrcBeast("axe"),', 1), ('inference.\n', 1), ('Flowable.just(1).repeat(elements);\n', 1), ('(ConditionalSubscriber<?', 1), ('"testListIterator_unmodifiable");\n', 1), ('aliquam', 1), ('System.out.println(string);\n', 1), ('-3176480756392482682L;\n\n', 1), ('is(n));\n', 1), ('(intersect(features,', 1), ('SpscArrayQueue<R>(prefetch);\n', 1), ('com/google/common/io/testdata/i18n.txt"\n', 1), ('endError()', 1), ('comparator()', 1), ('onCompleteCrashConditional()', 1), ("ImmutableList's\n", 1), ('attempts.zipWith(Publisher.range(1,', 1), ('org.junit.Before;\nimport', 1), ('Single};', 1), ('validateNullThrows()', 1), ('ObservableEventStream', 1), ('delegate.run();\n', 1), ('SerializableTester.reserializeAndAssert(Enums.stringConverter(TestEnum.class));\n', 1), ('.switchMapMaybe(Functions.justFunction(Maybe.just(1)))\n', 1), ('FAILED)', 1), ('testEmpty(BlockingQueue<Object>', 1), ('UnsubscribeFailedException);\n', 1), ('printThisAfter()', 1), ('Strings:', 1), ('bothEmpty()', 1), ('LOGGER.info("Walking', 1), ('MaybeDetach<T>(this));\n', 1), ('(periodic)', 1), ('InnerQueuedSubscriber<Integer>', 1), ('rule', 1), ('delta))', 1), ('appendingFileCharSinkFactory()', 1), ('DataInputStream(new', 1), ('(ex.getCause()', 1), ('testActual()', 1), ('wrap((MaybeSource<T>)sources[0]);\n', 1), ('this.tillTheEnd', 1), ('org.junit.Rule;\nimport', 1), ('randomIterator.nextInt();\n', 1), ('program...");\n', 1), ('})\n@OutputTimeUnit(TimeUnit.SECONDS)\n@State(Scope.Thread)\npublic', 1), ('assertNoRecordsLogged(),\n', 1), ('reserialized")\n', 1), ('beyond', 1), ('(suppressThrows)', 1), ('creation\n', 1), ('sergeantResponse,', 1), ('executable', 1), ('com.google.common.collect.testing.testers.CollectionAddTester.getAddNullUnsupportedMethod;\nimport', 1), ('unit.sleep(delay);\n', 1), ('exec;\n\n', 1), ('right));\n', 1), ('ticketsCollectionName,', 1), ('fo;\n\n', 1), ('shifts', 1), ('testConversionsStartingFromDto()', 1), ('future.get(),', 1), ('exclusion.\n', 1), ('ObservableDoOnTest', 1), ('(paramType.isPrimitive())', 1), ('futures)', 1), ('sc)', 1), ('MaybeUnsubscribeOnTest', 1), ('futureNull()', 1), ('QueueSubscription<T>()', 1), ('items.size();', 1), ('com.google.common.util.concurrent.ForwardingListenableFuture.SimpleForwardingListenableFuture;\nimport', 1), ('\'").append(mname).append("\'\\r\\n")\n', 1), ('rxThreads', 1), ('results.\n', 1), ('IllegalStateException)', 1), ('CustomerResource})', 1), ('Arrays.asList(createArrayWithNullValue());\n', 1), ('java.util.Collection;\n\nimport', 1), ('serviceCache;\n\n', 1), ('getChunkedReader(String', 1), ('mapFailWithSkipConditional()', 1), ('executorService.shutdownNow();\n', 1), ('"relative/path/to/class/root",\n', 1), ('ObjectHelper.requireNonNull(observableSource,', 1), ('main(final', 1), ('("\\n"', 1), ('first.get();\n', 1), ('ThrottleTimerImpl(10);\n', 1), ('this.found', 1), ('service.\n', 1), ('MaybeIsEmptySingleTest', 1), ('rx2.purge-enabled}', 1), ('Thread.interrupted();', 1), ('ToObservable', 1), ('io.reactivex.annotations.SchedulerSupport#IO', 1), ('ps1.onComplete();\n\n', 1), ('subscribers.add(bc);\n', 1), ('Optional.ofNullable(callback);\n', 1), ('ObjectHelper.equals(o1,', 1), ('testsForCopyOnWriteArraySet()', 1), ('views.add(view);\n', 1), ('-4945028590049415624L;\n\n', 1), ('Maps.keyOrNull(lowerEntry(key));\n', 1), ('lookAheadStep;\n\n', 1), ('single,', 1), ('value="', 1), ('orderPreservingCopy', 1), ('directoryOf(String', 1), ('Executors.newFixedThreadPool(10);\n', 1), ('Traverser<File>', 1), ('this.bytes', 1), ('KEY_NEWTHREAD_PRIORITY', 1), ('hashCode(Object', 1), ('FlowableReduce<T>', 1), ('m.getParameterTypes()[0];\n\n', 1), ('doOnCancel(@NonNull', 1), ('MaybeFromFuture(Future<?', 1), ('doOnDisposeCrash()', 1), ('GenericArrayTypeImpl', 1), ('rest.getAndSet(CANCELLED);\n', 1), ('FlowableTake(Flowable<T>', 1), ('dedupe(elements);\n', 1), ('setSize(640,', 1), ('mapperReturnsNullObservable()', 1), ('newParameterizedType(Class<?>', 1), ('Flowable.just((String)null);\n', 1), ('ZipSingleObserver(ZipCoordinator<T,', 1), ('accounts.put(bankAccount,', 1), ('ObjectHelper.requireNonNull(completableFunction,', 1), ('CountDownLatch(2);\n\n', 1), ("Future}'s\n", 1), ('this.dao;\n', 1), ('List<ContentAction>', 1), ('disappear.', 1), ("MaybeSource}'s", 1), ('emissionRequestRace()', 1), ('concurrently.', 1), ('CompletableEmitter,', 1), ('*/\n@Beta\n@CanIgnoreReturnValue\n@GwtIncompatible\npublic', 1), ('NativeTypeVariableEquals<X>', 1), ('onErrorSuccessWithUnsubscribeFailure()', 1), ('Completable.create(null);\n', 1), ('MaybeCreate<T>(onSubscribe));\n', 1), ('conversions\n', 1), ('ambArrayEmpty()', 1), ('SerializedForm(delegate());\n', 1), ('Arrays.hashCode(comparators);\n', 1), ('cls);\n', 1), ('placerat', 1), ('BackpressureHelper.addCap(Long.MAX_VALUE', 1), ('producerIndex.lazySet(newIndex);\n', 1), ('SECONDS));\n', 1), ('courage"));\n', 1), ('edge', 1), ('Sets.hashCodeImpl(this);\n', 1), ('bench', 1), ('JAVA_SPECIFICATION_VENDOR("java.specification.vendor"),\n\n', 1), ('generateHashBasedTable(row,', 1), ('Result(Future<Object>', 1), ('TypeToken<ImmutableList<String>>()', 1), ('MySubscriber(long', 1), ('maybe;\n', 1), ('assertEquals(initialDelay,', 1), ('consumerIndex();\n\n', 1), ('Collections.swap(list,', 1), ('StripBoundarySubscriber<T>', 1), ('e.onNext(i);\n', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doAfterTerminate.png"', 1), ('immutableEntry', 1), ('clients");\n', 1), ('findPattern("QueueDisposable\\\\.(NONE|SYNC|ASYNC|ANY|BOUNDARY)");\n', 1), ('SingleFlatMapCompletable<T>', 1), ('testCollectorFailureDoesNotResultInErrorAndCompletedEmissionsObservable()', 1), ('single2single', 1), ('Flowable.just(1).switchMapDelayError(Functions.justFunction(\n', 1), ('servant.feed(k);\n', 1), ('Flowable.timer(0,', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/delaySubscription.png"', 1), ('ARRAY_SIZE', 1), ('(!from.delete())', 1), ('PartyImpl()', 1), ('"output.txt";\n', 1), ('false).lastEntry();\n', 1), ('LOGGER.info("Logging', 1), ('createAndCacheHeavy();\n\n', 1), ('!b.isEmpty())', 1), ('RepeatUntilObserver(Observer<?', 1), ('RxJavaPlugins.onObservableReturn(subscription));\n//\n//', 1), ('reached.\n', 1), ('base.doOnEach(sideEffectObserver);\n\n', 1), ('backpressureKind;\n\n', 1), ('generator.create(elements);\n', 1), ('single-thread-backed', 1), ('programmed', 1), ('Spliterators.iterator(splitrB);\n', 1), ('suggestions.\n', 1), ('Here', 1), ('this.typeVariableImpl', 1), ('AmbMaybeObserver<T>\n', 1), ('durations', 1), ('URISyntaxException.class);\n\n', 1), ('CrashingIterable(int', 1), ('(int)elements).skipUntil(Flowable.just(1))\n', 1), ('Tolerant', 1), ('s.scheduleDirect(Functions.EMPTY_RUNNABLE));\n\n', 1), ('m.value', 1), ('AsyncSubject<T>();\n', 1), ('testsForEmptySet()', 1), ('asyncResult.getValue();\n', 1), ('positive.\n', 1), ('SUPPORTS_REMOVE);\n\n', 1), ('SelectionKey\n', 1), ('setLayers(new', 1), ('logger.fine("Expanded:', 1), ('List<ClassValue<?>>', 1), ('HashSet<>());\n', 1), ('loaded;\n\n', 1), ('TakeUntil(ArrayCompositeDisposable', 1), ('-3031974433025990931L;\n\n', 1), ('checkDisposed(Maybe<?>', 1), ('suppressForTreeSetWithComparator()', 1), ('SubscriptionHelper.deferredSetOnce(actual,', 1), ('consumerErrorThrows()', 1), ('module,', 1), ('c.observeOn(Schedulers.single());\n', 1), ('file.delete();\n', 1), ('assertTrue(ticket4.isPresent());\n', 1), ('DisposableObserverTest', 1), ('200)', 1), ('ArrayBlockingQueue<Message>(1024);\n', 1), ('CountSubscriber(s));\n', 1), ('{Object.class}', 1), ('System.out.printf("Starting:', 1), ('InvalidObjectException("Use', 1), ('executor.execute(br);\n', 1), ('tearDown",', 1), ('safe\n', 1), ('this</a>', 1), ('InvocationHandler()', 1), ('ConsumerSingleObserver(Consumer<?', 1), ('create(ObjectCountHashMap.DEFAULT_SIZE);\n', 1), ('tickets.get(id);\n', 1), ('methods.add(getContainsEntryWithIncomparableKeyMethod());\n', 1), ('mask)]).hashCode();\n', 1), ('compareTo(null)', 1), ('newFile(String', 1), ('interestedOps\n', 1), ('(WithLatestInnerSubscriber', 1), ('dispatcher.menuItemSelected(MenuItem.HOME);\n', 1), ('<V>\n', 1), ('.suppressing(suppressForLinkedHashSet())\n', 1), ('MaybeIgnoreElementCompletable<T>', 1), ('http://docs.oracle.com/javase/7/docs/technotes/guides/language/try-with-resources.html\n', 1), ('assertFalse(executor.isTerminated());\n', 1), ('height="333"', 1), ('Dispatcher.class.getDeclaredConstructor();\n', 1), ('FlowableDoOnTest', 1), ('w.subscribe(to);\n\n', 1), ('suite.addTest(testsForArrayDeque());\n', 1), ('first.queue;\n', 1), ('sacrifice', 1), ('#mergeArrayDelayError(MaybeSource...)}', 1), ('loadAll(Iterable<?>', 1), ('COMPUTATION})\n', 1), ('getZ());\n', 1), ('((map', 1), ('place', 1), ('newArrayList(E[])}', 1), ('copying', 1), ('o.onError(err2);\n', 1), ('reference\n', 1), ('MaybeDelaySubscriptionOtherPublisher(MaybeSource<T>', 1), ('"Primitive', 1), ('<blockquote>\n', 1), ('write(CharSequence', 1), ('s.get().cancel();\n', 1), ('5]\n', 1), ('callback.error;\n', 1), ('ResourceInfo("x.txt",', 1), ('3949248817947090603L;\n\n', 1), ('this.striped', 1), ('CHM.keySet()', 1), ('.assertFailure(IllegalStateException.class);\n\n', 1), ('takeHalf()', 1), ('testGetClassPathFromManifest_noClassPath()', 1), ('JRootPane', 1), ('ObservableAnySingle(ObservableSource<T>', 1), ('FloatBuffer', 1), ('splits', 1), ('s.onNext(Completable.complete());\n', 1), ('<F>', 1), ('cakes.add(cake);\n\n', 1), ('pp.onError(ex0);\n', 1), ('assertEquals("FOO",', 1), ('assertEquals(expectedId,', 1), ('extractMethod(Test', 1), ('(m.getDeclaringClass()', 1), ('((Callable<Void>)m).call());\n\n', 1), ('"second', 1), ('fully\n', 1), ('ex1)', 1), ('assertNotNull(items);\n', 1), ('faster.\n', 1), ('nextFunction', 1), ('ExecutionException)', 1), ('KingsHand', 1), ('TestHelper.checkDisposed(CompletableSubject.create());\n', 1), ('command.', 1), ('s.get().dispose();\n', 1), ('c.calories).sum();\n', 1), ('ByteArraySourceFactory();\n', 1), ('state.onComplete();\n', 1), ('StoppingData)', 1), ('assertTrue(new', 1), ('createConsumerThrowsResource()', 1), ('observer.awaitTerminalEvent(5,', 1), ('x,', 1), ('testDoRequest()', 1), ('innerComplete();\n\n', 1), ('repeated,', 1), ('AbstractInvocationHandler', 1), ('TakeLastSubscriber<T>(s,', 1), ('delayMillis)', 1), ('ObservableDebounceTimed<T>', 1), ('queue.offer(NotificationLite.subscription(this));\n', 1), ('}).when(w).onSubscribe((Subscription)any());\n\n', 1), ('com.iluwatar.databus.data.StoppingData;\n\nimport', 1), ('innerError(InnerSubscriber<T,', 1), ('Single.just(2)\n', 1), ('Interrupter(mainThread).run();\n', 1), ('failComputationObservableBlockingLatest()', 1), ('UndirectedNetworkConnections(Map<E,', 1), ('Charset]",\n', 1), ('ReferenceDisposable(T', 1), ('RxJavaPlugins.onAssembly(fos));\n\n', 1), ('MergeMaybeObserver<T>(s,', 1), ('requestCancelCrash()', 1), ('IntStream#findFirst()\n', 1), ('declaration}', 1), ('e.getDeclaredMethod("values");\n\n', 1), ('TestHelper.race(ft,', 1), ('BackpressureStrategy', 1), ('(javaImpl.compare(ba1,', 1), ('bother?\n', 1), ('Tables.unmodifiableRowSortedTable(TreeBasedTable.create()))\n', 1), ('entitiesLeft.size());\n', 1), ('FlowableDebounceTimed<T>', 1), ('assertTrue(d3.isDisposed());\n', 1), ('verifyPositive(long', 1), ('#testListIterator_fullyModifiable()}', 1), ('PatternFilenameFilter("a+");\n', 1), ('string.isEmpty();\n', 1), ('reader.read(buf,', 1), ('U>(serial,', 1), ('.blockingSubscribe(ts);\n', 1), ('.doAfterNext(new', 1), ('Timer(true).schedule(new', 1), ('ArrayBlockingQueue<>(100,', 1), ('delegate().await();\n', 1), ('7))\n', 1), ('this.indexes', 1), ('this.encoding', 1), ('interruptibly\n', 1), ('ActionDisposable', 1), ('csub', 1), ('numArray', 1), ('(compareAndSet(PARENT_INDEX,', 1), ('expires,', 1), ('executorScheduler.shutdownNow();\n', 1), ('Callable()', 1), ('mpscOfferPollRace()', 1), ('runNext();\n', 1), ('LOGGER.info("Poor', 1), ('Character()', 1), ('Testing:', 1), ('System.identityHashCode(encoding.encoding.encode(encodingInputs[i', 1), ('BufferExactObserver(Observer<?', 1), ('ParallelMapConditionalSubscriber(ConditionalSubscriber<?', 1), ('awaitTimeoutInterrupted()', 1), ('throwingRuntimeException(RuntimeException', 1), ('TestingExecutors.sameThreadScheduledExecutor().submit(runnable);\n', 1), ('testDelegateRejection()', 1), ('Maybe<Boolean>', 1), ('normalDelayErrorAll()', 1), ('BackpressureHelper.producedCancel(requested,', 1), ('Collections.unmodifiableSet(EnumSet.allOf(IteratorFeature.class));\n}\n', 1), ('wider', 1), ('ObserveOnMaybeObserver(MaybeObserver<?', 1), ('CompletableAmb(sources,', 1), ('BOUNDARY:\n', 1), ('ripples', 1), ('placed\n', 1), ('visit(Type...', 1), ('World!").single("");\n', 1), ('ImmutableEntry)', 1), ('APIs', 1), ('reserialize(delegate.create(elements));\n', 1), ('Optional.map},', 1), ('technique', 1), ('"testListIterator_fullyModifiable");\n', 1), ('t.subscribe(inner);\n', 1), ('b}.', 1), ('resizing.\n', 1), ('NullPointerException.");\n', 1), ('{upperBound});\n', 1), ('collectionSupplier\n', 1), ('java.io.Serializable;\n\nimport', 1), ('SwitchMapSingleMainObserver<?,', 1), ('BiMap}.', 1), ('SingleSubscribeOnTest', 1), ('Consumer<TestObserver<Integer>>()', 1), ('removeOutEdge(E', 1), ('IllegalArgumentException("§3.9', 1), ('ByteSource.wrap(bytes);\n', 1), ('Error.class,\n', 1), ('callOrder', 1), ('iterableFirstCancels()', 1), ('takeUntil(Publisher<U>', 1), ('a.getType().equals(ActionType.MENU_ITEM_SELECTED))\n', 1), ('Publisher<TRightEnd>', 1), ('runnable,', 1), ('assertNull(Completable.complete().blockingGet(1,', 1), ('.getTopping().getCalories());\n', 1), ('CapturingObserver<Object>', 1), ('RxJavaPlugins#setNewThreadSchedulerHandler(io.reactivex.functions.Function)}', 1), ('<A>', 1), ('document.get(KEY));\n', 1), ('SkipLastSubscriber(Subscriber<?', 1), ('elegantly\n', 1), ('mock(UnitVisitor.class);\n', 1), ('#start()}', 1), ('happen!\n', 1), ('FlowableWindowBoundarySelector<T,', 1), ('createExecutor(threadFactory);\n', 1), ('FlowableIntervalTest', 1), ('delegate().signalAll();\n', 1), ('checkNotNull(arguments);\n', 1), ('calcElementOffset(index,', 1), ('newReader(File', 1), ('map.put("three",', 1), ('enqueued', 1), ('similarities.\n', 1), ('StringWriter(2', 1), ('PriorityBlockingQueue<>(MinimalCollection.of(elements));\n', 1), ('avoided,', 1), ('Eric', 1), ('mock(UncaughtExceptionHandler.class);\n', 1), ('assertGoodFeatureEnum(ListFeature.class);\n', 1), ('firstEmission;\n\n', 1), ('rxThreads.add(t);\n', 1), ('executor.', 1), ('checkNotNull(instances));\n', 1), ('StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator,', 1), ('needs,', 1), ('Maybe.fromFuture(ft).test(true)\n', 1), ("'\\r'}),", 1), ('produced(1);\n', 1), ('CakeLayerInfo("layer3",', 1), ('(method.isAnnotationPresent(Generates.class))', 1), ('nazguls', 1), ('generator.order(insertionOrder);\n', 1), ('Helpers.assertEqualIgnoringOrder(expected,', 1), ('PublishProcessor}', 1), ('piece', 1), ('#freshness}.', 1), ('LINE_SEPARATOR("line.separator"),\n\n', 1), ('.flatMapSingle(Functions.justFunction(new', 1), ('SafeTreeMap<>(NullsBeforeTwo.INSTANCE);\n', 1), ('(String)', 1), ('indefinitely.\n', 1), ('(!resultSet.next())', 1), ('.delaySubscription(100,', 1), ('ObservableSingleSingle<T>(observableSource,', 1), ('bounds.");\n', 1), ('promise.fulfillExceptionally(exception);\n', 1), ('Subscriber-based', 1), ('ba2;\n', 1), ('Collections.unmodifiableSet(delegate);\n', 1), ('side-effects\n', 1), ('(rawType.isEnum())', 1), ('UnmodifiableIterator<K>()', 1), ('io.reactivex.internal.operators.single.SingleJust;\nimport', 1), ('BigInteger.valueOf(generateInt());\n', 1), ('DisposableCompletableObserverTest', 1), ('introduces', 1), ('-5526049321428043809L;\n\n', 1), ('before(ScenarioExecutionScope.INTEGRATION);\n', 1), ('Dispatcher()', 1), ('assertTrue(o.isUnsubscribed());\n//', 1), ('first.get());\n', 1), ('Collector<E,', 1), ('IntStream}', 1), ('"value";\n\n', 1), ('sampleKeys())', 1), ('BusinessException...', 1), ('producer.set(p);\n//', 1), ('times(4)).onAction(actionCaptor.capture());\n', 1), ('sortedComparator()', 1), ('toSingle(Flowable<T>', 1), ('e.getCause());\n', 1), ('checkKey(K', 1), ('ArrayList<>());\n\n', 1), ('com.google.common.reflect.Reflection;\nimport', 1), ('equality\n', 1), ('ComputationTask());\n\n', 1), ('delegate.firstKey();\n', 1), ('delay(Publisher<U>', 1), ('SwingUtilities.getRootPane(del);\n', 1), ('"test.txt");\n', 1), ('set.delete(inner);\n\n', 1), ('testNearMaxValueWithoutBackpressure()', 1), ('newFreshProxy(final', 1), ('MaybeDoAfterSuccess<T>(this,', 1), ('Starting,', 1), ("subscriber's\n", 1), ('enumClass}', 1), ('isPublic()', 1), ('just10()', 1), ('com.iluwatar.flux.action.ActionType;\nimport', 1), ('containsKey(null)},\n', 1), ('-7370244972039324525L;\n\n', 1), ('Schedulers.start();\n', 1), ('FlowableZip<T,', 1), ('file.mkdir();\n', 1), ('ObservableConcatMapSingle(Observable<T>', 1), ('"Contact', 1), ('execute(String[]', 1), ('assertEquals(Range.all(),', 1), ('this.resource.lazySet(resource);\n', 1), ('io.reactivex;\nimport', 1), ('add(CacheDisposable<T>', 1), ('ImmutableCollection#asList}', 1), ('IntervalRangeSubscriber(s,', 1), ('dontRequestIfDownstreamRequestsLate()', 1), ('"POODLE")).hasValue(TestEnum.POODLE);\n', 1), ('UnitVisitor\n', 1), ('outEdges,', 1), ('testDrainUninterruptibly_doesNotThrow(q);\n', 1), ('studentToBeInserted.getName()', 1), ('foo.getName());\n', 1), ('.concatMapMaybe(Functions.justFunction(Maybe.never()))\n', 1), ('CompletableDisposable(CompletableObserver', 1), ('3).subscribe(ts);\n//\n//', 1), ('fail("expecting', 1), ('this.byteSink', 1), ('rso.start);\n\n', 1), ('instead.";\n', 1), ('list.add(newIterator.next());\n', 1), ('ParallelMapTryTest', 1), ('CollectionFeature.GENERAL_PURPOSE)\n', 1), ('IncrementingPublisher', 1), ('testCancelledWorkerDoesntRunTasks()', 1), ('assertTrue(mo.isDisposed());\n\n', 1), ('Integer[1000000', 1), ('Single.just(1).delaySubscription(Observable.timer(100,', 1), ('FlowableThrottleFirstTimed<T>', 1), ('Execution', 1), ('service.dummyCustomerApi(tenant);\n//', 1), ('(!characterToFrequency.containsKey(c))', 1), ('this.upperBounds', 1), ('DisposableHelper.dispose(fallback);\n', 1), ('CallsCount', 1), ('consume\n', 1), ('"subscriptionIndicator', 1), ('CopyOnWriteArrayList<>();\n', 1), ('org.apache.log4j.Logger;\nimport', 1), ('robertt240', 1), ('20)\n', 1), ('ArbitraryInstances.get(Optional.class));\n', 1), ('unwantedFeatures', 1), ('OnErrorNotImplementedException(@NonNull', 1), ('s.indexOf("<code>",', 1), ('estimatedSize),\n', 1), ('DelayedDispose', 1), ('backpressureBounded()', 1), ('parent.setDisposable(scheduler.scheduleDirect(new', 1), ('resetBefore()', 1), ('ac++;\n', 1), ('I\n', 1), ('java.net.DatagramSocket;\nimport', 1), ('kept', 1), ('state.onError(e);\n', 1), ('SourceSinkTester<S,', 1), ('isSynthetic()', 1), ('numbers1);\n', 1), ('in:\n', 1), ('testInitialValueEmittedNoProducer()', 1), ('createFlowable()', 1), ('ExceptionsTest', 1), ('curr.second', 1), ('OnErrorNotImplementedExceptionTest', 1), ('WithPublicConstructorAndConstant()', 1), ('java.util.concurrent.CompletableFuture#thenComposeAsync}.', 1), ('enqueues', 1), ('doc:', 1), ('!m.signature.contains("CompletableSource")\n', 1), ('equal.', 1), ('completely.\n', 1), ('com.google.common.collect.Tables;\nimport', 1), ('@TesterAnnotation.",', 1), ('com.mongodb.client.MongoCollection;\nimport', 1), ('#entries}', 1), ('apply(PublishProcessor<Integer>', 1), ('"a");\n\n', 1), ('flushQuietly(Flushable', 1), ('CompletableUsing<R>(resourceSupplier,', 1), ('verifyNoMoreInteractions(visitor);\n', 1), ('LinkedList<Runnable>', 1), ('SingleNever()', 1), ('(EventEmitter', 1), ('HashMultiset<E>(distinctElements);\n', 1), ('FlowableTakeWhile(Flowable<T>', 1), ('shouldIncludePropsInToString()', 1), ('java.io.InvalidObjectException;\nimport', 1), ('materialized', 1), ('TypeToken<ImmutableBiMap<String,', 1), ('ClassPath.Scanner.parseJavaClassPath())', 1), ('DatagramSocket())', 1), ('Exception>>', 1), ('*/\n@GwtIncompatible\nfinal', 1), ('parent.remove(sr);\n', 1), ('one");\n', 1), ('times(1)).onNext(6);\n', 1), ('Helpers.mapEntry(AnEnum.D,', 1), ('IllegalStateException("Was', 1), ('java.util.concurrent.ConcurrentSkipListSet;\nimport', 1), ('maxConcurrencyOne()', 1), ('oldTypeIterator.next();\n', 1), ('ParallelCollectSubscriber(Subscriber<?', 1), ('thrown.",', 1), ('compatible.', 1), ('logger.fine("Features:', 1), ('covers.\n', 1), ('getAddSupportedNullPresentMethod());\n', 1), ('SingleDoOnSubscribe<T>(this,', 1), ('io.reactivex.subscribers;\n', 1), ('Date', 1), ('FlowableOnBackpressureError<T>', 1), ('onSubscribeAndDisposeCrashes()', 1), ('s.schedule(Functions.EMPTY_RUNNABLE,', 1), ('SERIALIZABLE,\n', 1), ('TimedRunnable(Runnable', 1), ('this.test', 1), ('RxJavaPlugins.initIoScheduler(new', 1), ('subscribers[i].dispose();\n', 1), ('NULL', 1), ('bounds;\n\n', 1), ('T}).', 1), ('java.util.concurrent.CompletableFuture#whenCompleteAsync}.', 1), ('defaultIfEmpty(T', 1), ('outEdgeToNode.entrySet().iterator();\n', 1), ('MaybeObserver&lt;T&gt;,', 1), ('assertSame(Functions.EMPTY_RUNNABLE,', 1), ('Modifier.FINAL))', 1), ('w.schedule(Functions.EMPTY_RUNNABLE,', 1), ('serial));\n\n', 1), ('FileByteSinkFactory(initialString.getBytes(Charsets.UTF_8));\n', 1), ('.mergeWith(Completable.complete())\n', 1), ('LegacyComparable)', 1), ('AbstractDirectedNetworkConnections<N,', 1), ('PrintWriter(outputStream);\n', 1), ('JVM_BEHAVIOR', 1), ('FlowableAny<T>(source,', 1), ("we'll", 1), ('ListenableFutureTask.create(\n', 1), ('com.google.caliper.api.Footprint;\nimport', 1), ('2).elementAt(2).toObservable().blockingSingle(-99).intValue());\n', 1), ('PublishDisposable[0];\n', 1), ('7917814472626990048L;\n\n', 1), ('widened', 1), ('Observer<Timed<Integer>>', 1), ('assertTrue(unsubscribeThread.toString(),', 1), ('iterable);\n', 1), ("Subscriber's", 1), ('request(5);\n', 1), ('runListIteratorTest(Set<IteratorFeature>', 1), ('SingleAmb(SingleSource<?', 1), ('testAggregateAsIntSumAccumulatorThrowsObservable()', 1), ('serverPort))', 1), ('strategies', 1), ('java.util.stream.StreamSupport;\n\nimport', 1), ('more,', 1), ('io.reactivex.observers.DefaultObserver;\nimport', 1), ('assertThat(ClassPath.Scanner.getClassPathFromManifest(new', 1), ('Optional()', 1), ('StatusMemberTest', 1), ('char",', 1), ('GiantModel', 1), ('-6120223772001106981L;\n', 1), ('SET_COUNT_IF:\n', 1), ('countersCollection;\n', 1), ('view)', 1), ('@Given("^there', 1), ('this.active;\n', 1), ('multiset.add("c",', 1), ('RxJavaPlugins.onSubscribe(Observable.never(),', 1), ('42;\n\n', 1), ('(list.isEmpty())', 1), ('suite.addTest(testsForPriorityQueue());\n', 1), ('boundaryConfinement()', 1), ('Charsets.UTF_8.newEncoder());\n', 1), ('(typeVariableMethod', 1), ('before.', 1), ('to1.assertNoValues();\n', 1), ('current.lazySet(null);\n\n', 1), ('.concatMapMaybe(Functions.justFunction(ms))\n', 1), ('delayOnSuccess()', 1), ('"deprecation"', 1), ('they\n', 1), ('LotteryTicketId(ticketId));\n', 1), ('StoppingData(stop);\n', 1), ('System.setProperty("mongo-port",', 1), ('(PartyMember', 1), ('a[i].dispose();\n', 1), ('onAfterNext)', 1), ('a.iterator();\n', 1), ('TakeWhileObserver<T>(t,', 1), ('pp.onNext(i);\n', 1), ('it.next().openStream();\n', 1), ('pp.singleElement()),', 1), ('assertTrue(fs.isCancelled());\n\n', 1), ('TestHelper.checkDisposed(Flowable.never().onTerminateDetach());\n', 1), ('sampleInstances.putAll(checkNotNull(type),', 1), ('iterableToFlowable(final', 1), ('UrlCharSourceFactory();\n', 1), ('filter(Functions.isInstanceOf(clazz)).cast(clazz);\n', 1), ('disposition.\n', 1), ('(ThreadSafeDoubleCheckLocking.class)', 1), ('SortedMap}', 1), ('ArbitraryInstances.get(Buffer.class).capacity());\n', 1), ('.put(Range.class,', 1), ('splits.removeLast();\n\n', 1), ('PurgeProperties();\n', 1), ('byId', 1), ('methodThrowingException());\n\n', 1), ('fulfillmentAction;\n', 1), ('this.numberOfSubscribers', 1), ('SubscribeOnObserver(Observer<?', 1), ('matcher(CharSequence', 1), ('"length"};\n\n', 1), ('ObservableAutoConnect<T>(this,', 1), ('constructor\n', 1), ('testClassPathEntries_notURLClassLoader_withGrandParent()', 1), ('statement.execute(CustomerSchemaSql.DELETE_SCHEMA_SQL);\n', 1), ('FUSED)', 1), ('testsForArrayDeque()', 1), ('ParallelReduceFullInnerSubscriber<T>\n', 1), ('notJar', 1), ('CompletableSubjectTest', 1), ('FlowableDelay<T>', 1), ('rows', 1), ('testScanIntegersWithoutInitialValueAndOnlyOneValue()', 1), ('rangeObservableFlatMap;\n\n', 1), ('RxJavaPlugins.onAssembly(CompletableNever.INSTANCE);\n', 1), ('MultiInputStream(\n', 1), ('builder)', 1), ('test));\n', 1), ('(ThreadDeath', 1), ('verify(singleObserver).onSuccess(1', 1), ('<p>Example:\n', 1), ('SimpleMessageQueue(int', 1), ('SingleSource.', 1), ('ObservableConcatMapMaybe<T,', 1), ('assertFalse(t1.equals(new', 1), ('Schedulers#single()', 1), ('assertEquals(150,', 1), ('right-to-left.', 1), ('innerDisposed()', 1), ('com.google.common.collect.testing.features.CollectionFeature.SERIALIZABLE_INCLUDING_VIEWS;\n\nimport', 1), ('derivations.\n', 1), ('#onNext(Object)})', 1), ('CollectSubscriber(Subscriber<?', 1), ('taskCompleted()', 1), ('maxSupportedSubscribers()', 1), ('DisposableLambdaObserver<T>', 1), ('b.toString();\n', 1), ('"scheduler");\n', 1), ('SwitchMapObserver(Observer<?', 1), ('java.util.concurrent.Callable#call()\n', 1), ('ParallelRunOn<T>(this,', 1), ('delayErrors);\n', 1), ('ugly.\n', 1), ('org.reactivestreams.*;\nimport', 1), ('run\n', 1), ('findPattern("Observable<.*>\\\\s+c\\\\b");\n', 1), ('sources[i].subscribe(a[i]);\n', 1), ('PartyImpl', 1), ('prohibit', 1), ('back,', 1), ('assertEquals(IllegalStateException.class,', 1), ('RxJavaPlugins.initIoScheduler(c));\n\n', 1), ('nullValueSync()', 1), ('differentContents', 1), ('nazguls.put(NazgulName.JI_INDUR,', 1), ('com.google.common.io.TestOption.OPEN_THROWS;\nimport', 1), ('varieties.', 1), ('sources.hasNext();\n', 1), ('evenItems.get(2));\n', 1), ('valueCollection;\n', 1), ('o1.equals(o2));\n', 1), ('satified\n', 1), ('assertEquals(Arrays.asList(4L,', 1), ('delegate().contains(object);\n', 1), ('f.isDone();\n', 1), ('userConverter.convertFromEntity(userConverter.convertFromDto(u1));\n', 1), ('q1', 1), ('TestException("request()");\n', 1), ('(Object[])null);\n', 1), ('ArrayList<>(set);\n', 1), ('latchedObserver', 1), ('ObservableRepeatUntil(Observable<T>', 1), ('Arrays.asList(createArrayWithNullKey());\n', 1), ('assertSame(underlying,', 1), ('"FlowableSequenceEqualSingle",\n', 1), ('java.util.logging.Level.FINER;\n\nimport', 1), ('assertNull(ArbitraryInstances.get(NonPublicConstantIgnored.class));\n', 1), ('#getValues()}', 1), ('tunable', 1), ('triggers\n', 1), ('(map', 1), ('CakeLayerInfo(layer.getId(),', 1), ('TrampolineAppTest', 1), ('so.onError(null);\n\n', 1), ('assertNull(ex.terminate());\n\n', 1), ('v1;\n', 1), ('").append(line)\n', 1), ('"0")\n', 1), ('JsonFileJournal()', 1), ('trackPluginErrors()', 1), ('CheckReturnValue', 1), ('SingleNever.INSTANCE);\n', 1), ('papers', 1), ('aq', 1), ('AmbSingleObserver<T>(s,', 1), ('-6298857009889503852L;\n\n', 1), ('Expression>', 1), ('this.getStudents().add(studentToBeInserted);\n\n', 1), ('path.indexOf("/",', 1), ('com.google.common.collect.testing.Helpers.testComparator;\n\nimport', 1), ('createIoScheduler()', 1), ('14).replace(".java",', 1), ('REDUCE_LAST_PARALLEL', 1), ('ParallelSortedJoinTest', 1), ('java.text.DateFormat;\nimport', 1), ('onSchedule(Schedulers.io().createWorker());\n', 1), ('(Element)', 1), ('tickets.\n', 1), ('consumerNode.', 1), ('ASCII,', 1), ('</h4>\n', 1), ('arbiter.replace(s);\n', 1), ('cakeLayerInfos,', 1), ('toppingInfo.calories));\n', 1), ('object);\n', 1), ('OnCompleteSubscriber', 1), ('sortedSet(int', 1), ('servers.size();\n', 1), ('AbstractPackageSanityTests', 1), ('Neither', 1), ('-4823716997131257941L;\n\n', 1), ('UnsignedInteger.ZERO)\n', 1), ('false;\n}\n', 1), ('assertEquals(list.hashCode(),', 1), ('generateOptionalDouble()', 1), ('onNext}.\n', 1), ('onChannelReadEvent(AbstractNioChannel', 1), ('coding', 1), ('FlatMapMaybeObserver<R>', 1), ('replace(Disposable', 1), ('ToListTckTest', 1), ('TestHelper.checkDisposed(PublishSubject.create().takeUntil(Functions.alwaysFalse()));\n', 1), ('strongly-sequential', 1), ('FlowableDebounce(Flowable<T>', 1), ('temporaryList', 1), ('released\n', 1), ('statement.setString(1,', 1), ('serializers.\n', 1), ('expectProcess', 1), ('HalfSerializer()', 1), ('repeated\n', 1), ('assertNotNull(dataSource);\n', 1), ('m.doAfterTerminate(afterTerminate);\n', 1), ('Types', 1), ('Completable.mergeArray(Completable.complete(),', 1), ('pp.switchMapMaybe(new', 1), ('computations.', 1), ('Predicate}</a>.\n', 1), ('File(""))\n', 1), ('core-bashing', 1), ('loader\n', 1), ('observer.onSubscribe(EmptyDisposable.NEVER);\n', 1), ('SleepingRunnable', 1), ('java.lang.reflect},\n', 1), ('ImmutableList.<String>of());\n', 1), ('Maybe.fromCallable(func);\n\n', 1), ('Name\n\n', 1), ('ChangeKeyOpsCommand', 1), ('ParallelFlowable<Downstream>', 1), ('File("Journal.json");\n', 1), ('handler.onEvent(event);\n', 1), ('naming', 1), ('AlbumListPage}\n', 1), ('first.', 1), ('getFileExtension(String', 1), ('Objects.equal}{@code', 1), ('withParentDisposed()', 1), ('update(Disposable', 1), ('FINISHED)', 1), ('that.count);\n', 1), ('eventClassName', 1), ('List<Callable<Integer>>', 1), ('com.iluwatar.cqrs.dto.Book;\n\n/**\n', 1), ('ParallelPeekSubscriber(Subscriber<?', 1), ('testRandomNumbers()', 1), ('checkEntryNotNull(key,', 1), ('note:', 1), ('FinalizableReferenceQueue}.\n', 1), ('(!error.compareAndSet(null,', 1), ('barrier.await();\n', 1), ('<li>empty', 1), ('JAVA6;\n', 1), ('m.takeUntil(Flowable.never());\n', 1), ('LOGGER.info(msg);\n', 1), ("O'Neill\n", 1), ('.containsExactly(\n', 1), ('javadocs.\n', 1), ('hopefully', 1), ('c.onComplete();\n\n', 1), ('OneSizeGenerator<T,', 1), ('DoFinallyConditionalSubscriber(ConditionalSubscriber<?', 1), ('}\n\n\n\n}\n', 1), ('StrictSubscriber<T>\nextends', 1), ('checkNotNull(pathname);\n', 1), ('stripes);\n', 1), ('Completable.concat(pp1.map(new', 1), ('ConcatWithCompletableTckTest', 1), ('TargetObserver(Observer<?', 1), ('locking\n', 1), ('comparators\n', 1), ('java.util.function.LongFunction}', 1), ('alright\n', 1), ('Observable.empty().blockingLatest().iterator().next();\n', 1), ('Future<Object>()', 1), ('fs.getName(),', 1), ('function4Fail()', 1), ('validator;\n\n', 1), ('innerComplete(LeftRightObserver', 1), ('SimpleMessageQueue(messages.length);\n', 1), ('schedulerDocumentation;\n\n', 1), ('CharBuffer.class,\n', 1), ('longs;\n\n', 1), ('Enums()', 1), ('MaybeFlatMapIterableFlowable(MaybeSource<T>', 1), ('SwitchOnNextTckTest', 1), ('func);\n', 1), ('any.isPresent()', 1), ('SingleFromPublisher<T>(publisher));\n', 1), ('-68,', 1), ('Flushables()', 1), ('environments.', 1), ('Stream#findAny}', 1), ('players', 1), ('Multimaps.unmodifiableSortedSetMultimap(TreeMultimap.create()))\n', 1), ('msg.addHeader(Message.Headers.DATE,', 1), ('loadPatternCompiler()', 1), ('this.channel', 1), ('stream.writeObject(keyComparator());\n', 1), ('cs2.onComplete();\n\n', 1), ('4943102778943297569L;\n', 1), ('CyclicBarrier(2);\n\n', 1), ('apply(Mutable', 1), ('Resources.copy(ClassPathTest.class.getResource(entry),', 1), ('random)', 1), ('pair,', 1), ('Reflection.getPackageName("java.MyType"));\n', 1), ('problems,', 1), ('innerError(InnerConsumer', 1), ('suite.addTest(testsForLinkedBlockingDeque());\n', 1), ('assertFalse(subscribed.get());\n', 1), ('Charset.forName("UTF-16LE");\n\n', 1), ('appendingPathCharSinkFactory()', 1), ('onNext(1))");\n', 1), ('assertEquals(model.toString(),', 1), ('disposable;\n\n', 1), ('Observable<?>>()', 1), ('MaterializeSubscriber<T>', 1), ('Double#doubleToRawLongBits},', 1), ('MaybeFlatMapSingleElement(MaybeSource<T>', 1), ('T>)EQUALS;\n', 1), ('(completionValueSupplier', 1), ('DelayTckTest', 1), ('"io.reactivex:new-thread";\n', 1), ('used,', 1), ('testGet_usePublicConstant()', 1), ('"-Xmx8g"})\npublic', 1), ('observer2.value;\n\n', 1), ('GENERAL_PURPOSE(SUPPORTS_ADD,', 1), ('ScalarCallable', 1), ('TypeToken<List<OneConstantEnum>>()', 1), ('drift;\n', 1), ('forSerialization;\n\n', 1), ('assertSame(WithPublicConstant.INSTANCE,', 1), ('badInnerDelayError()', 1), ('heavyInstance', 1), ('id.orElse(-1L),\n', 1), ('ClassPathUtil.class.getClassLoader()).getURLs()\n', 1), ('ids.stream()\n', 1), ('wildcard.getUpperBounds();\n', 1), ('people', 1), ('observableSource', 1), ('source.onNext(2);\n\n', 1), ('instantiate', 1), ('setDefault(Method.class,', 1), ('"RxNewThreadScheduler";\n', 1), ('.thenApply(value', 1), ('Instantiates', 1), ('<dd></dd>', 1), ('|=', 1), ('SchedulerTestHelper()', 1), ('ArbitraryInstances.get(CharSource.class));\n', 1), ('SampleTimedEmitLast(Subscriber<?', 1), ('b.substring(schedulerDoc,', 1), ('SynchronousQueue.class,\n', 1), ('null;)', 1), ('checkDisposed(Single<?>', 1), ('done},', 1), ('numInstances;\n\n', 1), ('ArrayList<Maybe<Integer>>();\n\n', 1), ('completableSubscribe1()', 1), ('SetFeature(Feature<?', 1), ('WeatherType', 1), ('"a.b",', 1), ('.named("Vector")\n', 1), ('undoLastSpell()', 1), ('(!(other', 1), ('ReaderWriterLock();\n', 1), ('ObservableStartWithTests', 1), ('javax.sound.sampled.UnsupportedAudioFileException;\n\n/**\n', 1), ('ImmutableSet.copyOf(modes);\n', 1), ('manually-specified', 1), ('customer.setFirstName("Daniel");\n', 1), ('com.google.common.collect.testing.features.ConflictingRequirementsException;\nimport', 1), ('disposeNoFurtherSignals()', 1), ('QueueDisposable#BOUNDARY}', 1), ('suffice', 1), ('testGet()', 1), ('KingsHand},', 1), ('ss.onSuccess(2);\n\n', 1), ('*/\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Target(ElementType.METHOD)\npublic', 1), ('KNOWN_ORDER,\n\n', 1), ('schedulePeriodicallyDirect(Runnable', 1), ('expectedValue)\n', 1), ('casts', 1), ('getInterrupted()', 1), ('TypeToken<BiMap<EmptyEnum,', 1), ('ToListSubscriber(Subscriber<?', 1), ('LazyFluentIterable<E>', 1), ('writer.close();\n\n', 1), ('this.func', 1), ('pop(List<E>', 1), ('operation}', 1), ('FlowableDoFinally<T>', 1), ('AtomicReference<Disposable>(initialDisposable);\n', 1), ('onError.get().getMessage());\n', 1), ('onNextOnErrorFailureSafe()', 1), ('MAX_STACK_DEPTH)', 1), ('WindowSkipObserver(Observer<?', 1), ('Flowable.fromIterable(iterate(elements)).cache()\n', 1), ('Oranges,', 1), ('delegate().remove(o);\n', 1), ('filterFailWithRetryLimitedConditional()', 1), ('IllegalStateException("Only', 1), ('group.onNext(v);\n\n', 1), ('instance1', 1), ('MultimapsFilterEntriesAsMapTest()', 1), ('fromIndex,', 1), ('determined', 1), ('mainErrorInnerErrorDelayedRace()', 1), ('firstFiveNegatives', 1), ('Long.valueOf(1);\n', 1), ('(success', 1), ('increments', 1), ('observer.onNext(42L);\n', 1), ('qs.requestFusion(QueueSubscription.ANY', 1), ('Object.equals}.\n', 1), ('lowerBounds', 1), ('FAILURE(immediateFailedFuture(new', 1), ('Ints.asList(deltas),', 1), ('producer.doneProducing.await();\n', 1), ('((DatagramChannel)', 1), ('CompletableFromObservableObserver(CompletableObserver', 1), ('testCollectToStringFlowable()', 1), ('testComparator(NullsBeforeB.INSTANCE,', 1), ('(LetterComposite', 1), ('cooking"},\n', 1), ('java.nio.charset.StandardCharsets#US_ASCII}', 1), ('paramString(Class<?>', 1), ('testConversionsStartingFromDomain()', 1), ('testGetClassPathFromManifest_nullManifest()', 1), ('occurs.', 1), ('em', 1), ('reader;\n', 1), ('ClassOwnership.values())', 1), ('s.start();\n', 1), ('observableSubscribe0()', 1), ('value=1]",', 1), ('getLines(final', 1), ('testDistinctUntilChangedOfNormalSourceWithKeySelector()', 1), ('Observable.fromArray(mainArray);\n', 1), ('FlowableCollectSingle(Flowable<T>', 1), ('constructor.",', 1), ('MatchResult}:\n', 1), ('caution', 1), ('valueComparator();\n}\n', 1), ('fromDto.apply(userDto);\n', 1), ('e))', 1), ('duplicates\n', 1), ('suppressForHashSet()', 1), ('suspension', 1), ('First', 1), ('quam', 1), ('generics-safe.', 1), ('TEMP_DIR_ATTEMPTS', 1), ('mergeNSyncStreamsOfN(final', 1), ('values",\n', 1), ('IllegalArgumentException("Use', 1), ('calculateTotalCalories());\n', 1), ('channel.map(mode,', 1), ('.withLatestFrom(Flowable.just(1),', 1), ('BasicIntQueueDisposable<T>\nextends', 1), ('difference', 1), ('ImmutableList.copyOf(result);\n', 1), ('jt;\n', 1), ('dropped', 1), ('AsyncTask#onPostCall(Object)},', 1), ('parent.otherError(t);\n', 1), ('<p>Covers', 1), ('Array.newInstance(componentType,', 1), ('layer,\n', 1), ('(Thread.interrupted())', 1), ('assertThat(urls.get(0).getAuthority()).isNull();\n', 1), ('overrideInitSingleSchedulerCrashes()', 1), ('RxJavaPlugins.setIoSchedulerHandler(replaceWithImmediate);\n\n', 1), ('SimpleFluentIterable.fromCopyOf(integerList).filter(negatives()).map(transformToString())\n', 1), ('java.nio.charset.StandardCharsets#UTF_8}', 1), ('assertTrue(sa.isUnbounded());\n\n', 1), ('mimic', 1), ('testHandledErrorIsNotDeliveredToThreadHandler(Scheduler', 1), ('*/\n@RunWith(MockitoJUnitRunner.class)\npublic', 1), ('<p>Most', 1), ('FlowableEventStreamTest', 1), ('SingleDelayWithObservable(SingleSource<T>', 1), ('TimerObserver(to);\n\n', 1), ('(newIterator.hasNext())', 1), ('source.subscribe(tss);\n\n', 1), ('handle\n', 1), ('request(99);\n', 1), ('(plus', 1), ('SingleCreate(SingleOnSubscribe<T>', 1), ('scanner.scan(new', 1), ('singleSourceAsMs()', 1), ('myb', 1), ('Iterator");\n', 1), ('e6);\n', 1), ('means\n', 1), ('troll.attack();\n', 1), ('none\n', 1), ('sequentialDelayError(int', 1), ('SafeTreeMap<>(\n', 1), ('stripedLocal.bulkGet(bulkGetSetLocal).hashCode();\n', 1), ('Handles', 1), ('exception.set(e);\n', 1), ('stripes', 1), ('assertGoodFeatureEnum(\n', 1), ('asynchronous.\n', 1), ('subscribe(flatMap,', 1), ('cancelAndClear()', 1), ('MaybeSwitchIfEmptySingle(MaybeSource<T>', 1), ('Prototype()', 1), ('delayed()', 1), ('flowable.blockingGet();\n', 1), ('streamB}.', 1), ('times(1)).onNext(4);\n', 1), ('WindowSkipObserver<T>', 1), ('MapMode.READ_ONLY', 1), ('UnsignedLong.class,\n', 1), ('(ListenableFuture<?>)', 1), ('concat4()', 1), ('stringConverter(final', 1), ('TestException())),\n', 1), ('found!");\n', 1), ('(paramType.isAssignableFrom(Callable.class))', 1), ('FlowableEmpty', 1), ('assemblyHookCrashes()', 1), ('readable.read(cbuf);\n', 1), ('iterate(elements', 1), ('fakePool', 1), ('(Maybe.java:").append(ln).append(")\\r\\n\\r\\n");\n', 1), ('<p><a', 1), ('xs.toList().toObservable();\n', 1), ('Maybe.just(1).isEmpty();\n', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/delay.png"', 1), ('Flowable.using(Functions.justCallable(1),\n', 1), ('assertTrue(ArbitraryInstances.get(SortedMultiset.class).isEmpty());\n', 1), ('"8");\n', 1), ('obsMaybe;\n\n', 1), ('matcher.start();\n', 1), ('to.assertError(CompositeException.class);\n\n', 1), ('assertEquals("some', 1), ('DisposableHelper.setOnce(this.d,', 1), ('mapFailWithRetryConditional()', 1), ('once.compareAndSet(false,', 1), ('soldierResponse)', 1), ('single.toFlowable().subscribe(subscriber);\n', 1), ('forEachPair(\n', 1), ('onErrorMapper', 1), ('(lastDot', 1), ('King', 1), ('Flowable.<Event>generate(new', 1), ('Single.just(8),', 1), ('DelaySubscription', 1), ('awaitTimeout()', 1), ('verify(exceptionHandler).uncaughtException(eq(ballThread),', 1), ('4883307006032401862L;\n\n', 1), ('view.storeChanged(this));\n', 1), ('serialize/deserialize', 1), ('withDiscoverability(Discoverability.DISCOVERABLE);\n', 1), ('itemType)', 1), ('assemblyTrackingCompletable()', 1), ('Class<U>', 1), ('"http://code.google.com/webtoolkit/doc/latest/DevGuideServerCommunication.html#DevGuideSerializableTypes">\n', 1), ('freshness.get());\n', 1), ('MAX_STACK_DEPTH', 1), ('typeVariable', 1), ('(getClass()', 1), ('"FlowableAllSingle",\n', 1), ('list.add(h[k]);\n', 1), ('com.iluwatar.intercepting.filter;\n\nimport', 1), ('empty).\n', 1), ('one-by-one', 1), ('(m.getName().startsWith("getOn")\n//', 1), ('backpressureOverflow()', 1), ('MostRecentSubscriber<T>(initialValue);\n\n', 1), ('SingleSubjectTest', 1), ('22.0\n', 1), ('CacheLoader.asyncReloading(baseLoader,', 1), ('(!Thread.interrupted())', 1), ('createLotteryTicket("foo@bar.com",', 1), ('subject1', 1), ('rowMap();\n}\n', 1), ('Object>(w.w,', 1), ('e.serialize().onNext(null);\n', 1), ('suscipit', 1), ('properties,', 1), ('mistake.In', 1), ('expectProcess,\n', 1), ('(lm', 1), ('(active.compareAndSet(inner,', 1), ('IllegalStateException(message));\n', 1), ('NonStaticFieldIgnored();\n\n', 1), ('size);\n\n', 1), ('c.subscribeOn(Schedulers.single());\n', 1), ('String[].class,\n', 1), ('Maybe.just(15)\n', 1), ('}).filter(new', 1), ('mapNoError()', 1), ('Flowable.just("three",', 1), ('evictedGroups);\n', 1), ('TestObserver}', 1), ('<A>}', 1), ('hasNext()\n', 1), ('traits', 1), ('Dispatcher.getInstance();\n\n', 1), ('dispose,', 1), ('[min,', 1), ('getNumElements()', 1), ('com.google.common.collect.testing.IteratorFeature;\nimport', 1), ('pages', 1), ('LotteryTicketTest', 1), ('Thread.sleep(delay);\n', 1), ('resourceDisposedIfMapperCrashesNonEager()', 1), ('CLASS_VALUE(classValueValidator());\n\n', 1), ('14)));\n', 1), ('stack,', 1), ('ticket);\n', 1), ('Maps.DescendingMap<K,', 1), ('(argValue', 1), ('#compareAndSet}', 1), ('KingJoffrey();\n', 1), ('JdkPatternCompiler;\n', 1), ('FlowableConcatWithCompletable<T>', 1), ('Map<NazgulName,', 1), ('BackpressureStrategy.BUFFER).retryWhen(attempts', 1), ('inDateFormat;', 1), ('"WIZARD")\npublic', 1), ('testWaitingSomeTimeForPromiseToBeFulfilled()', 1), ('programming', 1), ('NO_REQUEST', 1), ('com.google.common.base.Function}', 1), ('getAvailableToppingEntities();\n', 1), ('ps.concatMapMaybe(\n', 1), ('ObserveOnSingleObserver<T>(s,', 1), ('DematerializeObserver<T>(t));\n', 1), ('this.sit', 1), ('com.google.common.collect.Iterables.cycle;\nimport', 1), ('IntConsumer,', 1), ('baseExpected.length', 1), ('q,\n', 1), ('com.iluwatar.fluentinterface.fluentiterable.simple;\n\nimport', 1), ('assertEquals(INITIAL_COUNT', 1), ('.retry(5)\n', 1), ('subscribers);\n\n', 1), ('io.reactivex.internal.subscriptions.EmptySubscription;\n\n/**\n', 1), ('Observable.fromFuture(Observable.never()\n', 1), ('crashReported()', 1), ('emptyConsumerToString()', 1), ('SortedSetMultimap.class,\n', 1), ('moment', 1), ('newProxy(interfaceType);\n', 1), ('Comparator<Foo>},', 1), ('file2.delete();\n', 1), ('splitr.estimateSize());\n', 1), ('error).test().assertComplete();\n', 1), ('<i>typically</i>', 1), ('initialCollection;\n', 1), ('java.util.concurrent.ExecutionException;\n\n/**\n', 1), ('mutedClose(connection,', 1), ('check(String', 1), ('(lastServedId', 1), ('.withFeatures(features)\n', 1), ('SingleTimeout<T>(this,', 1), ('CollectionAddTester.getAddNullSupportedMethod(),\n', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/timer.png"', 1), ('2.0.9', 1), ('ScheduledThreadPoolExecutor)', 1), ('nullScheduler()', 1), ('uniqueIdCount', 1), ('TreeTraverser<File>()', 1), ('actual.subscribe(observer);\n', 1), ('testFollowingFirst()', 1), ('(infinite', 1), ('NewThreadScheduler()', 1), ('executor.invokeAll(tasks,', 1), ('SUBSIZED\n', 1), ('Array.set(array,', 1), ('TestsForSetsInJavaUtil().allTests();\n', 1), ('checkDisposed(Completable', 1), ('Observable.just("one").doOnTerminate(new', 1), ('<p>Example:', 1), ('play', 1), ('java.util.Collections.unmodifiableList;\n\nimport', 1), ('onErrorResumeNext(Function<?', 1), ('pp1.singleElement()),', 1), ('mergeWith(CompletableSource', 1), ('checkDoubleOnSubscribeSingle(Function<Single<T>,', 1), ('TestException("onSubscribe()");\n', 1), ('JAVA_EXT_DIRS("java.ext.dirs"),\n\n', 1), ('observer.update(null,', 1), ('root);\n\n', 1), ('pellentesque', 1), ('java.io.Closeable;\nimport', 1), ('Drops', 1), ('awaitUninterruptibly(latch);\n', 1), ('nextInt()', 1), ('ForwardingListenableFuture}', 1), ('single().shutdown();\n', 1), ('(!lines.get(0).equals(header[0])', 1), ('"1.0:1",', 1), ('Optional.empty()}', 1), ('parent.onCompleteCall.run();\n', 1), ('TODO(kevinb):', 1), ('java.lang.annotation.*;\n\nimport', 1), ('entries\n', 1), ('PrintWriter.class);\n', 1), ('.distinctUntilChanged()\n', 1), ('"singleSource', 1), ('expect)', 1), ('CoffeeMakingTask(6));\n', 1), ('ThreadPoolExecutor\n', 1), ('list.add(index,', 1), ('ba3[ba1.length', 1), ('Disposable-based', 1), ('e.getEnumConstants().length);\n\n', 1), ('serverPort)', 1), ('id));\n', 1), ('Skeletal', 1), ('cleared.\n', 1), ('innerArray', 1), ('Beta', 1), ('SingleCreate<T>(source));\n', 1), ('assertNotNull(ArbitraryInstances.get(WithPublicConstructorAndConstant.class));\n', 1), ('schedule(java.util.concurrent.Executors.callable(command),', 1), ('ClassOwnership.JVM_BEHAVIOR.getOwnerType(rawType),', 1), ('futile,', 1), ('writer.write(testMessage));\n', 1), ('PublishSubscription[0];\n\n', 1), ('TestHelper.checkDisposed(PublishProcessor.create().singleElement().doOnSuccess(Functions.emptyConsumer()));\n', 1), ('cause)', 1), ('ipsum",', 1), ('Completable.concat(\n', 1), ('parent.onCancel.run();\n', 1), ('(implicit)', 1), ('testGet_mutable()', 1), ('addAll(Collection<?', 1), ('getInstance(NazgulName', 1), ('ClassToInstanceMap<B>,', 1), ('increased.\n', 1), ('ObservableJoin<TLeft,', 1), ('US_ASCII', 1), ('subscriptions.add(subscription);\n\n', 1), ('"Files.isDirectory()";\n', 1), ('INITIAL_COUNT;', 1), ('TypeToken<Table<EmptyEnum,', 1), ('DisposeOnCancel(d));\n', 1), ('TestStringMapGenerator\n', 1), ('FlowableConcatWithSingle<T>', 1), ('FeatureUtil.addImpliedFeatures(features);\n\n', 1), ('(lines.get(i', 1), ('WindowBoundaryTckTest', 1), ('FlowableSwitchMapSinglePerf', 1), ('RxJavaPlugins.onAssembly((Single<T>)source);\n', 1), ('<i>2010', 1), ('soProducerIndex(long', 1), ('inputStream)', 1), ('soConsumerIndex(index', 1), ('addInEdge(E', 1), ('bot.add(del,', 1), ('calculation', 1), ('this.actual.get();\n', 1), ('accesses', 1), ('remove(PublishDisposable<T>', 1), ('vulnerable', 1), ('BlockingQueue<Item>', 1), ('getAnnotations()', 1), ('concat3()', 1), ('ArbitraryInstances.get(Float.class));\n', 1), ('member.getName();\n', 1), ('streamA}', 1), ('verify(firstSet).dispose();\n', 1), ('constraints.\n', 1), ('testToFile_AndroidIncompatible()', 1), ('Appendable', 1), ('emitters.add(kingsHand);\n', 1), ('PromiseTest', 1), ('suite.addTest(testsForConcurrentLinkedQueue());\n', 1), ('m.javadoc', 1), ('namespace', 1), ('testCollectorFailureDoesNotResultInErrorAndOnNextEmissionsFlowable()', 1), ('AsyncTask<T>', 1), ('RxThreadFactory("TestCustomPoolTimed"));\n', 1), ('(there', 1), ('decodingInputs', 1), ('Manages', 1), ('FiniteRange', 1), ('CompletableMergeArray', 1), ('w.println(s);\n', 1), ('source.subscribe(bes);\n', 1), ('I/O\n', 1), ('AtomicDouble.class);\n', 1), ('MaybeTimerTest', 1), ('classic', 1), ('TestEnvironment(50));\n', 1), ('Ignores', 1), ('CompletableToSingle(CompletableSource', 1), ('Map<PotionType,', 1), ('testTreeMap()', 1), ('a.compareToIgnoreCase(b)', 1), ('PatternFilenameFilter(String', 1), ('java.util.concurrent.CopyOnWriteArrayList;\n\n/**\n', 1), ('removeObserver(WeatherObserver', 1), ('fresh\n', 1), ('(handle)', 1), ('"numbers="', 1), ('futureList.get(0);\n', 1), ('ObjectHelper()', 1), ('JAVA9;\n', 1), ('LexicographicalOrdering)', 1), ('PublishProcessor<Void>', 1), ('fallback},\n', 1), ('SUPPORTS_REMOVE_WITH_INDEX(CollectionFeature.SUPPORTS_REMOVE),\n\n', 1), ('TEST_PART_PRICE);\n', 1), ('CompletableConcatArray(CompletableSource[]', 1), ('enumValue.getDeclaringClass();\n', 1), ('func;\n', 1), ('useOfMute()', 1), ('.put(ImmutableCollection.class,', 1), ('setDefaultCloseOperation(EXIT_ON_CLOSE);\n', 1), ('suites\n', 1), ('onChannelReadable(SelectionKey', 1), ('height="301"', 1), ('Spliterator.NONNULL;\n', 1), ('set.trimToSize();\n', 1), ('observerCompletable2()', 1), ('ImmutableSortedMultiset<E>', 1), ('here");\n//', 1), ('stopLatch', 1), ('statusIgnoresMessageData()', 1), ('ArrayList<>(MinimalCollection.of(elements));\n', 1), ('"A",', 1), ('s1.onError(e);\n', 1), ('CompoundOrdering_CustomFieldSerializer', 1), ('org.junit.*;\n\n/**\n', 1), ('fromPublisher(toFlowable().retry(times));\n', 1), ('m.doOnSuccess(Functions.emptyConsumer());\n', 1), ('Schedulers.single();', 1), ('TestHelper.checkUtilityClass(RxJavaPlugins.class);\n', 1), ('fs.onSubscribe(s);\n\n', 1), ('ObservableDelaySubscriptionOther(ObservableSource<?', 1), ('(!handler.completed.await(3,', 1), ('com.iluwatar.event.sourcing.event.AccountCreateEvent;\nimport', 1), ('artifact', 1), ('ALLOWS_NULL_KEY_QUERIES,\n', 1), ('Single.ambArray(ps.singleOrError(),', 1), ('T>(source,', 1), ('domainapp.fixture.scenarios;\n\nimport', 1), ('unsafe\n', 1), ('usual,', 1), ('Validator<>(Objects.requireNonNull(t));\n', 1), ('foo1:bar1\n', 1), ('TestHelper.checkDisposed(Single.create(new', 1), ('info', 1), ('checkNotNull(mode);\n\n', 1), ('nextCount++;\n', 1), ('supplier}', 1), ('modifies', 1), ('Long.MAX_PATH', 1), ('split.getExactSizeIfKnown();\n', 1), ('getStarted()', 1), ('ShortBuffer.class,\n', 1), ('r));\n', 1), ('SingleSource<Downstream>', 1), ('instances;', 1), ('(!delayError', 1), ('converter.convert("HONDA"));\n', 1), ('Observable<Event>', 1), ('mapper.apply(value).iterator();\n', 1), ('com.google.common.graph.SuccessorsFunction;\nimport', 1), ('notifyObservers(A', 1), ('RuntimeException(e);\n//', 1), ('extension.\n', 1), ('defined\n', 1), ('numStripes;\n', 1), ('backingMap().values())', 1), ('sorts', 1), ('vice', 1), ('checks,', 1), ('runnableDisposedAsync2()', 1), ('com.google.common.collect.testing.testers.CollectionAddAllTester.getAddAllNullUnsupportedMethod;\nimport', 1), ('downstreamRequest(long', 1), ('IgnoreMaybeObserver<T>', 1), ('(Class<TestEnum>)', 1), ('queue.offer(f);\n\n', 1), ('Optional.empty().\n', 1), ('FlatMapSingleSubscriber(Subscriber<?', 1), ('FutureSingleObserver<T>());\n', 1), ('.named("AbstractList")\n', 1), ('collector);\n', 1), ('height="185"', 1), ('ImmutableList.Builder<>(streams.length);\n', 1), ('folder:<br>\n', 1), ('Maybe.<Integer>empty().subscribe(rmo);\n\n', 1), ('%.3f",', 1), ('CompletableError(new', 1), ('com.iluwatar.prototype;\n\nimport', 1), ('Closeables#close\n', 1), ('ps2.onNext(2);\n', 1), ('CONSTANT2\n', 1), ('ArbitraryInstances.get(rawType);\n', 1), ('cancelIgnored()', 1), ('jarFile.delete();\n', 1), ('single.\n', 1), ('LOGGER.info("Here', 1), ('Emitter', 1), ('super.poll();\n', 1), ('FlowableEmpty()', 1), ('MaybeTimeoutPublisherTest', 1), ('making\n', 1), ('Feature<?>...', 1), ('MultimapBuilder.hashKeys(expectedKeys).arrayListValues(expectedValuesPerKey).build()}.\n', 1), ('io.reactivex.internal.schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable;\nimport', 1), ('verify(observer).onNext(false);\n', 1), ('ZipMaybeObserver[n];\n', 1), ('TestMapEntrySetGenerator<K,', 1), ('SingleContains<T>(this,', 1), ('finalizeReferentCalled;\n\n', 1), ('risk', 1), ('RxJavaPlugins.onAssembly(CompletableEmpty.INSTANCE);\n', 1), ('FlowableTimestampTest', 1), ('<i>All</i>', 1), ('Collections.unmodifiableList(this.bottomShelf);\n', 1), ('context.size()', 1), ('testBackpressureWithInitialValue()', 1), ('this.listeners.remove(member);\n', 1), ('list.lastIndexOf(6));\n\n', 1), ('ReaderTest', 1), ('documentation</a>.\n', 1), ('getReceiver()', 1), ('getNumbersAsString()', 1), ('observableProducers()', 1), ('TestHelper.checkDisposed(Single.fromPublisher(Flowable.never()));\n', 1), ('firstRecord', 1), ('serial.onError(t);\n', 1), ('TypeToken<SetMultimap<String,', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.observeOn.png"', 1), ('ObservableLift<R,', 1), ('w4.schedule(countAction);\n\n\n', 1), ('Future#get()', 1), ('SafeTreeSet<>(Arrays.asList(elements));\n', 1), ('a[idx].subscribe(this);\n', 1), ('"Resources.asCharSource[URL,', 1), ('f1);\n', 1), ('TrustedListenableFutureTask.create(runnable,', 1), ('testGetClassPathFromManifest_multiplePaths()', 1), ('FutureTask', 1), ('Request.\n', 1), ('(s.contains("org.gradle.internal."))', 1), ('SingleEmitter<T>,', 1), ('fail.append("Found', 1), ('scenarios', 1), ('"retry"', 1), ('com.google.common.primitives}.', 1), ('ArrayCompositeSubscription', 1), ('retrieves', 1), ('++i;\n\n', 1), ('java.nio},', 1), ('tests!\\r\\n")\n', 1), ('blocking-queueing', 1), ('of((K)', 1), ('assertEquals(Long.valueOf(3),', 1), ('Flowable.fromArray(4,', 1), ('Executor,', 1), ('Type}.\n', 1), ("b.append('[');\n", 1), ('assertTrue(event[0].toString(),', 1), ('"/usr",', 1), ('testDataSource()', 1), ('Error)', 1), ('CQRS', 1), ('m.getName()', 1), ('Collections.reverse(list);\n', 1), ('CompletablePeek', 1), ('soElement(int', 1), ('(output).\n', 1), ('TimeIntervalTckTest', 1), ('testScanWithRequestOne()', 1), ('Flushable},', 1), ('(aka', 1), ('AbstractIterator<E>()', 1), ('creating\n', 1), ('Class<TestEnum>', 1), ('(Integer', 1), ('@ListFeature.Require(absent', 1), ('@Retention', 1), ('clazz.getClassLoader());\n', 1), ('curr;\n', 1), ('FlowableReduce(Flowable<T>', 1), ('Nazgul>', 1), ('":");\n', 1), ('assertThat(urls).hasSize(4);\n', 1), ('unfiltered.put("one",', 1), ('checkNotNull(streamB);\n', 1), ('ArbitraryInstances.get(IntBuffer.class).capacity());\n', 1), ('IllegalArgumentException("n', 1), ('ambWith(CompletableSource', 1), ('lpConsumerNode();', 1), ('ConcatPublisherEagerTckTest', 1), ('.put(UnsignedInteger.class,', 1), ('}.readLines();\n', 1), ('.toSingleDefault(0)\n', 1), ('TypeToken<ImmutableSet<String>>()', 1), ('&=', 1), ('distant', 1), ('io.reactivex.exceptions.OnErrorNotImplementedException;\nimport', 1), ('next));\n', 1), ('nextObserver);\n', 1), ('compareAndSet(START,', 1), ('builder.append("Character', 1), ('f.doFinally(SingleDoFinallyTest.this);\n', 1), ('IllegalStateException("Test', 1), ('parse(File', 1), ('SimplePlainQueue<Object>', 1), ('testsForCheckedSortedSet()', 1), ('De-multiplexer', 1), ('FlowableFromPublisher(Publisher<?', 1), ('writing",', 1), ('(?,?,?)"))', 1), ('file.length();\n', 1), ('-2421395018820541164L;\n\n', 1), ('testLottery()', 1), ('.assertResult(0);\n\n', 1), ('testAssertContainsAllOf()', 1), ('e3)', 1), ('(possibly', 1), ('forcefully', 1), ('equalsPredicate()', 1), ('exclude', 1), ('org.junit.Assert.*;\n\n\n/**\n', 1), ('testFatalError()', 1), ('service.awaitTermination(1000,', 1), ('Tickets', 1), ('GENERATORS', 1), ('height="395"', 1), ('TestHelper.checkDisposed(PublishSubject.<Integer>create().scan(0,', 1), ('nameBuilder.toString();\n', 1), ('Single.just(1).contains(1).test().assertResult(true);\n\n', 1), ('<i>generally', 1), ('javascript', 1), ('u.getName());\n', 1), ('!veryEnd)', 1), ('Again', 1), ('never\n', 1), ("file's\n", 1), ('Arrays.asList(expect);\n', 1), ('EmptyDisposable.complete(t);\n', 1), ('colliding', 1), ('flowableForEachWhile()', 1), ('backpressureNotReady()', 1), ('ParallelMap(ParallelFlowable<T>', 1), ('WithLatestInnerObserver\n', 1), ('this.visitor.visitSergeant(new', 1), ('(CombinerObserver<T,', 1), ('to.assertResult(m,', 1), ('ArrayDeque<C>();\n', 1), ('a.length;\n\n', 1), ('"Subscription",\n', 1), ('keyword.', 1), ('.put(ListMultimap.class,', 1), ('com.google.common.collect.Iterators;\nimport', 1), ('cleared,', 1), ('(CompositeException)to.errors().get(0);\n\n', 1), ('blockingFirstDefault()', 1), ('#set(Disposable)\n', 1), ('InterruptedException()', 1), ('SerializedSubscriber<Flowable<T>>(s),\n', 1), ('FlowableSwitchMapMaybe<T,', 1), ('DummyScheduledThreadPoolExecutor', 1), ('equals</i>', 1), ('Validator(GetCheckedTypeValidator', 1), ('ObservableFlatMapPerf', 1), ('doOnSuccess(final', 1), ('Single.just(1).takeUntil(Flowable.just(1).take(1))\n', 1), ('futureMaybe.doOnDispose(()', 1), ('MaybeUnsafeCreate<T>(onSubscribe));\n', 1), ('.doOnCancel(unsubscribeAction)\n', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/contains.png"', 1), ('50).reduce(second).toObservable();\n', 1), ('mpscLinkedQueueNull()', 1), ('MaybeAmb<T>', 1), ('currentReaderCount--;\n', 1), ('using(Callable<U>', 1), ('queueType;\n\n', 1), ('TODO(benyu):', 1), ('BlockingLastObserver<T>', 1), ('comparable.compareTo(comparable));\n', 1), ('Collectors.collectingAndThen(\n', 1), ('BlockingHelper.awaitForComplete(callback,', 1), ('statusMember.getStopped());\n', 1), ('1M', 1), ('SerializedEmitter<T>\n', 1), ('compareAndSet}.\n', 1), ('TypeToken<SortedSet<String>>()', 1), ('onNext)', 1), ('(topping.getCake()', 1), ('map.get(name).get();\n', 1), ('lazySet(0);\n', 1), ('Flowable.concatArrayEager(\n', 1), ('filterUpperBounds(Iterable<Type>', 1), ('list.addAll(items);\n', 1), ('innerNext(InnerQueuedObserver<T>', 1), ('"collectionSupplier', 1), ('AllTckTest', 1), ('main(String...', 1), ('filename,', 1), ('TestHelper.checkDisposed(SingleSubject.create());\n', 1), ('FlowableSubscriber<R>', 1), ('prevented', 1), ('3000));\n\n', 1), ('notDoneFuture;\n\n', 1), ('letter', 1), ('url:', 1), ('Flowable",', 1), ('TimeoutFallbackObserver(SingleObserver<?', 1), ('TearDownStack', 1), ('pp.purgeEnable;\n', 1), ('array:', 1), ('"x', 1), ('onLift;\n', 1), ('Resources.asByteSource(left).contentEquals(Resources.asByteSource(right));\n', 1), ('ArrayList<Throwable>();\n', 1), ('Futures.catching},', 1), ('strict.\n@GwtIncompatible\npublic', 1), ('io.reactivex.flowables.GroupedFlowable}.\n', 1), ('ArbitraryInstances.get(Charset.class));\n', 1), ('SortedSet<K>', 1), ('keys.\n', 1), ('scalar\n', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/timeout.2s.png"', 1), ('publish(final', 1), ('V>(t);\n', 1), ('SingleSource<Object>()', 1), ('[you]', 1), ('32));\n\n', 1), ('(predicate.test(candidate))', 1), ('scenario(Servant', 1), ('StringArrayList[4];\n\n', 1), ('ObservableSingleSingle(ObservableSource<?', 1), ('cd.assertError(NullPointerException.class);\n', 1), ('V>(entryArray);\n', 1), ('Proxy#newProxyInstance}.\n', 1), ('deque.offerFirst(exceptions.get(i));\n', 1), ('"e"}),', 1), ('euismod', 1), ('FUSED_READY;\n', 1), ('tells', 1), ('Boolean\n', 1), ('io.reactivex.subjects.Subject;\nimport', 1), ('Double.toString(Math.PI).length()', 1), ('TestHelper.checkDisposed(PublishSubject.create().singleOrError().doFinally(this));\n', 1), ('QueueDisposable#NONE}.\n', 1), ('writing\n', 1), ('testsForBadlyCollidingHashSet()', 1), ('step.\n', 1), ('ms.add(Completable.never());\n', 1), ('feed\n', 1), ('2).skip(elements)\n', 1), ('finalizerCopy);\n\n', 1), ('@SuppressWarnings({"rawtypes",', 1), ('request(Long.MAX_VALUE', 1), ('fail.append(fn.substring(jdx', 1), ('domain-specific', 1), ('FlowableDoOnRequestTest', 1), ('remove(PublishSubscription<T>', 1), ('java.io.RandomAccessFile;\nimport', 1), ('simpleobjects', 1), ('ParameterizedType)', 1), ('suppressForVector()', 1), ('executor.lazySet(createExecutor(threadFactory));\n', 1), ('io.reactivex.observers.DefaultObserver;\n\n/**\n', 1), ('Iterable<T>()', 1), ('domainEvent)', 1), ('(subjectGenerator', 1), ('ThreadLocal<DateFormat>', 1), ('RxJavaPlugins.onSubscribe(Maybe.never(),', 1), ('CakeBakingServiceImpl', 1), ('valuesToPut);\n', 1), ('emptyThrowsNoSuch()', 1), ('veryEnd)', 1), ('Single.fromFuture(Flowable.never().toFuture(),', 1), ('io.reactivex.functions;\n', 1), ('compositeList(to.errors().get(0));\n', 1), ('IntPredicate})', 1), ('"Some', 1), ('!name.isEmpty(),', 1), ('TimeIntervalSubscriber<T>(s,', 1), ('Executors.newFixedThreadPool(2,', 1), ('urls.build();\n', 1), ('modes}', 1), ('(containedClass.getSimpleName().equals("Require"))', 1), ('publisher.subscribe(new', 1), ('badSourceOther()', 1), ('testDrainUninterruptibly_doesNotThrow(final', 1), ('information\n', 1), ('request[2],', 1), ('T>}', 1), ('Class<?>>', 1), ('entryIterator', 1), ('setMap(new', 1), ('BackpressureHelper.addCap(Long.MAX_VALUE,', 1), ('MaybeMergeArray<T>(sources));\n', 1), ('readability', 1), ('java.lang.Double.doubleToRawLongBits;\nimport', 1), ('UnsignedLong.fromLongBits(generateLong());\n', 1), ('FlowableConcatWithMaybe<T>', 1), ('CompletableSource-like', 1), ('(value,', 1), ('Completable.complete().ambWith(error).test().assertComplete();\n', 1), ('PriorityBlockingQueue<TimedRunnable>', 1), ('PublishSubject<Mutable>', 1), ('Comparator.class,\n', 1), ('11);\n', 1), ('CUSTOMERS");', 1), ('ObjectHelper.requireNonNull(errorMapper,', 1), ('actual.onNext(Notification.createOnNext(t));\n', 1), ('.doOnNext(Functions.emptyConsumer())\n', 1), ('slot', 1), ('suite.addTest(testsForCopyOnWriteArrayList());\n', 1), ('parallelFlowable)', 1), ('actualFieldsDetails', 1), ('iter.next().test().assertResult(1);\n', 1), ('mapCrash()', 1), ('itself\n', 1), ('BlockingFlowableLatest(Publisher<?', 1), ('testRangeWithOverflow2()', 1), ('request();\n', 1), ('ConsumerTest', 1), ('muteShouldRunTheCheckedRunnableAndNotThrowAnyExceptionIfCheckedRunnableDoesNotThrowAnyException()', 1), ('java.nio.charset.StandardCharsets#UTF_16LE}', 1), ('SingleDoAfterSuccess<T>(this,', 1), ('newArrayList();\n\n', 1), ('converter\n', 1), ('(TestSortedMapGenerator<K,', 1), ('trim', 1), ('aggregator', 1), ('SerializedObserver<U>(s);\n', 1), ('s2\n', 1), ('longs.size());\n', 1), ('AlwaysEqual();\n\n', 1), ('ItemIterator', 1), ('objects$")\n', 1), ('OperatorWindowBoundaryOpenSubscriber(WindowBoundaryMainSubscriber<T,', 1), ('assertTrue(Comparators.isInStrictOrder(Collections.singleton(1),', 1), ('.blockingSubscribe(System.out::println);\n', 1), ('(long)i;\n', 1), ('call(Integer', 1), ('BlockingLastSubscriber<T>', 1), ('ObjectHelper.requireNonNull(onTerminate,', 1), ('default.\n', 1), ('StudentRepository(context,', 1), ('successIsDisposed()', 1), ('super(run,', 1), ('MutateTask', 1), ('CompletableMergeArray(CompletableSource[]', 1), ('ListFactory', 1), ('ArrayListMultimap<>(expectedKeys,', 1), ('}}).single("");\n', 1), ('WrappedRunnable(Runnable', 1), ('.from(integerList)\n', 1), ('DoubleStream)\n', 1), ('"FlowableMergeWithCompletable"\n', 1), ('SampleTimedSubscriber(Subscriber<?', 1), ('directly,', 1), ('10).isEmpty().toFlowable()\n', 1), ('appClient', 1), ('contents;\n\n', 1), ('exceptionType)', 1), ('Logger.getLogger(Flushables.class.getName());\n\n', 1), ('(ByteBuffer)', 1), ('runnableDisposed()', 1), ('#hasComplete()},\n', 1), ('otherEntriesInDataStructure;', 1), ('guests)', 1), ('TestsForListsInJavaUtil\n', 1), ('Observable.just("one");\n', 1), ('on;', 1), ('<code>dataSource</code>\n', 1), ('SkipLastTimedSubscriber(Subscriber<?', 1), ('manualThrowIfFatal()', 1), ('testNullPointers()', 1), ('32;\n\n', 1), ('TypeToken<LinkedHashMultimap<String,', 1), ('getEnumIfPresent(Class<T>', 1), ('portion', 1), ('BufferCloseSubscriber(BufferBoundarySubscriber<T,', 1), ('Anyone', 1), ('.singleOrError()\n', 1), ('leftIterable,', 1), ('observerSingle()', 1), ('pp0.map(new', 1), ('findPattern("CompletableSource<.*>\\\\s+ss");\n', 1), ('((Callable<R>)o).call();\n', 1), ('TestsForListsInJavaUtil().allTests();\n', 1), ('fail("Did', 1), ('height="236"', 1), ('ISO_8859_1', 1), ('JavaVersion.CURRENT.jdkTypeDuplicatesOwnerName())', 1), ('argument);\n', 1), ('list.addAll(numbers);\n', 1), ('service.execute(barrierTask);', 1), ('emitter;\n\n', 1), ('Maybe",', 1), ('SUCCESS(immediateFuture(new', 1), ('pendingPacket.getReceiver());\n', 1), ('executorService.invokeAll(tasks);\n\n', 1), ('io.reactivex.internal.observers.BasicFuseableObserver;\nimport', 1), ('this.deque', 1), ('qd.poll();\n', 1), ('appendingFileByteSinkFactory()', 1), ('list.toArray(new', 1), ('!isPublic()', 1), ('RepeatUntilObserver<T>(s,', 1), ('.put(CharMatcher.class,', 1), ('parent.onNext.accept(t);\n', 1), ('assertTrue(sub.isUnsubscribed());\n', 1), ('this.enumClass', 1), ('ImmutableListMultimap<K,', 1), ('Customizes', 1), ('FlowableAutoConnect(ConnectableFlowable<?', 1), ('this.queue;\n\n', 1), ('classFullName}', 1), ('ParallelFlowable<Integer>()', 1), ('items.size()={},', 1), ('MapForEachTester<K,', 1), ('factory(Consumer<Builder>', 1), ('sa.request(-99);\n\n', 1), ('distinctKeys;', 1), ('AtomicReference<V>();\n', 1), ('actor,', 1), ('<li>null', 1), ('LINKED_LIST(LinkedList::new);\n\n', 1), ('generateList(E', 1), ('Integer.getInteger(KEY_NEWTHREAD_PRIORITY,', 1), ('SerializedSubscriber<T>(s));\n', 1), ('(int)elements).hide();\n', 1), ('FlowableMergeWithSingle(Flowable<T>', 1), ('FinalizableReferenceQueue', 1), ('ObservableRepeat(Observable<T>', 1), ('Enum<K>>.\n', 1), ('resourceDisposer;\n', 1), ('left-to-right.', 1), ('SerializedForm(ImmutableCollection<?>', 1), ('11:48', 1), ('source.parallel(cpu).runOn(Schedulers.computation()).map(this).sequential();\n', 1), ('BlockingSubscriberTest', 1), ('noSubscribeOnErrorCrashes()', 1), ('Resources', 1), ('ImmutableCollection<?>', 1), ('MaybeConcatPublisherTest', 1), ('io.reactivex.plugins.RxJavaPlugins;\n\n\n/**\n', 1), ('Functions.predicateReverseFor(stop));\n', 1), ('org.reactivestreams.Subscriber;\n\npublic', 1), ('SortedJoinInnerSubscriber<T>(this,', 1), ('testReadArray_noStackOverflow()', 1), ('getAllCakes()', 1), ('AtomicLong.class,\n', 1), ('transformedList);\n\n\n', 1), ('LoggerFactory.getLogger(Inventory.class);\n\n', 1), ('Flowable-specific', 1), ('sample;\n', 1), ('FAILS_FAST_ON_CONCURRENT_MODIFICATION,\n\n', 1), ('Work.\n', 1), ('DisposableHelper.dispose(boundary);\n\n', 1), ('day);\n}\n', 1), ('assertFalse(ArbitraryInstances.get(ListIterator.class).hasNext());\n', 1), ('allowInterrupt)', 1), ('"onTerminate', 1), ('addHeader(Headers', 1), ('completable.blockingGet();\n', 1), ('DataFormatException.class,\n', 1), ('adjacentNode(E', 1), ('testTaskThrowsError()', 1), ('.validate(User::getAge,', 1), ('"Maybe");\n\n', 1), ('workQueue}', 1), ('DistinctObserver(Observer<?', 1), ('never()).onNext(5);\n', 1), ('JdkMatcher', 1), ('super(true,', 1), ('ObservableMergeWithMaybe(Observable<T>', 1), ('unaltered.\n', 1), ('servant.giveCompliments(guests.get(compliment));\n\n', 1), ('InfiniteRangeIterator', 1), ('useOfLoggedMute()', 1), ('current.lazySet(t);\n', 1), ('SimpleObjectCreate', 1), ('ByteSource.empty()).iterator());\n', 1), ('verify(first).dispose();\n', 1), ('Observable.empty().takeUntil(new', 1), ('TypeToken<Table<String,', 1), ('AsyncFunction#apply}', 1), ('withTimeout(\n', 1), ('BlockingHelperTest', 1), ('onCompleteSupplier\n', 1), ('dispatcher\n', 1), ('serializedConcurrentOnNextOnError()', 1), ('guardedQueue\n', 1), ('RxJavaPlugins.set(scheduler', 1), ('Boolean.TYPE)', 1), ('BlockingFlowableLatest<T>', 1), ('ms.add(Maybe.just(1));\n\n', 1), ('(min,', 1), ("'h'))));\n", 1), ('maxAttempts,', 1), ('"hello\\r\\nworld")\n', 1), ('createSplit(split,', 1), ('SubscribeOnTckTest', 1), ('sources.add(newByteSource(start,', 1), ('WindowExactSizeTckTest', 1), ('FlowableWindowTests', 1), ('resourceSupplierThrows()', 1), ('places', 1), ('Feature<List>', 1), ('Finds', 1), ('let', 1), ('(delegate', 1), ('dispatch(E', 1), ('polling', 1), ('assertFreshInstances(\n', 1), ('numbers3);\n', 1), ('asByteSink(File', 1), ('source1;\n', 1), ('System.out.println("---', 1), ('SingleInternalHelper.iterableToFlowable(\n', 1), ('line\\nno', 1), ('-7044685185359438206L;\n\n', 1), ('getHandler()', 1), ('mergeDelayError(MaybeSource<MaybeSource<T>>)}', 1), ('Objects.equals().\n', 1), ('Flowable.fromPublisher(sources).concatMapEager((Function)MaybeToPublisher.instance());\n', 1), ('(ISO-LATIN-1).\n', 1), ('owns', 1), ('doOnRequest(@NonNull', 1), ('w.close();\n', 1), ('unloaded,', 1), ('SchedulerPoolFactory.PURGE_PERIOD_SECONDS', 1), ('Future\n', 1), ('ObjectHelper.requireNonNull(reducer.apply(sp.first,', 1), ('f.doFinally(MaybeDoFinallyTest.this);\n', 1), ('ImmutableSet.of().iterator())\n', 1), ('frc,', 1), ('TestException()).doOnError(new', 1), ('MemoryMXBean', 1), ('suppressForLinkedBlockingDeque()', 1), ('ExecutionException})', 1), ('checkArgument(!delegate.isEmpty());\n', 1), ('tied', 1), ('parent.bufferSize;\n', 1), ('2.0)', 1), ('RuntimeException))', 1), ('java.util.concurrent.Executor})\n', 1), ('this.observer1', 1), ('Builder}s.\n', 1), ('BiFunction<String,', 1), ('FlowableOnBackpressureError(Flowable<T>', 1), ('delegate().invokeAll(tasks,', 1), ('Thus,', 1), ('covered', 1), ('JdkBackedImmutableMap_CustomFieldSerializer', 1), ('SEVERAL);\n\n', 1), ('CharSource}', 1), ('SerializedForm', 1), ('Replay</a>\n', 1), ('mechanism.\n', 1), ('optionally\n', 1), ('callableListCreator()', 1), ('#fuseToObservable()}\n', 1), ('worker2.dispose();\n', 1), ('SINGLE_THREAD_FACTORY;\n\n', 1), ('assertTrue(ArbitraryInstances.get(TreeSet.class).isEmpty());\n', 1), ('assertFalse(list.contains(1));\n', 1), ('lines\\nbut', 1), ('servant.giveWine(k);\n', 1), ('subscribeInner(ObservableSource<?', 1), ('byte[100];\n', 1), ('enumConstantCache', 1), ('call.</li>\n', 1), ('Queen}.\n', 1), ('SkipLastTckTest', 1), ('Integer.MAX_VALUE};\n\n', 1), ('.assertFailure(IOException.class,', 1), ('testFirst()', 1), ('sagittis', 1), ('(int)elements).timestamp()\n', 1), ('componentClass', 1), ('(!file.isFile())', 1), ('inputs,', 1), ('phone,\n', 1), ('href="https://github.com/lukas-krecan/future-converter">Future', 1), ('io.reactivex.observables;\n\nimport', 1), ('generateBigDecimal()', 1), ('(len1', 1), ('assertEquals("EmptyConsumer",', 1), ('list.add(i);\n', 1), ('setValue(B', 1), ('Character.class,\n', 1), ('taskDone);\n', 1), ('redoes', 1), ('testAggregateAsIntSumResultSelectorThrows()', 1), ('<i>probably</i>', 1), ('ObservableTimeoutTimed(Observable<T>', 1), ('System.out.print(lines.size()', 1), ('TypeToken<TreeMultiset<String>>()', 1), ('SubscriptionHelper.cancel(subscription);\n\n', 1), ('isPartialView();\n\n', 1), ('user.getFirstName().toLowerCase()', 1), ('MaybeTimeoutPublisher(MaybeSource<T>', 1), ('delegateCollection().isEmpty();\n', 1), ('gd.run();\n', 1), ('number)', 1), ('generateTypeToken()', 1), ('(hasNext);\n\n', 1), ('lines.\n', 1), ('Dispatches', 1), ('usedAs)', 1), ('c.onError(new', 1), ('CharSourceTester.tests(\n', 1), ('HelperHolder', 1), ('getTopShelf()', 1), ('io.reactivex.Observer', 1), ('throttling,', 1), ('initialCollection,', 1), ('a);\n', 1), ('com.google.gson.Gson;\nimport', 1), ('(n,', 1), ('suits', 1), ('.filter(i', 1), ('Pattern.compile(""))\n', 1), ('property.value(),', 1), ('source.onNext(3);\n', 1), ('"1";\n', 1), ('e5);\n', 1), ('MaybeEmitter<T>,', 1), ('active.get();\n\n', 1), ('checkDoubleOnSubscribeMaybeToObservable(Function<Maybe<T>,', 1), ('reportDoubleSubscription(Class<?>', 1), ('Flowable()', 1), ('getAnnotation(Class<A>', 1), ('channelToPendingWrites', 1), ('d2)', 1), ('tryOutSchedulers()', 1), ('map)\n', 1), ('(eventClassName.equals("AccountCreateEvent"))', 1), ("spec'd", 1), ('applications,', 1), ('base.getParentFile();\n\n', 1), ('instance.comparators)', 1), ('rangeFlatMap.subscribe(new', 1), ('Ordering<Integer>', 1), ('"blibby");\n', 1), ('DelayWithMainObserver<T>(this,', 1), ('assertTrue(ArbitraryInstances.get(SynchronousQueue.class).isEmpty());\n', 1), ('CompletableConsumable.\n', 1), ('.switchIfEmpty(withProducer)\n', 1), ('Collections.unmodifiableSet(numbers);\n', 1), ('log.info("customerDao.getCustomerById(2):', 1), ('(!observer.completed.await(3,', 1), ('Maybe.concatArrayDelayError(Maybe.just(1),\n', 1), ('readKey', 1), ('Helpers.testComparator(lexy,', 1), ('scheme', 1), ('-2434867452883857743L;\n\n', 1), ('head()', 1), ('(onSuccess)', 1), ('complete(value);\n', 1), ('InvisibilityPotion();\n', 1), ('Flowable.<Void>never().blockingMostRecent(null).iterator().next());\n', 1), ('socket.send(request);\n\n', 1), ('automated', 1), ('WithExceptionalConstructor.INSTANCE,\n', 1), ('testIssue1935NoUnsubscribeDownstream()', 1), ('(backpressureSpec', 1), ('VALUES_FORWARD', 1), ('assertTrue(numbers.getNumbers().contains(2));\n', 1), ('#outEdgeToNode}', 1), ('blocks,\n', 1), ('IOTask());\n\n', 1), ('PATH_SEPARATOR.value();\n', 1), ('doHash(T', 1), ('headers.put(header,', 1), ('o.doOnEach(new', 1), ('UndeliverableException}.\n', 1), ('pool.shutdownNow();\n', 1), ('location.', 1), ('ObservableTimeInterval(ObservableSource<T>', 1), ('TestHelper.checkDisposed(Completable.concat(Flowable.just(Completable.complete())));\n', 1), ('delegate.ceilingKey(checkValid(key));\n', 1), ('Completable.mergeDelayError(\n', 1), ('assertThat(timer.elapsed(MILLISECONDS)).isAtLeast(10L);\n\n', 1), ('encounters.\n', 1), ('f.onError(null);\n', 1), ('SingleFlatMap<SingleSource<?', 1), ('testStringConverter_toString()', 1), ('((ByteBuffer)readObject).array();\n', 1), ('because\n', 1), ('Line', 1), ('improperly', 1), ('void.class,', 1), ('com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService;\n\nimport', 1), ('model:', 1), ('ObservableCountSingle<T>', 1), ('asking', 1), ('started");\n', 1), ('50).reduce(second).toFlowable();\n', 1), ('EmptyCompletableObserver();\n\n', 1), ('assertThat(e.getCause()).hasMessage(message);\n', 1), ('head[0]', 1), ('arrayCancelled()', 1), ('singleObserver)', 1), ('int[].class,\n', 1), ('children.count());\n', 1), ('actual.subscribe(s);\n', 1), ('occurrence', 1), ('Single.wrap(Single.never()));\n\n', 1), ('this.apply(t)', 1), ('.named("CopyOnWriteArrayList")\n', 1), ('findWizardsWithSpellbook(String', 1), ('file.exists();\n', 1), ('CrashingMapperIterator<T>', 1), ('TestHelper.checkDisposed(PublishProcessor.create().singleElement().onTerminateDetach());\n', 1), ('onError(IllegalStateException)', 1), ('execute(Runnable)}', 1), ('onSuccess()', 1), ('languages.\n', 1), ('function6Fail()', 1), ('g.observeOn(Schedulers.computation()).map(ParallelPerf.this);\n', 1), ('BorderLayout.CENTER);\n\n', 1), ('SingleFlatMapCallback(SingleObserver<?', 1), ('Iterator<Entry<Character,', 1), ('ClassNotFoundException,', 1), ('map.put("angry",', 1), ('schedulerCallable.call();\n', 1), ('q.add(NotificationLite.disposable(s));\n', 1), ('f.elementAt(0);\n', 1), ('VideoResource(new', 1), ('delegate().size();\n', 1), ('dtm.removeRow(temp);\n', 1), ('getList().listIterator(-1);\n', 1), ('11.0', 1), ('lines\\n",', 1), ('less.\n', 1), ('ReferenceDisposable<Subscription>', 1), ('(student.getStudentId()', 1), ('101', 1), ('LoggerFactory.getLogger(Wizard.class);\n\n', 1), ('constructor.newInstance());\n', 1), ('doWorkOnNewTrampoline(final', 1), ('setSender(SocketAddress', 1), ('createMaybeNavigableAsMap();\n', 1), ('MatchResult.class,\n', 1), ('IntervalObserver\n', 1), ('iMax)', 1), ('handlers;\n\n', 1), ('cakes\n', 1), ('io.reactivex.Flowable}', 1), ('testNoOpScheduledExecutorInvokeAll()', 1), ('SingleElementSubscriber(MaybeObserver<?', 1), ('AlbumPage(webClient);\n', 1), ('guarantee.\n', 1), ('RxJavaPlugins.onComputationScheduler(s));\n\n', 1), ('ObjectHelper.requireNonNull(singleFunction.apply(resource),', 1), ('CompletableNever()', 1), ('DeferredScalarSubscription<T>\n', 1), ('sum);\n\n', 1), ('ArbitraryInstances.get(Range.class));\n', 1), ('demand', 1), ('Json', 1), ('com.iluwatar.servicelayer.wizard.Wizard;\n\n/**\n', 1), ('replace(AtomicReference<Subscription>', 1), ('java.util.Arrays.asList;\n\nimport', 1), ('formatted', 1), ('InMemoryAppender(CakeViewImpl.class);\n', 1), ('MapWithIndexSpliterator(F', 1), ('ComputationScheduler.MAX_THREADS;\n\n', 1), ('testSpliterator()', 1), ('throwable;\n\n', 1), ('inner.request(1);\n\n', 1), ('-7481782523886138128L;\n', 1), ('subject.onNext("two");\n', 1), ('filterWrongParallelismConditional()', 1), ('io.reactivex.SingleSource;\n\n/**\n', 1), ('SingleUsing(Callable<U>', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/delay.s.png"', 1), ('{url1,', 1), ('assertGet(k,', 1), ('Flowable.<String>empty().single("");\n', 1), ('WithLatestFromTckTest', 1), ('whenUnsubscribingSecondUnderlyingUnsubscribed()', 1), ('checkState(set);\n', 1), ('.put(SortedSet.class,', 1), ('continuously\n', 1), ('SingletonImmutableSet<E>(set.iterator().next());\n', 1), ('corresponds', 1), ('consumerDispose()', 1), ('teardown', 1), ('createDirectory(root.resolve("left"));\n', 1), ('Suppress}.', 1), ('modifiedStudents)', 1), ('MaybeDelaySubscriptionTest', 1), ('disallow', 1), ('suite.addTest(testsForSingletonList());\n', 1), ('SingleScheduler()).observeOn(Schedulers.single());\n', 1), ('org.mockito.Mockito.*;\nimport', 1), ('com.iluwatar.trampoline;\n\nimport', 1), ('Charsets.US_ASCII,', 1), ('attempts;\n', 1), ('main.actual.onSubscribe(this);\n\n', 1), ('height="390"', 1), ('ENABLED', 1), ('for;', 1), ('mergeDelayError3()', 1), ('evenItems.size());\n', 1), ('reachable");\n', 1), ('newLoader(URL', 1), ('a.onNext(min);\n\n', 1), ('source</a>\n', 1), ('validation,\n', 1), ('verify(List<E>', 1), ('spValue(E', 1), ('ToFlowableIterator<T>', 1), ('PerfObserver(Blackhole', 1), ('Schedulers.io().createWorker();\n\n', 1), ('href="http://code.google.com/docreader/#p=google-web-toolkit-doc-1-5&t=DevGuideJavaCompatibility">\n', 1), ('defaultValue);\n', 1), ('e.getMessage()', 1), ('(!undoStack.isEmpty())', 1), ('collectIntoObservable()', 1), ('frontend', 1), ('Second', 1), ('CompletableSubscribeOn(CompletableSource', 1), ('}};\n', 1), ('Observable.just(1).safeSubscribe(new', 1), ('FlowableTakeLastOneTest', 1), ('checkNotNull(other);\n', 1), ('Schouwen\n', 1), ('wip);\n', 1), ('add(CompletableDisposable', 1), ('generateCharSequence()', 1), ('channel.flush(key);\n', 1), ('results)', 1), ('8:45', 1), ('RunnableAdapter<Object>(task,', 1), ('promises,', 1), ('TrampolineWorker();\n', 1), ('poison"));\n', 1), ('onCallback}', 1), ('t.onSuccess(10);\n', 1), ('SortedJoinSubscription<T>(s,', 1), ('shouldNotEmitUntilAfterSubscription()', 1), ('threadPool;\n\n', 1), ('merge3()', 1), ('queried', 1), ('zip4()', 1), ('ForwardingExecutorService', 1), ('java.util.concurrent.CompletableFuture#thenApplyAsync}.', 1), ('Optional.of(file.length());\n', 1), ('value:', 1), ('Thread.currentThread());\n\n', 1), ('handlers.get(event.getClass());\n', 1), ('MaybeToSingle<T>', 1), ('InnerObserver<T>(1,', 1), ('varius', 1), ('getNameWithoutExtension(String', 1), ('"length");\n', 1), ('ObservableFlattenIterable<T,', 1), ('Flowable.just(1).blockingSubscribe(ts);\n\n', 1), ('Single.just(8),\n', 1), ('annotation?\n', 1), ('stream.writeObject(key);\n', 1), ('o3', 1), ('etc...)\n', 1), ('TestingDeferredScalarSubscriber(ts);\n\n', 1), ('writerLock;\n', 1), ('matcher.toMatchResult();\n', 1), ('#mergeArrayDelayError(CompletableSource...)\n', 1), ('4))));\n', 1), ('this.resourceDisposer', 1), ('SubscribeOnMaybeObserver<T>\n', 1), ('FileLoggerModule();\n', 1), ('prove', 1), ('ObjectHelper.compare(count,', 1), ('"dd/MM/yyyy"\n', 1), ('fo.onSubscribe(new', 1), ('super.read(b,', 1), ('entries.', 1), ('sourceList;\n\n', 1), ('GENERATORS.get(rawType);\n', 1), ('q.add(NotificationLite.subscription(s));\n', 1), ('indexes;\n\n', 1), ('<code>AsyncCallback</code>', 1), ('shadowLoader', 1), ('Task', 1), ('Iterators.pollNext(descendingEntryIterator());\n', 1), ('-1517510584253657229L;\n\n', 1), ('byte[INPUTS_COUNT][];\n', 1), ('verify(sub).cancel();\n\n', 1), ('Functions.toFunction(function7);\n', 1), ('albumTitle)', 1), ('Generics', 1), ('something,', 1), ('Spell', 1), ('(InnerObserver<T,', 1), ('onComplete}.', 1), ('getForEachEntryDuplicateInitializingMethods()', 1), ('MaybeJustTest', 1), ('String.format("CakeInfo', 1), ('RxJavaPlugins.setInitComputationSchedulerHandler(initReplaceWithImmediate);\n', 1), ('-4649703670690200604L;\n\n', 1), ('Systems.pdf<br>\n', 1), ('OptionalDouble.empty();\n', 1), ('ObservableUsing<T,', 1), ('onRequest.accept(n);\n', 1), ('unchanged.', 1), ('com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder#withFeatures(Feature...)}),\n', 1), ('lazySet(null);\n', 1), ('testCase', 1), ('Collections.unmodifiableList(Arrays.asList("Foo",', 1), ('java.util.TooManyListenersException;\nimport', 1), ('AmbInnerObserver<T>', 1), ('MaybeEqualSingle(MaybeSource<?', 1), ('CompletableSource...', 1), ('feature);\n', 1), ('schedule(run,', 1), ('.suppressing(suppressForCopyOnWriteArrayList())\n', 1), ('firstFgnoredCancelAndOnNext()', 1), ('missingFeatures', 1), ('docs)', 1), ('InMemoryPrintWriter()', 1), ('illustrations', 1), ('ObservableTakeWhile<T>', 1), ('testGetIfPresent()', 1), ('Collections.singletonList(Single.just(1)));\n\n', 1), ('}).toFlowable().subscribe(new', 1), ('ObservableCreateTest', 1), ('insert(Student', 1), ('(reactor)', 1), ('ToFlowableIterable<T>', 1), ('missedRequested', 1), ('beginning.\n', 1), ('AllSubscriber();\n\n', 1), ('Nazgul(NazgulName.HOARMURATH));\n', 1), ('RxJavaPlugins#setScheduleHandler(Function)}', 1), ('(iterable', 1), ('q.peek().intValue());\n', 1), ('TemporaryFolder', 1), ('apply(MaybeObserver&lt;?', 1), ('ms.test();\n', 1), ('number.', 1), ('testGet_class()', 1), ('createLotteryTicket()', 1), ('helper\n', 1), ('(!m.signature.contains("Single")', 1), ('BUFFER,\n', 1), ('.concatWith(Observable.just(2))\n', 1), ('ErrorMode.END', 1), ('asByteSource(file1).contentEquals(asByteSource(file2));\n', 1), ('object’s', 1), ('HashBiMap.create();\n', 1), ('omitted', 1), ('f;\n\n', 1), ('transmitted\n', 1), ('{}.', 1), ('waits.\n', 1), ('Thanks', 1), ('events...");\n', 1), ('exclusively,', 1), ('allToppings', 1), ('.observeOn(scheduler)\n', 1), ('ReaderAndWriterTest', 1), ('Sets.newTreeSet();\n', 1), ('DwarvenMineWorker.Action.GO_HOME,', 1), ('1).intValue());\n', 1), ('BlockingObservableIterable(ObservableSource<?', 1), ('compl[0]);\n\n', 1), ('generateImmutableMap(K', 1), ('org.apache.isis.core.specsupport.scenarios.ScenarioExecutionScope;\nimport', 1), ('ParallelReduceSubscriber(Subscriber<?', 1), ('href="https://goo.gl/vTpJi4">Alternate', 1), ('1).iterator();\n', 1), ('MessageData', 1), ('appendingPathByteSinkFactory()', 1), ('WithGenericConstant<T>', 1), ('OnErrorFailedSubscriber', 1), ('benchmarks', 1), ('manifestClasspath("")))\n', 1), ('System.out.println(to.errors());\n\n', 1), ('Publisher-like', 1), ('compareAndSet(FUTURE_INDEX,', 1), ('(AtomicInteger', 1), ('License.",\n', 1), ('OutOfMemoryError(\n', 1), ('BufferedReader(reader);\n', 1), ('innerIsDisposed()', 1), ('Proxy.newProxyInstance(\n', 1), ('DatagramPacket(data,', 1), ('ObservableFromUnsafeSource(ObservableSource<T>', 1), ('b.substring(javadocStart,', 1), ('CompositeException(current,', 1), ('actual.onNext(p);\n', 1), ('1).equals(".."))', 1), ('"FlowableConcatWithMaybe",\n', 1), ('(Long)a[1];\n', 1), ('visited,', 1), ('NonPublicConstantIgnored()', 1), ('StringJoiner(delimiter,', 1), ('Functions.justFunction(Completable.complete()));\n', 1), ('Operator>', 1), ('doOnError(final', 1), ('filterFalse()', 1), ('java.io},', 1), ('decodingStream.read(target);\n', 1), ('testFailedFuture(@NullableDecl', 1), ('close(BufferCloseSubscriber<T,', 1), ('usedAs);\n', 1), ('inputOrder;\n\n', 1), ('ObjectHelper.requireNonNull(onErrorMapper.apply(t),', 1), ('inDateFormat\n', 1), ('SkipLastTimedObserver(Observer<?', 1), ('(fs', 1), ('nazguls.put(NazgulName.DWAR,', 1), ('idempotent.\n', 1), ('}).map(Functions.<Integer>identity()).subscribe(ts);\n', 1), ('exception-throwing', 1), ('Collections.unmodifiableList(messages);\n', 1), ('-61,', 1), ('0L}\n', 1), ('(dq.size()', 1), ('records.', 1), ('FlowableRefCount<T>(this));\n', 1), ('com.iluwatar.databus.data.MessageData;\n\nimport', 1), ('(as.isDisposed())', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/timer.s.png"', 1), ('pattern,({@link', 1), ('MapTestSuiteBuilder<K,', 1), ('"absent"})', 1), ('sequential(Flowable.bufferSize());\n', 1), ('"https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset">', 1), ('SynchronizeTest', 1), ('whileCompleteThrows()', 1), ('java.util.function},', 1), ('SingleSubscribeOn<T>', 1), ('Files.createTempDir();\n', 1), ('NioReactor}.\n', 1), ('Exposes', 1), ('Exceptions.throwIfFatal(e);', 1), ('stream(Iterable<T>', 1), ('Arrays.asList(ps1.ignoreElements(),', 1), ('assertThat(ArbitraryInstances.get(com.google.common.base.Optional.class)).isAbsent();\n', 1), ('SingleDelayTest', 1), ('TypeResolver#resolveType}', 1), ('classfile(Class<?>', 1), ('supertype).', 1), ('MapMode#READ_WRITE}', 1), ("'}';\n", 1), ('mapInvalidSourceConditional()', 1), ('old.\n', 1), ('(Disposable)', 1), ('IntervalObserver(s);\n', 1), ('WithPublicConstructorAndConstant();\n\n', 1), ('EmptyTckTest', 1), ('rangeObservableFlatMapJust.subscribe(new', 1), ('spellbooks', 1), ('setFutureCancelRace()', 1), ('"1024"})\n', 1), ('height="191"', 1), ('setValue()}', 1), ('Thread.currentThread().getName();\n\n', 1), ('observers.add(bc);\n', 1), ('.put(ClassToInstanceMap.class,', 1), ('classes,\n', 1), ('purgeEnabled)', 1), ('andThen(Publisher<T>', 1), ('FileWriteMode#APPEND', 1), ('context.get(IUnitOfWork.MODIFY);\n', 1), ('Dummies.DummyThreadFactory.class);\n', 1), ('ambIterableWithSecondFires()', 1), ('Two', 1), ('javax.swing.JFrame;\nimport', 1), ('(QueueDrainHelper.postCompleteRequest(n,', 1), ('enum.\n', 1), ('*/TrampolineScheduler()', 1), ('org.mockito.*;\nimport', 1), ('LOGGER.error("sleep', 1), ('(each', 1), ('.concatMapCompletable(new', 1), ('set*()', 1), ('generateFresh(Class<T>', 1), ('ParallelPeekSubscriber<T>(subscribers[i],', 1), ('o.flatMapIterable(new', 1), ('flatMapSingle(final', 1), ('NullPointerException(message);\n', 1), ('CompletableDetachTest', 1), ('serial.setSubscription(new', 1), ('LoggerFactory.getLogger(NioReactor.class);\n\n', 1), ('FileCharSinkFactory', 1), ('SerializedEmitter<T>(this);\n', 1), ('ConcatMapIterableTckTest', 1), ('testCollection()', 1), ('added,', 1), ('FUTURE_INDEX', 1), ('method.getReturnType()', 1), ('reduceMaybeCheckDisposed()', 1), ('io.reactivex.subscribers.TestSubscriber;\nimport', 1), ('Splitter.class,\n', 1), ('guests', 1), ('com.google.common.collect.CollectPreconditions.checkEntryNotNull;\nimport', 1), ('AtomicReference<Action>\n', 1), ('MongoTicketRepository()', 1), ('super.write(b);\n', 1), ('testNeverObservable()', 1), ('R>((ConditionalSubscriber<?', 1), ('safeObserver.onSubscribe(new', 1), ('this.dao.find(entity.getId());\n', 1), ('verifyZeroInteractions(ballItem);\n\n', 1), ('?>[]>();\n\n', 1), ('TestEnum.class);\n', 1), ('StringWriter.class);\n', 1), ('non-static\n', 1), ('readers.', 1), ('testData.stream();\n', 1), ('parallel(Blackhole', 1), ('actualLen', 1), ('crashOnError,', 1), ('assertEquals("Handler', 1), ('lemons++;\n', 1), ('Single.just(3)\n', 1), ('ObjectHelper.requireNonNull(second,', 1), ('ObservableRefCount<T>(this));\n', 1), ('io.reactivex.internal.operators.maybe.MaybeError;\nimport', 1), ('File("/c:\\\\Documents', 1), ('(outerDone', 1), ('elements,\n', 1), ('onAfterTerminated;\n', 1), ('assertSame(TimeUnit.SECONDS,', 1), ('testNavigableSet()', 1), ('soProducerIndex(index', 1), ('ImmutableSortedMap_CustomFieldSerializerBase', 1), ('getConnection()', 1), ('disposerThrows', 1), ('observers.delete(os);\n', 1), ('q.getAndSet(null);\n', 1), ('DateFormatCallable(String', 1), ('list.get(index).getCause().getMessage());\n', 1), ('Inventory}\n', 1), ('assertEquals(this.soldierResponse.get(),', 1), ('VM.\n', 1), ('(!isCompleted())', 1), ('enumClass.getName()', 1), ('assertInterruptibleDrained(BlockingQueue<Object>', 1), ('list3.hashCode());\n', 1), ('Observable<HorrorMovie>', 1), ('ObservableRepeat<T>', 1), ('List>...', 1), ('TestException("onNext("', 1), ('(elements.length)', 1), ('choose,', 1), ('lastDot);\n', 1), ('interfaceType.cast(object);\n', 1), ('Exception()));\n\n', 1), ('Arrays.sort(fields,', 1), ('FlatMapJustPerf', 1), ('"none";\n', 1), ('testOnErrorExceptionIsThrownFromSingleDoOnSuccess()', 1), ('addRace()', 1), ('FlowableAutoConnect<T>', 1), ('container.', 1), ('complicated,', 1), ('RuntimeException("FAKE', 1), ('FlowableOnErrorNext(Flowable<T>', 1), ('observer.onNext(10);\n', 1), ('Formally,', 1), ('Partially()', 1), ('tenant.', 1), ('6725975399620862591L;\n', 1), ('FreshInvocationHandler(interfaceType));\n', 1), ('pp*}</li>\n', 1), ('IncrementingIterator();\n', 1), ('completed");\n', 1), ('conditionalCancelAfterRequest1()', 1), ('assertThrows(AssertionError.class,', 1), ('testAggregateAsIntSumObservable()', 1), ('this.exec', 1), ('#execute},', 1), ('failure.");\n', 1), ('enqueue(new', 1), ('parallel\n', 1), ('System.out.println("Entity', 1), ('move(File', 1), ('ScheduledThreadPoolExecutor.class,', 1), ('unaffected.\n', 1), ('observableInner;\n\n', 1), ('"resumeFunctionInCaseOfError', 1), ('(because', 1), ('op;\n\n', 1), ('event.getFormattedMessage().equals(message));\n', 1), ('toInclusive)', 1), ('RxJavaPlugins.setOnMaybeAssembly(new', 1), ('this.output.println(value);\n', 1), ('dtoUser', 1), ('this.singleFunction', 1), ('promptly.\n', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/merge.png"', 1), ('bridge,', 1), ('first.get(10,', 1), ('obsSingle.subscribe(new', 1), ('(DebounceInnerSubscriber<T,', 1), ('assertNotNull(ArbitraryInstances.get(CharSink.class));\n', 1), ('copyOf(Collection<?', 1), ('CompletableFromSingle(SingleSource<T>', 1), ('Observable},\n', 1), ('map.");\n', 1), ('CompletableTimerTest', 1), ('pre-Java-8', 1), ('LoggerFactory.getLogger(TreasureChest.class);\n\n', 1), ('Blackhole.consumeCPU(compute);\n', 1), ('System.getProperties();\n\n', 1), ('org.mockito.Mockito.verifyNoMoreInteractions;\nimport', 1), ("system's", 1), ('s.writeInt(length);\n\n', 1), ('JavadocForAnnotations', 1), ('testIssue1451Case1()', 1), ('SerializedObserver<Observable<T>>(t),\n', 1), ('.suppressing(suppressForConcurrentLinkedQueue())\n', 1), ('.put(ImmutableSetMultimap.class,', 1), ('customers.add(customer1);\n', 1), ('checkNotNull(consumer);\n\n', 1), ('6667));\n', 1), ('streamB.isParallel();', 1), ('checkNotNull(previousNode);\n', 1), ('testResourceScanner()', 1), ('+1"));\n', 1), ('CompletableMergeArray(sources));\n', 1), ('Completable.fromCallable(null);\n', 1), ('java.util.regex.Pattern;\n\n/**', 1), ('caseDesc;\n\n', 1), ('super(message,', 1), ('COMPUTATION;\n\n', 1), ('"endings\\r\\n");\n', 1), ('"Bob",', 1), ('elements[index];\n', 1), ('hashSetCallableEnum()', 1), ('resolve)\n', 1), ('Boolean.FALSE,', 1), ('CompletableDisposeOn(CompletableSource', 1), ('HolyWaterPotion();\n', 1), ('.assertErrorMessage("bla");\n', 1), ('}}\n', 1), ('testHashBasedTable()', 1), ('"whatever[at]wherever.com");\n', 1), ('MinimalCollection.of(deduped).iterator();\n', 1), ('startingData', 1), ('.named("AbstractSequentialList")\n', 1), ('frc', 1), ('Observer-based', 1), ('testWithFollowingFirstObservable()', 1), ('resumes', 1), ('SimpleDateFormat(idf);', 1), ('Maps.immutableEntry(key,', 1), ("GC'd", 1), ('DoubleStream.of(0,', 1), ('ERROR_FILE', 1), ('"localhost";\n', 1), ('LOGGER.info("Utilizing', 1), ('ObservableTimeout<T,', 1), ('testlib),', 1), ('System.out.print(".java:");\n\n', 1), ('Stopwatch.createUnstarted())\n', 1), ('(Long)a[0]', 1), ('reply.getLength()));\n', 1), ('errorFlowable()', 1), ('(pathname.charAt(0)', 1), ('java.nio.file.Files#move}.\n', 1), ('SingleSubject&lt;Integer&gt;', 1), ('ObservableSampleTimed<T>', 1), ('Joiner.class,\n', 1), ('assertNotSame(clone,', 1), ('(rawType.isInterface())', 1), ('Maybe.<Integer>never())\n', 1), ('.suppressing(suppressForAbstractSequentialList())\n', 1), ('TestHelper.checkDisposed(MaybeSubject.create());\n', 1), ('testGetResource_contextClassLoaderNull()', 1), ('workDone.add(message);\n', 1), ('Schedulers.from(exec).createWorker();\n\n', 1), ('setContents.add(e);\n', 1), ('a.size()', 1), ('LOGGER.info("notifying");\n', 1), ('Nyman\n', 1), ('ts.assertValue(1);\n//', 1), ('UnsubscribeSubscriber<T>(s,', 1), ('SubscribeOnObserver\n', 1), ('(result.startsWith("/../"))', 1), ('java.sql.PreparedStatement;\nimport', 1), ('generateLinkedHashMap(key,', 1), ('alter', 1), ('JAVA_VM_VENDOR("java.vm.vendor"),\n\n', 1), ('Nazgul(NazgulName.MURAZOR));\n', 1), ('parent.onAfterNext.accept(t);\n', 1), ('callOrder);\n', 1), ('subscribe(parallel,', 1), ('ByteBuffer.class,\n', 1), ('MaybeAmb(MaybeSource<?', 1), ('FeatureSpecificTestSuiteBuilder<B,', 1), ('LOGGER.info(String.format("%s', 1), ('Chang\n', 1), ('createTempDir()', 1), ('"annotation', 1), ('"Froyo",', 1), ('asyncDisposeIdempotent()', 1), ('timed;\n\n', 1), ('assertNull(doc.get());\n\n', 1), ('clazz2.getMethods())', 1), ('.delaySubscription(Single.error(new', 1), ('getBody()', 1), ('testNotAll()', 1), ('Comparator<String>', 1), ('ObserverTest<GHobbits>', 1), ('BlockingObservableNext<T>', 1), ('20.0\n', 1), ('Schedulers#io()}', 1), ('request[3],', 1), ('mock(CakeBakingService.class);\n', 1), ('DisposableHelper.isDisposed(observer1.get());\n', 1), ('ImmutableAsList<E>()', 1), ('UserConverter', 1), ('CustomerDao},', 1), ('guarantees,', 1), ('Observable.range(Integer.MAX_VALUE', 1), ('nunc,', 1), ('bounds}', 1), ('available.add(instance);\n', 1), ('involving', 1), ('Object())),\n', 1), ('casting.\n', 1), ('states\n', 1), ('EndConsumerHelper', 1), ('Show', 1), ('a/../b},', 1), ('(int)elements).doOnNext(Functions.emptyConsumer())\n', 1), ('operations.', 1), ('q.producerBuffer;\n\n', 1), ('getIfPresent(Class<T>', 1), ('backingMap;\n', 1), ('Map\n', 1), ('CapturingObserver<T>', 1), ('RxJavaPlugins.setOnCompletableAssembly(new', 1), ('SettableFuture<?>', 1), ('NUM_NUMBERS;', 1), ('MaybeCallbackObserver<T>\nextends', 1), ('assertTrue(e5', 1), ('testPluginExceptionWhileOnErrorThrowsNotImplAndUnsubscribeThrows()', 1), ('BlockingFlowableNext<T>', 1), ('(this.channelToPendingWrites)', 1), ('ObserveOnMaybeObserver<T>(observer,', 1), ('False', 1), ('io.reactivex.subjects.PublishSubject;\nimport', 1), ('io.reactivex.internal.util.ExceptionHelper;\n\n/**\n', 1), ('this.source1', 1), ('assertSame(WithPublicConstants.FIRST,', 1), ('Tester', 1), ('complexities', 1), ('SomeClass.logger.addHandler(handler);\n', 1), ('normalSuccessDoesntDisposeMain()', 1), ('BlockingPerf', 1), ('onLift));\n', 1), ('observableAsC()', 1), ('Lock}.', 1), ('HashMap<>(),', 1), ('assertEquals(ex,', 1), ('BlockingFlowableToFutureTest', 1), ('testData.add(Arguments.of(\n', 1), ('finder.found;\n', 1), ('andThenMaybeCompleteEmpty()', 1), ('checkArgument(interfaceType.isInterface(),', 1), ('JavaVersion.CURRENT.usedInGenericType(upperBounds);\n', 1), ('constructor.newInstance(capacity);\n\n', 1), ('Logger.getLogger(ArbitraryInstances.class.getName());\n\n', 1), ('kvMap;\n', 1), ('assertTrue(nonExistingFile.exists());\n', 1), ('selector;\n\n', 1), ('!"badkey".equals(entry.getKey())', 1), ('testCollectorFailureDoesNotResultInTwoErrorEmissionsObservable()', 1), ('not!\n', 1), ('c++;\n', 1), ('takeAll()', 1), ('Functions.identity()));\n', 1), ('GroupedUnicast(K', 1), ('cancelUpfront()', 1), ('cakeLayerInfos', 1), ('delegate().clear();\n', 1), ('source),', 1), ('CompletableMergeSubscriber(CompletableObserver', 1), ('s.onErrorResumeNext(Single.just(1));\n', 1), ('io.reactivex.Maybe;\n\npublic', 1), ('down".', 1), ('from));\n', 1), ('com.google.common.truth.Truth.assertWithMessage;\n\nimport', 1), ('Subscriber<Timed<Integer>>', 1), ('FuseToMaybe<Boolean>', 1), ('producedMoreCancel()', 1), ('.assertResult(5,', 1), ('getAddAllUnsupportedSomePresentMethod());\n', 1), ('errorCount++;\n', 1), ('SwitchMapSingleMainObserver(Observer<?', 1), ('"FlowableMergeWithMaybe",\n', 1), ('testToFile()', 1), ('Cameron\\",\\"language\\":', 1), ('getBook(String', 1), ('assertNull(RxJavaPlugins.onSingleError(null));\n//\n//', 1), ('CompletableFromAction(Action', 1), ('(add(inner))', 1), ('bogus', 1), ('tc.errors.size());\n', 1), ('com.iluwatar.halfsynchalfasync;\n\nimport', 1), ('documenting', 1), ('java.lang.management.*;\nimport', 1), ('Delayed,', 1), ('java.nio.charset.Charset;\n\n/**\n', 1), ('sortCancelRace2()', 1), ('UrlByteSourceFactory', 1), ('users.forEach(System.out::println);\n\n', 1), ('SetFeature}.\n', 1), ('promise.get());\n', 1), ('singletonInstanceMethod)', 1), ('logger.log(Level.SEVERE,', 1), ('InterruptedException;\n\n', 1), ('assertTrue(ArbitraryInstances.get(Queue.class).isEmpty());\n', 1), ('bottomShelf.size());\n\n', 1), ('rangeAsync.subscribe(lo);\n\n', 1), ('findPattern("MaybeSource<.*>\\\\s+cs");\n', 1), ('RxJavaPlugins.onNewThreadScheduler(s));\n\n', 1), ('CascadeType.REMOVE,', 1), ('SocketChannel}', 1), ('(PatternSyntaxException', 1), ('MutableClassToInstanceMap(Map<Class<?', 1), ('(exceptions.size()', 1), ('ScanSubscriber<T>(s,', 1), ('SET_COUNT,\n', 1), ('requested;\n', 1), ('testJarFileWithSpaces()', 1), ('Maybe.zip(Arrays.asList(null,', 1), ('rco.add(null);\n', 1), ('ParallelFlowable>', 1), ('HashMultimapGwtSerializationDependencies<K,', 1), ('fundamental', 1), ('@MapFeature.Require(ALLOWS_NULL_VALUES)\n', 1), ('.switchMapSingle(Functions.justFunction(Single.never()));\n', 1), ('m.javadoc.indexOf("#toSingle",', 1), ('goodbye', 1), ('#getValue()},', 1), ('Optional.of(ticket);\n', 1), ('DatagramPacket(buffer);\n', 1), ('MoreExecutors#listeningDecorator(ExecutorService)}.\n', 1), ('get(key);\n', 1), ('Queues.newLinkedBlockingDeque(1).remainingCapacity());\n', 1), ('FlowableElementAt(Flowable<T>', 1), ('checkNotNull(e);\n', 1), ('"observable/").listFiles();\n\n', 1), ('FreshInvocationHandler)', 1), ('String(factory.getExpected(data.getBytes(Charsets.UTF_8)),', 1), ('requestFirst()', 1), ('.containsExactly(fullpath("/with/absolute/dir"));\n', 1), ('Foundation")))\n', 1), ('amount.', 1), ('options.\n', 1), ('OptionalLong}', 1), ('testedPrototype,', 1), ('getSingleton()', 1), ('TestPlatform', 1), ('encourage', 1), ('children);\n\n', 1), ('oneIterable()', 1), ('BY_FIELD_NAME);\n', 1), ('verifyThread(Scheduler', 1), ('onError(IllegalArgumentException)</li>\n', 1), ('(DatagramChannel)', 1), ('MAX_LOOK_AHEAD_STEP);\n', 1), ('ArcherCommand(),', 1), ('andThen(MaybeSource<T>', 1), ('maybeSingle()', 1), ('PatternSyntaxException', 1), ('get().\n', 1), ('prev.next.\n', 1), ('6545242830671168775L;\n\n', 1), ('MaybeTimer', 1), ('RxJavaPlugins.setOnObservableAssembly(observable2observable);\n', 1), ('ConcatMapMaybeObserver(ConcatMapMaybeSubscriber<?,', 1), ('generateRowSortedTable(R', 1), ('BurstSubscription', 1), ('getKey()', 1), ('Maps.<V,', 1), ('ClassPath.Scanner.parseJavaClassPath();\n\n', 1), ('NumberExpression(i),\n', 1), ('(ClassPath.ClassInfo', 1), ('Integer.numberOfLeadingZeros(value', 1), ('memberClass', 1), ('ZipIterableSubscriber(Subscriber<?', 1), ('generateTreeSet(freshElement);\n', 1), ('writing.\n', 1), ('supplierClass.getDeclaredField("heavyInstance");\n', 1), ('playerDetails,', 1), ('sit;\n', 1), ('OnErrorResumeNextTckTest', 1), ('(st', 1), ('2018.\n', 1), ('assertFalse(q.offer(9,', 1), ('java.nio.file.FileVisitResult;\nimport', 1), ('NewThreadTask());\n', 1), ('timer.replace(worker.schedule(this,', 1), ('generateCharBuffer()', 1), ('TestSubscriber<Integer>(3L);\n', 1), ('.concatWith(Single.just((int)elements))\n', 1), ('tm', 1), ('System.out.println(path);\n\n', 1), ('LinkedHashMap::new),\n', 1), ('sequential()}', 1), ('SpellStrategy());\n', 1), ('{}.",', 1), ('.thenAccept(value', 1), ('!m.signature.contains("Completable")\n', 1), ('ZipCoordinator(MaybeObserver<?', 1), ('{}.capture()', 1), ('mask)', 1), ('(and/or', 1), ('active.get())', 1), ('put},', 1), ('this.loaded', 1), ('InnerSubscriber(MergeSubscriber<T,', 1), ('package-private.', 1), ('Scheduler.Worker.schedule}', 1), ('.named(parentBuilder.getName()', 1), ('OptionalState();\n\n', 1), ('createFromDtos(final', 1), ('classesInitialized);\n', 1), ('processor.onNext("three");\n', 1), ('PrototypeTest<P', 1), ('flush(SelectionKey', 1), ('"lotteryDB";\n', 1), ('CompletableMergeSubscriber\n', 1), ('cheat', 1), ('type.getRawType();\n', 1), ('values[i]', 1), ('w.subscribe(ts);\n\n', 1), ('submit/retrieve', 1), ('ObservableMergeWithMaybe<T>', 1), ('onCompleteteNoSubscribeCrash()', 1), ('TypeToken<TreeSet<String>>()', 1), ('getSetUp()', 1), ('MaybeZipArray(MaybeSource<?', 1), ('createPotion(PotionType', 1), ('(int)elements).onErrorResumeNext(Flowable.<Integer>never())\n', 1), ('java.lang.Throwable}\n', 1), ('fileName.substring(0,', 1), ('onSuccess}.', 1), ('source.subscribe(subscriber);\n', 1), ('withFutureDisposed()', 1), ('classInfo', 1), ('serviceName', 1), ('byteArraySourceFactory()', 1), ('open-source', 1), ('event.setDataBus(this);\n', 1), ('higher-level', 1), ('TypeToken<LinkedHashMap<String,', 1), ('dispatcher.registerStore(store);\n', 1), ('99', 1), ('Retention', 1), ('SingleTimerTest', 1), ('concatArrayDelayError(MaybeSource<?', 1), ('BackpressureHelper.multiplyCap(skip', 1), ('testElementAtOrDefaultWithIndexOutOfBoundsObservable()', 1), ('ArbitraryInstances.get(Multiset.class));\n', 1), ('second.subscribe(new', 1), ('assertTrue(rmo.errors.contains(error));\n', 1), ('//NTLNTL\n\n', 1), ('BackpressureDropSubscriber(Subscriber<?', 1), ('(result.equals("/.."))', 1), ('4"));\n', 1), ('with:', 1), ('"spellbooks",', 1), ('Predicate<Exception>...', 1), ('argumentsList.hashCode()\n', 1), ('flushing', 1), ('resourceDisposer)', 1), ('RxJavaPlugins.getOnObservableCreate());\n//', 1), ('(thread', 1), ('lazySet(initial);\n', 1), ('set(@Nullable', 1), ('backingMap.containsValue(value);\n', 1), ('getData()', 1), ('potions.\n', 1), ('onNextWithoutOnSubscribe()', 1), ('StackOverflowError.class)\n', 1), ('assertFalse(f.isDisposed());\n\n', 1), ('"/etc",', 1), ('ae', 1), ('sem', 1), ('Enums.getField(AnEnum.BAR);\n', 1), ('FrontController();\n', 1), ('MergerBiFunction<T>(comparator));\n\n', 1), ('Downloads', 1), ('assertFalse(future.isCancelled());\n', 1), ('createNullError()', 1), ('io.reactivex.Observable;\n\npublic', 1), ('Assert.assertEquals(Arrays.asList(0L,', 1), ('ListIterator<E>', 1), ('MaybeObserver>', 1), ('CompletableFromCallable(Callable<?>', 1), ('io.reactivex.Observable#safeSubscribe(io.reactivex.Observer)}\n', 1), ('Boolean(generateBoolean());\n', 1), ('TestException("One")),', 1), ('.toFlowable(BackpressureStrategy.MISSING)\n', 1), ('createCallbackThrows()', 1), ('winners\n', 1), ('fs;\n\n', 1), ('ImmutableMap)', 1), ('FileLoggerModule\n', 1), ('dl.run();\n', 1), ('CreateEmitter(Observer<?', 1), ('AsyncSubject&lt;Object&gt;', 1), ('invalid.\n', 1), ('href="http://google.github.io/dagger/producers.html">Dagger', 1), ('sa.missedRequested.set(Long.MAX_VALUE);\n\n', 1), ('ElementAtSubscriber(Subscriber<?', 1), ('run.dispose();\n\n', 1), ('anything', 1), ('contained.', 1), ('classes\n', 1), ('o.value)\n', 1), ('non-GWT', 1), ('SpscLinkedArrayQueue<Object[]>(bufferSize);\n', 1), ('autostrip', 1), ('super(file,', 1), ('RxJava");\n', 1), ('BufferOpenSubscriber<Open>(this);\n', 1), ('JScrollPane(jt);\n', 1), ('(album-list.html)\n', 1), ('ImmediateScheduledFuture<V>(delegateFuture);\n', 1), ('java.util.concurrent.FutureTask;\n\nimport', 1), ('"Ram",', 1), ('dtoUsers', 1), ('DEFAULT_COUNTERS_COLLECTION);\n', 1), ('.append("Maybe(Maybe.java:").append(m.javadocLine', 1), ('rso.errors.size());\n', 1), ('generateByteBuffer()', 1), ('testVisitSergeant()', 1), ('errorConditionalBackpressured()', 1), ('<li>event', 1), ('onSubscribe()}.\n', 1), ('Y', 1), ('Terminal', 1), ('unsafeWithObservable()', 1), ('exceptionHandlerIsCalledWhenPromiseIsFulfilledExceptionally()', 1), ('suiteName;\n', 1), ('setAccessible', 1), ('ConcatMapSingleSubscriber<?,', 1), ('TestHelper.checkEnum(FlowableInternalHelper.RequestMax.class);\n', 1), ('deleteSchema(dataSource);\n', 1), ('unt\n', 1), ('DelaySubscriptionTckTest', 1), ('collector.accept(collection,', 1), ('log.info(customer));\n', 1), ('.suppressing(suppressForPriorityQueue())\n', 1), ('CompletableLift', 1), ('FileWriterAction}', 1), ('Modifier.isTransient(getModifiers());\n', 1), ('(Document', 1), ('assertFalse(list2.equals(list));\n', 1), ('releaseIndex', 1), ('HideCompletableObserver(CompletableObserver', 1), ('subscriber}', 1), ('ObjectPool<T>', 1), ('Observable<List<Integer>>>()', 1), ('home', 1), ('rust"));\n', 1), ('FlowableRepeat(Flowable<T>', 1), ('map/wrap', 1), ('CHUNK_SIZES)', 1), ('methods;\n', 1), ('TestObserver<Integer>(observer);\n', 1), ('failure"));\n', 1), ('CompletableSource[8];\n', 1), ('charset).read()}.', 1), ('WrappingScheduledExecutorService}\n', 1), ('java.io.InputStream;\n\n/**\n', 1), ('"known', 1), ('this.reactor', 1), ('Ordering.class,\n', 1), ('TestHelper.checkDisposed(Observable.just(1).doOnEach(new', 1), ('generateLocale();\n', 1), ('Data\n\n', 1), ('SortedSet<V>>},', 1), ('TestHelper.assertBadRequestReported(Flowable.interval(1,', 1), ('visit(parameterizedType.getOwnerType())}', 1), ('Stopwatch.createStarted();\n\n', 1), ('io.reactivex.observables;\n', 1), ('use).\n', 1), ('assertTrue(appender.logContains("Consumer', 1), ('ObservableTimeInterval<T>', 1), ('CharSource\n', 1), ('baseDir', 1), ('ListenableFuture<Object>', 1), ('shouldGiveVideoDetailsById()', 1), ('properties;\n', 1), ('onCompleteAfter()', 1), ('ImmutableSortedSet.copyOf(input).first();\n', 1), ('ObjectHelper.requireNonNull(isEqual,', 1), ('clear(Deque<T>', 1), ('seven-bit', 1), ('Maybe.zipArray(new', 1), ('onSubscribeCall,\n', 1), ('RxJavaPlugins.setInitSingleSchedulerHandler(initReplaceWithImmediate);\n\n', 1), ('FixLicenseHeaders', 1), ('2))', 1), ('((ll', 1), ('spscBiOfferCapacity()', 1), ('cdl.await();\n//\n//', 1), ('assertEquals("This', 1), ('Sleep', 1), ('ArrayList<Completable>();\n\n', 1), ('java.lang.reflect.Member;\nimport', 1), ('expose', 1), ('message";\n\n', 1), ('ConcurrentHashMap<>();\n\n', 1), ('TimeoutException.class,\n', 1), ('process,', 1), ('Flowable>', 1), ('BaseEncoding', 1), ('FlowableTimeIntervalTest', 1), ('(TEMP_DIR_ATTEMPTS', 1), ('Collection}.\n', 1), ('nonBlocking;\n\n//', 1), ('java.nio.file.Files;\n\nimport', 1), ('testEmptiesFirst()', 1), ('testDrainTimesOut()', 1), ('BlockingIgnoringReceiver\nextends', 1), ('DatagramChannel', 1), ('locally', 1), ('FlowableBufferBoundarySupplier<T,', 1), ('ArrayList<T>', 1), ('days', 1), ('SingletonTest<S>', 1), ('String.valueOf(Math.random());\n', 1), ('(spliterator.hasCharacteristics(Spliterator.SUBSIZED))', 1), ('Files.fileTraverser().breadthFirst("/")}', 1), ('Reset.\n', 1), ('lc.subscribe(sources);\n', 1), ('ConcurrentLinkedQueue<T>', 1), ('requests",', 1), ('.put(Ordering.class,', 1), ('rangeSource()', 1), ('SortedSet<Integer>', 1), ('input.length()));\n', 1), ('topping)', 1), ('((d1', 1), ('delaySubscriptionTime()', 1), ('studentDatabase);\n\n', 1), ('tend', 1), ('https://docs.oracle.com/javase/9/migrate/toc.htm#JSMIG-GUID-2C896CA8-927C-4381-A737-B1D81D964B7B\n', 1), ('(Integer)o[1];\n', 1), ('TypeVariableInvocationHandler)', 1), ('ObservableWindowTests', 1), ('unordered.\n', 1), ('tasks.\n', 1), ("King's", 1), ('PublishDisposable[0];\n\n', 1), ('Class.class,\n', 1), ('representations', 1), ('Thread.sleep(1000);\n\n\n', 1), ('ConcurrentHashMultiset<>(map);\n', 1), ('larger', 1), ('CompletableConverter<R>', 1), ('FakeOp(int', 1), ('multisets.add(multiset);\n', 1), ('<i>some\n', 1), ('junit.framework.AssertionFailedError;\nimport', 1), ('CopyOnWriteArraySet}', 1), ('Optional.<Exception>empty()));\n', 1), ('SafeSubscriber<String>(OBSERVER_ONERROR_FAIL()).onError(new', 1), ('SkipUntilMainSubscriber<T>(child);\n', 1), ('comparisons.', 1), ('settingSameDisposableTwiceDoesUnsubscribeIt()', 1), ('path.indexOf("/RxJava");\n', 1), (".append('<')\n", 1), ('s[0]', 1), ('TakeWhileTckTest', 1), ('(eventClassName.equals("MoneyDepositEvent"))', 1), ('(unsafeImpl.compare(ba3,', 1), ('MergeCompletableObserver(s,', 1), ('instead...\n', 1), ('io.reactivex.internal.disposables.DisposableContainer;\nimport', 1), ('diagrams.', 1), ('java.util.function.IntFunction}', 1), ('e4)', 1), ('(p.error.addThrowable(e))', 1), ('this.onLift', 1), ('-754898800686245608L;\n\n', 1), ('href="https://github.com/google/guava/wiki/StringsExplained#charsets">{@code', 1), ('Charsets.UTF_8)\n', 1), ('testMessage', 1), ('KNOWN_ORDER)\n', 1), ('close(OperatorWindowBoundaryCloseSubscriber<T,', 1), ('overrideInitIoSchedulerCrashes()', 1), ('shop.getTopShelf();\n', 1), ('adjacentNodes()', 1), ('put(Integer', 1), ('java.util.function.Supplier', 1), ('NoDefaultConstructor', 1), ('showcase', 1), ('delete(Disposable', 1), ('(handler', 1), ('possiblyIgnoredError2', 1), ('mar.replace(schedule(decoratedRun));\n', 1), ('lists;\n\n', 1), ('SetTestSuiteBuilder<K>', 1), ('p.flowable();\n', 1), ('fullpath("/with/absolute.jar"),\n', 1), ('needed.\n', 1), ('generateSetMultimap(K', 1), ('innerNext(List<T>', 1), ('v1)', 1), ('bytes.reset();', 1), ('ObjectHelper.requireNonNull(resultSelector,', 1), ('Functions.justCallable(Maybe.just(1))));\n', 1), ('OnBackpressureBufferStrategySubscriber<T>(s,', 1), ('ObservableConcatMapEager<T,', 1), ('IntervalRangeObserver(s,', 1), ('atomicBoolean', 1), ('child.onNext(value);\n', 1), ('.assertSubscribed().assertComplete()\n', 1), ('removeObserver(O', 1), ('maybes.length;\n\n', 1), ('innerError(InnerQueuedObserver<R>', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnSuccess.m.png"', 1), ('Iterator<Cake>', 1), ('assertNoOffer(SimpleQueue<?>', 1), ('creation)\n', 1), ('this.accessibleObject', 1), ('assertTrue(bs1.isCancelled()', 1), ('java.util.concurrent.TimeUnit.NANOSECONDS;\nimport', 1), ('add(AsyncSubscription<T>', 1), ('closeResource(Resource', 1), ('assertSame(another,', 1), ('TestHelper.checkDisposed(Observable.just(1).all(Functions.alwaysTrue()).toObservable());\n\n', 1), ('CompletableMerge', 1), ('Iterator#remove()}.', 1), ('toString();\n\n', 1), ('throwIfUnchecked(e.getCause());\n', 1), ('children.size();\n', 1), ('.cast(Number.class);\n', 1), ('super(100);\n', 1), ('LOGGER.error("Executor', 1), ('RxJavaPlugins.setOnConnectableFlowableAssembly(connectableFlowable2ConnectableFlowable);\n', 1), ('AtomicReferenceArray<T>\n', 1), ('Modifier.isSynchronized(getModifiers());\n', 1), ('otherEntriesInDataStructure;\n\n', 1), ('3",', 1), ('longs.get(1));\n', 1), ('clazz);\n', 1), ('Comparable.class,\n', 1), ('org.junit.jupiter.api.extension.ExtendWith;\nimport', 1), ('ObjectHelper', 1), ('encoding.encoding.encode(encodingInputs[i]);\n', 1), ('ObservableSwitchMapMaybe<T,', 1), ('testSchedule_repeating()', 1), ('getInnerQueue(InnerSubscriber<T,', 1), ('Observable.empty().takeLast(1).subscribe(s);\n', 1), ('DelayObserver(serial,', 1), ('MaybeConcatArray<T>(sources));\n', 1), ('MpscLinkedQueue<Integer>();\n\n', 1), ('cucumber.api.java.en.When;\nimport', 1), ('manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION,', 1), ('q.get()', 1), ('testPutAllHandlesDuplicates()', 1), ('V>>(bufferSize);\n', 1), ('String)\n', 1), ('testAggregateAsIntSumSourceThrowsObservable()', 1), ('com.google.common.collect.testing.testers.CollectionSpliteratorTester.getSpliteratorNotImmutableCollectionAllowsRemoveMethod;\nimport', 1), ('ElementType.METHOD})\n@Documented\n@GwtCompatible\npublic', 1), ('"+32421255",', 1), ('toArray(lowerBounds);\n', 1), ('RxJavaPlugins.setIoSchedulerHandler(scheduler2scheduler);\n', 1), ('desired\n', 1), ('.put(ShortBuffer.class,', 1), ('AllowConcurrentEvents},', 1), ('Enums();\n', 1), ('"justo', 1), ('Callable<int[]>', 1), ('List<View>', 1), ('super.getName()', 1), ('body;\n\n', 1), ('assertNotNull(split);\n', 1), ('ObservableEmitter<T>,', 1), ('ObservableRetryBiPredicate(\n', 1), ('480);\n', 1), ('IntervalRangeSubscriber(Subscriber<?', 1), ('mainSuccessPublisher()', 1), ('defining', 1), ('RxJavaPlugins.setOnSingleSubscribeError(errorHandler);\n//\n//', 1), ('ParallelFilterConditionalSubscriber<T>', 1), ('failure");\n\n', 1), ('urlCharSourceFactory()', 1), ('Maps.difference(ImmutableMap.of(),', 1), ('initialValue()', 1), ('result.get();\n', 1), ('away!",', 1), ('Fruit.', 1), ('.put(Locale.class,', 1), ('PURGE_PERIOD_SECONDS', 1), ('paths:', 1), ('enables\n', 1), ('put(Message', 1), ('CompletableFromActionTest', 1), ('2^63', 1), ('Collectors.toMap(keyFunction,', 1), ('3528003840217436037L;\n\n', 1), ('CustomSingleObserver&lt;T&gt;(upstream);\n', 1), ('lifted', 1), ('child.onSubscribe(new', 1), ('type.resolveType(typeVars[i]);\n', 1), ('beforeScenarioIntegrationScope()', 1), ('TearDownStack(boolean', 1), ('generator.nextInt();\n', 1), ('testJavaOptional()', 1), ('assertEquals("BAR",', 1), ('ObservableThrottleFirstTimed(ObservableSource<T>', 1), ('"Change', 1), ('Observable.fromFuture(future,', 1), ('serving', 1), ('(!once)', 1), ('Completable.fromCallable(func);\n\n', 1), ('defaultValue);\n\n', 1), ('threadToInterrupt;\n\n', 1), ('.20\n', 1), ('currentVal;\n', 1), ('!Modifier.isPublic(type.getModifiers()))', 1), ('customer2', 1), ('CustomMaybeObserver&lt;T&gt;', 1), ('clients.\n', 1), ('too?\n', 1), ('assertFalse(fs.isDone());\n\n', 1), ('utilizes\n', 1), ('Thread.sleep(350);', 1), ('InnerSubscriber[n', 1), ('capabilities.\n', 1), ('temp;\n', 1), ('CatapultView(),', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/cache.png"', 1), ("'p'))));\n", 1), ('emptyInstanceGenerated.put(type.getType(),', 1), ('com.google.common.collect.testing.Helpers.copyToSet;\nimport', 1), ('entry.getKey();\n\n', 1), ('doubleRequest()', 1), ('BufferOpenObserver<Open>(this);\n', 1), ('failWithCustomHandler()', 1), ('this.getStudents())', 1), ('AnimalSniffer', 1), ("Maybe's", 1), ('1.4.\n', 1), ('true)\n@SuppressWarnings("serial")\nabstract', 1), ('TestHelper.checkDisposed(Observable.just(1).timeInterval());\n', 1), ('Optional.of(value);\n', 1), ('outEdgeToNode,', 1), ('V>},', 1), ('get/set\n', 1), ('ArrayList<>(multimap().keySet());\n', 1), ('com.iluwatar.event.queue;\n\nimport', 1), ('seedDoubleOnSubscribe()', 1), ('QueueDisposable<Object>', 1), ('MaybeDelay<T>(this,', 1), ('java.util.NoSuchElementException', 1), ('OBSERVER_SUCCESS(final', 1), ('retentionPolicy);\n', 1), ('MaybeAmbTest', 1), ('queue.offer(g);\n', 1), ('ObservableMergeTests', 1), ('RuntimeException.class);\n\n', 1), ('javax.swing.JRootPane;\nimport', 1), ('delegate.equals(object);\n', 1), ('reflection', 1), ('Maybe.just(1).takeUntil(Flowable.never())\n', 1), ('AtomicReferenceArray<E>(length);\n', 1), ('of(collector,', 1), ('sourceEmpty)', 1), ('constant.name());\n', 1), ('"Empty', 1), ('RxJavaPlugins.onAssembly((Single<T>)', 1), ('seedBadSource()', 1), ('TestHelper.checkDisposed(PublishSubject.create().elementAt(0).toObservable());\n', 1), ('cancelled()', 1), ('JavaVersion.CURRENT.usedInGenericType(componentType);\n', 1), ('AtomicReference<InnerCompletableCache[]>', 1), ('ObservableDoOnEach(ObservableSource<T>', 1), ('spellbook)', 1), ('Bound.NO_BOUND,', 1), ('fusedFlatMapNullHidden()', 1), ('ClqSimpleQueue()', 1), ('(paramType.isAssignableFrom(Function.class))', 1), ('Maybe.just(1).takeUntil(Flowable.just(1).take(1))\n', 1), ('NUM_NUMBERS)', 1), ('oos', 1), ('"Lorem', 1), ('ObservableCollectSingle(ObservableSource<T>', 1), ('(iterA.hasNext()', 1), ('Finish', 1), ('get(Future<O>', 1), ('LocalClass<String>()', 1), ('Single.just(15)\n', 1), ('moRef.get().onComplete();\n\n', 1), ('DoFinallyConditionalSubscriber<T>((ConditionalSubscriber<?', 1), ('Visitor', 1), ('System.out.println(\n', 1), ('nowhere', 1), ('fail("we', 1), ('assertTrue(ArbitraryInstances.get(MapDifference.class).areEqual());\n', 1), ('ObjectHelper.compare(execTime,', 1), ('suite.addTest(testsForHashMapNullValuesForbidden());\n', 1), ('SingleTimer(long', 1), ('Long.class,\n', 1), ('InnerConsumer();\n\n', 1), ('lines.poll();\n', 1), ('ScheduledDirectPeriodicTask(Runnable', 1), ('key.attachment()).read(key);\n\n', 1), ("'d',", 1), ('schedules', 1), ('first.replace(sr);\n\n', 1), ('this.fileName', 1), ('RxJavaPlugins#setInitNewThreadSchedulerHandler(io.reactivex.functions.Function)}', 1), ('register(Student', 1), ('toFunction8()', 1), ('IsEmptyTckTest', 1), ('SUPPORTS_PUT,\n', 1), ('PublishDisposable(Observer<?', 1), ('restored', 1), ('asObserver()', 1), ('tasks.add(()', 1), ('ConsumeAction(this,', 1), ('DbCustomerDao}', 1), ('Logger.getLogger(DbCustomerDao.class);\n\n', 1), ('currentReaderCount++;\n', 1), ('RxJavaPlugins#createComputationScheduler(ThreadFactory)}', 1), ('fromRunnableErrorsDisposed()', 1), ('ObservableScanSeed<T,', 1), ('this.containsAll(that);\n', 1), ('ArrayDeque<U>();\n', 1), ('dealing', 1), ('Charsets.UTF_8)).getBytes(Charsets.UTF_8);\n', 1), ('IntegrationTesting', 1), ('flatMapIntPassthruAsync(Input', 1), ('(s.contains("sun.reflect."))', 1), ('(int)elements).rebatchRequests(2)\n', 1), ('TestResourceMaybeObserver<T>', 1), ('List<Future<Boolean>>', 1), ('LOGGER.info("Starting', 1), ('StringConverter<?>', 1), ('TakeWhileSubscriber<T>', 1), ('CollectionSize#ANY}.)', 1), ('(ws.isEmpty()', 1), ('Predicate<Object>()', 1), ('java.util.Arrays.asList;\nimport', 1), ('delaySubscriptionObservable()', 1), ('groupBy;\n\n', 1), ('delegate.containsAll(targets);\n', 1), ('io.reactivex.observers.DisposableMaybeObserver;\nimport', 1), ('Splitr(Spliterator.OfInt', 1), ('AtomicInteger,\n', 1), ('++a;\n', 1), ('SecurityException("Disallowed:', 1), ('delegate.samples();\n', 1), ('ids', 1), ('messageFromElves()', 1), ('C>(subscribers[i],', 1), ('ToFlowableIterable(Iterable<?', 1), ('SingleFromCallable(Callable<?', 1), ('cucumber.api.java.en.Given;\nimport', 1), ('CompletableSource#subscribe(CompletableObserver)}', 1), ('ImmutableBiMap.of(k1,', 1), ('concat(LongStream...', 1), ('ObservableMergeWithMaybeTest', 1), ('s.defaultWriteObject();\n\n', 1), ('BlockingObservableMostRecent(ObservableSource<T>', 1), ('MaybeUnsafeCreate<T>(source));\n', 1), ('withObservableDispose()', 1), ('Callable<Void>()', 1), ('ObjectHelper.requireNonNull(onSuccessMapper.apply(value),', 1), ('Collections.unmodifiableList(this.topShelf);\n', 1), ('Remove', 1), ('OBSERVER_ONNEXT_FAIL(onError).onNext("one");\n', 1), ('slashes', 1), ('java.lang.reflect.Proxy;\n\n/**\n', 1), ('Maybe.just(1).takeUntil(Maybe.just("one"))\n', 1), ('QueueDrain<T,', 1), ('SortedMap<Object,', 1), ('(temp', 1), ('Student(1,', 1), ('(int)elements).retry(1)\n', 1), ('ArrayDeque<U>', 1), ('replaceRace()', 1), ('fromCallableValue()', 1), ('super.fulfill(value);\n', 1), ('maybeCompletable()', 1), ('Redo', 1), ('view,', 1), ('base)', 1), ('Object.class);\n', 1), ('assertValueAndTypeEquals(Object', 1), ('retained:', 1), ('readLock()', 1), ('(super.tryDispose())', 1), ('assertTrue(Single.just(1).subscribe().isDisposed());\n', 1), ('WithGenericConstant<>();\n\n', 1), ('expression.', 1), ('lvProducerNode()', 1), ('TestStringSortedMapGenerator', 1), ('onObservableLift', 1), ('com.iluwatar.flux.store.Store;\n\n/**\n', 1), ('EmptyByteSourceFactory', 1), ('FlowableWithLatestFromMany<T,', 1), ('height="485"', 1), ('InsecureRecursiveDeleteException(@NullableDecl', 1), ('java.util.TimerTask;\n\nimport', 1), ('SubscribeOnObserver', 1), ('failComputationFlowableBlockingNext()', 1), ('nextSubscriber', 1), ('unchanged,', 1), ('assertNull(statusMember.getStarted());\n', 1), ('create(Integer[]', 1), ('pp2.ignoreElements()))\n', 1), ('put(Fruit', 1), ('OBSERVER_ONERROR_NOTIMPLEMENTED();\n', 1), ('complete.', 1), ('available.size(),', 1), ('(instances.isEmpty())', 1), ('InternalWrongNaming', 1), ('single2observer', 1), ('Equivalence.class,\n', 1), ('depend</b>', 1), ('getNextId()', 1), ('Per', 1), ('subscribe(ObservableSource<?>[]', 1), ('"io.reactivex.");\n', 1), ('assertTrue(cause.getExceptions().get(1)', 1), ('ListIterator#set(Object)};', 1), ('RegularImmutableMap}.\n', 1), ('.subscribe(Functions.EMPTY_ACTION);\n', 1), ('javax.swing.table.DefaultTableModel;\n\n/**\n', 1), ('fulfillInAsync(final', 1), ('AtomicReference<PublishSubscription<T>[]>', 1), ('ArrayListMultimap()', 1), ('studentToBeDeleted)', 1), ('creator', 1), ('LinkedList<TearDown>', 1), ('practically', 1), ('properties.load(fin);\n', 1), ('FutureObserver<Integer>', 1), ('BusinessOperation', 1), ('page.getByXPath("//tr[@class=\'album\']//a");\n', 1), ('io.reactivex.observables.GroupedObservable}.\n', 1), ('FuseToFlowable<Long>', 1), ('a.length);\n\n', 1), ('events.size())', 1), ('SampleElements<K>', 1), ('doOnSuccess(Consumer<?', 1), ('Logger.getLogger(FileFactory.class.getName());\n\n', 1), ('multimap.entries())', 1), ('stream.writeObject(entry.getValue());\n', 1), ('service.submitTicket(LotteryTestUtils.createLotteryTicket("cvt@bbb.com",\n', 1), ('Observable.just(1).flatMapSingle(Functions.justFunction(ps.singleOrError()))\n', 1), ('FlowableUnsubscribeOn(Flowable<T>', 1), ('batchSize);\n', 1), ('3.6\n', 1), ('Ni', 1), ('matches()', 1), ('assembly\n', 1), ('dragonSlayer.goToBattle();\n\n', 1), ('checkState(future.isDone(),', 1), ('"should', 1), ('(t.isAlive())', 1), ('(execTime', 1), ('testUnhandledErrorIsDeliveredToThreadHandler(Scheduler', 1), ('TakeSubscriber<T>', 1), ('constructor.', 1), ('checkEnum()', 1), ('innerR.set(n);\n', 1), ('just(final', 1), ('getSampleElements(int', 1), ('encoding.encoding.encodingStream(target);\n', 1), ('successfully");\n', 1), ('transformAsync(\n', 1), ('Observable.fromFuture(future);\n\n', 1), ('(channel)', 1), ('ReduceSubscriber(Subscriber<?', 1), ('paramString(Ticker.class,', 1), ('SpscLinkedArrayQueue<R>(bufferSize);\n', 1), ('zip3()', 1), ('y},', 1), ('getAvailableLayers()', 1), ('FlowableFlattenIterable(Flowable<T>', 1), ('DEFAULTS.getInstance(type);\n', 1), ('io.reactivex.internal.subscribers.ForEachWhileSubscriber;\nimport', 1), ('OperatorWindowBoundaryCloseObserver(WindowBoundaryMainObserver<T,', 1), ('InputStream}', 1), ('this.elementOrder.equals(that.elementOrder);\n', 1), ('BlockingObserver<Object>', 1), ('inner.queue().offer(value);\n', 1), ('componentType;\n\n', 1), ('QueueSubscription<CompletableSource>', 1), ('awaitForComplete(CountDownLatch', 1), ('iterable,', 1), ('unit()', 1), ('getSampleElements(getCollectionSize().getNumElements());\n', 1), ('mockObserver()', 1), ('com.google.common.io.TestOption.WRITE_THROWS;\n\nimport', 1), ('peek();\n\n', 1), ('Single.just(1).doAfterSuccess(null);\n', 1), ('...]}\n', 1), ('23,', 1), ('MoneyDepositEvent)', 1), ('consumer}', 1), ('lastServedId;\n', 1), ('Math.min(delta,', 1), ('suites', 1), ('rejectFlowableFusion()', 1), ('AtomicBoolean.class,\n', 1), ('check("Maybe");\n', 1), ('Observable.never().blockingLatest().iterator().remove();\n', 1), ('undoes', 1), ('ResourceCompletableObserverTest', 1), ('ObservableConcatMapMaybeTest', 1), ('""}),\n', 1), ('java.util.concurrent.ScheduledThreadPoolExecutor;\nimport', 1), ('urlString);\n', 1), ('createFile(right.resolve("another.txt"));\n\n', 1), ('ObservableWindowBoundarySelector<T,', 1), ('completable)', 1), ('super.create(entries);\n', 1), ('RxJavaPlugins.createSingleScheduler(factory);\n\n', 1), ('Part(partProperties);\n\n', 1), ('(servant.checkIfYouWillBeHanged(guests))', 1), ('FileByteSource(file);\n', 1), ('DragonSlayer})', 1), ('((ScheduledExecutorService)executor).schedule((Callable<Object>)sr,', 1), ('workers,\n', 1), ('equal",', 1), ('long[len];\n', 1), ('lazy,', 1), ('empty")\n', 1), ('ON_NEXT)', 1), ('Single.just(1);\n\n', 1), ('java.nio.charset.StandardCharsets#UTF_16}', 1), ('service.shutdownNow();\n\n', 1), ('maxElements,\n', 1), ('doOnError()', 1), ('throwable;\n', 1), ('EndConsumerHelper.composeMessage(rmo.getClass().getName()));\n', 1), ('ResumeMainSingleObserver(SingleObserver<?', 1), ('java.util.regex},', 1), ('capacity.<br>\n', 1), ('viverra,', 1), ('afterTerminate', 1), ('CrashDummy(boolean', 1), ('ReduceObserver<T>', 1), ('map.put(lotteryTicket.getId(),', 1), ('files)', 1), ('Observer[]', 1), ('.put("lorem', 1), ('testNegativeMaxElements(BlockingQueue<Object>', 1), ('adjusted', 1), ('custom-parameter', 1), ('File.createTempFile("promise_pattern",', 1), ('Single<Boolean>\nimplements', 1), ('OBSERVER_ONERROR_FAIL();\n', 1), ('BlockingFlowableMostRecent(Flowable<T>', 1), ('RxJavaPlugins.onSingleScheduler(SINGLE);\n', 1), ('overrideNewThreadScheduler()', 1), ('s.onSubscribe(b);\n', 1), ('RuntimeException("bla"))\n', 1), ('UnicastSubject.create(bufferSize);\n\n', 1), ('assertTrue(ArbitraryInstances.get(PriorityQueue.class).isEmpty());\n', 1), ('newDir("dir-2");\n\n', 1), ('getComponentType(bound);\n', 1), ('createSchema(dataSource);\n', 1), ('BiFunction<List,', 1), ('variable.");\n', 1), ('second.request();\n', 1), ('strictly', 1), ('concatMap(mapper,', 1), ('#getValue()}.\n', 1), ('IO.\n', 1), ('assertTrue(ArbitraryInstances.get(NavigableMap.class).isEmpty());\n', 1), ('immediateError()', 1), ('assertNull(ArbitraryInstances.get(SomeInterface.class));\n', 1), ('SubscribeTask<T>', 1), ('BaseTypeParser.parse(MaybeNo2Dot0Since.findSource("Single"),', 1), ('LAZY_SMALL', 1), ('URL(urlString);\n', 1), ('apply(HashMap<String,', 1), ('findPattern("MaybeSource<.*>\\\\s+ss");\n', 1), ('startup', 1), ('Queue\n', 1), ('pv)', 1), ('o.subscribe(bs);\n\n', 1), ('Threads', 1), ('implementations!', 1), ('stringIsNullOrEmpty(@NullableDecl', 1), ('testPluginErrorHandlerReceivesExceptionWhenUnsubscribeAfterCompletionThrows()', 1), ('DematerializeSubscriber(Subscriber<?', 1), ('sb', 1), ('onSubscribeCrashes()', 1), ('throttlePeriod)', 1), ('(InnerObserver<?,', 1), ('element.', 1), ('loadClass(String', 1), ('thereafter', 1), ('error,\n', 1), ('checkObservableBackpressure()', 1), ('Publisher<Object>>', 1), ('winningNumbers', 1), ('/RxJava\n', 1), ('nextFunction));\n', 1), ('affected\n', 1), ('TearDownAccepter', 1), ('asMultimap()', 1), ('Boolean.toString(rainbowFish.getAngry()));\n', 1), ('request(-1);\n', 1), ('Objects.equal(getOwnerType(),', 1), ('ObservableReduceSeedSingle<T,', 1), ('app.stop();\n', 1), ('iMax', 1), ('SwitchMapMaybeObserver(SwitchMapMaybeMainObserver<?,', 1), ('java.net.Socket;\nimport', 1), ('ImmutableSortedMap_CustomFieldSerializerBase()', 1), ('splitrsBuilder.add(splitr);\n', 1), ('MapFeature', 1), ('CakeLayerInfo("layer1",', 1), ('Spliterator<B>', 1), ('.flatMapCompletable(Functions.justFunction(Completable.complete()),', 1), ('Stopwatch.createStarted();\n', 1), ('out).\n', 1), ('(thin)', 1), ('download(String', 1), ('inDateFormat,', 1), ('PathCharSinkFactory', 1), ('newReferenceArray(int', 1), ('d1));\n\n', 1), ('commit()', 1), ('readable,', 1), ('problematic,', 1), ('generateShortBuffer()', 1), ('cancelSources()', 1), ('MapTckTest', 1), ('leaf', 1), ('Subscriptions', 1), ('dao\n', 1), ('pickInstance(Collection<T>', 1), ('v1(),', 1), ('serve.\n', 1), ('writer.writeObject(comparator);\n', 1), ('TestHelper.checkUtilityClass(BlockingFlowableLatest.class);\n', 1), ('instanceMethodDef)', 1), ('TypeCapture<Entry<String,', 1), ('entries},', 1), ('unsafeCreate(MaybeSource<T>', 1), ('latchedObserver.latch.await();\n', 1), ('VisitorTest(final', 1), ('"io.reactivex:single";\n\n', 1), ('ba4[ba1.length', 1), ('ParallelSortedJoin<T>(railSorted,', 1), ('dontfailIOObservableBlockingFirst()', 1), ('whitelists,', 1), ('VolatileSizeArrayList<T>', 1), ('.containsExactly(fullpath("base/the^file.jar"));\n', 1), ('IllegalStateException("Interrupted', 1), ('redundant', 1), ('secondary};\n', 1), ('SimpleQueue', 1), ('Throttling', 1), ('clone', 1), ('Proxy.isProxyClass(obj.getClass())\n', 1), ('(Observer<T>)t;\n', 1), ('positives()', 1), ('TRAMPOLINE;\n', 1), ('true)},', 1), ('FlowableTimer', 1), ('accountNo', 1), ('assertFreshInstance(TwoConstantEnum.class,', 1), ('BackpressureHelper()', 1), ('storeInCache(result);\n', 1), ('DoOnEachObserver(\n', 1), ('this.single', 1), ('fewer', 1), ('key));\n', 1), ('Executors.newFixedThreadPool(8);\n', 1), ('Timed(@NonNull', 1), ('immutable.\n', 1), ('checkState(this.valueComparator', 1), ('spin-wait', 1), ('CompletableDoFinally', 1), ('CHUNK_SIZES', 1), ('SingleElementSubscriber<T>', 1), ('ByteArrayInputStream(bytes),', 1), ('mergeWith(SingleSource<?', 1), ('RxJavaPlugins.setOnFlowableSubscribe(flowable2subscriber);\n', 1), ('possiblyIgnoredError4', 1), ('Double.doubleToRawLongBits(y);\n', 1), ('testGet_constantTypeDoesNotMatch()', 1), ('publishSubjectAsPp()', 1), ('DisposablesTest', 1), ('Charsets}</a>.\n', 1), ('Foundation/"));\n', 1), ('com.google.common.collect.Maps.IteratorBasedAbstractMap;\nimport', 1), ('io().start();\n', 1), ('tellus', 1), ('relative/dir");\n', 1), ('ForwardingExecutorService()', 1), ('longBitsToDouble(longs.get(i));\n', 1), ('AutoCloseable}.', 1), ('Collection<Object>>', 1), ('testHashBiMap()', 1), ("TestByteSink's", 1), ('washing', 1), ('aste.getMessage().contains("createCompletable"));\n//\n//', 1), ('testPredicateThrowsExceptionAndValueInCauseMessageObservable()', 1), ('LastTckTest', 1), ('stringCharSourceFactory()', 1), ('signals\n', 1), ('testsForConcurrentSkipListSetWithComparator()', 1), ('com.google.common.collect.testing.ListIteratorTester;\nimport', 1), ('c.request(10);\n\n', 1), ('java.time.Month;\n\nimport', 1), ('SimpleObjectCreate().setName(names.get(i));\n', 1), ('body)', 1), ('sw', 1), ('"\\r\\n",', 1), ('Reflection.newProxy(Runnable.class,', 1), ('CompletableError', 1), ('simplifyPath(String', 1), ('encodings', 1), ('spscArrayQueueBiOffer()', 1), ('first)\n', 1), ('Void>>', 1), ('field.getType()', 1), ('checkSingleBackpressure()', 1), ('Maybe.just(1).delaySubscription(f)\n', 1), ('onDisposeCall;\n\n', 1), ('this.otherSource', 1), ('(supplierClass.isLocalClass())', 1), ('composite.dispose();\n', 1), ('supplier.\n', 1), ('Schedulers.trampoline();\n', 1), ('GHobbitsTest()', 1), ('checkDisposedMaybeToSingle(Function<Maybe<T>,', 1), ('CompletableDelayTest', 1), ('-7012088219455310787L;\n\n', 1), ('(!f2.exists())', 1), ('sort(\n', 1), ('firstFiveNegatives);\n\n\n', 1), ('ConcurrentHashMap<Object,', 1), ('communicate', 1), ('io.reactivex.internal.fuseable.SimplePlainQueue;\n\n/**\n', 1), ('setReplaceNull()', 1), ('then).\n', 1), ('(Enum<HashSetCallable>[])m.invoke(null))', 1), ('numberOfObservers,\n', 1), ('SkipLastObserver(Observer<?', 1), ('executor.get().scheduleAtFixedRate(task,', 1), ('identically', 1), ('to.assertTerminated();\n\n', 1), ('"enim,', 1), ('Dummies.DummyRunnable.class);\n', 1), ('ConcatMapMaybeMainObserver(Observer<?', 1), ('setImplementation(ThreadFactory.class,', 1), ('Lists");\n', 1), ('spValue(val);\n', 1), ('pattern.matcher(fileName).matches();\n', 1), ('MaybeObserver<?>[]', 1), ('ObservableSwitchMapSingle(Observable<T>', 1), ('MaybeTakeUntilPublisherTest', 1), ('(!executor.isTerminated())', 1), ('task.onPreCall();\n', 1), ('Future<Integer>', 1), ('rangeFlatMapJust', 1), ('Maybe.just(1).takeUntil(Maybe.never())\n', 1), ('resultSelector\n', 1), ('ignoreElement()', 1), ('StreamSupport.stream(iterable.spliterator(),', 1), ('7)));\n\n', 1), ('Math.min(capacity', 1), ('java.lang.Long.MAX_VALUE;\nimport', 1), ('workDone.size());\n', 1), ('SingleInternalHelper.toObservable(),', 1), ('StripBoundary<T>', 1), ('emptyConditional()', 1), ('emissionRequestRace2()', 1), ('pipe', 1), ('coordinator.subscribe(sources,', 1), ('(int)elements).timeout(1,', 1), ('(studentsToOperate', 1), ('forcing', 1), ('.put(Comparable.class,', 1), ('bufferHelper("\\n\\n",', 1), ('XFlatMapTest', 1), ('initCounters()', 1), ('TEST_PART_TYPE', 1), ('samples.e3(),', 1), ('super.read(cbuf,', 1), ('PrintWriter(tempFile,', 1), ('SingleObserver}s\n', 1), ('testNewLinkedBlockingQueueCapacity()', 1), ('1000000;\n', 1), ('(e.g.,', 1), ('URL.', 1), ('assertTrue(tc.errors.contains(error));\n', 1), ('Optional.of("z");\n\n', 1), ("caller's", 1), ('Platform.getEnumIfPresent(enumClass,', 1), ('ProtocolViolationException(composeMessage(consumer.getName())));\n', 1), ('THREAD_INDEX', 1), ('Completables?\n', 1), ('generate(componentType));\n', 1), ('Optional<CakeLayer>', 1), ('times(1)).onNext("");\n', 1), ('onCompleteWithoutOnSubscribe()', 1), ('s.shutdown();\n', 1), ('ObjectHelper.equals(unit,', 1), ('io.reactivex.subscribers.TestSubscriber}', 1), ('spin-up");\n', 1), ('mainThread', 1), ('int,', 1), ('IOException()));\n', 1), ('specify",', 1), ('testAggregateAsIntSum()', 1), ('Flowable.fromFuture(ft);\n', 1), ('10:54', 1), ('eagerly.', 1), ('Single.zip(Arrays.asList(pp.single(0),', 1), ('evaluation\n', 1), ('readFile(g);\n\n', 1), ('SubscribeOnObserver(CompletableObserver', 1), ('executors.\n', 1), ('url2},', 1), ('tenMillionEmptySources()', 1), ('assertTrue(ArbitraryInstances.get(BlockingDeque.class).isEmpty());\n', 1), ('Single.toFlowable()}', 1), ('assertTrue(multimap().asMap().values().remove(Collections.singleton(v0())));\n', 1), ('setVisible(true);\n', 1), ('checkCompletableBackpressure()', 1), ('noSubsequentSubscriptionIterable()', 1), ('.put(BigDecimal.class,', 1), ('((ImmutableEnumMap<?,', 1), ('DelayedDispose(dr),', 1), ('"but', 1), ('.switchIfEmpty(Observable.fromIterable(Arrays.asList(42)));\n\n', 1), ('List<BlockingQueue<Object>>', 1), ('OptionalDouble#empty}', 1), ('testListIterator_tooLow()', 1), ('key.attachment(),', 1), ("'r'))));\n", 1), ('System.out.println(message);\n', 1), ('member.hashCode();\n', 1), ('IntBuffer.allocate(generateInt());\n', 1), ('perInstanceEvent.instanceId);\n', 1), ('<S', 1), ('"12324");\n', 1), ('between.iterator().next().contains("RxSingleScheduler"));\n\n', 1), ('unsubscribe(final', 1), ('cake.setTopping(topping);\n', 1), ('.suppressing(suppressForCheckedSet())\n', 1), ('assertTrue(list.addAll(4,', 1), ('CompletableTimeout', 1), ('f.onError(new', 1), ('ObservableCreate(ObservableOnSubscribe<T>', 1), ('signals</strong>.\n', 1), ('tenMillionEmptySources().read());\n', 1), ('OptionalDouble},', 1), ('"Rita",', 1), ('MaybeObserver},', 1), ('schedulePeriodically(@NonNull', 1), ('d1);\n\n', 1), ('ObservableElementAt(ObservableSource<T>', 1), ('service.', 1), ('List<Flowable<Integer>>', 1), ('GenericArrayTypeImpl(Type', 1), ('9032184911934499404L;\n\n', 1), ('5).limit(3));\n', 1), ('task.addListener(\n', 1), ('Guarded-suspension', 1), ('ls);\n', 1), ('cache...', 1), ('assertFalse(doc.isCancelled());\n\n', 1), ('Java-compliant', 1), ('LotteryTestingModule());\n', 1), ('testSuspend()', 1), ('CollectCollectors.toImmutableMap(keyFunction,', 1), ('File.createTempFile("SinkSourceFile",', 1), ('((inner', 1), ('DoAfterTerminateObserver(SingleObserver<?', 1), ('TestSubscriber}', 1), ('ParameterizedType}', 1), ('tryStart(boolean', 1), ('Observable#as}', 1), ('subscriber.assertComplete();\n\n', 1), ('expectedValuesPerKey}', 1), ('generator.\n', 1), ('addLayer(CakeLayer', 1), ('streamA.spliterator();\n', 1), ('TypeToken<Multiset<String>>()', 1), ('Flowables.\n', 1), ('effectively', 1), ('t2.hashCode());\n', 1), ('MergeMaybeObserver(Subscriber<?', 1), ('FlowableRetryPredicate(Flowable<T>', 1), ('#replace(AtomicReference,', 1), ('errorNotImplementedNull2()', 1), ('CompletableOnSubscribe\n', 1), ('java.nio.file.Files.delete(fileThreadLocal.get());\n', 1), ('testStackOverflowWouldOccur()', 1), ('R>)a,', 1), ('PublishSubscription[0];\n', 1), ('ConcatMapInner<R>\n', 1), ('Flowable.empty().blockingFirst();\n', 1), ('wrap(map);\n', 1), ('TimerObserver(s);\n', 1), ('(should', 1), ('CompletableMergeDelayErrorIterable(sources));\n', 1), ('specified,', 1), ('ObservableInterval', 1), ('baseExpected.length);\n', 1), ('numbers);\n', 1), ('TypeToken<ArrayList<EmptyEnum>>()', 1), ('testGetClassPathFromManifest_badClassPath()', 1), ('Flowable.fromIterable(sources).flatMap((Function)MaybeToPublisher.instance(),', 1), ('thread");\n\n', 1), ('ObservableSwitchMapMaybeEmptyPerf', 1), ('ofImmutable(Map<E,', 1), ('WeatherObserverTest(final', 1), ('clear();\n}\n', 1), ('memoryMXBean', 1), ('length);\n\n', 1), ('view.\n', 1), ('commands\n', 1), ('testPluginExceptionWhenUnsubscribing2()', 1), ('testGetClassPathFromManifest_absoluteDirectory()', 1), ('TakeLastTimedSubscriber<T>', 1), ('dl.dispose();\n\n', 1), ('(DebounceInnerObserver<T,', 1), ('OtherMaybeObserver(MaybeObserver<?', 1), ('ambWithSecondFires()', 1), ('Checked', 1), ('JAVA_VM_VERSION("java.vm.version"),\n\n', 1), ('guavaPredicate})', 1), ('assertTrue(list3.equals(list));\n', 1), ('(int),', 1), ('getTicketsCollection()', 1), ('"Futures.getChecked', 1), ('boundarySubscriber.compareAndSet(sender,', 1), ('BlockingFlowableMostRecentTest', 1), ('SequentialExecutor.', 1), ('completable.\n', 1), ('concatMapDelayError(mapper,', 1), ('assertEquals(13,', 1), ('ShortBuffer.allocate(generateInt());\n', 1), ('get(key).equals(value))', 1), ('fromPublisher(toFlowable().retry(times,', 1), ('tracker', 1), ('assertFalse(list.remove((Integer)1));\n\n', 1), ('RxJavaPlugins.setIoSchedulerHandler(new', 1), ('startWith(Observable<T>', 1), ('Zach', 1), ('MaybeSwitchIfEmpty(MaybeSource<T>', 1), ('DatagramPacket(message.getBytes(),', 1), ('findClass(name);\n', 1), ('Deque<BusinessException>', 1), ('java.util.ArrayList;\n\n/**\n', 1), ('normalEmptyConditional()', 1), ('comprise\n', 1), ('Or', 1), ('BaseTypeParser.parse(MaybeNo2Dot0Since.findSource("Maybe"),', 1), ('rso.onError(new', 1), ('go\n', 1), ('Collections.unmodifiableSet(innerSet);\n', 1), ('Functions.EMPTY_CONSUMER.toString());\n', 1), ('assertTrue(ArbitraryInstances.get(PriorityBlockingQueue.class).isEmpty());\n', 1), ('Flowable.merge(ob,', 1), ('checkDoubleOnSubscribeFlowableToSingle(Function<Flowable<T>,', 1), ('Tenant("Nike",', 1), ('Blackhole.consumeCPU(work);\n', 1), ('userConverter.createFromDtos(userConverter.createFromEntities(users));\n', 1), ('testOpenClose()', 1), ('longBitsToDouble(longs.getAndSet(i,', 1), ('FlowableGenerateTest', 1), ('co', 1), ('AbstractListTester<E>', 1), ('com.google.common.collect.testing.testers.SetAddTester.getAddSupportedNullPresentMethod;\n\nimport', 1), ('onXLift()', 1), ('Observable\n\n', 1), ('testsForConcurrentSkipListSetNatural()', 1), ('test")\n', 1), ('MostRecentObserver<T>(initialValue);\n\n', 1), ('assertTrue("expected', 1), ('*/\n@GwtIncompatible\n@SuppressWarnings("serial")', 1), ('Single.just(5)\n', 1), ('verify(store,', 1), ('Flowable&lt;Integer>', 1), ('observers.remove(obs);\n', 1), ('org.springframework.stereotype.Service;\nimport', 1), ('source.subscribe(sw);\n', 1), ('overrideComputationScheduler()', 1), ('File("/C:\\\\Program', 1), ('flowable,', 1), ('this.exceptionType.exceptionType;\n\n', 1), ('delayErrorIterableCancelAfterHasNext()', 1), ('Feature<Void>', 1), ('syncDisposeIdempotent()', 1), ('Predicates}', 1), ('EqualsTester();\n', 1), ('ExternalConsumer(Blackhole', 1), ('"Timed[time="', 1), ('this.unit);\n', 1), ('taskLatch.await();\n', 1), ('executeService.submit(writer2);\n\n', 1), ('sb.toString();\n', 1), ('BadObservable().test();\n', 1), ('UnsubscribeOnMaybeObserver<T>(observer,', 1), ('elementOrder;\n', 1), ('ListFeature', 1), ('testElementAtOrDefaultFlowable()', 1), ('interval', 1), ('TakeUntilMainSubscriber(Subscriber<?', 1), ('MaybeLift<T,', 1), ('Promise<Object>', 1), ('FlatMapCompletableMainSubscriber(Subscriber<?', 1), ('mo.onSuccess(1);\n\n', 1), ('ObservableSource<Downstream>', 1), ('doubleOnSubscribe(Observer<?>', 1), ('Selenium,', 1), ('1).toObservable());\n', 1), ('(DisposableHelper.setOnce(upstream,', 1), ('expectedExecutionTime)', 1), ('synchronize', 1), ('testAsynchronousDrop()', 1), ('a2[0]);\n', 1), ('this.readable', 1), ('step.', 1), ('change.\n', 1), ('state.onNext(t);\n', 1), ('Worker}s.\n', 1), ('emptyIterable()', 1), ('createMultimap()', 1), ('BigDecimal.ZERO)\n', 1), ('emptyInstance;\n', 1), ('append(CharSequence', 1), ('ObserverResourceWrapper<T>', 1), ('ZipTckTest', 1), ('SingleDoFinally<T>(this,', 1), ('"onCompleteSupplier', 1), ('inputStreamClosed;\n\n', 1), ('OneSizeGenerator(TestContainerGenerator<T,', 1), ('observableNoFlowable()', 1), ('CountObserver(SingleObserver<?', 1), ('DateFormatCallableTest', 1), ('List<DwarvenMineWorker>', 1), ('m;', 1), ('enumMethods()', 1), ('(errorMode)', 1), ('"file-that-doesnt-exist");\n\n', 1), ('Transfer', 1), ('lastOfFirstTwo));\n', 1), ('(throwException)', 1), ('com.google.common.collect}', 1), ('\'@\'")\n', 1), ('"final",', 1), ('skips', 1), ('testUnsubscribeOnlyOnce()', 1), ('wrongPre,', 1), ('error.', 1), ('Multimaps#asMap(SetMultimap)}', 1), ('TreeSet.class,\n', 1), ('SetMultimap#asMap}.\n', 1), ('tristique', 1), ('queries', 1), ("NTFS's", 1), ('sourceObs', 1), ('officially', 1), ('writeSelfReferencingJarFile(File', 1), ('FlowableElementAtSingle<T>', 1), ('rawType;\n\n', 1), ('singleSubscribe1()', 1), ('WithGenericConstant()', 1), ('MaybeFromAction(Action', 1), ('(!file.exists())', 1), ('K>(keyType.getEnumConstants().length', 1), ('FlowableMergeTests', 1), ('onNextFailureSafe()', 1), ('scalarSource()', 1), ('well?\n', 1), ('JAVA_COMPILER)', 1), ('LordBaelish},', 1), ('com.google.common.util.concurrent.AbstractFutureBenchmarks.Facade;\nimport', 1), ('crash\n', 1), ('ownerType.hashCode())\n', 1), ('writability,', 1), ('replaceWithImmediate', 1), ('TEST_CAR_MODEL);\n', 1), ('testRequestFromDecoupledOperatorThatRequestsN()', 1), ('Sets.unmodifiableNavigableSet(Sets.newTreeSet()))\n', 1), ('assertTrue(bq.isCancelled());\n', 1), ('ObservableMergeWithSingle(Observable<T>', 1), ('assertEquals(expectProcess,', 1), ('Modifier.FINAL)', 1), ('sequentialDelayError()', 1), ('ObservableEventStream.getEventStream("HTTP-ClusterB",', 1), ('UndeliverableException(Throwable', 1), ('<b>{@link', 1), ('LineProcessor<List<String>>', 1), ('.zipWith(Flowable.range((int)elements,', 1), ('CompletableSubscribeOn', 1), ('bear', 1), ('nazguls.put(NazgulName.REN,', 1), ('#RESTRICTS_ELEMENTS}.\n', 1), ('NonCachingWithoutConstructorCheckValidator.INSTANCE;\n', 1), ('disposedOnCallThrows()', 1), ('.assertFailure(MissingBackpressureException.class,', 1), ('AssertionError(ex.toString());\n', 1), ('Double#equals},', 1), ('CompletableCache(CompletableSource', 1), ('FlowableSingleMaybe(Flowable<T>', 1), ('"Observer",', 1), ('13.0)\n', 1), ('(featureAsObject', 1), ('"",', 1), ('TestException("Disposer");\n', 1), ('ImmutableMap.this.hashCode();\n', 1), ('ImmutableList.copyOf(copy).get(0);\n', 1), ('SubscriberResourceWrapper<T>', 1), ('Modifier.isFinal(field.getModifiers()))', 1), ('5170026210238877381L;\n\n', 1), ('generateCharBuffer();\n', 1), ('albumTitle);\n', 1), ('assertNotSame(\n', 1), ('FileLoggerModule()', 1), ('*/\n@GwtIncompatible\ninterface', 1), ('(queue.offer(t))', 1), ('ZipWithIterableTckTest', 1), ('assertNotNull(ArbitraryInstances.get(ByteSink.class));\n', 1), ('tasks.add(this.singletonInstanceMethod::get);\n', 1), ('SingleDelay<T>(this,', 1), ('order),', 1), ('java.util.concurrent.ConcurrentHashMap}.\n', 1), ('opening', 1), ('type);\n\n', 1), ('ObservableConcatMapCompletable<T>', 1), ('-8134157938864266736L;\n', 1), ('FlowableToList(Flowable<T>', 1), ('.assertSubscribed();\n', 1), ('registered",\n', 1), ('lazy\n', 1), ('assertNull(ArbitraryInstances.get(Void.class));\n', 1), ('MapFeature.ALLOWS_NULL_KEYS,\n', 1), ('assertTrue(completed.get());\n', 1), ('pp0.singleElement()),', 1), ('doOnDispose()', 1), ('SorterFunction(Comparator<?', 1), ('reducerCrash2()', 1), ('generateImmutableListMultimap(K', 1), ('.put(ByteBuffer.class,', 1), ('toFunction9()', 1), ('readUsingReader(String', 1), ('Desktop', 1), ('IOException;\n\n}\n', 1), ('ZipMaybeObserver<T>\n', 1), ('I', 1), ('hooking', 1), ('RxJavaPlugins.onSingleReturn(subscription));\n//\n//', 1), ('putVar("list",', 1), ('compare(int', 1), ('manifestClasspath("with/relative.jar");\n', 1), ('"Kelly",', 1), ('LinkedHashMultimap.create();\n\n', 1), ('containsValue(value);\n', 1), ('OnSubscribe<Integer>()', 1), ('.subscribe();\n//', 1), ('createValueArray(int', 1), ('(parent.errors.addThrowable(t))', 1), ('assertTrue(expectedThreadName.equals(t.getName()));\n', 1), ('AsyncSubject()', 1), ('callback-based', 1), ('UnsubscribeOnSingleObserver<T>', 1), ('cons,', 1), ('setUp)', 1), ('available.remove(instance);\n', 1), ('(generate', 1), ('TypeToken<ImmutableMap<String,', 1), ('.subscribeOn(Schedulers.computation()).blockingFirst(1).intValue());\n', 1), ('ObservableError<T>', 1), ('Locale\n', 1), ('testListIterator_atSize()', 1), ('dataFileName);\n', 1), ('AsyncSubject.create();\n', 1), ('12/10/15', 1), ('.toFuture(),', 1), ('stripesLocal', 1), ('FunctionWithIndex<T,', 1), ('FuturesGetCheckedBenchmark', 1), ('(callOnOverflow)', 1), ('<p><b>There', 1), ('ResourceSubscriber<String>()', 1), ('spConsumerNode(LinkedQueueNode<T>', 1), ('EnumHashBiMap<K', 1), ('q.poll());\n\n', 1), ('FlowableReduceSeedSingle<T,', 1), ('setDefault(MapMode.class,', 1), ('future))', 1), ('LazyFluentIterable.', 1), ('never()).onNext(null);\n', 1), ('FlowableOnSubscribe<T>', 1), ('Number.class,\n', 1), ('List<User>', 1), ('bufferOpen.subscribe(open);\n', 1), ('Description}', 1), ('resumeSingleInCaseOfError})', 1), ('bufferOpen.subscribe(open);\n\n', 1), ('Files.asByteSink(file,', 1), ('mapFailWithStop()', 1), ('smaller', 1), ('java.util.concurrent.CompletionStage}\n', 1), ('TwoConstantEnum', 1), ('(Set<Currency>)', 1), ('classInfo;\n', 1), ('awaitInterrupted()', 1), ('SynchronousQueue<Object>(),\n', 1), ('Noteworthy', 1), ('TestHelper.checkDisposed(Observable.timer(1,', 1), ('Single.just(1).delaySubscription(Completable.complete().delay(100,', 1), ('Range.all())\n', 1), ('withParentIsDisposed()', 1), ('FakeExecutor();\n', 1), ('registerHandler(Class<E>', 1), ('Class.getName()\n', 1), ('poolSize', 1), ('setImplementation(\n', 1), ('KEY_SINGLE_PRIORITY', 1), ('App})', 1), ('setContents', 1), ('InnerCompletableObserver(CompletableObserver', 1), ('PrintWriter(new', 1), ('CompletableCreate', 1), ('Maybe>', 1), ('(enumConstantCache)', 1), ('TestSubscriber<Object>().withTag(""', 1), ('b.size())', 1), ('Justin', 1), ('err,', 1), ('right]\n', 1), ('Event}\n', 1), ('method.getReturnType();\n', 1), ('io.reactivex.observers.DefaultObserver;\n\n\npublic', 1), ('(DisposableHelper.isDisposed(s.get())', 1), ('mauris', 1), ('registers', 1), ('Units\n', 1), ('ambIterableWithFirstFires()', 1), ('Feature<Collection>', 1), ('backingMap}.', 1), ('com.iluwatar.hexagonal.domain.PlayerDetails;\n\n/**\n', 1), ('CompletableToFlowable<T>(this));\n', 1), ('testPluginExceptionWhileOnErrorUnsubscribeThrows()', 1), ('UnmodifiableListIterator<String>()', 1), ('SingleElementObserver(MaybeObserver<?', 1), ('v4),', 1), ('parent.onError(new', 1), ('containsValue(@NullableDecl', 1), ('Special', 1), ('testDisplay(Command', 1), ('testDoOnEachWithError()', 1), ('Arrays.asList(samples.e0(),', 1), ('3L),', 1), ('testCancelledRetention(Scheduler.Worker', 1), ('crashOnError;\n', 1), ('this(\n', 1), ('RegularImmutableSet<E>(set);\n', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/mergeMap.nce.png"', 1), ('events,', 1), ('scheduler.schedulePeriodicallyDirect(Functions.EMPTY_RUNNABLE,', 1), ('346773832286157679L;\n\n', 1), ('CompletableToFlowableTest', 1), ('CompletableConcatArray', 1), ('JVM.\n', 1), ('createEntrySet()', 1), ('CompletableToSingle<T>', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/ignoreElements.png"', 1), ('FlowableFlatMapCompletable<T>', 1), ('Maybes.\n', 1), ('componentType);\n', 1), ('eagle', 1), ('decodingStream', 1), ('Proguard\n', 1), ('TZ', 1), ('work;\n\n', 1), ('g.getName().replace(".java",', 1), ('TEST_STRINGS', 1), ('(this.sergeantResponse.isPresent())', 1), ('redoStack', 1), ('OtherSingleObserver<T>', 1), ('ObservableSingleMaybe(ObservableSource<T>', 1), ('FlowableTimeoutTimed.FallbackSubscriber<T>(actual,', 1), ('"Received', 1), ('BaseTypeParser()', 1), ('ALLOWS_NULL_KEYS);\n', 1), ('"type', 1), ('assertFalse(a1[0].equals(a2[0]));\n', 1), ('MaybeNever();\n\n', 1), ('SortedSetMultimap#asMap}.\n', 1), ('BlockingSubscriber(Queue<Object>', 1), ('Collections.synchronizedList(new', 1), ('this.layers.add(layer);\n', 1), ('CompletableDisposeOn(this,', 1), ('DoubleStream#concat(DoubleStream,', 1), ('counter++)', 1), ('Ordering<T>()', 1), ('super.get(key);\n', 1), ('Object#toString}', 1), ('actual.onNext(buffers.poll());\n', 1), ('Flowable.switchOnNext(Flowable.just(\n', 1), ('java.util.concurrent.Executors.newCachedThreadPool;\nimport', 1), ('((ArrayListMultimap<?,', 1), ('fallbackError()', 1), ('2.13</a>)', 1), ('disposable;\n', 1), ('deferredRace()', 1), ('nullUnit()', 1), ('elementOrder', 1), ('ALLOWS_NULL_VALUE_QUERIES,\n', 1), ('onErrorReturnValue()', 1), ('DEFAULT_TICKETS_COLLECTION,', 1), ('processor.subscribe(subscriber2);\n', 1), ('e5.getMessage());\n', 1), ('get(implementation);\n', 1), ('resultCalc', 1), ('milliseconds\n', 1), ('.assertFailure(CancellationException.class);\n\n', 1), ('Dukes\n', 1), ('GcFinalization.FinalizationPredicate()', 1), ('c.andThen(Single.just((Object)1));\n', 1), ('prevProducerNode.soNext(nextNode);', 1), ('FNAME', 1), ('curr.first', 1), ('processor)', 1), ('internals', 1), ('Typically\n', 1), ('error.txt)\n', 1), ('this.n', 1), ('t))', 1), ('reuseScheduledExecutor()', 1), ('onAfterTerminatedCrash2()', 1), ('"%s.%s()', 1), ('blkQueue.add(msg);\n', 1), ('.buffer(Flowable.just(1).concatWith(Flowable.<Integer>never()))\n', 1), ('CUSTOM', 1), ('(0', 1), ('(m.backpressureDocLine', 1), ('rawType);\n', 1), ('(in.read()', 1), ('transformToString()', 1), ('io.reactivex.schedulers.Schedulers;\n\n@BenchmarkMode(Mode.Throughput)\n@OutputTimeUnit(TimeUnit.SECONDS)\npublic', 1), ('suppressForConcurrentSkipListSetWithComparator()', 1), ('ToSingle', 1), ('MaybeNo2Dot0Since.class.getResource(MaybeNo2Dot0Since.class.getSimpleName()', 1), ('wait.', 1), ('com.iluwatar.servicelayer.wizard;\n\nimport', 1), ('deferred.complete(t);\n', 1), ('File(this.fileName).exists();\n', 1), ('troll.getAttackPower());\n\n', 1), ('replace(AtomicReference<Disposable>', 1), ('subscribeActual(subscriber);\n', 1), ('onCompleteAfterCrashConditional()', 1), ('classLoader).getURLs()\n', 1), ('ms.onSuccess(2);\n\n', 1), ('1024;\n\n', 1), ('BiConsumerSingleObserver<T>(onCallback);\n', 1), ('values().contains(null)}', 1), ('manifestClasspath(String', 1), ('emptyInstance', 1), ('assertEquals("onCompleteFail",', 1), ('handleEvent(MessageData', 1), ('ActionListener', 1), ('maybeSourceAsSs()', 1), ('OBSERVER_ONCOMPLETED_FAIL(onError).onComplete();\n', 1), ('NTFS', 1), ('matchingToppings', 1), ('list.toArray();\n', 1), ('io.reactivex.disposables;\n\n/**\n', 1), ('silently\n', 1), ('TestEnum\n', 1), ('dir1);\n', 1), ('onErrorMissingShouldReportNoCustomOnError()', 1), ('ThreadAsyncExecutor();\n\n', 1), ('testOnNextAfterOnError()', 1), ('mockCompletableObserver()', 1), ('itself</a>.\n', 1), ('lazyval(T', 1), ('QueueDisposable<T>,', 1), ('manifestClasspath("file:/with/absolute.jar");\n', 1), ('suppressAfterCompleteEvents()', 1), ('oldPathSeparator);\n', 1), ('actual.onSuccess(b);\n', 1), ('to.assertValues(Integer.MAX_VALUE', 1), ('org.mockito.Mockito.verifyZeroInteractions;\n\n/**\n', 1), ('sa.actual);\n', 1), ('ANY(ZERO,', 1), ('getTesters()', 1), ('subject.onNext(value);\n', 1), ('(elements.length', 1), ('Moves', 1), ('testLastWithBackpressure()', 1), ('.onErrorResumeNext(Single.just(1)));\n', 1), ('stream.writeObject(entry.getKey());\n', 1), ('fusedOnErrorCrashConditional()', 1), ('RxJavaPlugins.setErrorHandler(null);\n\n', 1), ('List<Lock>', 1), ('TypeCapture<T>', 1), ('actual.onNext(c);\n', 1), ('CallbackCompletableObserver(onComplete);\n', 1), ('database.\n', 1), ('Out();\n', 1), ('maybeSupplier;\n\n', 1), ('Flowable.just(1).ignoreElements().<Integer>toFlowable().subscribe(ds);', 1), ('.validate(User::getName,', 1), ('suite.addTest(testsForPriorityBlockingQueue());\n', 1), ('java.io.Serializable;\n\n/**\n', 1), ('fulfilling\n', 1), ('java.util.WeakHashMap;\nimport', 1), ('Heavy();\n\n', 1), ('ArbitraryInstances.get(int.class));\n', 1), ('testScanFromFile_notJarFile()', 1), ('getSetNullSupportedMethod());\n', 1), ('generateCollection(E', 1), ('t7)', 1), ('bounds}.\n', 1), ('assertTrue(disposed.isDisposed());\n', 1), ('Serialization.populateMap(this,', 1), ('executor.scheduleAtFixedRate(task,', 1), ('com.iluwatar.interpreter;\n\nimport', 1), ('packet.setSender(sender);\n\n', 1), ('com.google.common.collect.testing.DerivedCollectionGenerators.Bound;\nimport', 1), ('page;\n\n\n', 1), ('ImmutableSortedMap.of(key,', 1), ('POOLS.remove(e);\n', 1), ('LOGGER.info("Looting', 1), ('(InnerSubscriber<T,', 1), ('assertTrue(empty.isDisposed());\n', 1), ('false,\n', 1), ('FlowableTimer(long', 1), ('King();\n', 1), ('!m.signature.contains("Disposable")\n', 1), ('ListListIteratorTester<E>', 1), ('retryBiPredicate()', 1), ('#from}', 1), ('"Don\'t', 1), ('org.mockito.ArgumentCaptor;\n\nimport', 1), ('Publisher,\n', 1), ('result.get(0));\n', 1), ('SafeObserver(@NonNull', 1), ('org.junit.Assert.assertSame;\n\npublic', 1), ('happen.</dd>\n', 1), ('others.length', 1), ('consumer.', 1), ('turpis.', 1), ('FlowableFlatMapCompletableCompletable<T>', 1), ('TemporaryPair(A', 1), ('(!pp.hasSubscribers())', 1), ('ImmutableMap.this.get(key);\n', 1), ('doc.getString("phone"));\n', 1), ('lastTwoPositives);\n\n', 1), ('out.write(bytes);\n', 1), ('fo.get(1,', 1), ('methodLine;\n\n', 1), ('DoFinallySubscriber<T>', 1), ('ArbitraryInstances.get(WithPublicConstructorAndConstant.class));\n', 1), ('receives.\n', 1), ('Every', 1), ('(paramType', 1), ('biConsumerThrows()', 1), ('request(t);\n', 1), ('-5843758257109742742L;\n\n', 1), ('JdbcDataSource', 1), ('ToSortedListTckTest', 1), ('workers.dispose();\n', 1), ('CollectionTestSuiteBuilder.using(\n', 1), ('dbDao', 1), ('o.subscribeOn(Schedulers.io()).blockingForEach(new', 1), ('1M,', 1), ('Would', 1), ('setReceiver(SocketAddress', 1), ('FlowableBufferBoundarySupplier(Flowable<T>', 1), ('10000,', 1), ('Arrays.stream(ignoreTests).reduce(Predicate::or).orElse(e', 1), ('createMessage(final', 1), ('File},', 1), ('DefaultSubscriber<String>', 1), ('super(urls);\n', 1), ('console', 1), ('VERY_LARGE,', 1), ('that.comparators);\n', 1), ('JS', 1), ('delegate.forEach(action);\n', 1), ('to*}</li>\n', 1), ('io.reactivex.internal.operators.parallel.ParallelFromPublisher;\nimport', 1), ('AbstractApplicationContext', 1), ('Schedulers.computation());\n\n', 1), ('ArbitraryInstances.get(BigInteger.class).intValue());\n', 1), ('StringArrayList();\n\n', 1), ('".java"))', 1), ('toString(File', 1), ('.put(List.class,', 1), ('initialCollection;\n\n', 1), ('GuardedQueue,', 1), ('frontController.handleRequest(request);\n', 1), ('MaybeDoFinally<T>(this,', 1), ('FlowableDoOnLifecycleTest', 1), ('assertThat(ClassPath.from(classloader).getTopLevelClasses()).isNotEmpty();\n', 1), ('Thread.currentThread().getName()', 1), ('assertTrue(list.equals(list3));\n\n', 1), ('transient.', 1), ('assertEquals("Counts', 1), ('drainMissedRequested()', 1), ('BufferedWriter(new', 1), ('getDoneFromTimeoutOverload(Future<V>', 1), ('rso.add(null);\n', 1), ('remove,', 1), ('testForEachEntryOrdered()', 1), ('1].request(n);\n', 1), ('.suppressing(suppressForSingletonList())\n', 1), ('doOnSubscribeError()', 1), ('usingGenerator(G', 1), ('comment.\n', 1), ('assertEquals("Subscriber.onError', 1), ('reportSubscriptionSet()', 1), ('verifyNoMoreInteractions(consumer);\n\n', 1), ('re-run', 1), ('nextCount;\n', 1), ('generateImmutableBimap(K', 1), ('com.google.common.collect.testing.testers.CollectionToArrayTester.getToArrayIsPlainObjectArrayMethod;\nimport', 1), ('LongStream}', 1), ('pulvinar.', 1), ('LoggerFactory.getLogger(Weather.class);\n\n', 1), ('LEFT_IS_GREATER;', 1), ('CustomMaybeObserver(MaybeObserver&lt;?', 1), ('getContainsEntryWithIncomparableValueMethod());\n', 1), ('ParallelFlowable,', 1), ('until\n', 1), ('stateless\n', 1), ('TestCharSource', 1), ('(RuntimeException)', 1), ('B>>(\n', 1), ('testSwitchWhenNotEmpty()', 1), ('ScheduledWorker(executor.get());\n', 1), ('concentrate', 1), ('SingleCreate<T>', 1), ('safeObserver.onNext("one");\n', 1), ('suppressed,', 1), ('io.reactivex.internal.operators.observable.BlockingObservableIterable.BlockingObservableIterator;\n\npublic', 1), ('studentRepository.registerDeleted(gopi);\n', 1), ('QueueSubscription.BOUNDARY);\n\n', 1), ('file1,', 1), ('BiPredicate<T,', 1), ('TimerTckTest', 1), ('bitwise', 1), ('equals()}', 1), ('java.nio.channels.FileChannel;\nimport', 1), ('AtomicReference<PublishSubscription<T>[]>(EMPTY);\n', 1), ('RecreateSimpleObjects()', 1), ('Observable.create(null);\n', 1), ('Spliterators.iterator(splitrA);\n', 1), ('menuItem)', 1), ('WeakHashMap<>();\n\n', 1), ('"..":\n', 1), ('trySplits', 1), ('asReader', 1), ('fromCallableObservable.subscribe();\n\n', 1), ('uninterruptible', 1), ('request;\n\n', 1), ('emptySource()', 1), ('(Foo', 1), ('JPanel', 1), ('testsForAbstractSequentialList()', 1), ('ObjectHelper.requireNonNull(subscriptionIndicator,', 1), ('height="182"', 1), ('SingleScheduler', 1), ('assertFalse(DisposableHelper.validate(null,', 1), ('onCancel', 1), ('nothing.\n', 1), ('getInnerQueue(inner);\n', 1), ('Enum)', 1), ('this.capacity;\n', 1), ('ObservableTakeUntil(ObservableSource<T>', 1), ('assertThat(urls.get(0).getPath()).endsWith("/relative/path/to/some.jar");\n\n', 1), ('TestSortedSetGenerator<String>', 1), ('blockingGetError()', 1), ('ClqSimpleQueue<Object>();\n', 1), ('CustomerClientApp})', 1), ('InterruptedException\n', 1), ('set.remove(i);\n', 1), ('href="https://code.google.com/p/guava-libraries/issues/detail?id=1635">issue', 1), ('(int)elements).publish((Function)Functions.identity())\n', 1), ('ByteSink}', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/onExceptionResumeNextViaMaybe.png"', 1), ('junit.framework.Assert.assertEquals;\nimport', 1), ('crashOnError;\n\n', 1), ('precisely,', 1), ('MaybeObserver<R>,', 1), ('assertThat(buf).isEmpty();\n\n', 1), ('runnableDisposedAsyncTimed2()', 1), ('<em>or', 1), ('FlowableReduceTests', 1), ('Javadocs', 1), ('ObjectHelper.requireNonNull(onNextMapper.apply(t),', 1), ('WeakScalarSubscription(T', 1), ('blkQueue.poll();\n', 1), ('conclusion', 1), ('MapFeature.ALLOWS_ANY_NULL_QUERIES,\n', 1), ('MaybeMergeArray<T>', 1), ('b.iterator();\n\n', 1), ('throwable\n', 1), ('pp.singleElement().delay(100,', 1), ('"completableSupplier");\n', 1), ('rx2.purge-period-seconds}', 1), ('another,', 1), ('true).firstEntry();\n', 1), ('to1.assertResult(2);\n', 1), ('limitStep()', 1), ('.named("emptyList")\n', 1), ('NavigableSet},', 1), ('testLinkedList()', 1), ('add(Customer', 1), ('outerValue', 1), ('throwIfFatal(@NonNull', 1), ('accounts.\n', 1), ('FlowableWindowBoundary(Flowable<T>', 1), ('q.offer(null,', 1), ('Single.just(1).subscribe(ts);\n//\n//', 1), ('set()', 1), ('renders', 1), ('FlowableMergeWithSingle<T>', 1), ('@}Override\n', 1), ('head;', 1), ('com.google.common.collect.testing.Helpers.NullsBeforeTwo;\nimport', 1), ('TypeToken<OptionalInt>()', 1), ('SerializedForm(Map<Class<?', 1), ('accept(HashMap<String,', 1), ('BufferBoundaryTckTest', 1), ('fromCallableSingle', 1), ('UnsubscribeObserver<T>', 1), ('(javaImpl.compare(ba3,', 1), ('HobbitsTest()', 1), ('(!predicate.test(nextElement))', 1), ('multimap().asMap().get(key);\n', 1), ('ex1;\n', 1), ('f.toObservable();\n', 1), ('predicateThrowsObservable()', 1), ('timedRunnable)', 1), ('HealingPotion();\n', 1), ('requestOne()', 1), ('Schedulers.from(Executor)', 1), ('-99);\n\n', 1), ('delayedErrorOnSuccess()', 1), ('syncFusedMapCrash()', 1), ('acquireResource();\n', 1), ('testGreatestCollector()', 1), ('FlowableConcatMapMaybeEmptyPerf', 1), ('(GenericArrayType)', 1), ('inner.actual.onError(e);\n', 1), ('assertEquals(Arrays.asList(1L,', 1), ('biConsumerErrorThrows()', 1), ('StreamsBenchmark', 1), ('TreeSet<>(MinimalCollection.of(elements));\n', 1), ('cancellable)', 1), ('percent\n', 1), ('java.io.BufferedReader#readLine()}', 1), ('TestHelper.checkDisposed(SingleSubject.create().timeout(1,', 1), ('assertTrue(ArbitraryInstances.get(RowSortedTable.class).isEmpty());\n', 1), ('FlowableToCompletableTest', 1), ('java.nio.file.Files.newBufferedReader(file,', 1), ('#merge(Publisher,', 1), ('utilizeResource(resource);\n', 1), ('Settings/");\n', 1), ('(K)', 1), ('AppendToQueueTask(timedRunnable));\n', 1), ('rawType.getTypeParameters().length);\n', 1), ('mws.createWorkers(max', 1), ('SkipLastObserver<T>', 1), ('SortedJoinSubscription<T>\n', 1), ('offer(v1);\n', 1), ('"D",', 1), ('2757120512858778108L;\n', 1), ('Termination', 1), ('latch,', 1), ('<li>Lowest', 1), ('assertThrows(IOException.class,', 1), ('threads1', 1), ('w.toSortedList().toObservable();\n\n', 1), ('MessageData)', 1), ('withSingleDispose()', 1), ('TypeToken<ImmutableListMultimap<String,', 1), ('this.properties', 1), ('withPublisherDoubleOnSubscribe()', 1), ('iterable.forEach(action);\n', 1), ('filterUpperBounds(upperBounds))', 1), ('DragonSlayingStrategy})', 1), ('unsafeImpl;\n\n', 1), ('com.google.common.io.SourceSinkFactory.ByteSourceFactory;\nimport', 1), ('Single.just(1).delay(10,', 1), ('ClassToInstanceMap<Object>', 1), ('ObservableSource<V>', 1), ('FileWriterAction}\n', 1), ('cbuf.array();\n\n', 1), ('assertTrue(so.isDisposed());\n', 1), ('ObservableSwitchMapCompletable<T>', 1), ('FlowableError(Callable<?', 1), ('resumeFunctionInCaseOfError));\n', 1), ('ReserializedCollectionGenerator(OneSizeTestContainerGenerator<Collection<E>,', 1), ('delegate.values();\n', 1), ('remoteAddress);\n\n', 1), ('Removed', 1), ('ObservableAnySingle<T>', 1), ('OnErrorNextObserver(Observer<?', 1), ('first();\n\n', 1), ('ObjectHelper.requireNonNull(maybeSupplier,', 1), ('USER_DIR("user.dir");\n\n', 1), ('insertionOrder,\n', 1), ('secondChoice}', 1), ('LambdaObserver(Consumer<?', 1), ('formatFeatureSet(Set<?', 1), ('flushable,', 1), ('readObject)', 1), ('manifest)).isEmpty();\n', 1), ('JdkBackedImmutableMap}.\n', 1), ('java.util.function.Supplier}.', 1), ('unbounded1()', 1), ('this.qd;\n', 1), ('GOLF}', 1), ('socketChannel.register(selector,', 1), ('Flowable.create(new', 1), ('supplier.get()}', 1), ('mainSuccessSingle()', 1), ('Converter</a>.)\n', 1), ('assertEquals(memberClass.getSimpleName(),', 1), ('comply', 1), ('algorithm.', 1), ('naturally', 1), ('handling\n', 1), ('4.0\n', 1), ('lastDot', 1), ('<M', 1), ('ByteArrayOutputStream.class,\n', 1), ('NoSuchElementCallable.INSTANCE;\n', 1), ('numInstances,', 1), ('src=\n', 1), ('TestExecutor(mock);\n\n', 1), ('multimap.setMap(map);\n\n', 1), ('Lists.newLinkedList();\n', 1), ('even\n', 1), ('FlowableSampleTimed<T>', 1), ('IntStream)\n', 1), ('change,\n', 1), ('(!to.delete())', 1), ('Single.just(Integer.valueOf(s));', 1), ('assertEquals("Be', 1), ('setImplementation(CountDownLatch.class,', 1), ('addObserver(WeatherObserver', 1), ('pp.concatMapMaybe(\n', 1), ('properties.containsKey(stat);\n', 1), ('parent.onRequest.accept(n);\n', 1), ('solely', 1), ('.containsExactly(fullpath("base/current.jar"));\n', 1), ('RxJavaPlugins#createSingleScheduler(ThreadFactory)}', 1), ('values[1]));\n', 1), ('NullPointerTester().testAllPublicStaticMethods(ClassPath.class);\n', 1), ('Ends', 1), ('MaybePeek(MaybeSource<T>', 1), ('ConcurrentSkipListSet<>(MinimalCollection.of(elements));\n', 1), ('"onErrorMapper', 1), ('Functions.justFunction(next),', 1), ('started;\n', 1), ('CheckLocalVariablesInTests', 1), ('Atomic', 1), ('SubscriberResourceWrapper(Subscriber<?', 1), ('g.onError(t);\n', 1), ('MapWithIndexSpliterator<Spliterator.OfDouble,', 1), ('Closes', 1), ('(i)', 1), ('characterFrequency()\n', 1), ('also\n', 1), ('onLift', 1), ('4K', 1), ("implementation's", 1), ('.put(Optional.class,', 1), ('",\n', 1), ('manually.\n', 1), ('producerThread', 1), ('assertFalse(allOdd.blockingFirst());\n', 1), ('contain.', 1), ('queue.put(item);\n', 1), ('Single.zip(Single.error(new', 1), ('RandomAmountInputStream(new', 1), ('FlowableAll<T>', 1), ('testIterable()', 1), ('SafeTreeMap<>(Ordering.natural());\n', 1), ('ScheduledRunnableTest', 1), ('firehose;\n', 1), ('sequentially.', 1), ('java.lang.Runtime#availableProcessors()})', 1), ('delete(final', 1), ('generateImmutableCollection(E', 1), ('apply(Entry<String,', 1), ('SetMultimapAsMapTester<K,', 1), ('assertNull(Flowable.fromArray(1,', 1), ('cycle\n', 1), ('(int)elements).map(Functions.<Integer>identity())\n', 1), ('0x0ffff;\n', 1), ('TASK_COUNT', 1), ('onComplete();\n\n}\n', 1), ('"RxThreadFactory["', 1), ('assertFalse(Functions.predicateReverseFor(s).test(1));\n', 1), ('assertTrue(Thread.currentThread().getName().startsWith("RxCachedThreadScheduler"));\n', 1), ('<strong>without', 1), ('streamB.iterator();\n', 1), ('outputStreamClosed;\n', 1), ('com.google.common.base.Optional}', 1), ('testBiMap()', 1), ('#onComplete()},', 1), ('constructor.setAccessible(true);', 1), ('out.write(b);\n', 1), ('TestHelper.checkDisposed(PublishSubject.create().ignoreElements().doFinally(this));\n', 1), ('baseLoader', 1), ('charset).copyTo(to);\n', 1), ('-4445381578878059054L;\n\n', 1), ('total);\n', 1), ('io.reactivex.internal.schedulers.NonBlockingThread;\nimport', 1), ('call.', 1), ('delaySubscription(CompletableSource', 1), ('(StringConverter<?>)', 1), ('ImmutableSet<Class<?', 1), ('fs.request(10);\n\n', 1), ('1000).all(new', 1), ('Multiton', 1), ('LOGGER.info("{}:', 1), ('<i>Handle</i>', 1), ('LimitSubscriber<T>\n', 1), ('Streams()', 1), ('ConcatWithMaybeEmptyTckTest', 1), ('(matches(test))', 1), ('time(@NonNull', 1), ('generate.\n', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/longCount.png"', 1), ('SingleInternalHelper.ToObservable.values().length);\n', 1), ('testListIterator_unmodifiable()', 1), ('fuseToMaybe();\n}\n', 1), ('clone.getClass());\n', 1), ('Whenever', 1), ('initialDisposable)', 1), ('listenerLatch', 1), ('(!files.isEmpty())', 1), ('(Enum<E>[])m.invoke(null))', 1), ('assertCanGenerateOnly(TypeToken<?>', 1), ('System.currentTimeMillis()', 1), ('com.google.errorprone.annotations.CanIgnoreReturnValue;\n\n/**\n', 1), ('TestHelper.checkDisposed(Observable.just(new', 1), ('ConcatWithSingleTckTest', 1), ('MaybeOperator&lt;String&gt;', 1), ('IntFunctionWithIndex)}.\n', 1), ('containedClass', 1), ('p.subscribe(inner);\n\n', 1), ('disposerThrowsEager()', 1), ('Object}\n', 1), ('(file.getName().endsWith(".java"))', 1), ('File("some.jar"),', 1), ('GeneralSecurityException.class,\n', 1), ('all");\n', 1), ('promiseIsFulfilledWithTheResultantValueOfExecutingTheTask()', 1), ('subscribe(MaybeSource<?', 1), ('OptionalLong.of(generateLong());\n', 1), ('.addEqualityGroup(\n', 1), ('(!service.isTerminated())', 1), ('UsingObserver<R>\n', 1), ('super.createDerivedSuites(parentBuilder);\n\n', 1), ('(Spliterator.SIZED', 1), ('ArrayDeque<T>(elements.length);\n', 1), ('generateRange()', 1), ('testCancelledTasksDontRun()', 1), ('undoStack.pollLast();\n', 1), ('builder.append("]");\n', 1), ('suite.addTestSuite(SafeTreeSetTest.class);\n', 1), ('errorCount;\n', 1), ('fromPublisherDoubleOnSubscribe()', 1), ('port.\n', 1), ('assertTrue(ticket3.isPresent());\n', 1), ('recursion.', 1), ('Maybe<T>,', 1), ('com.iluwatar.fluentinterface.fluentiterable.lazy;\n\nimport', 1), ('this.lowerBounds', 1), ('cause\n', 1), ('RxVsStreamPerf', 1), ('itrB.next()));\n', 1), ('CollectionFeature.SERIALIZABLE)\n', 1), ('Validator#of(Object)}\n', 1), ('SingleAmb<T>(sources,', 1), ('io.reactivex.BaseTypeParser.RxMethod;\n\n/**\n', 1), ('cancelImmediately()', 1), ('1L', 1), ('equivalents\n', 1), ('LazyFluentIterable<>(iterable);\n', 1), ('testClassPathEntries_URLClassLoader_withParent()', 1), ('io.reactivex.internal.operators.completable.CompletableTimeout.TimeOutObserver;\nimport', 1), ('ImmutableBiMap#toImmutableBiMap}.\n', 1), ('spscLinkedArrayQueueBiOffer()', 1), ('assertTrue(Thread.currentThread().getName().equals(currentThreadName));\n', 1), ('fname', 1), ('GcFinalization.awaitClear(shadowLoaderReference);\n', 1), ('s.observeOn(Schedulers.single());\n', 1), ('.collect(Collectors.toList());\n', 1), ('drainMissedRequestedProduced()', 1), ('lock.wait(unit.toMillis(timeout));\n', 1), ('(clazz.isAnnotation())', 1), ('!subSequence.equals("{@link', 1), ("Joiner.on(','))\n", 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/delaySubscription.s.png"', 1), ('builder.put(method.getName(),', 1), ('2,\n', 1), ('toIndex)', 1), ('suppressedTests.addAll(methods);\n', 1), ('br.read();\n', 1), ('multimap.keySet())', 1), ('@GuardedBy("stack")\n', 1), ('validate(Predicate<T>', 1), ('assertTrue(bs1.isCancelled());\n', 1), ('getCount(String', 1), ('"1048577",', 1), ('side', 1), ('last.get());\n', 1), ('builder.append(list.get(i));\n', 1), ('(count.incrementAndGet()', 1), ('.named("LinkedHashSet")\n', 1), ('failure.\n', 1), ('disposables', 1), ('TemporaryPair<A,', 1), ('exploited', 1), ('source.subscribe(os);\n', 1), ('SingleDisposable<T>(observer,', 1), ('testActualWrite()', 1), ('executor.get().schedule(task,', 1), ('FlowableAnySingle(Flowable<T>', 1), ('create(MaybeOnSubscribe<T>', 1), ('mongoClient.getDatabase(dbName);\n', 1), ('Single.amb(Arrays.asList(sources))\n', 1), ('add(T', 1), ('(this.soldierResponse.isPresent())', 1), ('SerializedObserver<T>(child);\n\n', 1), ('flowMaybe;\n\n', 1), ('DeferredScalarObserver<T,', 1), ('assertTrue(Comparators.isInOrder(Collections.<Integer>emptyList(),', 1), ('isDone', 1), ('com.iluwatar.cqrs.dto.Author;\nimport', 1), ('ObservableEmpty()', 1), ('members.add(member);\n', 1), ('Short', 1), ('otherErrorPublisher()', 1), ('<code>key</code>.', 1), ('handleInvocation(Object', 1), ('Atomics()', 1), ('lambda,', 1), ('com.google.common.collect.testing.testers.MapPutAllTester.getPutAllNullKeyUnsupportedMethod;\nimport', 1), ('assertNotNull(longs);\n', 1), ('21,', 1), ('unreliable', 1), ('socketChannel.configureBlocking(false);\n', 1), ('BaseTypeParser.parse(MaybeNo2Dot0Since.findSource("Completable"),', 1), ('UnicastProcessorTckTest()', 1), ('getPackageName(String', 1), ('purpose', 1), ('baseLoader.reload(new', 1), ('imaginary', 1), ('ParallelReduceFullInnerSubscriber[n];\n', 1), ('clear(queue);\n', 1), (':})', 1), ('.assertResult(false);\n', 1), ('Equivalent', 1), ('spellbook.getWizards().add(this);\n', 1), ('numStripesLocal', 1), ('U}\n', 1), ('required,', 1), ('AsynchronousService', 1), ('ObjectHelper.requireNonNull(initialSupplier,', 1), ('TakeLastTimedSubscriber(Subscriber<?', 1), ('http://goo.gl/5VQFmC\n', 1), ('assertNull(ArbitraryInstances.get(NonFinalFieldIgnored.class));\n', 1), ('ObservableSingleSingle<T>', 1), ('aid', 1), ('(not)', 1), ('Flush', 1), ('NoOpConsumer', 1), ('JAVA7', 1), ('System.out.println(count);\n', 1), ('deltas[i]', 1), ('System#getProperties()', 1), ('API.\n/**', 1), ('SortedTckTest', 1), ('-5616169793639412593L;\n\n', 1), ('.append("#L").append(lineNum)\n', 1), ('onNextDisposeCrash()', 1), ('ON_NEXT', 1), ('criteria', 1), ('toFunction2()', 1), ('Optional<T>}.', 1), ('RxJavaPlugins.initNewThreadScheduler(null);\n', 1), ('FilterInputStream(source.openStream())', 1), ('MaybeObserver<Object>,\nSingleObserver<Object>,', 1), ('lazySet(FUSED_READY);\n', 1), ('getOnlyRecordLogged(),', 1), ('Robin', 1), ('(oldValue', 1), ('this.lists;\n', 1), ('serialDisposable.get());\n', 1), ('Splitr(Spliterator.OfDouble', 1), ('Java.\n', 1), ('statusRecordsTheStopTime()', 1), ('semantics\n', 1), ('channel.write(buffer,', 1), ('SwitchIfEmptyMaybeObserver(MaybeObserver<?', 1), ('java.util.jar.Manifest;\nimport', 1), ('inEdges,', 1), ('customerThree', 1), ('requested.addAndGet(-scalarEmission);\n', 1), ('feature.\n', 1), ('trivial.', 1), ('visitor;\n\n', 1), ('Modifier.STATIC)', 1), ('accessibility', 1), ('List.class,\n', 1), ('onSubscribeCall;\n', 1), ('requestCancelProduceRace()', 1), ('DEFAULT_COUNTERS_COLLECTION', 1), ('(tests.hasMoreElements())', 1), ('ExecutionException}.', 1), ('IUnitOfWork.MODIFY);\n\n', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.just.png"', 1), ('dtm', 1), ('MaybeIsEmptySingle<T>', 1), ('SafeSubscriber<T>', 1), ('list2)', 1), ('blockingFirstNormal()', 1), ('createNullValue()', 1), ('flushable.flush();\n', 1), ('JAVA6', 1), ('disagree,', 1), ('createLotteryTicket(String', 1), ('car.getParts().count());\n', 1), ('onCallback.accept(null,', 1), ('a.getArgument(0);\n', 1), ('1001))\n', 1), ('onError(Subscriber<?>', 1), ('ReserializingTestCollectionGenerator(TestCollectionGenerator<E>', 1), ('converter.reverse().convert(TestEnum.CHEETO));\n', 1), ('readAllLines(f2);\n\n', 1), ('wrap((SingleSource<T>)sources[0]);\n', 1), ('dao.persistentClass.getSimpleName();\n', 1), ('flowing', 1), ('flowableCompletable()', 1), ('pp1.ignoreElements()))\n', 1), ('testsForCopyOnWriteArrayList()', 1), ('attempts()', 1), ('"singleFunction', 1), ('testing,', 1), ('FetchException.class,\n', 1), ('UnsignedInteger.fromIntBits(generateInt());\n', 1), ('IntervalRangeObserver(Observer<?', 1), ('Flowable<ArrayList<Integer>>', 1), ('entirely', 1), ('values().contains(value);\n', 1), ('ALLOWS_NULL_VALUES(ALLOWS_NULL_VALUE_QUERIES),\n', 1), ('Outer', 1), ('OBSERVER_SUCCESS();\n', 1), ('strings)', 1), ('MoneyTransferEvent)', 1), ('emptyGenerate', 1), ('.assertFailure(NumberFormatException.class,', 1), ('futureList', 1), ('RangePerf', 1), ('assertEquals("rud', 1), ('Comparators}.\n', 1), ('unwrapScheduleDirectTask()', 1), ('w.subscribe(to1);\n\n', 1), ('subscribers.get();\n\n', 1), ('fo.onSubscribe(s);\n\n', 1), ('crashOnNext);\n', 1), ('1000)', 1), ('wrapper\n', 1), ('SET', 1), ('classLoader)', 1), ('converter.reverse().convert(TestEnum.POODLE));\n', 1), ('value.replaceAll("[\\\\r\\\\n]",', 1), ('atop', 1), ('Dummies.InMemoryPrintStream.class);\n', 1), ('Oh', 1), ('to.assertValues("a",', 1), ('3).toSortedList(4).toObservable()\n', 1), ('UnitVisitor>', 1), ('Maybe&lt;Integer&gt;', 1), ('3).takeUntil(predicate).subscribe(o);\n\n', 1), ('errorConsumerEmpty()', 1), ('Long[(int)elements];\n', 1), ('Helpers.copyToList(getOrderedElements()),\n', 1), ('AbstractMapEntry<K,', 1), ('ConcatMapSupport<R>,', 1), ('Modifier.isPrivate(getModifiers());\n', 1), ('fromAction(Functions.futureAction(future));\n', 1), ('TestHelper.checkDisposed(new', 1), ('SingleFromUnsafeSource<T>(source));\n', 1), ('Single#as}', 1), ('tryStart(PURGE_ENABLED);\n', 1), ('CountDownLatch(5);\n\n', 1), ('delayErrorIterableCancelAfterNext()', 1), ('testSuccessOperatesOnSuppliedScheduler()', 1), ('onErrorNotImplementedFailureWithUnsubscribeFailure()', 1), ('enumConstants[0];\n', 1), ('(!fileThreadLocal.get().delete())', 1), ('FlowableIgnoreElementsCompletable<T>', 1), ('KingJoffrey}.\n', 1), ('currConsumerNode', 1), ('RxJavaPlugins.initNewThreadScheduler(nullResultCallable);\n', 1), ('Callable<Publisher<Long>>()', 1), ('RxJavaPlugins.initComputationScheduler(new', 1), ('u)', 1), ('Spliterator.NONNULL,\n', 1), ('this.scalarLimit', 1), ('w.onError(t);\n', 1), ('ConcurrentHashMap<ScheduledThreadPoolExecutor,', 1), ('Integer.MAX_VALUE;\n\n', 1), ('ConcurrentNavigableMap.class,\n', 1), ('FlowableDebounceTimed(Flowable<T>', 1), ('1000).reduce(new', 1), ('(!splits.isEmpty())', 1), ('competing', 1), ('assertEquals(Action.values().length', 1), ('@Ignore("Exceptions', 1), ('stuck\n', 1), ('"com.google.common.util.concurrent.MonitorBased"', 1), ('v4)', 1), ('ObservableFlatMapCompletableCompletable(ObservableSource<T>', 1), ('backingIterator', 1), ('createNewSimpleObject()', 1), ('fusedFlatMapNull()', 1), ('(javadocStart', 1), ('unboundedIn()', 1), ('attempts\n', 1), ('nanosTimeout)', 1), ('SerializableTester.reserialize(gen.create(elements));\n', 1), ('ByteArrayInputStream.class,\n', 1), ('modes}\n', 1), ('NioReactor(Dispatcher', 1), ('methodName', 1), ('subscribeActual(s);\n', 1), ('String[0]);\n', 1), ('java.util.HashMap;\n\nimport', 1), ('EnumHashBiMap}\n', 1), ('stopped));\n', 1), ('cancelledAndRun()', 1), ('fromCopyOf(Iterable<E>', 1), ('bufferHelper("no', 1), ('kingsHand', 1), ('testAddAndRemove_ConcurrentSkipListMap()', 1), ('TestByteSink(TestOption...', 1), ('java.util.concurrent.CompletableFuture#thenCompose}', 1), ('iterator();\n\n', 1), ('.ifPresent(evenNumber', 1), ('isBug()', 1), ('com.iluwatar.object.pool;\n\nimport', 1), ('ParallelReduceFull<T>(this,', 1), ('SafeTreeSet<>(Ordering.natural().nullsFirst());\n', 1), ('TimeUnit.MILLISECONDS).test();\n\n', 1), ('.<Void>toMaybe()\n', 1), ('range.toList().blockingGet();\n', 1), ('findSource(String', 1), ('SingleDoOnEvent<T>(this,', 1), ('"Subscriber",\n', 1), ('runtime;\n\n', 1), ('fusedAsyncConditional()', 1), ('RxJavaPlugins.getOnCompletableCreate();\n//\n//', 1), ('com.google.common.collect.testing.features.ListFeature.SUPPORTS_SET;\nimport', 1), ('onBeforeBlocking()', 1), ('accounts.put(sourceBackAccount,', 1), ('.put(ImmutableSet.class,', 1), ('converter,', 1), ('Single.just(1d)\n', 1), ('SingleAmbTest', 1), ('testGet_nullConstantIgnored()', 1), ('com.iluwatar.event.sourcing.processor;\n\nimport', 1), ('LoggerFactory.getLogger(NioServerSocketChannel.class);\n\n', 1), ('anyways\n', 1), ('RxJavaPlugins.setComputationSchedulerHandler(scheduler2scheduler);\n', 1), ('List<Map<String,', 1), ('Null-value', 1), ('},\n\n', 1), ('"0",', 1), ('reload(Object', 1), ('io.reactivex.disposables.CompositeDisposable;\n\npublic', 1), ('Functions.NaturalComparator.class.getMethod("values");\n', 1), ('checkArgument(typeArguments.length', 1), ('possibly-null', 1), ('(uselessLocales.contains(locale))', 1), ('Callable<Observable<Movie>>()', 1), ('CREATE_TRACE;\n\n', 1), ('connect(DEFAULT_DB,', 1), ('checkInternalOperatorNaming(String', 1), ('source.reduce(sum).toObservable();\n\n', 1), ('ImmutableMapValues<K,', 1), ('checkObservableScheduler()', 1), ('classloader,', 1), ('extreme', 1), ('(InstantiationException', 1), ('ExecutionException}\n', 1), ('ParallelReduceFull(ParallelFlowable<?', 1), ('FlowableNever();\n\n', 1), ('carefully', 1), ('fail("countAction', 1), ('V>(s,', 1), ('SingleDoOnSuccess<T>(this,', 1), ('Single.just(1).delaySubscription(Single.timer(100,', 1), ('Striped.LargeLazyStriped<>(stripes,', 1), ('maybes)', 1), ('derivedFeatures.remove(SERIALIZABLE);\n', 1), ('writeObject(java.io.ObjectOutputStream', 1), ('NullFriendlyComparator<T>', 1), ('identity);\n', 1), ('ConcatMapImmediate(Subscriber<?', 1), ('IntervalRangeObserver\n', 1), ('Running', 1), ('ObservableForEachTest', 1), ('}).blockingGet();\n\n', 1), ('ms.add(Completable.complete());\n\n', 1), ('FlowableFromIterable.subscribe(s,', 1), ('"further', 1), ('Single.just(1).delay(1,', 1), ('FlowableFlatMapCompletablePerf', 1), ('.put(Iterator.class,', 1), ('exclusive.\n', 1), ('OWNED_BY_ENCLOSING_CLASS', 1), ('this.dao.delete(originalEntities.get(1));\n', 1), ('CompletableEmpty();\n\n', 1), ('shouldGiveSpecifiedFieldsInformationOfVideo()', 1), ('MaybeFromRunnable(Runnable', 1), ('ListenableFutureTask}.\n', 1), ('(backpressureDoc', 1), ('Executor\n', 1), ('populateCache(enumClass);\n', 1), ('io.reactivex.plugins;\n\nimport', 1), ('specificFieldsDetails', 1), ('FlowableFlatMap<T,', 1), ('(!b.isEmpty())', 1), ('wildcards', 1), ('Single.never().hide());\n', 1), ('assertCanGenerateOnly(\n', 1), ('getStopped()', 1), ('getAvailableToppingEntities()', 1), ('advantages', 1), ('bibendum', 1), ('modes);\n', 1), ('MaybeAmb<T>(sources,', 1), ('generateStringReader()', 1), ('zipWith(SingleSource<U>', 1), ('"prefetch");\n\n', 1), ('ObservableConcatMapCompletableTest', 1), ('_.,()]*Single");\n', 1), ('TestingExecutors.noOpScheduledExecutor().schedule(task,', 1), ('checkArgument(size', 1), ('Object#equals(Object)}.\n', 1), ('ArbitraryInstances.get(WithPublicConstructorAndConstant.class)\n', 1), ('Singleton.</p>\n', 1), ('testRangeUnsubscribe()', 1), ('cancel</li>\n', 1), ('1-20', 1), ('evictedGroup;\n', 1), ('Backpressure:}', 1), ('0.001)', 1), ('(!once.get()', 1), ('BlockingHelper', 1), ('ByteProcessor<T>', 1), ('Document()).into(new', 1), ('rootDir.toPath(),\n', 1), ('testsForAbstractList()', 1), ('createFile(root.resolve("some.txt"));\n', 1), ('Object#equals', 1), ('CompletableFromSingleObserver<T>(s));\n', 1), ('LongStream#concat(LongStream,', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.map.png"', 1), ('com.iluwatar.throttling.CallsCount;\n\n/**\n', 1), ('ByteArrayInputStream(newPreFilledByteArray(start,', 1), ('current.read(cbuf,', 1), ('#onSubscribe(Disposable)},', 1), ('12.4.2</a>.\n', 1), ('MaybeDelayWithCompletable(MaybeSource<T>', 1), ('JIT', 1), ('NonFinalFieldIgnored()', 1), ('value");\n\n', 1), ('cakeBean.findAll().iterator();\n', 1), ('ObservableSingleMaybe<T>', 1), ('FileByteSinkFactory(@NullableDecl', 1), ('data.getMessage()));\n', 1), ('ReduceSubscriber<T>(observer,', 1), ('asyncResult5.await();\n\n', 1), ('fight', 1), ('ListMultimapAsMapTester<K,', 1), ('GiantView}', 1), ('(depth.get()', 1), ('testList()', 1), ('fromEntryList(Lists.newArrayList(entries.iterator()));\n', 1), ('java.util.function.Function},', 1), ('DistinctSubscriber(Subscriber<?', 1), ('Proin', 1), ('Reader)', 1), ('world")\n', 1), ('newArtificialTypeVariable(NativeTypeVariableEquals.class,', 1), ('customerId', 1), ('<li>Swaps', 1), ('MpscFillOnceSimpleQueue<Object>(n);\n', 1), ('assertTrue(throwable', 1), ('java.security.GeneralSecurityException;\nimport', 1), ('URL("file:///absolute/path/to/class/root"));\n\n', 1), ('copyOf(Iterable<?', 1), ('FileWriteMode.APPEND).write(from);\n', 1), ('getMainQueue()', 1), ('java.util.stream.Collectors;\nimport', 1), ('SchedulerMultiWorkerSupportTest', 1), ('SingleSource.\n', 1), ('FILE_SEPARATOR("file.separator"),\n\n', 1), ('ObservableConcatMapMaybeEmptyPerf', 1), ('UnsupportedOperationException("scheduleWithFixedDelay', 1), ('testFileTraverser_emptyDirectory()', 1), ('AmbInnerSubscriber<T>(this,', 1), ('Single[32];\n', 1), ('Pool)', 1), ('failSingleCompletableBlockingGet()', 1), ('U>(resourceSupplier,', 1), ('manySources()', 1), ('ClassLoader.\n', 1), ('studentDatabase)', 1), ('lazySet(FUSED_EMPTY);\n', 1), ('SingleTimeoutTest', 1), ('StringReader(generateString());\n', 1), ('getPutAllNullKeyUnsupportedMethod(),\n', 1), ('SingleFromUnsafeSource<T>', 1), ('notJar.delete();\n', 1), ('set.add(timer);\n\n', 1), ('nTasks;', 1), ('mo.onComplete();\n\n', 1), ('Cras', 1), ('SUPPORTS_ITERATOR_REMOVE,\n', 1), ('out.write(buffer,', 1), ('disposeEagerly}', 1), ('trees.\n', 1), ('testFileTraverser_file()', 1), ('singleCompletable2()', 1), ('mainErrorCompletable()', 1), ('lock.writeLock()));\n\n', 1), ('TimeIntervalObserver(Observer<?', 1), ('type.toString();\n', 1), ('maybeObserver;\n', 1), ('MaybeUnsafeCreate<T>', 1), ('ObjectHelper.requireNonNull(defaultItem,', 1), ('publishError(observer,', 1), ('setImplementation(ConcurrentNavigableMap.class,', 1), ('onCompleteDelayed()', 1), ('this.equivalence', 1), ('({@code\n', 1), ('errs.doOnEach(sideEffectObserver);\n\n', 1), ('sum).toObservable().map(error);\n\n', 1), ('doEquivalent(T', 1), ('mainSuccessCompletable()', 1), ('parentBuilder,\n', 1), ('checkDoubleOnSubscribeObservableToMaybe(Function<Observable<T>,', 1), ('null}".\n', 1), ('tillTheEnd;\n\n', 1), ('Thread}', 1), ('otherSubscriber', 1), ('ListIteratorTester\n', 1), ('MessageData("message");\n', 1), ('V>>)', 1), ('RxJavaPlugins.initComputationScheduler(unsafeDefault);\n', 1), ('AbstractSet<E>', 1), ('"hello");\n', 1), ('scope', 1), ('assertEquals(errors.toString(),', 1), ('UnsubscribeSubscriber(Subscriber<?', 1), ('Multimaps.filterEntries(unfiltered,', 1), ('List<UserDto>', 1), ('(ZipMaybeObserver<?>', 1), ('"15.12.2015");\n', 1), ('Thread.currentThread().setContextClassLoader(loader);\n', 1), ('raised', 1), ('connection.close();\n', 1), ('SERIALIZABLE_INCLUDING_VIEWS(SERIALIZABLE),\n\n', 1), ('OptionalInt.empty();\n', 1), ('checkNotNull(member);\n', 1), ('generateLongBuffer()', 1), ('ObservableConcatMapSingle<T,', 1), ('addMember(PartyMember', 1), ('BufferBoundarySupplierObserver(Observer<?', 1), ('java.nio.file.Files#newBufferedWriter(java.nio.file.Path,', 1), ('delegate,', 1), ('selections', 1), ('Observable.just(1).throttleFirst(100,', 1), ('Single.just(100)\n', 1), ('dq)', 1), ('Making', 1), ('shouldDeleteCustomer()', 1), ('methodThrowingException()', 1), ('DisposableSubscriber<V>', 1), ('SwitchMapInnerObserver(SwitchMapObserver<T,', 1), ('FlowableTimeInterval<T>', 1), ('OnErrorNotImplementedException(String', 1), ('ArrayDeque<Object>()));\n', 1), ('FlowableFromFuture<T>', 1), ('Maps.keyOrNull(floorEntry(key));\n', 1), ('getListIteratorFullyModifiableMethod(),\n', 1), ('filtered.addTest(test);\n', 1), ('AsyncProcessor<T>();\n', 1), ('lowerBounds.equals(Arrays.asList(that.getLowerBounds()))\n', 1), ('.put(Splitter.class,', 1), ('futureMaybe.doOnCancel(()', 1), ('factory.apply(1).getId());\n', 1), ('finish,', 1), ('current.skip(n);\n', 1), ('normalDelayError()', 1), ('fail(b.toString());\n', 1), ('BaseEncoding.base64());\n', 1), ('EnumSerializedForm<>(delegate);\n', 1), ('valueComparator()', 1), ('readerMutex', 1), ('Observable<Upstream>', 1), ('WeakReference<Enum<?>>(enumInstance));\n', 1), ('@SuppressWarnings("deprecation")\n', 1), ('numElements)', 1), ('testGet_primitives()', 1), ('testLinkedHashSet()', 1), ('InterruptedIOException()));\n\n', 1), ('BlockingGetPerf', 1), ('ts*}</li>\n', 1), ('testTreeMultiset()', 1), ('this.crashDispose', 1), ('hasPrevious()', 1), ('FlowableDoOnSubscribeTest', 1), ('473971317683868662L;\n\n', 1), ('upperBound', 1), ('Disposable>()', 1), ('contract.', 1), ('finalizerCopy', 1), ('m.methodLine', 1), ('sizes', 1), ('fromPublisher(toFlowable().repeatUntil(stop));\n', 1), ('tickets;\n', 1), ('Random().ints(min,', 1), ('isEqual\n', 1), ('DO_NOTHING', 1), ('ConcatMapSingleMainObserver(Observer<?', 1), ('OpenJdk6SetTests', 1), ('concatArray(MaybeSource<?', 1), ('ScalarDisposable<R>(s,', 1), ('BlockingObservableNext(ObservableSource<T>', 1), ('TimedTest', 1), ('.doOnDispose(unsubscribeAction)\n', 1), ('iterates.\n', 1), ('delivers\n', 1), ('FlowableZipIterable(\n', 1), ('height="450"', 1), ('customerResource.getAllCustomers();\n\n', 1), ('dateList;\n', 1), ('Helpers.assertEmpty(map);\n\n', 1), ('testImmutableMultiset()', 1), ('(baseIndex', 1), ('handler.caught.printStackTrace();\n', 1), ('propagate(@NonNull', 1), ('bottomShelf;\n\n', 1), ('testFileTraverser_nonExistingFile()', 1), ('DisposableSingleObserver&lt;Integer&gt;()', 1), ('checkFlowableScheduler()', 1), ('pp1.singleElement()))\n', 1), ('returnSuccess()', 1), ('DROP,\n', 1), ('accept,', 1), ('"scheduleCallable";\n', 1), ('promiseUsage()', 1), ('WARRIOR,', 1), ('directories.\n', 1), ('t5)', 1), ('Pattern.compile(pattern);\n\n', 1), ('assertEquals(5000,', 1), ('assertFalse(in.markSupported());\n', 1), ('left]\n', 1), ('systemNanoTime()', 1), ('pluginCrash()', 1), ('FRQ', 1), ('IO})\n', 1), ('(this.output', 1), ('ObservableConcatWithSingle<T>', 1), ('restricted', 1), ('#hasThrowable()},', 1), ('onCallback.accept(value,', 1), ('SubscriptionHelper.cancel(this);\n\n', 1), ('purpose.\n', 1), ('AbstractBiMap<K,', 1), ('update);\n', 1), ('.assertResult(1L);\n', 1), ('of(E...', 1), ('result.setValue(task.call());\n', 1), ('testGetClassPathFromManifest_emptyClassPath()', 1), ('ON_COMPLETE;\n', 1), ('""));\n\n', 1), ('DoOnEachConditionalSubscriber(\n', 1), ('Charset.forName("UTF-8");\n\n', 1), ('builds', 1), ('TypeToken.class,\n', 1), ('getString()', 1), ('TestException("cancel()");\n', 1), ('runtime\n', 1), ('download', 1), ('testDisplay(String', 1), ('apply(List', 1), ('assertEquals(42,', 1), ('assertEquals("CHEETO",', 1), ('java.util.concurrent.locks.Lock;\n\n/**', 1), ('disposePropagates()', 1), ('.filter(Functions.alwaysTrue()));\n', 1), ('words",', 1), ('Byte', 1), ('flatMapSingleElement(final', 1), ('"x";\n', 1), ('resourceDisposer;\n\n', 1), ('(boolean):', 1), ('wisdom"));\n', 1), ('ofClassAndContents(\n', 1), ('annotationClass.getAnnotation(Inherited.class));\n\n', 1), ('t1.hashCode());\n\n', 1), ('registered\n', 1), ('Publisher<Downstream>', 1), ('found:");\n\n', 1), ('com.google.common.io.SourceSinkFactory.CharSourceFactory;\n\nimport', 1), ('TestSuite(MapTestSuiteBuilderTests.class.getSimpleName());\n', 1), ('reset();\n', 1), ('incidentEdgeMap).values());\n', 1), ('cancel(AtomicReference<Subscription>', 1), ('TimeoutException.\n', 1), ('NullPointerException("Publisher', 1), ('appClient.start();\n', 1), ('assertNull(ara.get(16));\n', 1), ('Integer.class,\n', 1), ('inputs', 1), ('LinkedHashSet<>();\n', 1), ('.expectCollects(3,', 1), ('JAVA_CLASS_PATH("java.class.path"),\n\n', 1), ('V>(orderPreservingCopy);\n', 1), ('spell.setSpellbook(this);\n', 1), ('System.out.println("JDK', 1), ('human', 1), ('0).blockingIterable().iterator().hasNext());\n', 1), ('.put(SortedMultiset.class,', 1), ('lit.previous().intValue());\n', 1), ('flowableCreate()', 1), ('18:55', 1), ('com.google.common.base.Supplier}', 1), ('otherObserver', 1), ('NewThreadScheduler();\n', 1), ('visitor);\n\n', 1), ('isFinal()', 1), ('b.append(line).append("\\n");\n', 1), ('Assert.assertTrue(exceptions.get(0)', 1), ('DoubleBuffer.allocate(generateInt());\n', 1), ('"Resources.asByteSource[URL]",', 1), ('this.decoratedRun', 1), ('property.value());\n', 1), ('suppressForConcurrentSkipListSetNatural()', 1), ('serverPort', 1), ('calculateTotalCalories()', 1), ('testClassPathEntries_URLClassLoader_pathWithSpace()', 1), ('Exception;', 1), ('MaybeHide<T>(this));\n', 1), ('sourceCount;\n', 1), ('ConcatMapMaybeTckTest', 1), ('AssertionError("Default', 1), ('RegularImmutableSet<E>(delegate);\n', 1), ('e5', 1), ('File("/usr/test/dep.jar").toURI(),\n', 1), ('Heymann\n', 1), ('remoteAddress;\n\n', 1), ('rejectObservableFusion()', 1), ('f.map(new', 1), ('EQUALS', 1), ('ObjectHelper.requireNonNull(operator.apply(s),', 1), ('command.run();\n', 1), ('RxJavaPlugins.onAssembly((Maybe<T>)MaybeNever.INSTANCE);\n', 1), ('org.bson.Document;\n\nimport', 1), ('Lists.newLinkedList();\n\n', 1), ('testedPrototype);\n', 1), ('futureResult4.get();\n', 1), ('Specification\n', 1), ('Nullam', 1), ('cachedEntrySet;\n', 1), ('base.doOnNext(new', 1), ('"Second").single("");\n', 1), ('checkDisposedCompletable(Function<Completable,', 1), ('subject.test()\n', 1), ('.repeatUntil(new', 1), ('f.subscribe(consumer);\n', 1), ('PublishSubject()', 1), ('temp.add(f.getDeclaringClass().getSimpleName()', 1), ('ArbitraryInstances.get(Byte.class));\n', 1), ('HashMap.class,\n', 1), ('"Dan",', 1), ('stat', 1), ('getById(final', 1), ('(unaligned)\n', 1), ('assertThat(Resources.toString(resource,', 1), ('onRequest', 1), ('executorService.awaitTermination(4,', 1), ('timeout)', 1), ('<p>Due', 1), ('failComputationFlowableBlockingFirst()', 1), ('JAVA8.usedInGenericType(type);\n', 1), ('FutureObserver<Integer>();\n', 1), ('Sergeant());\n', 1), ('RxJavaPlugins.setOnMaybeSubscribe(new', 1), ('B>()', 1), ('com.google.common.collect.FluentIterable.\n', 1), ('takeEmpty()', 1), ('Modifier.PUBLIC)', 1), ('list.add("a");\n', 1), ('unsubscribingWithSingleUnderlyingUnsubscribes()', 1), ('List<Task>', 1), ('delete");\n', 1), ('CancellableDisposable(Cancellable', 1), ('SubscribeOnObserver<T>(s);\n\n', 1), ('stopLatch;\n\n', 1), ('splitrA.characteristics()\n', 1), ('menuActions.stream().map(MenuAction::getMenuItem).filter(MenuItem.COMPANY::equals).count());\n\n', 1), ('Thread.sleep(100);\n\n', 1), ('subject.ignoreElements()\n', 1), ('newThread().start();\n', 1), ('ops', 1), ('failComputationObservableBlockingFirst()', 1), ('org.junit.jupiter.api.Assertions;\nimport', 1), ('receiver;\n\n', 1), ('subscriber.onNext(2);\n', 1), ('stream.collect(MoreCollectors.onlyElement());\n', 1), ('PathCharSourceFactory', 1), ('FlowableReduce<T>(source,', 1), ('TestHelper.checkDisposed(PublishProcessor.create().elementAt(0).toFlowable());\n', 1), ('io.reactivex.internal.fuseable.HasUpstreamPublisher;\n\npublic', 1), ('Document})', 1), ('io.reactivex.flowable.FlowableCovarianceTest.*;\nimport', 1), ('injector;\n', 1), ('flag)', 1), ('CompactHashSet', 1), ('tearDown;\n\n', 1), ('java.util.Comparator.naturalOrder;\n\nimport', 1), ('(NativeTypeVariableEquals.NATIVE_TYPE_VARIABLE_ONLY)', 1), ('beganProducing.countDown();\n', 1), ('ArrayListSupplier', 1), ('admin', 1), ('Functions.justFunction(Single.never()));\n', 1), ('started");\n\n', 1), ('(resultSet', 1), ('generics:', 1), ('accounts.put(destinationBankAccount,', 1), ('Flowable.concat(Flowable.just(\n', 1), ('"Single",', 1), ('maybeStart()', 1), ('act(PartyMember', 1), ('samples.e2(),', 1), ('encounter', 1), ('BASE64(BaseEncoding.base64()),\n', 1), ('"stop', 1), ('assertFalse(((Disposable)w).isDisposed());\n\n', 1), ('QueuesTest', 1), ('Single.zip(Arrays.asList(Single.error(new', 1), ('withFeatures(Feature<?>...', 1), ('adequate', 1), ('ObjectHelper.requireNonNull(onCallback,', 1), ('OrcWarlord("laser"),', 1), ("op's", 1), ('7:00', 1), ('unmodified.', 1), ('(MpscLinkedQueue<Object>)queue;\n', 1), ('assertNotNull(ArbitraryInstances.get(Locale.class));\n', 1), ('CrashingIterator(crashOnHasNext,', 1), ('ObservableTakeUntilPredicate(ObservableSource<T>', 1), ('SingleConcatPublisherTest', 1), ('dispose)', 1), ('CakeBakingException', 1), ('rangeObservableFlatMapJust;\n\n', 1), ('CollectorTester.of(Collectors.summingInt(Integer::parseInt))\n', 1), ('testCancelledBeforeSubscribe()', 1), ('DISPOSED.dispose();\n', 1), ('vestibulum', 1), ('toFunction7()', 1), ('serializable;', 1), ('Long(generateLong());\n', 1), ('Integer>[]', 1), ('ForwardingMap<Class<?', 1), ('v.add(t);\n', 1), ('TestSingle<Integer>();\n', 1), ('rmo.value);\n', 1), ('ObservableQueueDrain<T,', 1), ('obsSingle;\n\n', 1), ("'plant'", 1), ('acquireForReaders",', 1), ('WindowOperation(UnicastSubject<T>', 1), ('Functions.justFunction(Flowable.fromIterable(iterate(elements))),\n', 1), ('System.out.println("Won\'t', 1), ('AccountAggregate', 1), ('ViewTest', 1), ('ParallelFlowableConverter<T,', 1), ('dirs.offer(parent);\n//', 1), ('assertTrue(bq.isCancelled());\n\n', 1), ('CCE', 1), ('ImmediateThinWorker();\n\n', 1), ('createIdentityProcessor(int', 1), ('FluentFuture}.\n', 1), ('issue:', 1), ('Single<ArrayList<Integer>>>()', 1), ('com.google.common.collect.ImmutableMap}.', 1), ('occurred,', 1), ('index++;\n', 1), ('.put(Pattern.class,', 1), ('JdkPatternCompiler', 1), ('scheduler.schedulePeriodicallyDirect(\n', 1), ('blockingSubscribeObserver()', 1), ('Completable.fromSingle(Single.just(1))\n', 1), ('cakeInfo.cakeLayerInfos)', 1), ('delegate.subMap(checkValid(fromKey),', 1), ('ObservableEventStream()', 1), ('others)', 1), ('MaybeSwitchIfEmpty<T>', 1), ('MoreFiles.asCharSource(file,', 1), ('NullByteSink();\n\n', 1), ('port)', 1), ('concatArray(CompletableSource...', 1), ('CSS,', 1), ('java.nio.charset.CharsetEncoder;\n\n/**\n', 1), ('stream.writeObject(keyType);\n', 1), ('assertEquals("Local",', 1), ('MapNotificationSubscriber(Subscriber<?', 1), ('FreshValueGeneratorTest', 1), ('LambdaSubscriber(Consumer<?', 1), ('SingleZipArrayTest', 1), ('java.util.EnumMap}.\n', 1), ('testGet_constantWithGenericsNotUsed()', 1), ('BurstSubscription(subscriber));\n\n', 1), ('Buffer.class,\n', 1), ('assertFalse(up.hasSubscribers());\n', 1), ('interruptWait()', 1), ('"A.B.1",', 1), ('LastObserver<T>', 1), ('"Mapper");\n', 1), ('ObservableAllSingle(ObservableSource<T>', 1), ('setImplementation(ConcurrentMap.class,', 1), ('com.google.common.hash.HashFunction;\nimport', 1), ('observeOn\n', 1), ('scan(Maybe.class);\n', 1), ('generateUnsignedLong()', 1), ('RxJavaPlugins.setInitNewThreadSchedulerHandler(initReplaceWithImmediate);\n\n', 1), ('AssertionError(b.toString());\n', 1), ('TestSortedSetGenerator\n', 1), ('"poodlE")).isAbsent();\n', 1), ('firstIgnoredCancelAndOnError()', 1), ('.expectCollects(Arrays.asList(1,', 1), ('tasks.remove().run();\n', 1), ('suppliers', 1), ('JavadocWording', 1), ('FlowableSubscriber<List<T>>', 1), ('result.size());\n', 1), ('(oldTypeIterator.hasNext())', 1), ('onErrorNoSubscribeCrash()', 1), ('Interrupter', 1), ('Completable.timer(1,', 1), ('BaseTck<T>', 1), ('array[--i];\n', 1), ('disallowPrimitiveType(Type[]', 1), ('FlowableDoFinally(Flowable<T>', 1), ('asyncReloader.load(new', 1), ('com.iluwatar.flux.view.View;\n\n/**\n', 1), ('it.onComplete();\n', 1), ('assertFalse(w.isDisposed());\n\n', 1), ('Collections#singletonMap(Object,', 1), ('Collections.unmodifiableList(Arrays.asList(files));\n', 1), ('environments', 1), ('http://stackoverflow.com/a/32955708/61158\n', 1), ('toSingle(toFlowable().retry(times,', 1), ('}).named("CompactHashSet")\n', 1), ('AssertionError("Unreachable");\n', 1), ('CompoundOrdering(Comparator<?', 1), ('times(1)).accept(Integer.valueOf(3));\n', 1), ('com.google.common.collect.testing.testers.ListListIteratorTester.getListIteratorFullyModifiableMethod;\nimport', 1), ('23.0\n', 1), ('.put(LongBuffer.class,', 1), ('createSymbolicLink(left.resolve("sibling"),', 1), ('here");\n', 1), ('testToString(Supplier<PartyMember>', 1), ("'e',", 1), ('InnerObserver<T>', 1), ('SingleToFlowable<T>(sit.next());\n', 1), ('.thenAccept(new', 1), ('executor.startProcess(lazyval("test",', 1), ('tail;\n', 1), ('Observer\n//', 1), ('ToFlowableIterable<T>(sources);\n', 1), ('ConnectableObservable<T>', 1), ('Ticker()', 1), ('LOGGER.warn("Interrupted!",', 1), ('publishProcessorAsPs()', 1), ('ts.assertFailure(CompositeException.class);\n\n', 1), ('verifyNoMoreInteractions(underlying);\n', 1), ('SingleTimeout<T>', 1), ('assertTrue(result.equals(expected));\n', 1), ('DoAfterObserver(SingleObserver<?', 1), ('addAll(int', 1), ('SortedJoinSubscription(Subscriber<?', 1), ('capPoolSize()', 1), ('encoding)', 1), ('ImmutableSet.<E>of(first);\n', 1), ('-4101336210206799084L;\n\n', 1), ('super(3);\n', 1), ('Completable.concat(Arrays.asList(Completable.complete()\n', 1), ('onDrop.accept(t);\n', 1), ('using(TestCollectionGenerator<E>', 1), ('Unit>', 1), ('URL("file:///c:/Documents%20and%20Settings/")))\n', 1), ('LNAME', 1), ('FileWriteMode.APPEND).write(from)}.', 1), ('ClassPathTest', 1), ('assertFalse(SubscriptionHelper.setOnce(ref,', 1), ('href="http://reactivex.io/documentation/operators/defaultifempty.html">ReactiveX', 1), ('ImmutableEnumMap<>(delegate);\n', 1), ('getComponentType(Type', 1), ('result.getInteger("seq");\n', 1), ('javax.persistence.OneToOne;\n\n/**\n', 1), ('CakeLayer(layerInfo.name,', 1), ('(IllegalStateException', 1), ('cn);\n\n', 1), ('installation', 1), ('Annotation', 1), ('Customer(4,', 1), ('"-"', 1), ('observers.delete(observer);\n', 1), ('CURRENT;\n\n', 1), ('input.observable;\n', 1), ('ArrayDeque<>(Arrays.asList(errors));\n', 1), ('requested.add(n);\n//', 1), ('ObservableSwitchMap(ObservableSource<T>', 1), ('MockReference(frq', 1), ('SchedulerWorkerTest', 1), ('openComplete(BufferOpenSubscriber<Open>', 1), ('(NoSuchFieldException', 1), ('InnerQueuedSubscriber<T>\nextends', 1), ('times(1)).accept(Integer.valueOf(1));\n', 1), ('f0);\n', 1), ('verifyThread(Schedulers.computation(),', 1), ('ParallelFlowable<Upstream>', 1), ('(indexInTail', 1), ('delayErrorIterableCancel()', 1), ('spliterators', 1), ('object</a>', 1), ('Suspension', 1), ('LazyFluentIterable<T>()', 1), ('readKey.attach(key.attachment());\n', 1), ('add(InnerCompletableCache', 1), ('delaySubscription(Observable.timer(time,', 1), ('1-based.\n', 1), ('continues', 1), ('super.fulfillExceptionally(exception);\n', 1), ('threadToInterrupt)', 1), ('subtypeOfComponentType(Type[]', 1), ('o.elementAt(0).toFlowable();\n', 1), ('PathCharSourceFactory();\n', 1), ('restrictions</i>.\n', 1), ('12)));\n\n', 1), ('tenantCallsCount.put(e.getKey(),', 1), ('Arrays.asList(child1,', 1), ('(!f.getName().endsWith(".java"))', 1), ('be.\n', 1), ('ObservableFlatMapCompletable<T>', 1), ('CatapultCommand(),', 1), ('super.backingMap();\n', 1), ('assertEquals("THE', 1), ('POISON:\n', 1), ('(!methods2.contains(m.getName())', 1), ('urlString,', 1), ('(Issue', 1), ('accum.put("instance",', 1), ('VolatileSizeArrayList(int', 1), ('checkValid(T', 1), ('OK:', 1), ('ParallelFilter<T>', 1), ('UdpLoggingClient', 1), ('keySet())', 1), ('files.poll())', 1), ('"Baz",\n', 1), ('checkNotNull(outEdgeToNode);\n', 1), ('E>(this,', 1), ('Nazgul(NazgulName.DWAR));\n', 1), ('fromFuture(final', 1), ('active.isDone();\n\n', 1), ('CreateEmitter<T>\n', 1), ('assertFalse(set.remove(run));\n', 1), ('ImmutableSortedSet.of(freshElement);\n', 1), ('delegateFuture', 1), ('testClassPathEntries_URLClassLoader_pathWithEscapedSpace()', 1), ('CollectorTester.of(Comparators.<Integer>greatest(2,', 1), ('"";\n}\n', 1), ('RxCustomThread(Runnable', 1), ('globalMutex.isEmpty();\n', 1), ('FutureDisposableTest', 1), ('virtual', 1), ('SampleTimedNoLast(Observer<?', 1), ('result2', 1), ('tolerant', 1), ('6285096158319517837L;\n\n', 1), ('calories\n', 1), ('//NTLNTL.', 1), ('msg;\n', 1), ('DoOnNextTckTest', 1), ('CharMatcher.none())\n', 1), ('logger.warning("Unable', 1), ('sa.missedProduced.set(2);\n\n', 1), ('").append(JavaVersion.CURRENT.typeName(upperBound));\n', 1), ('}.reduce(new', 1), ('System.err.println(b);\n', 1), ('DecoupledClassLoader(URL[]', 1), ('-4361286194466301354L;\n\n', 1), ('mo.dispose();\n\n', 1), ('assertEquals(stop,', 1), ('handlers\n', 1), ('biConsumerIsDisposedOnError()', 1), ('SwitchMapMaybeMainObserver<?,', 1), ('that)', 1), ('exceptionList;\n', 1), ('BlockingFlowableLatestTest', 1), ('Single-like', 1), ('List<Royalty>', 1), ('CollectSpliterators.map(\n', 1), ('Class.forName(TestEnum.class.getName(),', 1), ('com.google.common.collect.testing.testers.ListSubListTester.getSubListSubListRemoveAffectsOriginalLargeListMethod;\nimport', 1), ('RxJavaPlugins.onObservableError(ex));\n//\n//', 1), ('deletedStudents)', 1), ('type.");\n', 1), ('jvmDefault', 1), ('testThreadDeathIsThrown()', 1), ('Commander());\n', 1), ('TreeBasedTable.create();\n', 1), ('parallel,', 1), ('BlockingIgnoringReceiver()', 1), ('bounded1()', 1), ('(AnEnum)', 1), ('b.append("\\r\\n").append(n);\n', 1), ('ListenableFutureTester(ListenableFuture<?>', 1), ('verify\n', 1), ('throttled.\n', 1), ('blockingFirstDoubleOnSubscribe()', 1), ('Assert.assertFalse(unsubscribed.get());\n', 1), ('equivalence);\n', 1), ('absent().\n', 1), ('Mirrors', 1), ('User(userDto.getFirstName(),', 1), ('value.add(t);\n', 1), ('filters.\n', 1), ('register\n', 1), ('(key.isWritable())', 1), ('FlowableConcatMapCompletablePerf', 1), ('spellbooks;\n\n', 1), ('#rowKeySet}', 1), ('peer.\n', 1), ('drainMissedRequestedMoreProduced()', 1), ('ObservableCreate<T>', 1), ('<p>Promises', 1), ('assertFalse(PublishProcessor.create().ignoreElements().blockingAwait(100,', 1), ('PartyMember>', 1), ('RuntimeExceptions\n', 1), ('addItem(Item', 1), ('progress.', 1), ('SingleFromCallable<T>(callable));\n', 1), ('gaining', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.error.png"', 1), ('Flowable.merge(input.observables).subscribe(o);\n', 1), ('inEdgeMap).values());\n', 1), ('assertTrue(rso.errors.isEmpty());\n', 1), ('"director");\n', 1), ('"completionValue', 1), ('name.split("\\\\$");\n', 1), ('BlockingObservableIterator<T>', 1), ('permitted,', 1), ('parent.subscribe(first,', 1), ('getStudents()', 1), ('deprecated,', 1), ('(constant', 1), ('added.\n', 1), ('testWaitingForeverForPromiseToBeFulfilled()', 1), ('JFrame', 1), ('Integer.compare.\n', 1), ('com.google.common.util.concurrent.Uninterruptibles.awaitUninterruptibly;\n\nimport', 1), ('WithLatestInnerSubscriber[n];\n', 1), ('LinkedArrayList', 1), ('Thread(r);\n', 1), ('height="447"', 1), ('(ZipSingleObserver<?>', 1), ('gotten', 1), ('Schedulers#computation()', 1), ('href="http://java-design-patterns.com/patterns/guarded-suspension/">http://java-design-patterns.com/patterns/guarded-suspension/</a>\n', 1), ('assertNull(task.call());\n\n', 1), ('testLinkedHashMultiset()', 1), ('Flowable.empty().delay(100,', 1), ('sources.subscribe(new', 1), ('BaseTypeParser.parse(MaybeNo2Dot0Since.findSource("Observable"),', 1), ('../', 1), ('pickInstance(Arrays.asList(instances),', 1), ('params.size();', 1), ('endDay()', 1), ('resubscribing.\n', 1), ('K>newHashMapWithExpectedSize(keyType.getEnumConstants().length));\n', 1), ('Single.fromPublisher(new', 1), ('Single.just(1).repeat().take(5)\n', 1), ('this.attempts', 1), ('addCancel(AtomicLong', 1), ('ShortBuffer.allocate(0))\n', 1), ('.onError(\n', 1), ('Callable<V>', 1), ('failComputationFlowableBlockingSingle()', 1), ('assertTrue(cause.getExceptions().get(0)', 1), ('list.containsAll(c);\n', 1), ('newDir(String', 1), ('tasks.removeFirst().run();\n', 1), ('r0', 1), ('PathByteSinkFactory(null);\n', 1), ('testAsMapRemoveImplementsSortedSet()', 1), ('Fatal', 1), ('Experimental', 1), ('testRuntimeException_doesNotStopExecution()', 1), ('(!d.fusionMode)', 1), ('time");\n', 1), ('ObjectHelper.requireNonNull(singleSupplier.call(),', 1), ('ResourceInfo("right/another.txt",', 1), ('this.dao.persist(this.factory.apply(entityName));\n', 1), ('TestHelper.checkDoubleOnSubscribeFlowableToObservable(new', 1), ('java.util.Optional},', 1), ('MaybeOnErrorReturn<T>(this,', 1), ('subj.onSuccess(1);\n', 1), ('DefaultTableModel(new', 1), ('ObservableReduceMaybe<T>', 1), ('BAR\n', 1), ('java.nio.file.Files.createTempDirectory;\nimport', 1), ('bimap.', 1), ('pickInstance(Locale.getAvailableLocales(),', 1), ('service,', 1), ('testCase.getName());\n', 1), ('<br>Instance', 1), ('TypeToken<Set<String>>()', 1), ('REMOVE_OPERATIONS(CollectionFeature.REMOVE_OPERATIONS,', 1), ('fullPath.toURI().toURL();\n', 1), ('BasicQueueSubscription<T>', 1), ('desired:\n', 1), ('periodicDirectThrows()', 1), ('ss.onError(null);\n', 1), ('DisposableSingleObserver&lt;&gt;()', 1), ('ObjectInputStream(fileIn))', 1), ('(Future<int[]>', 1), ('StudentRepository(Map<String,', 1), ('getHeader(Headers', 1), ('hint")', 1), ('o.onSubscribe(Disposables.empty());\n\n', 1), ('patch.\n', 1), ('Executors()', 1), ('testNoOpScheduledExecutorShutdown()', 1), ('Document("seq",', 1), ('fetchCounters().catching(FetchException.class,', 1), ('read;\n', 1), ('missingFeatures.removeAll(features);\n', 1), ('RxJavaPlugins.setInit(scheduler', 1), ('assertTrue(o.isDisposed());\n\n', 1), ('TestDisposableSubscriber<T>', 1), ('"lazily".\n', 1), ('LoggerFactory.getLogger(Utility.class);\n\n', 1), ('subscribedObserver;\n', 1), ('.suppressing(suppressForLinkedBlockingQueue())\n', 1), ('failing\n', 1), ('valueSelector', 1), ('ArbitraryInstances.get(SortedSet.class));\n', 1), ('Disposables.fromFuture(ft);\n', 1), ('checkEnum(Class<E>', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/timeout.1.png"', 1), ('Optional.empty}.\n', 1), ('delegate().awaitUninterruptibly();\n', 1), ('finder.scan(JarFileFinder.class.getClassLoader());\n', 1), ('assertThat(result).isPresent();\n', 1), ('generateImmutableSetMultimap(K', 1), ('workDone.add(msg);\n', 1), ('org.junit.jupiter.api.Assertions.assertTrue;\n\nimport', 1), ('in.read(b,', 1), ('s.onSubscribe(EmptyComponent.INSTANCE);\n', 1), ('WildcardType,', 1), ('.assertResult("12345");\n', 1), ('list(String', 1), ('ConcurrentMap}.\n', 1), ('addsAndRemoves(int', 1), ('performed\n', 1), ('accessibleObject;\n', 1), ('Limits', 1), ('accept(TestObserver<Void>', 1), ('VirtualMachineError)', 1), ('com.gargoylesoftware.htmlunit.html.HtmlAnchor;\nimport', 1), ('libraryFunctionActingOnMovieObservables(Observable<Movie>', 1), ('UID\n', 1), ('asyncResult2', 1), ('instance2', 1), ('ObservableDoFinally(ObservableSource<T>', 1), ('io.reactivex.exceptions.CompositeException;\n\n/**\n', 1), ('generateLinkedList(E', 1), ('(cls.isArray())', 1), ('cachedService.getName(),', 1), ('domainapp.fixture.modules.simple.SimpleObjectCreate;\nimport', 1), ('onNextMapper,', 1), ('Iterators.unmodifiableIterator(delegate.keySet().iterator());\n', 1), ('s.onNext(value);\n', 1), ('listFiles()', 1), ('href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6570575">Sun', 1), ('NioDatagramChannel', 1), ('RESTRICTS_ELEMENTS,\n\n', 1), ('suite.addTest(testsForArraysAsList());\n', 1), ('chars', 1), ('paths', 1), ('ResumeMainSingleObserver<T>', 1), ('barrierTask', 1), ('SpscLinkedArrayQueue<R>(Flowable.bufferSize());\n', 1), ('<i>usually</i>', 1), ('blockingForEachThrows()', 1), ('RxJavaPlugins.setOnCompletableAssembly(completable2completable);\n', 1), ('SetMultimap#replaceValues}.\n', 1), ('m.javadocLine', 1), ('yet");\n', 1), ('factory.createSink().asCharSink(Charsets.UTF_8);\n', 1), ('webClient)', 1), ('#748)</a>\n', 1), ('stream.findFirst();\n', 1), ('ObservableWindowBoundarySelector(\n', 1), ('TestHelper.checkDisposed(PublishSubject.create().ignoreElements().subscribeOn(new', 1), ('Basher', 1), ('ObjectHelper.requireNonNull(valueSupplier,', 1), ('32,', 1), ('2.13,', 1), ('SampleTimedEmitLast(Observer<?', 1), ('functor', 1), ('super.schedulePeriodicallyDirect(run,', 1), ('io.reactivex.subjects.PublishSubject;\n\n/**\n', 1), ('mark(int', 1), ('testFollowingFirstObservable()', 1), ('org.junit.jupiter.migrationsupport.rules.EnableRuleMigrationSupport;\nimport', 1), ('Fashion.', 1), ('class-under-test.\n', 1), ('LOGGER.info("File', 1), ('pickInstance(\n', 1), ('Flowable.just(1).throttleWithTimeout(100,', 1), ('delegate.add(checkNotNull(elements.next()));\n', 1), ('Functions.ON_ERROR_MISSING,\n', 1), ('assertFreshInstance(TypeToken.of(type),', 1), ('Map#forEach}.', 1), ('ImmutableList.<BlockingQueue<Object>>of(\n', 1), ('propertyName),\n', 1), ('queue.offer(command);\n', 1), ('InnerCompletableCache(s);\n', 1), ('PathByteSinkFactory(initialString.getBytes(Charsets.UTF_8));\n', 1), ('Single.timer(2,', 1), ('this.maybeSupplier', 1), ('csub.add(w3);\n', 1), ('administration.performLottery();\n\n', 1), ('System.out.println("subscribing");\n', 1), ('testInitialize()', 1), ('Assert.assertEquals(Arrays.asList(1L),', 1), ('bound)', 1), ('testHashMap()', 1), ('UNMODIFIABLE', 1), ('commitInsert()', 1), ('waits.', 1), ('Reader#read(char[],', 1), ('concatWith(SingleSource<?', 1), ('ReplayProcessorTimeBoundAsPublisherTckTest', 1), ('MaybeFromCompletable<T>(completableSource));\n', 1), ('empty}', 1), ('backingMap.put(key,', 1), ('drain', 1), ('DaoBaseImpl<E>>', 1), ('testError()', 1), ('mpscLinkedQueueBiOffer()', 1), ("Subscriber}'s", 1), ('overridable,', 1), ('replenishMain', 1), ('SequentialDisposable(first);\n\n', 1), ('.subscribeOn(Schedulers.io());\n\n', 1), ('"Please', 1), ('EventEmitter()', 1), ('loader)', 1), ('JarOutputStream(fileOut));\n', 1), ('Timed<?>', 1), ('OBSERVER_SUCCESS(onError);\n', 1), ('range.subscribe(new', 1), ('java.security.Permission;\nimport', 1), ('schema.\n', 1), ('el).findAny();\n', 1), ('Dummies.InMemoryPrintWriter.class);\n', 1), ('users)', 1), ('initialized.', 1), ('compute;\n\n', 1), ('io.reactivex.Flowable}-based', 1), ('testTrollActions()', 1), ('"main"', 1), ('WeakReference<>(frq.queue);\n\n', 1), ('io.reactivex.internal.schedulers.ExecutorScheduler.DelayedRunnable;\n\npublic', 1), ('MpscLinkedQueue<Integer>', 1), ('.expectCollects(5,', 1), ('C>[]', 1), ('Single.just(1).doFinally(null);\n', 1), ('timeGetWith0Timeout(long', 1), ('getSimpleObjects()', 1), ('WEAK_SET(weakSetValidator()),\n', 1), ('FlowableBufferBoundary(Flowable<T>', 1), ('java.util.AbstractList;\nimport', 1), ('DisposableHelperTest', 1), ('"ticketId").append("seq",', 1), ('gently', 1), ('(boundaryObserver.compareAndSet(null,', 1), ('section\\r\\n")\n', 1), ('withCompletableDoubleOnSubscribe()', 1), ('handles,', 1), ('oldPathSeparator', 1), ('root.toURI();\n', 1), ('href="http://code.google.com/webtoolkit/">Google', 1), ('list.add(record);\n', 1), ('ImmutableList.of(freshElement);\n', 1), ('.containsExactly(fullpath("base/with/relative/dir"));\n', 1), ('streamA.iterator();\n', 1), ('source.parallelism();\n\n', 1), ('OtherObserver(MaybeObserver<?', 1), ('UsingObserver(CompletableObserver', 1), ('get(key)', 1), ('UnitVisitor}', 1), ('java.nio.channels.SelectionKey;\n\n/**\n', 1), ('verifyThreadWasNotInterrupted()', 1), ('longer,', 1), ('ShortBuffer', 1), ('apply(Subscriber<?', 1), ('getSpellbooks()', 1), ('onCompleteSuccessWithUnsubscribeFailure()', 1), ('compose(@NonNull', 1), ('"collector', 1), ('line.contains("2.0")', 1), ('pretium', 1), ('-1776795561228106469L;\n\n', 1), ('checkSchedulerBadMethod(String', 1), ('testImmutableMap()', 1), ('FlowableOperator<Integer,', 1), ('John', 1), ('cast(entry.getKey(),', 1), ('discouraged\n', 1), ('fruit\n', 1), ('item));\n', 1), ('v2;\n\n', 1), ('DeferredScalarSubscriberTest', 1), ('lo;\n', 1), ('rnd', 1), ('visit*}', 1), ('interfaceType);\n', 1), ('empty;\n\n', 1), ('Flow</a>\n', 1), ('20000;\n', 1), ('assertNotSame(shadowTestEnum,', 1), ('statement.executeQuery();\n', 1), ('Integer>(ts)', 1), ('locks.add(striped.getAt(i));\n', 1), ('ex;\n\n', 1), ('8083,', 1), ('a.onError(error.get());\n', 1), ('location:', 1), ('Observable.<Integer>error(error).subscribe(tc);\n\n', 1), ('Enum<?>>', 1), ('ConnectableFlowable}.\n', 1), ('authors', 1), ('SubscriptionLambdaSubscriber<T>', 1), ('testsForHashMapNullValuesForbidden()', 1), ('type()', 1), ('getHeaders()', 1), ('suppression.', 1), ('partProperties.put(HasType.PROPERTY,', 1), ('CompletableSubject();\n', 1), ('ticketId', 1), ('Flowable.<String>error(error).single("");\n', 1), ('java.util.UUID;\nimport', 1), ('checkSingleScheduler()', 1), ('p.', 1), ('reactive-streams-jvm', 1), ('UnsubscribeObserver(Observer<?', 1), ('{"abc",', 1), ('sampleInstances', 1), ('multiset.remove(key,', 1), ('".lexicographical()";\n', 1), ('Serialization.writeMap(this,', 1), ('CompletableDoOnEvent(this,', 1), ('ByteSource.empty();\n', 1), ('ParallelFilter(ParallelFlowable<T>', 1), ('URLs.\n', 1), ('ObservableZipIterable(\n', 1), ('-5314538511045349925L;\n\n', 1), ('doOnTerminate(final', 1), ('expectedToString;\n\n', 1), ('Functions.justFunction(Completable.complete()))\n', 1), ('parameters.', 1), ('Optional.absent()})\n', 1), ('Supplier}', 1), ('log("Task', 1), ('DelayMaybeObserver<T>(observer,', 1), ('id);\n', 1), ('"FlowableReduceSeedSingle",\n', 1), ('specification.', 1), ('Keys', 1), ('NOPMD\n\n', 1), ('SubscriptionHelper.setOnce(upstream,', 1), ('tillTheEnd);\n', 1), ('rxThreadsAfter.removeAll(rxThreadsBefore);\n\n', 1), ('assertThat(multiset).containsExactly("a",', 1), ('ba4;\n', 1), ('LOGGER.debug("FileLoggerModule::prepare();");\n\n', 1), ('block.\n', 1), ('Events', 1), ('lock.', 1), ('this.dateValue', 1), ('ListFeature.SUPPORTS_REMOVE_WITH_INDEX,\n', 1), ('EmptyCharSourceFactory', 1), ('accept(int', 1), ('App\n', 1), ('assertEquals(ImmutableList.of(0,', 1), ('FlowableSwitchMapSingleTest', 1), ('decodingInputs[i]', 1), ('rangeAsync', 1), ('rxThreadsAfter,', 1), ('success.\n', 1), ('StoreLoad\n', 1), ("'.').replace('/',", 1), ('this.groups', 1), ('initiating', 1), ('.put(CharSource.class,', 1), ('names.size()));\n', 1), ('fusedFlatMapExecution()', 1), ('TimeoutException\n', 1), ('LinkageError}</li>\n', 1), ('Weapon', 1), ('assertEquals("First",', 1), ('named(String', 1), ('*/\n@GwtCompatible\nabstract', 1), ('constructor)', 1), ('switchIfEmpty(SingleSource<?', 1), ('NOPMD\n}\n', 1), ('car:");\n', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.flatMapCompletable.png"', 1), ('list.remove(0);\n', 1), ('SourceSinkFactories.urlCharSourceFactory(),\n', 1), ('com.iluwatar.event.sourcing.event.MoneyTransferEvent;\nimport', 1), ('common.reflect\n', 1), ('f.get(500,', 1), ('FlowableThrottleLastTests', 1), ('CollectionTestSuiteBuilder<E>().usingGenerator(generator);\n', 1), ('io.reactivex.internal.operators.flowable.FlowableInterval.IntervalSubscriber;\nimport', 1), ('ScanObserver(Observer<?', 1), ('ImmutableSortedSet.copyOf', 1), ('indexInTail;\n', 1), ('enumInstance', 1), ('delegate.shutdownNow();\n', 1), ('getPath()', 1), ('delegate.order(insertionOrder);\n', 1), ('(BackpressureHelper.add(requested,', 1), ('customComparatorThrows()', 1), ('thread-vise.\n', 1), ('latest[index];\n', 1), ('"\'(\';', 1), ('keys-to-values,', 1), ('onErrorWithoutOnSubscribe()', 1), ('io.reactivex.SingleTransformer;\nimport', 1), ('height="260"', 1), ('assertFalse(Observable.range(Integer.MIN_VALUE,', 1), ('Consumer<T>()', 1), ('atomically.', 1), ('toSingleDefault}', 1), ('!m.signature.contains("Flowable"))', 1), ('#mapWithIndex(LongStream,\n', 1), ('LexicographicalOrdering(Comparator<?', 1), ('ObservableConcatWithCompletable<T>', 1), ('ImmutableList.copyOf', 1), ('ObservableConcatMapMaybePerf', 1), ('governed', 1), ('onCompleteCall;\n\n', 1), ('(paramNumber', 1), ('assertNotNull(SingleInternalHelper.NoSuchElementCallable.valueOf("INSTANCE"));\n', 1), ('height="295"', 1), ('properties\n', 1), ('PotionFactory();\n\n', 1), ('actually\n', 1), ('result.add(cakeInfo);\n', 1), ('RegularImmutableSet.EMPTY;\n', 1), ('Streams.findLast(stream);\n', 1), ('Functions.<Throwable>emptyConsumer(),\n', 1), ('socket.receive(reply);\n', 1), ('operations:', 1), ('Random(0xdeadbeef));\n\n', 1), ('manifest("Class-Path:', 1), ('overrideable', 1), ('FlowableInterval(long', 1), ('verifyNonBlocking()', 1), ('RetentionPolicy.RUNTIME)\n@Documented\n@GwtCompatible\npublic', 1), ('DoOnSubscribeSingleObserver<T>(s,', 1), ('SingleDoAfterSuccess<T>', 1), ('testGetClassPathEntry()', 1), ('getEnumConstants(\n', 1), ('nextInner', 1), ('Locale.class,\n', 1), ('"Album', 1), ('IntervalTckTest', 1), ('Around', 1), ('paramString(Equivalence.class,', 1), ('setup();\n', 1), ('StopScanningException();\n', 1), ('BlockingBaseObserver()', 1), ('.assertResult("123456");\n', 1), ('Condition}.', 1), ('{})).isEmpty();\n', 1), ('Integer.parseInt(System.getProperty("mongo-port")));\n', 1), ('fromCallableError()', 1), ('8517344746016032542L;\n\n', 1), ('SingleError<T>(errorSupplier));\n', 1), ('TreeMap.class);\n', 1), ('w.schedule(action);\n', 1), ('dispatchAction(Action', 1), ('setWizards(Set<Wizard>', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.oo.png"', 1), ('onScheduleNewThread()', 1), ('assertEquals(expected.getClass(),', 1), ('DwarvenMineWorker.Action.WAKE_UP,', 1), ('simplistic', 1), ('distinctElements);\n', 1), ('TestHelper.checkDisposed(Flowable.just(Notification.createOnComplete()).dematerialize());\n', 1), ('properties.containsKey(PURGE_PERIOD_SECONDS_KEY))', 1), ('d3));\n\n', 1), ('LOGGER.info("(cache', 1), ('ObservableFlatMapMaybe(ObservableSource<T>', 1), ('onTerminate)', 1), ('f.getName();\n', 1), ('modes).asCharSink(charset);\n', 1), ('QueueSubscription<?>', 1), ('integerIntegerGroupedObservable)', 1), ('suppressedTests', 1), ('re-subscribed;', 1), ('Completable.amb(Arrays.asList(pp1.ignoreElements(),', 1), ('suite.",', 1), ('UncheckedThrowingFuture(Error', 1), ('Flowable.interval(0,', 1), ('!m.getName().contains("GenericScheduledExecutorService"))', 1), ('this.dao.delete(originalEntities.get(2));\n\n', 1), ('IT', 1), ('rco.onSubscribe(Disposables.empty());\n\n', 1), ('3).subscribe(new', 1), ('redoLastSpell()', 1), ('disposeDuringDelay()', 1), ('Java)', 1), ('checkArgument(!cls.isPrimitive(),', 1), ('badSourceDelayError()', 1), ('ticket.getPlayerDetails().getBankAccount());\n', 1), ('SingleOnErrorXTest', 1), ('w2.dispose();\n', 1), ('ADD:\n', 1), ('toArray(Collection<Type>', 1), ('javaUtilPredicate::test}.', 1), ('SimpleObjectsTearDown());\n\n', 1), ('(delayErrors', 1), ('com.google.common.collect.testing.features.CollectionFeature#KNOWN_ORDER},', 1), ('ArrayList<Flowable<Integer>>();\n', 1), ('toSingle()', 1), ('keySetGenerator)', 1), ('MergeWithMaybeEmptyTckTest', 1), ('RxJavaPlugins#setComputationSchedulerHandler(io.reactivex.functions.Function)}', 1), ('anything.', 1), ('failComputationObservableBlockingForEach()', 1), ('Currency.getInstance(Locale.US));\n', 1), ('SingleUnsubscribeOn<T>(this,', 1), ('3).subscribe(observer);\n\n', 1), ('classInfo(Test.class,', 1), ('possibleFoo.asSet())', 1), ('(tryEmitScalar(((Callable<?', 1), ('prefix)', 1), ('muteShouldRethrowUnexpectedExceptionAsAssertionError()', 1), ('ReplayProcessor.createWithTime(1,', 1), ('mostRecentSubscriber.getIterable();\n', 1), ('Function<List<T>,', 1), ('java.io.InputStreamReader;\n\n/**', 1), ('.append(".gt(")\n', 1), ('"src/perf/java")));\n//', 1), ('CompletableMergeDelayErrorArray(sources));\n', 1), ('feasible.\n', 1), ('ticketsCollection', 1), ('inDateValue)', 1), ('resumeDoubleOnSubscribe()', 1), ('Locale.US)\n', 1), ('Predicate<Exception>', 1), ('spValue(null);\n', 1), ('2).take(elements)\n', 1), ('java.lang.InterruptedException},', 1), ('localFuture.setException(exception);\n', 1), ('TestReader', 1), ('tasks;\n\n', 1), ('Martin', 1), ("javac's", 1), ('oneArray()', 1), ('strategy', 1), ('repeating', 1), ('IOException");\n', 1), ('overrideSingleScheduler()', 1), ('onCompleteCall;\n', 1), ('ObjectHelper.requireNonNull(sourceSupplier,', 1), ('ObservableFlatMapCompletable(ObservableSource<T>', 1), ('DwarvenTunnelDigger());\n', 1), ('RACE_DEFAULT_LOOPS', 1), ('"io.reactivex:computation";\n', 1), ('20.\n', 1), ('characterToFrequency.get(c)', 1), ('indexes[i];\n\n', 1), ('testGetClassPathFromManifest_relativeJar()', 1), ('1).result();\n', 1), ('fromArrayEmpty()', 1), ('Single.toMaybe()}', 1), ('howMany));\n', 1), ('next.shutdown();\n', 1), ('DONE))', 1), ('.toString();\n', 1), ('name}', 1), ('subscribers.poll())', 1), ('normalAsync()', 1), ('30,', 1), ('onNextNullDisposeCrashes()', 1), ('CompletablePeek(this,', 1), ('V>()', 1), ('pendingWrites.add(data);\n', 1), ('java.util.prefs.InvalidPreferencesFormatException;\nimport', 1), ('deprecated.', 1), ('FilterReader(new', 1), ('Preconditions.checkNotNull(other,', 1), ('leftIterable.iterator();\n', 1), ('clazz}', 1), ('io.reactivex.internal.disposables.EmptyDisposable;\n\n/**\n', 1), ('seedDisposed()', 1), ('jsonElement.toString();\n', 1), ('source.test()\n', 1), ('1)));\n', 1), ('Flowable.generate(Functions.justCallable(1),\n', 1), ('fromSingle()', 1), ('<code>handler</code>\n', 1), ('requestUpfront()', 1), ('FluentFuture.from(usersDatabase.getAdminUser())\n', 1), ('/[grandchild', 1), ('DelayWithMainObserver<T>', 1), ('mock(CompletableObserver.class);\n', 1), ('Single.<String>error(new', 1), ('java.util.concurrent.CancellationException;\n\nimport', 1), ('MaybeFlatMapCompletable<T>(this,', 1), ('Increment', 1), ('LotteryNumbers(givenNumbers);\n', 1), ('others);\n', 1), ('file.isFile();\n', 1), ('testRange()', 1), ('io.reactivex.MaybeSource;\n\n/**\n', 1), ('1000).onTerminateDetach().subscribe(ts);\n\n', 1), ('ScheduledDirectTask(Runnable', 1), ('closed;\n\n', 1), ('so.onNext(1);\n', 1), ('errorBackpressured()', 1), ('Observable.just(ps1,', 1), ("u.toString().replace('\\\\',", 1), ('otherEntriesInDataStructure))', 1), ('ObservableIgnoreElementsCompletable(ObservableSource<T>', 1), ('problem.', 1), ('w3.schedule(countAction);\n\n', 1), ('t[0]', 1), ('getClass().getResource("testdata/alice_in_wonderland.txt");\n', 1), ('submit(callable);\n', 1), ('Flowable#subscribe}', 1), ('throttler', 1), ('testCompletedFuture(@NullableDecl', 1), ('calculateLowestFrequencyChar()', 1), ('computeValue(Class<?>', 1), ('MeleeStrategy(),\n', 1), ('onComplete(Subscriber<?>', 1), ('MaybeDelayOtherPublisher(MaybeSource<T>', 1), ('termination",', 1), ('this.get(stat);\n', 1), ('stream.parallel().reduce((a,', 1), ('nameBuilder.append("\\r\\n");\n//', 1), ('InnerQueuedSubscriberSupport<R>', 1), ('"observableSource', 1), ('IoScheduler', 1), ('MaterializeSubscriber(Subscriber<?', 1), ('State(int', 1), ('t4);\n\n', 1), ('ObjectHelper.requireNonNull(supplier,', 1), ('identityFunctionToString()', 1), ('generateLinkedHashMultimap(K', 1), ('(!features.containsAll(requirements.getPresentFeatures()))', 1), ('temp.toString();\n', 1), ('(int)elements).replay((Function)Functions.identity())\n', 1), ('rxThreadsBefore.add(t);\n', 1), ('encodingStream', 1), ('com.google.common.collect.TreeTraverser;\nimport', 1), ('EnumSet.noneOf(AnEnum.class)\n', 1), ('AbstractDocument})', 1), ('FlatMapMaybeObserver<R>(this,', 1), ('User("John",', 1), ('ENTRIES_ARE_VIEWS;\n\n', 1), ('space', 1), ('beforeCancelSleep(BaseTestConsumer<?,', 1), ('ZipMaybeObserver(ZipCoordinator<T,', 1), ('-5502432239815349361L;\n\n', 1), ('interpret', 1), ('SampleElements<>(\n', 1), ('int[3];\n', 1), ('SimpleFileWriterTest', 1), ('directory",', 1), ('java.util.RandomAccess}.\n', 1), ('AbstractNioChannel#getInterestedOps()}\n', 1), ('incidentEdgeMap).inverse(),', 1), ('synchronous,', 1), ('WithLatestInnerObserver[n];\n', 1), ("Joiner.on('/').join(path);\n", 1), ('testAddSampleInstances_twoInstances()', 1), ('this.threadToInterrupt', 1), ('set.add(i);\n', 1), ('Answer<Object>()', 1), ('DwarvenMineWorker.Action.GO_TO_SLEEP);\n', 1), ('signatures.', 1), ('#ALLOWS_NULL_ENTRY_QUERIES\n', 1), ('unforeseen', 1), ('UnmodifiableListIterator<String>', 1), ('com.google.common.collect.AbstractIterator;\nimport', 1), ('producerLookAhead)', 1), ('(items.isEmpty())', 1), ('TestStringSortedSetGenerator', 1), (',', 1), ('AssertionError("The', 1), ('processor.onComplete();\n\n', 1), ('Domain', 1), ('callback);\n\n', 1), ('deferred.complete(v);\n', 1), ('Collections.addAll(tmp,', 1), ('(before', 1), ('ps.single(-99).subscribe(new', 1), ('testsForArraysAsList()', 1), ('wip.getAndIncrement();\n', 1), ('tryScalarXMapSubscribe(ObservableSource<T>', 1), ('assertEquals(Integer.valueOf(9),', 1), ('MergeSubscriber(Subscriber<?', 1), ('doubleComplete2()', 1), ('fillShelves()', 1), ('RxJavaPlugins.setScheduleHandler(runnable2runnable);\n', 1), ('resumeFunction}.\n', 1), ('FlowableIgnoreElementsCompletable(Flowable<T>', 1), ('QueueDisposable<T>()', 1), ('AllObserver(Observer<?', 1), ('resultSet.getString("FNAME"),', 1), ('DisposableSingleObserverTest', 1), ('pathname)', 1), ('FallbackObserver<T>', 1), ('manifestClasspath("current.jar");\n', 1), ('IgnoreElementsSubscriber<T>(t));\n', 1), ('itself;', 1), ('bimap.put(key,', 1), ('CompletableObserver}s\n', 1), ('ALLOWS_NULL_KEY_QUERIES,', 1), ('suite.addTest(testsForTreeSetWithComparator());\n', 1), ('just(T', 1), ('SingleElementObserver(SingleObserver<?', 1), ('io.reactivex.flowables.ConnectableFlowable}', 1), ('ints', 1), ('elapses,', 1), ('<h3>Extension</h3>\n', 1), ('"fatal"', 1), ('erased', 1), ('.put(ListIterator.class,', 1), ('Identification', 1), ('marble', 1), ('UnsignedLong', 1), ('ts.assertValue(10);\n', 1), ('AnimalSniffer:', 1), ('testsForSingletonList()', 1), ('TypeToken.of(generateClass());\n', 1), ('handleEvent((StoppingData)', 1), ('ImmediateThinScheduler.INSTANCE.schedulePeriodicallyDirect(Functions.EMPTY_RUNNABLE,', 1), ('cache\n', 1), ('OtherSingleObserver<T>(actual,', 1), ('ConnectableFlowable<?', 1), ('Observer<Object>,\nSingleObserver<Object>,', 1), ('ScalarSubscription<R>(subscriber,', 1), ('list2.add(w);\n', 1), ('Lemons";\n', 1), ('WeatherObserverTest<O', 1), ('1/26/17.\n', 1), ('ResourceMaybeObserver<T>', 1), ('MultimapBuilder.hashKeys().arrayListValues().build(multimap)}.\n', 1), ('ConnectableFlowable<Long>', 1), ('Single.create(null);\n', 1), ("Guava's", 1), ('io.reactivex', 1), ('Upcast', 1), ('OneConstantEnum.CONSTANT1);\n', 1), ('groups.remove(mapKey);\n', 1), ('methodThrowingException());\n', 1), ('CustomMaybeObserver&lt;T&gt;(upstream);\n', 1), ('this.ownerType', 1), ('.put(ImmutableSortedMultiset.class,', 1), ('Helpers.copyToList(getFeatures());\n', 1), ('this.keyType', 1), ('MaybeObserver<Object>,', 1), ('fs.request(-99);\n\n', 1), ('characteristics()', 1), ('Single.just(9),\n', 1), ('Entry<Character,', 1), ('io.reactivex.internal.operators.flowable.FlowableTimeoutTimed.TimeoutSupport;\nimport', 1), ('suite.addTest(testsForAbstractList());\n', 1), ('IMMEDIATE,\n', 1), ('IncrementingPublisher(int', 1), ('ToSingleMaybeSubscriber(SingleObserver<?', 1), ('SingleDoAfterTerminate(SingleSource<T>', 1), ('FlowableAny<T>', 1), ('.andThen(Maybe.error(new', 1), ('t.getPriority());\n', 1), ('DROP_OLDEST,\n', 1), ('MaybeFilterSingle<T>(this,', 1), ('SchedulerTestHelper', 1), ('subscriber.onNext(item);\n', 1), ('TypeVariableImpl},', 1), ('CompletableConcat(sources,', 1), ('producerLookAhead', 1), ('testDistinctUntilChangedOfSourceWithNulls()', 1), ('RxJavaPlugins.setOnSingleReturn(new', 1), ('getAndClearLogRecords()...)\n', 1), ('FlowableConcatMapMaybe<T,', 1), ('buffers.clear();\n\n', 1), ('sa.cancelled', 1), ('executor.startProcess(lazyval("callback",', 1), ('BorderLayout.SOUTH);\n', 1), ('generate).\n', 1), ('assertNull(RxJavaPlugins.onAssembly((Single)null));\n\n', 1), ('lpValue()', 1), ('customers.add(customer2);\n', 1), ('executor.get().submit(task);\n', 1), ('-3434801548987643227L;\n\n', 1), ('ExceptionHelper.wrapOrThrow(errors[1]);\n', 1), ('said\n', 1), ('errs.get()', 1), ('exceptionHandler;\n\n', 1), ('list.equals(((VolatileSizeArrayList<?>)obj).list);\n', 1), ('(!f.canRead())', 1), ('findPattern("SingleSource<.*>\\\\s+cs");\n', 1), ('serial;\n\n', 1), ('RxJavaPlugins.setOnParallelAssembly(new', 1), ('available",', 1), ('customer);\n', 1), ('add(final', 1), ('com.google.common.io.ResourcesTest', 1), ('Sets.newHashSet();', 1), ('long.class,', 1), ('ObservableSource<TLeft>', 1), ('prefixes', 1), ('(omitDataOnFetchFailure)', 1), ('GenericArrayType,', 1), ('(outerValue', 1), ('TestHelper.checkDisposed(PublishProcessor.create().singleOrError().onTerminateDetach());\n', 1), ('TaskGenerator', 1), ('(e.isDisposed())', 1), ('googleOptional)', 1), ('T>>();\n\n', 1), ('b.indexOf("{",', 1), ('ArbitraryInstances.get(WithPrivateConstructor.class));\n', 1), ('dq.pollLast();\n', 1), ('Having\n', 1), ('SortedMapDifference.class,\n', 1), ('currentCount++;\n', 1), ('serverSocketChannel', 1), ('fileCharSinkFactory()', 1), ('"").replace("Observable",', 1), ('Flowable.<String>empty().ignoreElements();\n', 1), ('mock(DefaultSubscriber.class);\n\n', 1), ('Flowable.<String>error(new', 1), ('CustomerResource}.\n', 1), ('ObservableCollect(ObservableSource<T>', 1), ('2).elementAt(1).toFlowable().blockingSingle()\n', 1), ('observableInner.blockingLast();\n', 1), ('actionPerformed(ActionEvent', 1), ('6537757548749041217L;\n\n', 1), ('IOException}.\n', 1), ('CompletableOperator()', 1), ('RxJavaPlugins.initNewThreadScheduler(unsafeDefault);\n', 1), ('Functions}', 1), ('TestHelper.checkDoubleOnSubscribeFlowableToMaybe(new', 1), ('h)', 1), ('now),', 1), ('ExecutorService},', 1), ('cls.getClassLoader());\n', 1), ('getGenericComponentType()', 1), ('random.nextInt(nKeys);\n', 1), ('PublishProcessor()', 1), ('customerResource.delete(customerOne.getId());\n', 1), ('Unit\n', 1), ('had', 1), ('-660395290758764731L;\n\n', 1), ('upperBound)', 1), ('Maps.keyOrNull(higherEntry(key));\n', 1), ('ObservableWindowBoundary<T,', 1), ('absolutely\n', 1), ('FluentFuture},', 1), ('ForEachWhileSubscriber(Predicate<?', 1), ('ReserializingTestCollectionGenerator<E>(delegate);\n', 1), ('source.scan(0,', 1), ('disposition', 1), ('"-";\n\n', 1), ('Delay(CompositeDisposable', 1), ('incrementing', 1), ('Flowable.fromArray(array).reduce(0,', 1), ('"Nullam', 1), ('queue.put(message);\n', 1), ('"flaky"', 1), ('word",', 1), ('counter.incrementAndGet());\n', 1), ('ObjectHelper.requireNonNull(nextFunction.apply(e),', 1), ('http://goo.gl/okTTdr\n', 1), ('checkCompletableSchedulerDoc()', 1), ('FlowableConcatMap(Flowable<T>', 1), ('LambdaSubscriber<T>(onNext,', 1), ('wolf', 1), ('flowableNoUnsubscrib()', 1), ('apply(SingleObserver&lt;?', 1), ('doOnLifecycle(onSubscribe,', 1), ('InnerQueuedSubscriberSupport<Integer>', 1), ('requested.size();\n//', 1), ('rmo.onSubscribe(Disposables.empty());\n\n', 1), ('"foo2:bar2")}.\n', 1), ('java.nio.file.Path,', 1), ('testRangeWithOverflow5()', 1), ('shouldSaveCustomer()', 1), ('ImmutableSet<V>>()', 1), ('SafeSubscriber<String>(OBSERVER_ONNEXT_ONERROR_FAIL()).onNext("one");\n', 1), ('fails"));\n', 1), ('getAndAdd(int', 1), ('ArbitraryInstances.get(Character.class));\n', 1), ('curr.tryAcquireSlot();\n', 1), ('CompletableCreate(CompletableOnSubscribe', 1), ('lowestFrequencyChar()\n', 1), ('super.add(elements);\n', 1), ('((SocketChannel)', 1), ('members.\n', 1), ('ScalarDisposable(Observer<?', 1), ('Thread.sleep(millis);\n', 1), ('file;\n\n', 1), ('collapsing', 1), ('ObservableConcatMapSingleTest', 1), ('this.multimapView().inverse()', 1), ('Function9', 1), ('(pendingWrite', 1), ('overflowReported()', 1), ('d.actual.onError(e);\n', 1), ('OBSERVER_ONERROR_FAIL().onError(new', 1), ('headers.get(header);\n', 1), ('yielded.', 1), ('LazyFluentIterable(Iterable<E>', 1), ('MaybeDelayWithCompletable<T>(next,', 1), ('bakeNewCake(CakeInfo', 1), ('wheelProperties.put(HasPrice.PROPERTY,', 1), ('"aliquet', 1), ('AtomicReference.\n', 1), ('finds', 1), ('FlowableElementAtMaybe<T>', 1), ('(Enum<HashSetCallable>', 1), ('BackpressureLatestSubscriber<T>(s));\n', 1), ('(shouldDrain)', 1), ('ToListSubscriber(SingleObserver<?', 1), ('SubscribeTask(parent)));\n', 1), ('cuts', 1), ('threadPool.submit(producer);\n', 1), ('SlidingDoor', 1), ('MaybeSource",', 1), ('io.reactivex.observers.DisposableCompletableObserver;\nimport', 1), ('propagated.\n', 1), ('testBasics()', 1), ('get(stat)', 1), ('"johndoe@whatever.com");\n', 1), ('outerWrapper', 1), ('multiset.setCount(key,', 1), ('private.', 1), ('from(ExecutorService)', 1), ('CachedThreadSchedulerTest', 1), ('AmbInnerSubscriber(AmbCoordinator<T>', 1), ('setImplementation(Writer.class,', 1), ('Z);\n', 1), ('Functions.HashSetCallable.class.getMethod("valueOf",', 1), ('SpscArrayQueue<T>', 1), ('.testNulls(FreshValueGenerator.class);\n', 1), ('mockSubscriber()', 1), ('generateOrdering();\n', 1), ('.<Void>toObservable()\n', 1), ('SubscribeOnObserver<T>(s,', 1), ('addValue(T', 1), ('reduceIntsFlowable()', 1), ('TypeVisitor', 1), ('Menu', 1), ('higher):</b>', 1), ('FlowableBlockingTest', 1), ('LinkedBlockingQueue<Object>();\n\n', 1), ('RxJavaPlugins.setOnSingleAssembly(new', 1), ('getSubjectGenerator()', 1), ('toFlowable().retry(predicate).singleElement();\n', 1), ('"//TLTL")', 1), ('posted\n', 1), ('LOGGER.info(customer.getFirstName()));\n', 1), ('(").append(g.getName()).append(":14)\\r\\n\\r\\n");\n', 1), ('ToSingle(SingleObserver<?', 1), ('lineNum', 1), ('interfaces,', 1), ('DeterministicRandom()', 1), ('diffLastUnsafe(int', 1), ('Single.just(5),\n', 1), ('entries.add(immutableEntry);\n', 1), ('SortedMapTestSuiteBuilder<>();\n', 1), ('AbstractFlowableWithUpstream<TLeft,', 1), ('checkNotNull(optionals);\n', 1), ('JAVA9', 1), ('Maybe.just(100)\n', 1), ('database.getCollection(ticketsCollectionName);\n', 1), ('CONSTANT1\n', 1), ('TestingExecutors.\n', 1), ('}).named("CompactHashSet#TrimToSize")\n', 1), ('stopLatch.countDown();\n', 1), ('2620149119579502636L;\n\n', 1), ('Skip', 1), ('error);\n\n', 1), ('onErrorAfterCrashConditional()', 1), ('arrives.', 1), ('0x10000;\n', 1), ('reader/writer.\n', 1), ('flatMapTwoNestedSync(final', 1), ('dateValue;', 1), ('java.lang.Double.longBitsToDouble;\n\nimport', 1), ('HashSet<String>();\n\n', 1), ('freshness.get();\n', 1), ('JoinDisposable(Observer<?', 1), ('owned', 1), ('value.hashCode()', 1), ('Maybe.just(1).delaySubscription(100,', 1), ('rso.value);\n', 1), ('result3', 1), ('pre-processing', 1), ('list.lastIndexOf(o);\n', 1), ('!name.startsWith("Test"))', 1), ('(path.size()', 1), ('java.io.DataInputStream;\nimport', 1), ('.concatMapCompletable(Functions.justFunction(Completable.fromAction(new', 1), ('com.iluwatar.servant;\n\nimport', 1), ('assertEquals("HONDA",', 1), ('depth-first', 1), ('(!DisposableHelper.isDisposed(d))', 1), ('convertDatesToString(result);\n', 1), ('setImplementation(Appendable.class,', 1), ('keyIndex', 1), ('javac', 1), ('countFruit()', 1), ('stores.stream().forEach(store', 1), ('firstCancelRace()', 1), ('(numElements', 1), ('state));\n', 1), ('actual.onNext(b);\n\n', 1), ('Broken', 1), ('featureEnumClass.getDeclaredClasses();\n', 1), ('MergeWithMaybeTckTest', 1), ('retainAll(Collection<?>', 1), ('names', 1), ("Letter('y'),", 1), ('hashFunction}.\n', 1), ('dispose();\n\n', 1), ('address\n', 1), ('foundLayers)', 1), ('non-delayed,', 1), ('ObservableElementAtSingle<T>', 1), ('createSchema(DataSource', 1), ('times(1)).onNext("12");\n', 1), ('modes', 1), ('sideEffectObserver', 1), ('getTypeName', 1), ('ts.onNext(v);\n', 1), ('FlowableThrottleWithTimeoutTests', 1), ('enumValues[(currentWeather.ordinal()', 1), ('MaybeFromAction<T>', 1), ('rest;\n\n', 1), ('FlowableThrottleFirstTimed(Flowable<T>', 1), ('FlowableSerialized<T>', 1), ('4096);\n', 1), ('MaybeSource[count', 1), ('action.accept(createCustomer(resultSet));\n', 1), ('entries.toArray(new', 1), ('FromIterableTckTest', 1), ('.assertResult("1234567");\n', 1), ('TestEnumSetGenerator()', 1), ('TypeVariableImpl<D>(genericDeclaration,', 1), ('read.', 1), ('WindowExactObserver<T>\n', 1), ('testers.add(SortedMapNavigationTester.class);\n', 1), ('(crashOnError)', 1), ('ArrayDeque<InnerQueuedObserver<R>>();\n', 1), ('@Ignore("Non-positive', 1), ('IllegalStateException);\n', 1), ('(wrapped)', 1), ('shouldGetAllCustomers()', 1), ('counters', 1), ('ByteStreams.toByteArray(in,', 1), ('TimerObserver(Observer<?', 1), ('UDP,', 1), ('com.google.common.collect.Multiset.Entry;\nimport', 1), ('spell.getSpellbook();\n', 1), ('SingleFromCallable<T>', 1), ('Lists.newArrayListWithCapacity(initCapacity);\n', 1), ('</pre>', 1), ('IntervalObserver(Observer<?', 1), ('G>)', 1), ('CompletableMergeIterable', 1), ('ObjectHelper.requireNonNull(onLift,', 1), ('annotationClass.getAnnotation(TesterAnnotation.class));\n', 1), ('RuntimeException}', 1), ('FlowableFlatMapSingle<T,', 1), ('SpscLinkedArrayQueue<CompletableSource>(Flowable.bufferSize());\n', 1), ('this.componentType', 1), ('REQUEST_MASK)', 1), ('(StopScanningException', 1), ('assertSame(Observable.empty(),', 1), ('Arrays#hashCode(Object[])}.', 1), ('testGetClassPathFromManifest_pathWithStrangeCharacter()', 1), ('Receives', 1), ('AUT', 1), ('verify(s,', 1), ('io.reactivex.exceptions;\n', 1), ('SafeTreeMap<>(delegate.descendingMap());\n', 1), ('CustomCompletableObserver(CompletableObserver', 1), ('delegate.scheduleWithFixedDelay(wrapTask(command),', 1), ('e.getCause().getMessage());\n', 1), ('ParallelReduceTest', 1), ('io.reactivex.subscribers.DefaultSubscriber;\n\nfinal', 1), ('emitting\n', 1), ('G>,', 1), ('NavigableMapTestSuiteBuilder.', 1), ('ConcatMapInner<R>', 1), ('assertTrue(multimap().asMap().values().remove(Collections.singletonList(v0())));\n', 1), ('SourceSinkTester(F', 1), ('delegate.isShutdown();\n', 1), ('java.net.URLClassLoader;\n\n//', 1), ('Predicate.class,\n', 1), ('Helpers.<String,', 1), ('findWizardsWithSpell(String', 1), ('testNewProxyCantWorkOnAClass()', 1), ('DwarvenMineWorker.Action.WORK);\n', 1), ('observerMaybe()', 1), ('testTreeBasedTable()', 1), ('accept(T1', 1), ('3240706908776709697L;\n\n', 1), ('selector.select();\n\n', 1), ('TypeToken<Iterable<String>>()', 1), ('"hot"', 1), ('doTestExistsThrowsSecurityException()', 1), ('weaklyReferenceQueue()', 1), ('.catching(RpcException.class,', 1), ('scheduler.advanceTimeBy(99,', 1), ('testImmutableSortedMultiset()', 1), ('schedulers:\n', 1), ('.put(SetMultimap.class,', 1), ('(T)o2);\n', 1), ('null);//', 1), ('AbstractMaybeWithUpstreamTest', 1), ('minimum.\n', 1), ('surrenders', 1), ('io.reactivex.internal.util;\n\npublic', 1), ('SequentialExecutor(delegate);\n', 1), ('VolatileSizeArrayList<Integer>();\n', 1), ('LoggerFactory.getLogger(NioDatagramChannel.class);\n\n', 1), ('ought', 1), ('createSingleScheduler()', 1), ('delayIndicator));\n', 1), ('generateCurrency()', 1), ('"Mapper");\n\n', 1), ('"eget', 1), ('downloadFile(String', 1), ('EmptyComponent.INSTANCE;\n\n', 1), ('messages)', 1), ('joinHelper(0);\n', 1), ('Iterators', 1), ('TestReader(TestOption...', 1), ('executor.execute(worker);\n', 1), ('urls.build().toArray(new', 1), ('returnType.isArray());\n', 1), ('ClassPath}.', 1), ('IgnoreElementsSubscriber<T>', 1), ('setFirst(Future<?>', 1), ('FlowableTimerTest', 1), ('To</a>\n', 1), ('"FlowableFromObservable",\n', 1), ('com.iluwatar.event.sourcing.state;\n\nimport', 1), ('InnerCompletableCache\n', 1), ('idiom.\n', 1), ('(str,', 1), ('Observer}.\n', 1), ('io.reactivex.internal.util.ArrayListSupplier;\nimport', 1), ('DoOnSubscribeSingleObserver(SingleObserver<?', 1), ('logically\n', 1), ('concatArray(SingleSource<?', 1), ('source.onNext(8);\n', 1), ('Page\n', 1), ('reducing', 1), ('hose', 1), ('testListMultimap()', 1), ('assertEqualInstance(Class<T>', 1), ('accept(GroupedUnicast<K,V>', 1), ('ByToString();\n\n', 1), ('Properties();\n', 1), ('inputStreamClosed;\n', 1), ('Stream.of("0.0:0",', 1), ('CustomSingleObserver(SingleObserver&lt;?', 1), ('List<V>>},', 1), ('#ALLOWS_NULL_KEY_QUERIES\n', 1), ('Arrays.fill(ints,', 1), ('BusinessOperation}', 1), ('fromSpliterator.estimateSize();\n', 1), ('In()', 1), ('RxJavaPlugins.setScheduleHandler(new', 1), ('SingleJust(T', 1), ('PARENT_DISPOSED))', 1), ('Flushable#flush}', 1), ('ObservableFlatMapSingle(ObservableSource<T>', 1), ('testOnErrorExceptionIsThrownFromSubscribe()', 1), ('parent.disposeAll();\n', 1), ('RuntimeException(e);', 1), ('HelpersTest', 1), ('doOnEventThrowsError()', 1), ('PerfBoundedSubscriber(bh,', 1), ('schedulersUtility()', 1), ('CompletableMerge(sources,', 1), ('EventEmitter(EventObserver', 1), ('FlowableZip(Publisher<?', 1), ('ObservableZipIterable<T,', 1), ('MaybeOnErrorComplete<T>(this,', 1), ('y.jar",\n', 1), ('s1.dispose();\n', 1), ('CustomException(e.getMessage(),', 1), ('(swallowIOException)', 1), ('(Iterator<PatternCompiler>', 1), ('testEnums()', 1), ('assertFalse(bs1.isCancelled());\n\n', 1), ('ObservableIntervalRangeTest', 1), ('isVolatile()', 1), ('Map>...', 1), ('asyncFusedUnboundedIn()', 1), ('AmbMaybeObserver<T>(observer);\n', 1), ('List<PartyMember>', 1), ('shadowLoader);\n', 1), ('verifyThread(Schedulers.newThread(),', 1), ('com.google.common.math;\n\nimport', 1), ('Flowable.fromArray(sources).flatMap((Function)MaybeToPublisher.instance(),', 1), ('~QueueFuseable.BOUNDARY);\n', 1), ('serviceCache.put(newService.getName(),', 1), ('convertFromDto(final', 1), ('oranges++;\n', 1), ('List<Multiset<Integer>>', 1), ('WeatherType[]', 1), ('Format.\n', 1), ('hashCodeSum;\n', 1), ('collector.add(whitespace().trimFrom(line));\n', 1), ('administration.resetLottery();\n', 1), ('jvmDefault;\n', 1), ('#orNull}', 1), ('charset).readLines()', 1), ('Ints.asList(stripes);\n', 1), ('assertGoodFeatureEnum(SetFeature.class);\n', 1), ('perf\n', 1), ('com.iluwatar.fluentinterface.app;\n\nimport', 1), ('testInterrupt_doesNotInterruptSubsequentTask()', 1), ('doOnSubscribeErrorCrash()', 1), ('ForwardingLock', 1), ('enumMap', 1), ('context.get(IUnitOfWork.INSERT);\n', 1), ('o.hashCode()', 1), ('".java");\n\n', 1), ('System.err.println("Should', 1), ('bank', 1), ('#get}', 1), ('exceptionClass', 1), ('washingMachine.getWashingMachineState();\n', 1), ('run.\n', 1), ('ObservableThrottleFirstTest', 1), ('FiniteRange(elements);\n', 1), ('timed.lazySet(DisposableHelper.DISPOSED);\n', 1), ('File(u.toURI());\n\n', 1), ('worker.schedule(this,', 1), ('ObserverTest(final', 1), ('timer.get();\n', 1), ('MaybeUnsubscribeOn<T>(this,', 1), ('MapFeature(Feature<?', 1), ('ArrayList<Integer>', 1), ('Handler}.\n', 1), ('"@whatever.com"));\n', 1), ('Primitives.wrap(type).cast(value);\n', 1), ('these.\n', 1), ('FutureDisposable(ft,', 1), ('CompletableDelay(CompletableSource', 1), ("won't,", 1), ('TakeObserver(Observer<?', 1), ('OpenJdk6ListTests', 1), ('testLastEmptyCollection()', 1), ('com.iluwatar.observer.utils.InMemoryAppender;\n\nimport', 1), ('onErrorReturn(final', 1), ('testDisplayGiant()', 1), ('SingleTakeUntil(SingleSource<T>', 1), ('2).unsubscribeOn(Schedulers.single())\n', 1), ('test:', 1), ('(ps.isDisposed())', 1), ('outerDone', 1), ('System.out.println(fail);\n\n', 1), ('to)\n', 1), ('m.backpressureDocumentation', 1), ('CompletableFromSingleObserver<T>', 1), ('OutputStreamWriter(checkNotNull(out),', 1), ('generateBooleanObject()', 1), ('Result[4];\n', 1), ('Dispatcher.getInstance());\n', 1), ('libraries\n', 1), ('fromSubscriptionNull()', 1), ('previous()', 1), ('restart', 1), ('NullPointerTester().testAllPublicStaticMethods(Reflection.class);\n', 1), ('toImmutableSet()', 1), ('id);\n\n', 1), ('Functions.EMPTY_RUNNABLE,', 1), ('<li>Count', 1), ('(!m.signature.contains("MaybeSource"))', 1), ('maybeSupplier;\n', 1), ('attempt\n', 1), ('testsForArrayList()', 1), ('java.util.jar.JarOutputStream;\nimport', 1), ('java.util.logging.Level.WARNING;\n\nimport', 1), ('LOGGER.info("putting");\n', 1), ('java.lang;\n\n/**\n', 1), ('lesser', 1), ('ScheduledExecutorService},', 1), ('cpu);\n\n', 1), ('actual.onSubscribe(d);\n', 1), ('longs.get(2));\n', 1), ('NEW_THREAD;\n\n', 1), ('String[capacity];\n', 1), ('HOLY_WATER:\n', 1), ('(m.getName().startsWith("getOn"))', 1), ('producer.beganProducing.await();\n\n', 1), ('ObservableDematerialize<T>', 1), ('.addEqualityGroup(classInfo(ClassPathTest.class),', 1), ('java.util.Vector;\nimport', 1), ('ImmediateScheduledFuture(ListenableFuture<V>', 1), ('observableCreate()', 1), ('MergeObserver(Observer<?', 1), ('generateJavaOptional(T', 1), ('m.signature', 1), ('resources.add(entries.nextElement().getName());\n', 1), ('FiniteRange(long', 1), ('-5370107872170712765L;\n\n', 1), ('JPanel();\n', 1), ('emissionQueueTrigger()', 1), ('assertDrained(BlockingQueue<Object>', 1), ('in.skip(n);\n', 1), ('GWTification', 1), ('timedRunnable;\n', 1), ('(E)e;\n', 1), ('CharBuffer.allocate(100);\n', 1), ('(compareAndSet(1,', 1), ('com.iluwatar.converter;\n\n\nimport', 1), ('(used\n', 1), ('stream.close();\n', 1), ('testElementAtWithIndexOutOfBoundsObservable()', 1), ('testDrain_throws()', 1), ('to.assertError(TimeoutException.class).assertNotComplete();\n', 1), ('assertTrue(depth.get()', 1), ('toSingleDefault(final', 1), ('/child\n', 1), ('enumClass.getMethod("values");\n', 1), ('safeguards;', 1), ('InputStreamReader(url.openStream());\n', 1), ('crashOnSubscribe;\n', 1), ('SingleElementObserver<T>(t,', 1), ('suppressed', 1), ('done.', 1), ('testGet_useFirstPublicConstant()', 1), ('SingleFlatMapCompletableTest', 1), ('java.util.concurrent.CountDownLatch;\n\npublic', 1), ('numbers.addAll(givenNumbers);\n', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.subscribeOn.png"', 1), ('MaybeEmpty();\n\n', 1), ('bar.getName());\n', 1), ('expectedMessage', 1), ('Multimaps.filterEntries().asMap().\n', 1), ('superclass).getActualTypeArguments()[0];\n', 1), ('vehicula', 1), ('f.requestFusion(QueueSubscription.ANY', 1), ('@ExampleAnnotation\n', 1), ('UncaughtExceptionHandler', 1), ('LOGGER.info("More', 1), ('single-element', 1), ('fusionMode;\n', 1), ('DONE;\n', 1), ('RxThreadFactory("Test",', 1), ('encodingStream(int', 1), ('decoratedRun;\n\n', 1), ('DEFAULTS', 1), ('"/home",', 1), ('ObservableFuseableTest', 1), ('6570575</a>', 1), ('this.direct', 1), ('CompletableObserverImplementation(s));\n', 1), ('ObservableRetryPredicate(Observable<T>', 1), ('otherSource;\n', 1), ('Ordering<Iterable<T>>', 1), ('"delayIndicator', 1), ('AbstractTester<?>>', 1), ('requirements;\n', 1), ('this.expectedToString', 1), ('Collections.singleton(elements[0]);\n', 1), ('DistinctUntilChangedTckTest', 1), ('checkCompletableScheduler()', 1), ('customers.add(customerTwo);\n\n', 1), ('checkDoubleOnSubscribeCompletableToObservable(Function<Completable,', 1), ('wrap(((MaybeTransformer<T,', 1), ('coordinate', 1), ('CompletableSubscribeOn(this,', 1), ('consumerNode;\n\n', 1), ('#andThen(Publisher)\n', 1), ('access.', 1), ('type.cast(Stream.empty());\n', 1), ('initialCapacity,', 1), ('Files#fileTraverser()}.\n', 1), ('de-multiplexes', 1), ('frc.setResource(0,', 1), ('consumer.accept(pair.a,', 1), ('DEFAULT_HOST;\n', 1), ('Object-equals', 1), ('parts)', 1), ('Multimaps#synchronizedSortedSetMultimap}.\n', 1), ('topping;\n\n', 1), ('testNavigableMap()', 1), ('Exception;\n\n', 1), ('consumerClassName)\n', 1), ('FallbackObserver(Observer<?', 1), ('request(0);\n', 1), ('(ScheduledThreadPoolExecutor)', 1), ('this.onErrorCall', 1), ('ConcatMapInner(ConcatMapSupport<R>', 1), ('APIs,', 1), ('2.0\n//', 1), ('org.springframework.context.support.AbstractApplicationContext;\nimport', 1), ('ObjectHelper.requireNonNull(resourceDisposer,', 1), ('TimedRunnable(action,', 1), ('caseDesc', 1), ('known-good', 1), ('rules\n', 1), ('saving', 1), ('AtomicReference<InnerCompletableCache[]>(EMPTY);\n', 1), ('TestHelper.checkDisposed(PublishSubject.create().scan(new', 1), ('ConcatMapSingleSubscriber(Subscriber<?', 1), ('TypeToken<ListMultimap<String,', 1), ('LoggerFactory.getLogger(FileLoader.class);\n\n', 1), ('SafeTreeMap(Comparator<?', 1), ('subscribeHookCrashes()', 1), ('assertTrue(rco.errors.contains(error));\n', 1), ('Function.class,\n', 1), ('testElementAtOrDefaultWithIndexOutOfBoundsFlowable()', 1), ('FlowableJust<T>', 1), ('DematerializeSubscriber<T>(s));\n', 1), ('TimerTask()', 1), ('sc.request(-99);\n\n', 1), ('behavior:\n', 1), ('createCompletable()', 1), ('TypeToken<HashBasedTable<String,', 1), ('MaybeDoFinally<T>', 1), ('.onErrorReturnItem(2)\n', 1), ('makeJarUrlWithName("To', 1), ('maxAttempts', 1), ('ReplayTckTest', 1), ('assertTrue("Some', 1), ('.named("checkedSortedSet/TreeSet,', 1), ('java.net.DatagramPacket;\nimport', 1), ('events.add("Done");\n', 1), ('innerNext(T', 1), ('genericDeclaration.hashCode()', 1), ('!this.test.test(e))', 1), ('IntStream.of(0,', 1), ('setSpellbooks(Set<Spellbook>', 1), ('Publisher<Movie>', 1), ('drain();\n\n', 1), ('assertNull(ArbitraryInstances.get(void.class));\n', 1), ('}.blockingSubscribe(ts);\n\n', 1), ('joinHelper(Integer...', 1), ('com.iluwatar.command;\n\nimport', 1), ('final\\r\\n");\n', 1), ('com.iluwatar.pageobject;\n\nimport', 1), ('"io.reactivex"', 1), ('CompletableMergeDelayErrorArray', 1), ('ps.distinctUntilChanged(new', 1), ('getScheduler();\n', 1), ('AbstractDirectTask\nextends', 1), ('Observable.just(4)\n', 1), ('BorderLayout.EAST);\n', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/delay.oo.png"', 1), ('InnerSubscriber<T>(s,', 1), ('populateCache(\n', 1), ('InnerObserver<U>(actual,', 1), ('doc.put("numbers",', 1), ('erat.', 1), ('SuccessorsFunction<File>()', 1), ('zip5()', 1), ('countLine(String', 1), ('10:04', 1), ('emptyRunnableToString()', 1), ('assertFalse(it.isDisposed());\n\n', 1), ('asImmutable(EnumMap<K,', 1), ('CompletableAmb(null,', 1), ('flowableNoObserver()', 1), ('LongStream)\n', 1), ('maybeSubscribe1()', 1), ('BackpressureErrorSubscriber(Subscriber<?', 1), ('c.newInstance();\n', 1), ('observer.blockingAwait(timeout,', 1), ('properties.', 1), ('get(Comparator.class)}', 1), ('Interrupter(Thread', 1), ('suite.addTest(testsForHashSet());\n', 1), ('Android)', 1), ('Callable<Boolean>', 1), ('visitor;\n', 1), ('indexInTail++;\n', 1), ('t.setProducer(new', 1), ('nextObserver', 1), ('AnySubscriber(Subscriber<?', 1), ('OtherMaybeObserver<T>', 1), ('Nazgul(NazgulName.AKHORAHIL));\n', 1), ('File("/home/build/x/y/z.jar").toURI(),\n', 1), ('Submits', 1), ('targets)', 1), ('DatagramPacket#setReceiver(SocketAddress)}.\n', 1), ('sit.hasNext();\n', 1), ('Helpers.mapEntry(AnEnum.C,', 1), ('instanceField', 1), ('"f",', 1), ('LinkedBlockingDeque<>(MinimalCollection.of(elements));\n', 1), ('"ALWAYS_EQUAL";\n', 1), ('lastDelay;\n', 1), ('FlowableTakeLast<T>', 1), ('CompactLinkedHashSetTest', 1), ('isNative()', 1), ('features.addAll(parentBuilder.getFeatures());\n\n', 1), ('handler.</dd>\n', 1), ('#compose(CompletableTransformer)\n', 1), ('JdkPattern', 1), ('InternalConsumer(Blackhole', 1), ('MaybeDelay<T>', 1), ('entity.setName(expectedName);\n', 1), ('"FlowableReduceWithSingle",\n', 1), ('Server', 1), ('isFile()', 1), ('(Modifier.isAbstract(type.getModifiers())', 1), ('Files.asByteSource(file);\n', 1), ('io.reactivex.observables.ConnectableObservable;\n\n/**\n', 1), ('testLeastCollector()', 1), ('doAfterTerminated(@NonNull', 1), ('(over', 1), ('accept(TestObserver<T>', 1), ('SerializedObserver<U>', 1), ('assertThat(Files.fileTraverser().breadthFirst(rootDir)).containsExactly(rootDir);\n', 1), ('io.reactivex.schedulers.Schedulers;\n\n@BenchmarkMode(Mode.Throughput)\n@OutputTimeUnit(TimeUnit.SECONDS)\n@State(Scope.Thread)\npublic', 1), ('filterSuite(TestSuite', 1), ('WindowExactObserver<T>(t,', 1), ('UnicastProcessor<Completable>', 1), ('mongoClient.close();\n', 1), ('FlowableIntervalRange(long', 1), ('"Honda")).isAbsent();\n', 1), ('loadCount', 1), ('super.submit(task,', 1), ('com.iluwatar.hexagonal.test;\n\nimport', 1), ('Lists.newArrayList(v0()));\n', 1), ('film\\",\\"director\\":', 1), ('SingleToFlowable<E>(other));\n', 1), ('Preconditions.checkNotNull(callable,', 1), ('createEmptyArray(type);\n', 1), ('"Maybe",', 1), ('target.getBuffer().length();\n', 1), ('MaybeSubscribeOn<T>(this,', 1), ('InterruptedException(String', 1), ('doneProducing', 1), ('so.onSubscribe(cd);\n', 1), ('#create(SingleOnSubscribe)\n', 1), ('create,', 1), ('merge(sources,', 1), ('BlockingFlowableIterator<T>(bufferSize);\n', 1), ('com.google.common.base.Ascii;\nimport', 1), ('Single.timer(1,', 1), ('(they', 1), ('HashMultiset.add', 1), ('FutureSubscriberTest', 1), ('-1001730202384742097L;\n\n', 1), ('Iterable.class),\n', 1), ('Feature<Multimap>', 1), ('(B)', 1), ('DAO),', 1), ('"Files.asByteSink("', 1), ('generateByteArrayInputStream()', 1), ('com.mongodb.MongoClient;\nimport', 1), ('Pattern.compile(".").matcher("X");\n', 1), ('subject1.onSuccess(1);\n', 1), ('TestHelper.checkDisposed(PublishSubject.create().elementAt(0));\n\n', 1), ('doOnSubscribeJustCrash()', 1), ('TestResourceSingleObserver<T>', 1), ('Observable.just(horrors);\n', 1), ('AtomicInteger.class,\n', 1), ('fine', 1), ('suite.addTest(testsForAbstractSet());\n', 1), ('file.isDirectory();\n', 1), ('File.class,\n', 1), ('unsafeCreate(CompletableSource', 1), ('org.checkerframework.checker.nullness.compatqual.NullableDecl;\n\n/**', 1), ('subject.onError(e);\n', 1), ('Util.\n', 1), ('fulfill', 1), ('ArbitraryInstances.get(Pattern.class).pattern());\n', 1), ('#update(Disposable)\n', 1), ('calculateLineCount();\n\n', 1), ('2).subscribe(to);\n\n', 1), ('timed.time(TimeUnit.MILLISECONDS));\n', 1), ('(file1', 1), ('(Set<?>)', 1), ('getInstance(Class<T>', 1), ('entry.getValue()));\n', 1), ('ArbitraryInstances.get(WithPublicConstants.class));\n', 1), ('Observable.wrap(source).materialize();\n\n', 1), ('MaybeError<T>', 1), ('"foo.exe:.txt"}', 1), ('Type[0],', 1), ('ElementAtSubscriber(SingleObserver<?', 1), ('zipFunction}', 1), ('MinimalCollection.of(elements));\n', 1), ('LinkedHashSet<>(MinimalCollection.of(elements));\n', 1), ('sourceCode.indexOf("You', 1), ('writer.append("there!");\n', 1), ('cbuf)', 1), ('PrintStream(stream));\n\n', 1), ('SimpleMessage();\n', 1), ('processFile(StringBuilder', 1), ('ImmutableSet.of(freshElement);\n', 1), ('unit.toMillis(delayTime);\n\n', 1), ('Locking', 1), ('SerializedSubject(final', 1), ('sizeIfKnown()', 1), ('errors.get(0).getCause().getCause()', 1), ('POOLS.clear();\n', 1), ('ArrayCompositeSubscription(int', 1), ('Reserializes', 1), ('put,\n', 1), ('Tenants\n', 1), ('sergeantResponse;\n\n', 1), ('key.attach(channel);\n', 1), ('future.addListener(\n', 1), ('.suppressing(suppressForAbstractList())\n', 1), ('handles\n', 1), ('onNextOnErrorFailure()', 1), ('loops:\n', 1), ('RxJavaPlugins.onIoScheduler(IO);\n', 1), ('layer.getCalories()));\n', 1), ('PermissionCollection', 1), ('ConcurrentSkipListMap.class);\n', 1), ('(!q.isEmpty()', 1), ('Comparator<Object>()', 1), ('MaybeFlatMapIterableObservable<T,', 1), ("'\\n'}),", 1), ('TestSubscriber.create(1);\n', 1), ('cannot.', 1), ('com.google.gson.JsonParser;\nimport', 1), ('functions)', 1), ('SingleError(Callable<?', 1), ('Field}', 1), ('}).onTerminateDetach().subscribe(ts);\n\n', 1), ('suite.addTest(testsForVector());\n', 1), ('(Collection<?>)', 1), ('TestSetGenerator', 1), ('"65536"})\n', 1), ('innerNext(WindowBoundaryInnerSubscriber<T,', 1), ('Supplier<Weapon>>', 1), ('target.subscribe(o);\n\n', 1), ('iterator.add("c");\n', 1), ('Publisher[8];\n\n', 1), ('(delegate.size())', 1), ('CustomSingleOperator&lt;T&gt;', 1), ('InMemoryAppender(Consumer.class);\n', 1), ('notification.\n', 1), ('temp2;', 1), ('set(DISPOSED);\n', 1), ('clash', 1), ('onSubscribe).\n', 1), ('subscribers\n', 1), ('basepath,', 1), ('blockingFirst()', 1), ('CompletableTimer(long', 1), ('7028635084060361255L;\n\n', 1), ('com.google.common.reflect.AbstractInvocationHandler;\nimport', 1), ('byteSource.wasStreamClosed();\n', 1), ('fromPublisher(toFlowable().retry());\n', 1), ('JavadocFindUnescapedAngleBrackets', 1), ('operation)', 1), ('WithLatestInnerObserver(this,', 1), ('validate(Function<T,', 1), ('apply(Flowable<T>', 1), ('ThreadAsyncExecutor', 1), ('mockMaybeObserver()', 1), ('com.iluwatar.servicelayer.spellbook.Spellbook;\n\n/**\n', 1), ('ErrorMode.END));\n', 1), ('splitr.characteristics();\n', 1), ('fromEntryList(entries);\n', 1), ('expectCollects(\n', 1), ('AsyncDisposable<T>(s,', 1), ('mapper.apply(t);\n\n', 1), ('tried\n', 1), ('SequentialDisposable(Disposable', 1), ('range.subscribe(lo);\n\n', 1), ('18);\n', 1), ('unsafeDelegate(Set<E>', 1), ('orNull();\n\n', 1), ('flushable)', 1), ('(field.getGenericType()', 1), ('testImmutableSetMultimap()', 1), ('SimpleTroll', 1), ('SingleErrorTest', 1), ('Futures.transformAsync(this,', 1), ('new}', 1), ('w3', 1), ('FlowableDoOnEach(Flowable<T>', 1), ('ArbitraryInstances}.\n', 1), ('<code>AsyncResult</code>', 1), ('ms.test().assertFailure(IOException.class);\n\n', 1), ('defaultValue)}', 1), ('ScheduledWorker', 1), ('worth', 1), ('String,', 1), ('.filter(Objects::nonNull)\n', 1), ('LOGGER.info(videoLength);\n', 1), ('database.getCollection(countersCollectionName);\n', 1), ('(int)elements).delay(1,', 1), ('delegate.keySet().spliterator();\n', 1), ('.delaySubscription(Flowable.empty())\n', 1), ('rangePipeline(Blackhole', 1), ('doOnComplete(@NonNull', 1), ('function7Fail()', 1), ('methods2.add(m.getName());\n', 1), ('org.junit.jupiter.api.Assertions.assertFalse;\n\n/**\n', 1), ('SingleError<T>', 1), ('produces.</dd>\n', 1), ('empty().', 1), ('FlowableToSingleTest', 1), ('subscribers.delete(os);\n', 1), ('timeComplete_Normal(int', 1), ('testGetIfPresent_doesNotPreventClassUnloading()', 1), ('MultisetFeature', 1), ('System.identityHashCode(encoding.encoding.decode(decodingInputs[i', 1), ('Sets.equalsImpl(this,', 1), ('Decides', 1), ('"Interchangeable"\n', 1), ('io.reactivex.internal.observers.SubscriberCompletableObserver;\n\npublic', 1), ('rawType);\n\n', 1), ('Executors', 1), ('t6)', 1), ('checkNotNull(to);\n', 1), ('heavyInstance;\n', 1), ('biFunction', 1), ('Spliterator<Entry<K,', 1), ('Mockito.doAnswer(new', 1), ('-7730517613164279224L;\n\n', 1), ('loadAllCount.incrementAndGet();\n', 1), ('Producers</a>\n', 1), ('iterate\n', 1), ('(AbstractTester<?>)', 1), ('findPattern("TestSubscriber<.*>\\\\s+to");\n', 1), ('(cachedValues', 1), ('NewThreadHolder.DEFAULT;\n', 1), ('RegularImmutableList\n', 1), ('active.\n', 1), ('dependence', 1), ('VolatileSizeArrayList<Integer>(16);\n', 1), ('loading\n', 1), ('onErrorMapper\n', 1), ('testSwitchWhenEmpty()', 1), ('"b:1",', 1), ('previousIndex()', 1), ('TimeUnit.MILLISECONDS);\n//\n//', 1), ('load(Object', 1), ('use.\n', 1), ('RxJavaPlugins.setOnObservableSubscribe(observable2observer);\n', 1), ('TimeIntervalObserver<T>', 1), ('(QueueSubscription<CompletableSource>)', 1), ('SingleDoAfterTerminateTest', 1), ('.delay(100,', 1), ('newMatchResult())\n', 1), ('ExceptionType(Class<?', 1), ('*/\n@Beta\n@GwtIncompatible\n@J2ObjCIncompatible', 1), ('2).takeLast((int)elements)\n', 1), ('#absent},', 1), ('ability', 1), ('"option"', 1), ('emitter.setDisposable(s);\n', 1), ('java.sql.SQLException;\n\n/**\n', 1), ('BasicFileAttributes', 1), ('Futures.FutureCombiner#callAsync(AsyncCallable,', 1), ('@title,', 1), ('innerComplete(InnerQueuedObserver<R>', 1), ('FlowableWindowBoundary<T,', 1), ('Force', 1), ('Observable-specific', 1), ('ignoreCancelConditional()', 1), ('testScanFromFile_fileNotExists()', 1), ('8465401857522493082L;\n', 1), ('user-provided', 1), ('executor}.', 1), ('findAllSpellbooks()', 1), ('dl.run();\n\n', 1), ('.assertResult("123456789");\n', 1), ('testMultipleProducers(BlockingQueue<Object>', 1), ('entries.\n', 1), ('TestSetGenerator<AnEnum>', 1), ('though)', 1), ('fieldJsonMapper;\n\n', 1), ('finished.\n', 1), ('System.out.println(ts.errors());\n\n', 1), ('Functions.emptyConsumer()\n', 1), ('LoggerFactory.getLogger(GuardedQueue.class);\n', 1), ('ResourceMaybeObserverTest', 1), ('{\n\n//', 1), ('terminates.', 1), ('RxJavaPlugins.initComputationScheduler(c));\n\n', 1), ('.assertValueCount(values.length)\n', 1), ('"initialSupplier");\n', 1), ('(generics', 1), ('improved?\n', 1), ('assertSame(source,', 1), ('asByteSource(file).hash(hashFunction);\n', 1), ('keySetGenerator', 1), ('this.error.flush();\n', 1), ('list.addAll(index,', 1), ('participating', 1), ('successTimeoutRace()', 1), ('mandates\n', 1), ('(method.getDeclaringClass().equals(TypeVariableImpl.class))', 1), ('lazySet(offset,', 1), ('Semantically,\n', 1), ('anything\n', 1), ('PURGE_THREAD', 1), ('copy.get(0);\n', 1), ('onErrorSuccess()', 1), ('integers);\n\n', 1), ('TestSuite(name);\n', 1), ('com.google.common.io.ByteStreams;\nimport', 1), ('shop', 1), ('dependentPromiseIsFulfilledAfterTheConsumerConsumesTheResultOfThisPromise()', 1), ("key's", 1), ('TakeUntilMainObserver(SingleObserver<?', 1), ('per-rail', 1), ('Error}', 1), ('never()).onNext(4);\n', 1), ('customerDao.delete(customer);\n', 1), ('customOnErrorShouldReportCustomOnError()', 1), ('collection.stream();\n', 1), ('.suppressing(suppressForConcurrentSkipListSetWithComparator())\n', 1), ('ArbitraryInstances.get(TimeUnit.class));\n', 1), ('Predicates.not(Predicates.<Type>equalTo(Object.class)));\n', 1), ('a.equals(b));\n', 1), ('mjoshzambales\n', 1), ('dispatcher.onChannelReadEvent((AbstractNioChannel)', 1), ('ReducePerf', 1), ('determine', 1), ('Customer(2,', 1), ('ts1.assertNoValues();\n\n', 1), ('a(Throwable', 1), ('non-concurrent', 1), ('ParallelMapTest', 1), ('initialSupplier;\n\n', 1), ('e.onNext(v);\n', 1), ('CoffeeMakingTask(7));\n', 1), ('num:', 1), ('debugging,', 1), ('checkMaybeBackpressure()', 1), ('managed.\n', 1), ('readObject);\n', 1), ('java.util.Objects#hash}', 1), ('channelToPendingWrites.get(key.channel());\n', 1), ('super(2);\n', 1), ('differences', 1), ('resumeFunction})', 1), ('UnmodifiableListIterator.\n', 1), ('threadPool.awaitTermination(1,', 1), ('testRowSortedTable()', 1), ('CrashingIterator', 1), ('bufferHelper("three\\rlines\\rno', 1), ('Maybe.just(2)))\n', 1), ('Book', 1), ('are.', 1), ('occurs,', 1), ('delegate.invokeAll(tasks,', 1), ('-707001650852963139L;\n\n', 1), ('HelperHolder.INSTANCE;\n', 1), ('wash()', 1), ('parallelism();\n\n', 1), ('Functions.justFunction(Maybe.never()),', 1), ('onErrorFailureSafe()', 1), ('Observer<R>,', 1), ('Single<ArrayList<Integer>>', 1), ('present"', 1), ('Elements', 1), ('assertNull(error.get());\n', 1), ('getting\n', 1), ('loader.iterator();', 1), ('ArrayList<E>(allSampleElements.subList(0,', 1), ('passed.\n', 1), ('"completableFunction', 1), ('ArbitraryInstances.get(ImmutableMultimap.class));\n', 1), ('testArrayListMultimap()', 1), ('onSuccessMapper\n', 1), ('KingJoffrey();\n\n', 1), ('BlockingObserver(Queue<Object>', 1), ('child2);\n\n', 1), ('oldTypeIterator', 1), ('similar,', 1), ('Flowable.just(0L)\n', 1), ('ComputationHolder.DEFAULT;\n', 1), ('AtomicReference<Disposable>(u);\n\n', 1), ('maxConcurrency,\n', 1), ('sequential(int', 1), ('scheduleDirectPeriodic()', 1), ('Reflection.newProxy(Object.class,', 1), ('checkDoubleOnSubscribeFlowableToCompletable(Function<Flowable<T>,', 1), ('generateIterable(E', 1), ('Long.compare.\n', 1), ('arguments}.', 1), ('sideEffectObserver;\n\n', 1), ('modifying', 1), ('outputStream', 1), ('-22,', 1), ('numbers.clear();\n', 1), ('deallocation', 1), ('((Class<?>)', 1), ('ScheduledWorker(ScheduledExecutorService', 1), ('subscribers?",', 1), ('foo2:bar2\n', 1), ('advance()', 1), ('MostRecentSubscriber(T', 1), ('SecureDirectoryStream}', 1), ('LinkedList', 1), ('Flowable.just(null,', 1), ('(e.isNothing())', 1), ('assertEquals(between.toString(),', 1), ('.put(CharSink.class,', 1), ('removeInner(InnerObserver<T,', 1), ('Observable<Notification<Integer>>', 1), ('shadowConstants', 1), ('valueSupplier\n', 1), ('assertEquals(integers.get(integers.size()', 1), ('max)\n', 1), ('1.7.0_51-b13,', 1), ('testNoBackpressureWithInitialValue()', 1), ('SpscLinkedArrayQueue<T>(16);\n', 1), ('s.onSubscribe(inner);\n\n', 1), ('<p>Throwing', 1), ('applied.\n', 1), ('unbounded.subscribe(new', 1), ('ObservableTimeIntervalTest', 1), ('FlowableOnBackpressureLatest(Flowable<T>', 1), ('memory\n', 1), ('"hello\\rworld")\n', 1), ('Multimap>...', 1), ('MaybeUnsafeCreate(MaybeSource<T>', 1), ('valueComparator);\n', 1), ('suppressForUnmodifiableSet()', 1), ('http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/main/java/util/concurrent/ScheduledFuture.java?revision=1.6\n', 1), ('toString(Type', 1), ('System.out.print(clazz.getSimpleName());\n', 1), ('16.0\n', 1), ('TaskTest<T', 1), ('evenItems', 1), ('subscribers[w', 1), ('CustomerDto("3",', 1), ('Math.max(0L,', 1), ('failComputationObservableBlockingSubscribe()', 1), ('InnerObserver[n', 1), ('bounds.', 1), ('Termination()', 1), ('focused', 1), ('property.name();\n', 1), ('consumer.consume();\n', 1), ('User("user",', 1), ('ParallelFilter<T>(this,', 1), ('Prototype\n', 1), ('Ordering#sortedCopy}', 1), ('Ticker', 1), ('guessing', 1), ('incidentEdgeMap;\n\n', 1), ('Flowable.merge(Flowable.just(\n', 1), ('absent.\n', 1), ('ManagementFactory.getMemoryMXBean();\n', 1), ('@ListFeature.Require({SUPPORTS_SET,', 1), ('typeVariableInvocationHandler.typeVariableImpl;\n', 1), ('Short(generateShort());\n', 1), ('customerStream.forEach((customer)', 1), ('those\n', 1), ('ObservableEmpty();\n\n', 1), ('asList', 1), ('com.gargoylesoftware.htmlunit.WebClient;\nimport', 1), ('Object>>)', 1), ('(produced', 1), ('Pass', 1), ('idToCustomer.values().stream();\n', 1), ('flowableNoProducer()', 1), ('(section', 1), ('class-to-instance', 1), ('SomeInterface', 1), ('this.elements', 1), ('DeferredScalarDisposable', 1), ('ab', 1), ('TypeToken<TreeBasedTable<String,', 1), ('worker2.schedule(new', 1), ('layers.toString());\n', 1), ('innerError(InnerQueuedSubscriber<T>', 1), ('activeCount', 1), ('log.log(WARNING,', 1), ('scan(Observable.class);\n', 1), ('testExistsThrowsSecurityException()', 1), ('GenericArrayTypeImpl(cls.getComponentType());\n', 1), ('"Effective', 1), ('SafeSubscriberTestException', 1), ('.window(Flowable.just(1).concatWith(Flowable.<Integer>never()))\n', 1), ('(unsafeImpl.compare(ba1,', 1), ('Exception("Should', 1), ('Completable.amb(ms)\n', 1), ('enqueued.', 1), ('worker\n', 1), ('testFileTraverser_singleDirectory()', 1), ('utilities,', 1), ('(clazz.getModifiers()', 1), ('NotificationLite.acceptFull(v,', 1), ('mainErrorSingle()', 1), ('unenclosed', 1), ('Files.asByteSink(file);\n', 1), ('ObservableDoOnEach<T>', 1), ('TestHelper.checkUtilityClass(ScalarXMapZHelper.class);\n', 1), ('SequentialDisposable()', 1), ('t1);\n\n', 1), ('@GwtIncompatible\n', 1), ('result.getExceptionList().add(e.getClass()', 1), ('<em>all</em>', 1), ('unfiltered.put("badkey",', 1), ('equals</i>;', 1), ('consumerClassName,', 1), ('firehose', 1), ('assertTrue(filter.accept(null,', 1), ('createBuffer()', 1), ('FileByteSinkFactory', 1), ('testMultipleCallsReturnTheSameObjectInDifferentThreads()', 1), ('(serviceJndiName.equals(serviceName))', 1), ('Unit[]', 1), ('.named("unmodifiableList/ArrayList")\n', 1), ('assertEquals(CharSource.empty(),', 1), ('.suppressing(suppressForUnmodifiableList())\n', 1), ('Lists.newArrayListWithCapacity(params.size());\n', 1), ('parameter");\n', 1), ('SubscriptionDisposable', 1), ('FileWriter(u));\n\n', 1), ('assertEquals(TestEnum.HONDA,', 1), ('io.reactivex.flowables;\n\nimport', 1), ('assertFalse(empty.isDisposed());\n', 1), ('multimap().asMap().remove(key);\n', 1), ('Flowable.fromArray(array(elements))\n', 1), ('"Hi!"),\n', 1), ('""}', 1), ('CollectionSize,', 1), ('com.google.common.reflect.Parameter;\nimport', 1), ('cruel', 1), ('java.util.BitSet;\nimport', 1), ('RegularImmutableMap_CustomFieldSerializer', 1), ('parameter,', 1), ("Letter('m'),", 1), ('(anchor.getTextContent().equals(albumTitle))', 1), ('SingleFlatMapCompletable<T>(this,', 1), ('assertTrue(ArbitraryInstances.get(BitSet.class).isEmpty());\n', 1), ('(provided,', 1), ('reflection.\n', 1), ('understand,', 1), ('asyncResult1', 1), ('MapNotificationObserver', 1), ('(Modifier.PUBLIC', 1), ('ArbitraryInstances.get(WithExceptionalConstructor.class));\n', 1), ('undoStack.offerLast(previousSpell);\n', 1), ('FlowableSwitchMapSingle(Flowable<T>', 1), ('com.google.common.collect.Multisets;\nimport', 1), ('INITIAL_COUNT', 1), ('Observable.generate(Functions.justCallable(1),\n', 1), ('17\n', 1), ('this.completableSupplier', 1), ('testZeroElements(q);\n', 1), ('buffers\n', 1), ('line.toCharArray())', 1), ('findPattern("SingleSource<.*>\\\\s+ms");\n', 1), ('delegate().lock();\n', 1), ('testSameThreadScheduledExecutorWithException()', 1), ('<li><a', 1), ('18:22', 1), ('testReadSingleByte()', 1), ('com.google.common.io.FileWriteMode.APPEND;\n\nimport', 1), ('DatagramChannel.\n', 1), ('(super.tryCancel())', 1), ('InputStreamReader(byteSource.openStream(),', 1), ('JAVA_VERSION("java.version"),\n\n', 1), ('.observeOn(Schedulers.single(),', 1), ('LazyFluentIterable.\n', 1), ('getInterestedOps();\n\n', 1), ('primarily', 1), ('Observable.fromPublisher(Flowable.just(1))\n', 1), ('com.google.common.base.Optional.absent();\n', 1), ('ObservableSubscriberTest', 1), ('TEST_CAR_PRICE', 1), ('qualified', 1), ('javadocLine;\n\n', 1), ('assertFalse(Comparators.isInStrictOrder(asList(5,', 1), ('SequenceEqualTckTest', 1), ('m0', 1), ('converter.convertFromEntity(u1);\n', 1), ('mask)))', 1), ('Single.concatArray(array)\n', 1), ('RebatchRequestsTckTest', 1), ('complain\n', 1), ('instantiation\n', 1), ('lowestFrequencyChar(Map<Character,', 1), ('bowl,', 1), ('org.junit.jupiter.params.provider.Arguments;\nimport', 1), ('deps', 1), ('bulkGetSet;\n\n', 1), ('Generated', 1), ('PublisherBufferOverlappingSubscriber(Subscriber<?', 1), ('ObservablePublishSelector<T,', 1), ('9.0\n', 1), ('emptyCharSourceFactory()', 1), ('dtoEntities.forEach(System.out::println);\n\n', 1), ('Aliquam', 1), ('observableNoUnsubscrib()', 1), ('function6', 1), ('ConcurrentLinkedQueue<Runnable>', 1), ('SingleAmb<T>(null,', 1), ('NullPointerException.\n', 1), ('delegate.add(checkNotNull(first));\n', 1), ('(cancelled', 1), ('testLastCount()', 1), ('Iterator<Integer>()', 1), ('java.util.concurrent.CompletableFuture}', 1), ('TestCase)', 1), ('unwrapDefaultPeriodicTask()', 1), ('handler.caught,', 1), ('CompletableFuture', 1), ('TypeVariableInvocationHandler(typeVariableImpl));\n', 1), ('\'%s\'.",', 1), ('Apple', 1), ('deleted.\n', 1), ('#mapWithIndex(IntStream,\n', 1), ('collector.supplier().get());\n', 1), ('CompoundOrdering(Iterable<?', 1), ('Provides\n', 1), ('withFeatures(features);\n', 1), ('behavior;\n', 1), ('BackpressureHelper.multiplyCap(n,', 1), ('assertTrue(s.isDisposed());\n', 1), ('createAsList()', 1), ('samples.e1(),', 1), ('CascadeType.REMOVE)\n', 1), ('copyOf(Iterator<?', 1), ('this.dr', 1), ('Flowable.<T>fromPublisher(source).materialize().subscribe(lio);\n', 1), ('add(bot,', 1), ('.assertSubscribed().assertValueCount(TestHelper.RACE_DEFAULT_LOOPS).assertComplete().assertNoErrors();\n', 1), ('JVMs.\n', 1), ('m.javadoc.indexOf("{@code', 1), ('compareTo(Delayed', 1), ('Completable.create(emitter', 1), ('mapCrashConditional2()', 1), ('LinkedBlockingQueue<Object>(),\n', 1), ('writer.write("Hello");\n', 1), ('FluentFuture()', 1), ('evenItems.get(0));\n', 1), ('o\n', 1), ('TcpLoggingClient(String', 1), ('library.\n', 1), ('pp.single(0),', 1), ('now(TimeUnit.MILLISECONDS)', 1), ('_.,()]*ObservableSource");\n', 1), ('ArbitraryInstances.get(FloatBuffer.class).capacity());\n', 1), ('13', 1), ('not-null', 1), ('in.read(buffer))', 1), ('castSpell(Command', 1), ('railSorted.reduce(new', 1), ('Many', 1), ('arguments}', 1), ('paramString(interfaceType,', 1), ('aFile.delete();\n', 1), ('Executors.newFixedThreadPool(THREAD_COUNT);\n\n', 1), ('assertTrue(map.toString(),', 1), ('keys)\n\n', 1), ('UnitOfWork', 1), ('overloads)', 1), ('#isPresent}', 1), ('PublishSubscription(Subscriber<?', 1), ('errorNotImplementedWithCause()', 1), ('checkFlowableSchedulerDoc()', 1), ('SET_COUNT_IF,\n', 1), ('cache}.\n', 1), ('completionValueSupplier)', 1), ('to1.assertResult();\n', 1), ('getAvailableLayerEntities();\n', 1), ('coupling', 1), ('doOnEach.subscribe(subscribedObserver);\n\n', 1), ('45,', 1), ('manifest(String', 1), ('DwarvenMineWorker.Action.GO_TO_MINE);\n', 1), ('9:34', 1), ('ObservableBufferBoundarySupplier(ObservableSource<T>', 1), ('TRAMPOLINE;\n\n', 1), ('fileExists()', 1), ('exceptions.forEach(e::addSuppressed);\n', 1), ('domainEvent.setRealTime(false);\n', 1), ('assertEquals("POODLE",', 1), ('cancel"))', 1), ('allPotions.size());\n', 1), ('observers.offer(inner);\n\n', 1), ('observers.length;', 1), ('failingInnerCancelsSource()', 1), ('dirs.offer(parent);\n', 1), ('withSetUp(Runnable', 1), ('Comparable<TimedRunnable>', 1), ('expectedExecutionTime;\n\n', 1), ('Modifier.isNative(getModifiers());\n', 1), ('CompletableErrorSupplier(Callable<?', 1), ('NextIterator(Publisher<?', 1), ('testGivenNumbers()', 1), ('testScanFunctionThrowsAndUpstreamEmitsOnNextResultsInScanFunctionBeingCalledOnlyOnce()', 1), ('MaybeConcatIterable<T>(sources));\n', 1), ('(CompoundOrdering<?>)', 1), ('Observable<Notification<T>>', 1), ('"wheel");\n', 1), ('CompactHashSetTest', 1), ('NavigableSet<V>', 1), ('Preconditions.checkNotNull(result,', 1), ('framework.', 1), ('java.util.logging.Handler;\nimport', 1), ('source.reduce(second);\n\n', 1), ('MILLISECONDS));\n', 1), ('"FlowableFlatMapCompletableCompletable",\n', 1), ('Logger.getLogger(StatusMember.class.getName());\n\n', 1), ('getDateList()', 1), ('V>(initialCapacity);\n', 1), ('generateHashBasedTable(\n', 1), ('(output.txt', 1), ('subscription;\n', 1), ('.flatMap(Functions.justFunction((Maybe<Integer>)null),\n', 1), ('derivedFeatures.remove(SERIALIZABLE_INCLUDING_VIEWS);\n', 1), ('measure\n', 1), ('events;', 1), ('Map};', 1), ('error:', 1), ('8943152917179642732L;\n\n', 1), ('ConnectableFlowable,', 1), ('Appends', 1), ('capture()', 1), ('"Order"},', 1), ('processKey(key);\n', 1), ('org.reactivestreams.Subscriber;\nimport', 1), ('list3.toString());\n\n', 1), ('PatternFilenameFilter("(");\n', 1), ('DelaySubscriber<T>(s,', 1), ('sendLogRequests(writer,', 1), ('deadlock");\n', 1), ('that.getActualTypeArguments());\n', 1), ('wrap(ObjectHelper.requireNonNull(transformer,', 1), ('java.util.Deque;\n\n/**\n', 1), ('manualPropagate()', 1), ('pp.load(properties);\n\n', 1), ('Enum#valueOf(Class,', 1), ('dequeue', 1), ('method.getName().startsWith("test"))', 1), ('FileInputStream.available()', 1), ('Collection<V>>newHashMapWithExpectedSize(expectedKeys));\n', 1), ('retrieve/add/delete/update', 1), ('digOutGold()', 1), ('tearDown.tearDown();\n', 1), ('tail[capacityHint]', 1), ('lineCount', 1), ('6751017204873808094L;\n\n', 1), ('allPotions', 1), ('#CUSTOM', 1), ('sender);\n', 1), ('File(url.toURI());\n', 1), ('this.error.close();\n', 1), ('replenish', 1), ('t4)', 1), ('properties.\n', 1), ('timed.unit());\n', 1), ('relays/replays', 1), ('immediateError2()', 1), ('printAndCountDates(Result', 1), ('href="http://en.wikipedia.org/wiki/Null_Object_pattern">null', 1), ('servant', 1), ('(currConsumerNode', 1), ('GENERAL_PURPOSE(CollectionFeature.GENERAL_PURPOSE);\n\n', 1), ('}).doOnRequest(empty).subscribe(new', 1), ('removeInner(InnerSubscriber<T,', 1), ('reloadCount', 1), ('r.subscribe(subscriber);\n', 1), ('lambdas,', 1), ('ro.onComplete();\n\n', 1), ('commitModify();\n', 1), ('apply(CompletableObserver)}', 1), ('mapper.apply(count++);\n', 1), ('addSampleInstances(Class<T>', 1), ('sourceCode.indexOf("', 1), ('StoppingData', 1), ('com.google.common.util.concurrent.FuturesGetChecked.classValueValidator;\nimport', 1), ('generateMultimap(K', 1), ('(ConflictingRequirementsException', 1), ('typeVariableMethods;\n\n', 1), ('ObservableScanTests', 1), ('bakingService', 1), ('enumValue}', 1), ('ByteSource.concat(sources);\n', 1), ('RuntimeException("always', 1), ('int)', 1), ('fromJavaUtil(@NullableDecl', 1), ('o.time\n', 1), ('testTrampolineWorkerHandlesConcurrentScheduling()', 1), ('CompletableDetach(this));\n', 1), ('testSkip()', 1), ('(acquire).\n', 1), ('CakeLayerInfo(next.getId(),', 1), ('name.contains("$")\n', 1), ('outcome', 1), ('fn.replace("//",', 1), ('ObjectHelper.requireNonNull(onErrorMapper,', 1), ('TransformAction<V>', 1), ('euismod.', 1), ('SwitchMapMaybeObserver(SwitchMapMaybeSubscriber<?,', 1), ('FutureObserver()', 1), ('genericDeclaration.equals(that.getGenericDeclaration())\n', 1), ('value.set(10);\n', 1), ('pickInstance(rawType.getEnumConstants(),', 1), ('open");\n', 1), ('parent.subscribe(source1,', 1), ('schedule', 1), ('individually,', 1), ('map.get(key).add(value);\n', 1), ('executor.execute(barrierTask);\n', 1), ('factoryExpectedForNothing', 1), ('FileCharSinkFactory(initialString);\n', 1), ('service.checkTicketForPrize(new', 1), ('w2.schedule(new', 1), ('filterInvalidSourceConditional()', 1), ('ArbitraryInstances.get(CharBuffer.class).capacity());\n', 1), ('SingleDoOnError<T>(this,', 1), ('fruit.remove(0);\n', 1), ('Runtime.getRuntime().exec("cmd.exe', 1), ('pendingCommands', 1), ('CustomCompletableOperator', 1), ('InnerQueuedSubscriberSupport<Integer>()', 1), ('(b.size()', 1), ('ALLOWS_NULL_ENTRY_QUERIES,\n', 1), ('!once)', 1), ('stack.addFirst(checkNotNull(tearDown));\n', 1), ('DateFormatCallable,', 1), ('Injector', 1), ('com.google.common.io.Files;\nimport', 1), ('ignoreTests', 1), ('(SubscriptionHelper.cancel(upstream))', 1), ('SingleFromPublisher<T>', 1), ('cannot\n', 1), ('validated.\n', 1), ('onErrorNoSubscribeOnErrorCrash()', 1), ('publish(@NullableDecl', 1), ('readers.\n', 1), ('(!cdl.await(5,', 1), ('TakeObserver<T>(observer,', 1), ('1.0', 1), ('serial)', 1), ('String[length];\n', 1), ('Work', 1), ('horror', 1), ('actionThrowsConditional()', 1), ('ObservableNever();\n\n', 1), ('here.\n', 1), ('@ManyToMany(mappedBy', 1), ('errorNotImplementedNull1()', 1), ('BackpressureHelper.addCancel(this,', 1), ('(nextNode', 1), ('IllegalStateException("Queue', 1), ('Subscriber");\n', 1), ('createFromEntries(Entry<K,', 1), ('(int)elements).sorted()\n', 1), ('"http://code.google.com/webtoolkit/doc/latest/DevGuideOrganizingProjects.html#DevGuideModules">\n', 1), ('AlchemistShopTest', 1), ('PerfAsyncConsumer(bh);\n', 1), ('delegate.putAll(map);\n', 1), ('MagicServiceImpl(WizardDao', 1), ('tryDispose()', 1), ('prefetched', 1), ('com.iluwatar.iterator;\n\nimport', 1), ('Collections.unmodifiableMap(headers);\n', 1), ('com.google.common.collect.testing.ListTestSuiteBuilder}.\n', 1), ('InputStream.available(),', 1), ('thread!', 1), ('TestHelper.checkDisposed(Maybe.just(1).delaySubscription(Flowable.never()));\n', 1), ('CompositeException(new', 1), ('nibh', 1), ('CompletableError(error));\n', 1), ('keys()', 1), ('of(Collector<T,', 1), ('org.springframework.beans.factory.annotation.Autowired;\nimport', 1), ('wizards;\n\n', 1), ('DummyExecutor', 1), ('(int)elements).onErrorReturnItem(0)\n', 1), ('completableSource)', 1), ('backingMap()', 1), ('generateArrayList(freshElement);\n', 1), ('queue);\n\n', 1), ('DListener', 1), ('operator-fusion.\n', 1), ('containt', 1), ('writers.\n', 1), ('RuntimeException.class,', 1), ('order(List<Entry<AnEnum,', 1), ('/left\n', 1), ('#get()}', 1), ('RxJavaPlugins.setInitSingleSchedulerHandler(initReplaceWithImmediate);\n', 1), ('Modifier.isProtected(getModifiers());\n', 1), ('testDelete()', 1), ('connectableFlowable;\n', 1), ('DateFormatCallableTestIncorrectDateFormat', 1), ('taskDeltas[i];\n', 1), ('errors()', 1), ('underlying.dispose();\n', 1), ('JAVA_CLASS_PATH.key(),\n', 1), ('flowableDocRefersToFlowableTypes()', 1), ('RefreshFailedException.class,\n', 1), ('technology', 1), ('PatternFilenameFilterTest', 1), ('Feature<Set>', 1), ('Flowable.just(1).safeSubscribe(new', 1), ('java.nio.file.attribute.BasicFileAttributes;\nimport', 1), ('cases\n', 1), ('DoubleConsumer,', 1), ('upperBounds', 1), ('text', 1), ('assertTrue(temporaryFile.exists());\n\n', 1), ('addThrowable(Throwable', 1), ('guavaPredicate::apply}.', 1), ('mergeDelayError(SingleSource<SingleSource<T>>)}', 1), ('io.reactivex.Observable;\n\n/**\n', 1), ('HOME:\n', 1), ('getDeclaredAnnotations()', 1), ('MaybeCreateTest', 1), ('AtomicLongArray(length);\n', 1), ('time?!', 1), ('WrappedCallable(Callable<T>', 1), ('TestHelper.checkDisposed(pp.switchMapCompletable(Functions.justFunction(cs)));\n', 1), ('serialization</a>\n', 1), ('(map.size())', 1), ('automate', 1), ('copyOf(elements.iterator());\n', 1), ('expected;\n\n', 1), ('synchronousFusedCrash()', 1), ('LocalClass<T>', 1), ('early', 1), ('CollectSubscriber(SingleObserver<?', 1), ('DoubleFunctionWithIndex)}.\n', 1), ('generateLinkedHashSet(freshElement);\n', 1), ('com.google.common.base.StandardSystemProperty.JAVA_EXT_DIRS;\nimport', 1), ('bs2));\n', 1), ('flowableInner.blockingLast();\n', 1), ('Functions.justFunction(cs),', 1), ('program.', 1), ('ObservableTakeUntilPredicateTest', 1), ('Servant("Travis");\n\n', 1), ('MaybeEmitter}', 1), ('hashCode\n', 1), ('this.nonBlocking', 1), ('TestHelper.checkDisposed(Observable.interval(1,', 1), ('DoubleStream.empty();\n', 1), ('hose\n', 1), ('"Bang",', 1), ('constructor.newInstance();\n', 1), ('UnsignedInteger', 1), ('interfaceType;\n\n', 1), ('testAddItem()', 1), ('findPattern("ConnectableFlowable<.*>\\\\s+co(0-9|\\\\b)");\n', 1), ('Specification', 1), ('Flowable.never().blockingLatest().iterator().remove();\n', 1), ('splittable</a>.\n', 1), ('scalability', 1), ('super(cause);\n', 1), ('(SubscriptionHelper.setOnce(upstream,', 1), ('to.onError(new', 1), ('stoppingData.setDataBus(DataBus.getInstance());\n', 1), ('int[ARRAY_SIZE];\n\n', 1), ('SequentialExecutor}.\n', 1), ('Global', 1), ('s.onSubscribe(s2);\n', 1), ('(ac', 1), ('read(cbuf,', 1), ('remove(null)},', 1), ('.flatMap(Functions.justFunction(Observable.just(1)),\n', 1), ('innerErrorDelayError2()', 1), ('TimeUnit.MILLISECONDS).blockingLast();\n', 1), ('FlowableConcatMapMaybe(Flowable<T>', 1), ('isPresent();\n\n', 1), ('ObjectHelper.requireNonNull(single,', 1), ('(SubscriptionHelper.isCancelled(s.get()))', 1), ('PARENT_INDEX', 1), ('replaces', 1), ('key.channel().close();\n', 1), ('this.indexes;\n', 1), ('weakCompareAndSet(int', 1), ('by:\n', 1), ('JarFileFinder();\n', 1), ('Generator', 1), ('Stroustrup.\n', 1), ('"/absolute/path/to/class/root"));\n', 1), ('<http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6294589>\n', 1), ('UnsubscribeObserver<T>(t,', 1), ('assertAfterTerminateCalledOnce()', 1), ('Completable.concatArray(a);\n\n', 1), ('weakens', 1), ('onCompletableLift', 1), ('UnsignedBytes}.\n', 1), ('have\n', 1), ('add(LetterComposite', 1), ('synchronization', 1), ('excluding', 1), ('transformedList', 1), ('delegate.awaitTermination(timeout,', 1), ('scanner.scan(ClassLoader.getSystemClassLoader());\n', 1), ('EnumSet.allOf(CollectStrategy.class))', 1), ('KingsHand(kingJoffrey);\n\n', 1), ('TestHelper.checkDisposed(Single.error(new', 1), ('groups.\n', 1), ('pointing\n', 1), ('"valueSupplier', 1), ('requestCompleteRace()', 1), ('Flowable.just(1).switchMap(Functions.justFunction(\n', 1), ('edges.\n', 1), ('ImmediateThinScheduler', 1), ('getTestMethods(Class<?>', 1), ('"FlowableFlatMapCompletable",\n', 1), ('add(jt.getTableHeader(),', 1), ('action.accept(function.apply(fromIterator.nextDouble(),', 1), ('sa.setSubscription(bs1);\n\n', 1), ('com.iluwatar.event.sourcing.event.MoneyDepositEvent;\nimport', 1), ('suite)', 1), ('overrideConnectableObservable()', 1), ('assertTrue(ArbitraryInstances.get(ClassToInstanceMap.class).isEmpty());\n', 1), ('result[1],', 1), ('ObservableBufferBoundarySupplier<T,', 1), ('delegate().awaitUntil(deadline);\n', 1), ('notDisposedWhenReplaced()', 1), ('"maybeSupplier', 1), ('com.iluwatar.module;\n\nimport', 1), ('ObservableSwitchMapSinglePerf', 1), ('Disposables.fromRunnable(new', 1), ('remnant', 1), ('FlowableEventStream', 1), ('java.util.concurrent.Future#isDone()', 1), ('"interface', 1), ('del.addActionListener(new', 1), ('CompletableFromObservableObserver<T>', 1), ('failComputationFlowableBlockingForEach()', 1), ('ExpressionTest(final', 1), ('CompletableSubject.\n', 1), ('AllObserver(SingleObserver<?', 1), ('THREAD_FACTORY;\n\n', 1), ('assertEquals(TEST_PART_TYPE,', 1), ('AtomicReference<AsyncSubscription<T>[]>(EMPTY);\n', 1), ('"Lambo");\n', 1), ('pathByteSourceFactory()', 1), ('"A.B.2",', 1), ('#retry()\n', 1), ('LongMath.saturatedAdd(estimatedSize,', 1), ('obs.onEvent(e);\n', 1), ('visit(t.getOwnerType());\n', 1), ('produced(long', 1), ('onErrorNotImplementedFailureSafe()', 1), ('"metus', 1), ('observables)', 1), ('Schedulers.start();', 1), ('non-fatal', 1), ('HashMapSupplier', 1), ('getSubListSubListRemoveAffectsOriginalLargeListMethod(),\n', 1), ('rangeObservable;\n\n', 1), ('like\n', 1), ('MultiReader', 1), ('@VisibleForTesting', 1), ('*/\n@GwtIncompatible(value', 1), ('"Owner', 1), ('result.length);\n', 1), ('assertFalse(b.get());\n', 1), ('ObserveOnTckTest()', 1), ('subscription)', 1), ('assertEquals(byId.getId(),', 1), ('dependentPromise.get());\n', 1), ('checkDoubleOnSubscribeFlowableToObservable(Function<Flowable<T>,', 1), ('System.out.println("Received', 1), ('urls)', 1), ('"lower', 1), ('map.put("two",', 1), ('TypeVariableImpl<D', 1), ('IsEmptyMaybeObserver(SingleObserver<?', 1), ('fn.replace("\\\\",', 1), ("wouldn't", 1), ('scheduled.\n', 1), ('assertEquals("abc.d.Abc",', 1), ('testAddAndRemove_MapMakerMap()', 1), ('FlowableRepeat<T>', 1), ('ArrayList<V>(expectedValuesPerKey);\n', 1), ('checkDoubleOnSubscribeMaybeToFlowable(Function<Maybe<T>,', 1), ('assertTrue(ArbitraryInstances.get(ImmutableSetMultimap.class).isEmpty());\n', 1), ('HashMap<Object,', 1), ('SEQUENTIAL', 1), ('offer(v1)', 1), ('clazz\n', 1), ('subscriber.onError(error);\n', 1), ('onComplete()}', 1), ('task.onError(e);\n', 1), ('.subscribe().dispose();\n', 1), ('set.add("a");\n', 1), ('Observer<S,', 1), ('REDUCE_LAST', 1), ('InnerQueuedSubscriberTest', 1), ('ObservableDebounce<T,', 1), ('(NavigableSet<K>)', 1), ('errorAfterTermination()', 1), ("algorithm's", 1), ('t1.add(t2);\n', 1), ('groupCount.getAndIncrement();\n\n', 1), ('testSameThreadScheduledExecutor()', 1), ('toFunction4()', 1), ('DisposableHelper.dispose(main);\n', 1), ('String[INPUTS_COUNT];\n\n', 1), ('"hello\\nworld\\n")\n', 1), ('Maybe()', 1), ('statement.executeQuery();', 1), ('FlowableSkipUntil(Flowable<T>', 1), ('encodingInputs', 1), ('lock.readLock()));\n\n', 1), ('Strategies', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/AsyncProcessor.png"', 1), ('everywhere.', 1), ('System.out.println(msg);\n', 1), ('completeAfterNextViaRequest()', 1), ('q.producerIndex()', 1), ('elementOrder;\n\n', 1), ('v.singleOrError();\n', 1), ('FileVisitResult.TERMINATE;\n', 1), ('assertNull(statusMember.getStopped());\n', 1), ('specification):\n', 1), ('result.getDateList().add(this.df.parse(this.dateValue));', 1), ('ReserializedCollectionGenerator<E>', 1), ('findLast(DoubleStream', 1), ('lists[i].size())', 1), ('contentActions', 1), ('assertEquals(99,', 1), ('other.actual.onSubscribe(this);\n', 1), ('debugging', 1), ('t3', 1), ('10.000', 1), ('AbstractListMultimapTester<K,', 1), ('typeVariableMethods', 1), ('DeferredScalarDisposable<R>\nimplements', 1), ('request;\n', 1), ('MaybeConcatArrayTest', 1), ('RuntimeException()));\n', 1), ('2).scan(0,', 1), ('sorted;', 1), ('ParameterizedTypeImpl(ownerType,', 1), ('parent.onSubscribeCall.accept(d);\n', 1), ('Compiles', 1), ('cast(Class<T>', 1), ('to.assertValue(2);\n', 1), ('unmodifiableList(delegate);\n', 1), ('java.text.SimpleDateFormat;\nimport', 1), ('"Observer",\n', 1), ('.toObservable().subscribe(new', 1), ('this.onSubscribeCall', 1), ('FlowableInternalHelperTest', 1), ('severe', 1), ('soldierResponse;\n\n', 1), ('operator",', 1), ('IUnitOfWork.DELETE);\n', 1), ('dir)', 1), ('normally.</li>\n', 1), ('TestCharSource(String', 1), ('Preconditions.checkNotNull(matcher);\n', 1), ('Flowable.timer(i,', 1), ('testAsMapGetImplementsList()', 1), ('com.iluwatar.model.view.controller;\n\nimport', 1), ('FlowableFromFuture(Future<?', 1), ('verify(underlying,', 1), ('tenantCallsCount.putIfAbsent(tenantName,', 1), ('ParallelFlowable<T>,', 1), ('merge2()', 1), ('spaces', 1), ('"POODLE")).hasValue(TestEnum.POODLE);\n\n', 1), ('SingleJust<T>', 1), ('longs.lazySet(i,', 1), ('{"Name",', 1), ('Single.just(1).repeat(5)\n', 1), ('io.reactivex.Scheduler', 1), ('md.actual.onComplete();\n', 1), ('assertThat(findAll.size(),', 1), ('asyncFlatten()', 1), ('lvProducerNode();\n', 1), ('System.out.print(".java:");\n', 1), ('longs.length();\n', 1), ('commanderResponse', 1), ('15;', 1), ('MaybeAmb<T>(null,', 1), ('Flowable.fromPublisher(sources).concatMapDelayError((Function)MaybeToPublisher.instance());\n', 1), ('replace', 1), ('tenantCallsCount.entrySet())', 1), ('(i++)', 1), ('FlowableBlockingSubscribe', 1), ('(context.containsKey(IUnitOfWork.INSERT))', 1), ('sign', 1), ('it);\n\n', 1), ('createWith(K', 1), ('c.subscribe(this);\n', 1), ('assertNotNull(this.factory.apply(0).toString());\n', 1), ('"BlockingQueue";\n', 1), ('"FlowableSingleSingle",\n', 1), ('java.awt.BorderLayout;\nimport', 1), ('.asList();\n', 1), ('Currency.class.getMethod("getAvailableCurrencies");\n', 1), ('this.request', 1), ('assertThat(scanner.resources).contains("com/google/common/reflect/ClassPathTest.class");\n', 1), ('TestHelper.checkDisposed(PublishSubject.create().singleOrError().subscribeOn(new', 1), ('Observable<Timed<Object>>>()', 1), ('InnerSubscriber<T>', 1), ('source.subscribe(st);\n', 1), ('create(Map<K,', 1), ('listListIteratorTesterNumIterations(),\n', 1), ('verify(dispose,', 1), ('single.toObservable();\n', 1), ('type).getName()', 1), ('ObjectHelper.requireNonNull(resumeFunctionInCaseOfError,', 1), ('IntBuffer.allocate(0))\n', 1), ('countLines(String', 1), ('StringBuilder((int)f.length());\n', 1), ('XxxFeature.Require}', 1), ('merge(MaybeSource<?', 1), ('Flowable.just(2).delay(100,', 1), ('assertInterruptibleDrained(q);\n', 1), ('(CakeLayerInfo', 1), ('UncheckedThrowingFuture<V>(error);\n', 1), ('Schedulers.ComputationHolder());\n\n', 1), ('V>(comparator));\n', 1), ('assertNull(RxJavaPlugins.onSubscribe(Single.just(1),', 1), ('checkNotNull(object);\n', 1), ('schedulers', 1), ('java.util.function.Supplier<T>', 1), ('result.add(topping);\n', 1), ('"untested")\npublic', 1), ('Optional.of("abc");\n', 1), ('Modifier.isAbstract(getModifiers());\n', 1), ('declaration', 1), ('testClassPathEntries_URLClassLoader_noParent()', 1), ('ArbitraryInstances.get(ImmutableMap.class));\n', 1), ('TypeVariable<?>[]', 1), ('definition', 1), ('remove(key);\n', 1), ('onSuccess},\n', 1), ('regard', 1), ('List<Future<S>>', 1), ('ClassLoader)', 1), ('verifyZeroInteractions(underlying);\n', 1), ("player's", 1), ('testTrampolineWithFactorialFunction()', 1), ('collecting', 1), ('HashMap<>()));\n', 1), ('choice,', 1), ('#DISPOSED}\n', 1), ('exceptions.size()', 1), ('World!");\n', 1), ('href="http://reactivex.io/documentation/observable.html">ReactiveX\n', 1), ('delaySubscription(delay,', 1), ('ObserveOnSingleObserver<T>', 1), ('noOffer()', 1), ('scheduler.scheduleDirect(parent,', 1), ('this.qd', 1), ('DoFinallyObserver(CompletableObserver', 1), ('java.util.Optional#empty}', 1), ('Timed<Integer>(null,', 1), ('parameterized",', 1), ('TestingDeferredScalarSubscriber(Subscriber<?', 1), ('Observable})\n', 1), ('FlowableDoOnEach<T>', 1), ('(cachedKeySet', 1), ('assertTrue(foo.isAnnotationPresent(ExampleAnnotation.class));\n\n', 1), ('POODLE,\n', 1), ('run;\n\n', 1), ('studentDatabase.delete(student);\n', 1), ('testRequestFromChainedOperator()', 1), ('io.reactivex.exceptions;\n\n/**\n', 1), ('AtomicReference<Producer>();\n//\n//', 1), ('12/14/15', 1), ('parallelFlowable;\n', 1), ('assertTrue(ExceptionHelper.addThrowable(error,', 1), ('Annotations', 1), ('gen;\n', 1), ('SpscLinkedArrayQueue<T>(batchSize);\n', 1), ('AbstractMap<K,', 1), ('callback}', 1), ('testAssertContentsInOrder()', 1), ('computation().start();\n', 1), ('using(new', 1), ('meaningless\n', 1), ('ArbitraryInstances.get(WithPublicConstant.class));\n', 1), ('checkFusedIsEmptyClear(Flowable<T>', 1), ('Single<T>,', 1), ('BlockingFlowableMostRecent<T>', 1), ('registerChannel(AbstractNioChannel', 1), ('CompletableObserver},', 1), ('onCompletableLift.call(lift);\n//', 1), ('!tasks.isEmpty();\n', 1), ('function5', 1), ('Maps.newConcurrentMap();\n\n', 1), ('parameterize', 1), ('multiset.add("b",', 1), ('registerNew(Student', 1), ('sleep()', 1), ('SafeSubscriber<String>', 1), ('server.serve(request);\n', 1), ('java.util.concurrent.locks.ReadWriteLock;\n\nimport', 1), ('MaybeSource,\n', 1), ('t1.start();\n\n', 1), ('subject.test().assertEmpty();\n', 1), ('org.apache.isis.core.specsupport.specs.CukeGlueAbstract;\n\n/**\n', 1), ('subscriber);\n\n', 1), ('(subscribers.length', 1), ('com.google.common.util.concurrent.FuturesGetChecked.isCheckedException;\nimport', 1), ('testIfFunctionThrowsThatNoMoreEventsAreProcessed()', 1), ('supplier,', 1), ('QueueDrainHelper.postComplete(actual,', 1), ('com.google.common.base},', 1), ('Spellbook(String', 1), ('AsyncProcessor()', 1), ('com.iluwatar.hexagonal.test.LotteryTestUtils;\nimport', 1), ('res.getExceptionList())', 1), ('times(1)).onSuccess(Arrays.asList(5,', 1), ('bytes);\n', 1), ('check("Observable");\n', 1), ('delegate().unlock();\n', 1), ('backpressureDelayError()', 1), ('§2.12', 1), ('LambdaObserver<T>', 1), ('tenant', 1), ('testGetInstance()', 1), ('checkDoubleOnSubscribeObservableToSingle(Function<Observable<T>,', 1), ('matcher;\n\n', 1), ('longArray', 1), ('ps2.onComplete();\n', 1), ('ease', 1), ('entrySet().remove(null)}\n', 1), ('upperBound}.', 1), ('assertFalse(DisposableHelper.replace(d,', 1), ('<code>data</code>', 1), ('rco.start);\n\n', 1), ('groups.get(mapKey);\n', 1), ('12/20/15', 1), ('aq.poll();\n', 1), ('Single.just(4),\n', 1), ('serial.setSubscription(s);\n', 1), ('http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/jsr166e/extra/AtomicDoubleArray.java?revision=1.5\n', 1), ('error.set(e);\n', 1), ('super.setValue(cast(getKey(),', 1), ('testOnCompletedExceptionIsThrown()', 1), ('Schedulers.from(executorScheduler);\n', 1), ('ImmutableList.of().listIterator())\n', 1), ('ZipIterableObserver(Observer<?', 1), ('delete(Customer', 1), ('testElementAtFlowable()', 1), ('s.onSubscribe(Disposables.disposed());\n', 1), ('numbers2);\n', 1), ('non-Android', 1), ('findPattern("BehaviorProcessor<.*>\\\\s+bs");\n', 1), ('resourceDisposer,\n', 1), ('.fromCopyOf(integerList)\n', 1), ('sergeantResponse;\n', 1), ('RuntimeException("Oh', 1), ('failComputationFlowableBlockingIterable()', 1), ('Consumer<TestObserver<Void>>()', 1), ('other.subscribe(parent.boundarySubscriber);\n\n', 1), ('(this.error', 1), ('discouraged.\n', 1), ('WashingMachineTest', 1), ('doOnDisposeDispose()', 1), ('"]").asList();\n', 1), ('ps.singleOrError();\n', 1), ('arbitrates', 1), ('testDefaultNewThreadSchedulerIsInitializedLazily()', 1), ('function8Fail()', 1), ('GiantModel}', 1), ('.take(3).subscribe(observer);\n\n', 1), ('previousSpell.redo();\n', 1), ('Object[]{"Archer",', 1), ('b.subscribe(new', 1), ('getSender()', 1), ('AmbCoordinator(Observer<?', 1), ('maintains\n', 1), ('java.util.function.Predicate}.\n', 1), ('concatArray(this,', 1), ('RxJavaPlugins#setInitComputationSchedulerHandler(io.reactivex.functions.Function)}', 1), ('DisposeTask());\n', 1), ('!name.contains("Test")\n', 1), ('InMemoryAppender(GiantView.class);\n', 1), ('continue;', 1), ('first.request();\n', 1), ('INVISIBILITY:\n', 1), ('addAndGet(-missing);\n', 1), ('SingleDelayWithCompletable<T>(this,', 1), ('TestHelper.checkUtilityClass(Functions.class);\n', 1), ('hashes', 1), ('MpscLinkedQueue()', 1), ('link\n', 1), ('normalDelayErrors()', 1), ('NON_CACHING_WITH_CONSTRUCTOR_CHECK(nonCachingWithConstructorCheckValidator()),\n', 1), ('".jar");\n', 1), ('charset).readFirstLine();\n', 1), ('testOnStartRequestsAreAdditive()', 1), ('this.sender', 1), ('instance3', 1), ('Flowable.combineLatestDelayError(\n', 1), ('HasUpstreamMaybeSource<T>,', 1), ('DTO:"', 1), ('NonPublicClass()', 1), ('(shared.get())', 1), ('cgcb.Optional<T>', 1), ('observer1.value;\n', 1), ('generateEquivalence()', 1), ('DisposableHelper.replace(d,', 1), ('ScheduledRunnable.wasScheduled', 1), ('createdDateValues.length;', 1), ('big-endian', 1), ('assertThat(urls.get(0).getProtocol()).isEqualTo("file");\n', 1), ('ImmutableMultiset.of(freshElement);\n', 1), ('CompletableObservable', 1), ('valueSelector,\n', 1), ('CompletableMergeIterableTest', 1), ('AssertionError("Different', 1), ('registerStore(Store', 1), ('<p>TODO:', 1), ("')');\n", 1), ('MaybeJust<T>', 1), ('AtomicDoubleArray(double[]', 1), ('io.reactivex.observers.ObserverFusion;\n\npublic', 1), ('throughout', 1), ('batchSize;\n', 1), ('purgePeriod;\n\n', 1), ('`try-catch`es,', 1), ('singleSource)', 1), ('javax.swing.JButton;\nimport', 1), ('.named(name)\n', 1), ('foundLayers', 1), ('Integer.getInteger("jctools.spsc.max.lookahead.step",', 1), ('idToCustomer.replace(customer.getId(),', 1), ('generateTreeBasedTable(row,', 1), ('DelayWithMainObserver(AtomicReference<Disposable>', 1), ('exceptions.add(new', 1), ('exposing', 1), ('getAddAllUnsupportedNonePresentMethod(),\n', 1), ('registerModified(Student', 1), ('OnErrorNotImplementedException(null);\n\n', 1), ('testsForUnmodifiableList()', 1), ('this.getStudents().set(index,', 1), ('taskLatch.getCount());\n\n', 1), ('com.iluwatar.queue.load.leveling;\n\nimport', 1), ('immediateFuture(0),', 1), ('"b"));\n\n', 1), ('FlowableAutoConnect<T>(this,', 1), ('Message[]', 1), ('AtomicInteger(sources.length', 1), ('BlockingObserver<Object>(q);\n\n', 1), ('fallbackDispose()', 1), ('WithLatestFromObserver<?,', 1), ('time",', 1), ('rxThreadsBefore', 1), ('Range.singleton(freshElement);\n', 1), ('Enumeration', 1), ('OpenJdk6QueueTests().allTests();\n', 1), ('FlowableMaterialize<T>', 1), ('testRead()', 1), ('<code>handler</code>', 1), ('push-fashion', 1), ('delegate().iterator();\n', 1), ('perInstanceEvent)', 1), ('java.util.Spliterators.AbstractSpliterator;\nimport', 1), ('<li>Stripping', 1), ('ON_COMPLETE', 1), ('albumLinks', 1), ('fetchingAnAlreadyFulfilledPromiseReturnsTheFulfilledValueImmediately()', 1), ('iterB.next());\n', 1), ('testDoOnEachWithErrorInCallback()', 1), ('com.google.common.io.Closer;\nimport', 1), ('suppressedTests;\n', 1), ('FlowableFlatMap(Flowable<T>', 1), ('Injects', 1), ('verify(second).dispose();\n', 1), ('DbCustomerDao', 1), ('DocumentImplementation(Map<String,', 1), ('TakeUntilPredicateObserver<T>(s,', 1), ('DefaultSubscriberTest', 1), ('RuntimeException("hello");\n', 1), ('assertNotNull(ArbitraryInstances.get(ThreadFactory.class));\n', 1), ('ObservableToSortedListTest', 1), ('BufferOpenSubscriber<Open>\n', 1), ('connection.prepareStatement("INSERT', 1), ('pattern()', 1), ('List<O>', 1), ('initialized.");\n', 1), ('Arrays.fill(values,', 1), ('studentDatabase;\n', 1), ('onDrop(Notification<T>', 1), ('skipped\n', 1), ('keyComparator()', 1), ('testPut()', 1), ('populates', 1), ('testUnsubscribeHappensAgainstParent()', 1), ('testGetResource()', 1), ('(jvmDefault', 1), ('MaybeOperator#apply(MaybeObserver)', 1), ('bounded1k()', 1), ('result3);\n', 1), ('CountingInputStream', 1), ('SetTestSuiteBuilder.using(keySetGenerator);\n', 1), ('sometime', 1), ('"rx2.purge-enabled";\n\n', 1), ('"Backpressure:",', 1), ('#rowMap}', 1), ('ImmediateThinScheduler();\n\n', 1), ('ArrayListMultimap.create();\n', 1), ('testMultipleCallsReturnTheSameObjectInSameThread()', 1), ('(entry.getValue()', 1), ('GiantView();\n\n', 1), ('checkCanCreate()', 1), ('testSeedFactory()', 1), ('set(AtomicReference<Disposable>', 1), ('task.get().intValue());\n', 1), ('untilFirstPublisher()', 1), ('changes:', 1), ('a.onNext(1);\n', 1), ('"de",', 1), ('elementOrder)', 1), ('})\n@State(Scope.Thread)\npublic', 1), ('List<Arguments>', 1), ('concatArrayEager(MaybeSource<?', 1), ('pi', 1), ('java.util.TreeSet}.\n', 1), ('toArray(bounds);\n', 1), ('compareAndSet(int', 1), ('Stream.of("foo1:bar1",', 1), ('newProxy(final', 1), ('(unbounded', 1), ('OptionalDouble.of(generateDouble());\n', 1), ('HideTckTest', 1), ('subscriptionIndicator', 1), ('subject.subscribe(observer1);\n', 1), ('nTasks', 1), ('(!file.createNewFile()', 1), ('OperatorFlatMapPerf', 1), ('StringSourceFactory();\n', 1), ('(shared.compareAndSet(false,', 1), ('ount1)', 1), ('io.reactivex.processors;\n', 1), ('Observable.just(1).takeLast(1).subscribe(s);\n', 1), ('cachedService;\n', 1), ('org.junit.jupiter.api.Assertions.fail;\nimport', 1), ('testMultipleProducers()', 1), ('allowInterrupt;\n', 1), ('assertTrue(pp.offer(1));\n', 1), ('CoffeeMakingTask(9));\n', 1), ('fail(String.format("Tasks', 1), ('ground!"));\n', 1), ('(!sourceEmpty)', 1), ('FileCharSinkFactory(@NullableDecl', 1), ('assertEquals(this.expectedExecutionTime', 1), ('accessibleObject.getAnnotations();\n', 1), ('CompletableResult(AsyncCallback<T>', 1), ('TestStringSetGenerator\n', 1), ('java.sql.Statement;\nimport', 1), ('true).lastEntry();\n', 1), ('path.remove(path.size()', 1), ('ObservableScanTest', 1), ('compare(long', 1), ('Multimaps#asMap(SortedSetMultimap)}', 1), ("s.indexOf('<',", 1), ('"sollicitudin', 1), ('service(SimpleObjects.class).create(UUID.randomUUID().toString());\n', 1), ('naturalComparatorEnum()', 1), ('Integer.valueOf(s);\n', 1), ('checkNotNull(keyFunction);\n', 1), ('saveNewLayer(CakeLayerInfo', 1), ('(right.hasNext())', 1), ('io.reactivex.Maybe}-\n', 1), ('TestWriter', 1), ('ParallelFlatMap<T,', 1), ('delegate.schedule(wrapTask(task),', 1), ('computation()', 1), ('FlowableFromPublisher<T>', 1), ('ReserializedCollectionGenerator<E>(parentBuilder.getSubjectGenerator()))\n', 1), ('compound', 1), ('till\n', 1), ('Reconstitutes', 1), ('<p>Example', 1), ('unused)', 1), ('Functions.ERROR_CONSUMER.accept(new', 1), ('ImmutableList.copyOf(bounds);\n', 1), ('WeatherObserverTest<Hobbits>', 1), ('allocation.\n', 1), ('DeferredScalarObserver(Observer<?', 1), ('SortedSetTestSuiteBuilder.using((TestSortedSetGenerator<K>)', 1), ('JarOutputStream', 1), ('SYNC_DISPOSED))', 1), ('com.google.common.util.concurrent.FuturesGetChecked.getChecked;\nimport', 1), ('FunctionWithIndex)}.\n', 1), ('Objects::equals);\n', 1), ('mutedClose(Connection', 1), ('MaybeIsEmptySingle<T>(this));\n', 1), ('FlowableAmb(Publisher<?', 1), ('CakeBakingException(String.format("Layer', 1), ('"BooleanSubscription(cancelled="', 1), ('com.google.common.util.concurrent.ListenableScheduledFuture;\nimport', 1), ('testGet_misc()', 1), ('kdx)', 1), ('emits)', 1), ('assertNotNull(instance);\n', 1), ('segment.', 1), ('advantage\n', 1), ('filterSuite(candidateTests);\n\n', 1), ('JsonParser', 1), ('splitrsBuilder.build().spliterator(),\n', 1), ('((Comparable<Object>)', 1), ('this.commanderResponse', 1), ('King}', 1), ('result.getDateList().add(this.df.get().parse(this.dateValue));', 1), ('ObservableIntervalTest', 1), ('Functions.EMPTY_ACTION.toString());\n', 1), ('CompletableTimer(delay,', 1), ('ParallelFilterConditionalSubscriber<T>((ConditionalSubscriber<?', 1), ('AbstractSortedKeySortedSetMultimap(SortedMap<K,', 1), ('Object[count];\n', 1), ('assertNull(RxJavaPlugins.onSubscribe(Flowable.never(),', 1), ('StandardSystemProperty', 1), ('inDateValue;\n', 1), ('partially', 1), ('ImmutableList.of("a");\n', 1), ('elapsed\n', 1), ('Random());\n', 1), ('ObservableRangeTest', 1), ('ObservableReduceWithSingle(ObservableSource<T>', 1), ('.readLines(\n', 1), ('fromArray(@NonNull', 1), ('builder.append("Stats:\\n");\n', 1), ('"test-car-model";\n', 1), ('ArbitraryInstances.get(boolean.class));\n', 1), ('com.google.common.collect.testing.testers.CollectionAddTester;\nimport', 1), ('that.execTime);\n', 1), ('testInterrupt()', 1), ('retryUntil(final', 1), ('colon', 1), ('Container', 1), ('CompletableFromCallableTest', 1), ('field.set(Dispatcher.getInstance(),', 1), ('Completable.mergeArray(pp1.ignoreElements(),', 1), ('io.reactivex.internal.operators.maybe.MaybeToFlowable;\nimport', 1), ('nextVal;\n', 1), ('fishy,', 1), ('ObservableCountSingle(ObservableSource<T>', 1), ('blocking,', 1), ('TestException("Outer")).doOnEvent(new', 1), ('setSpells(Set<Spell>', 1), ('AssertionError("Type.getTypeName', 1), ('CANCELLED\n', 1), ('FlowableTakeUntilPredicate(Flowable<T>', 1), ('ImmutableMap.of(entry.getKey(),', 1), ('DragonSlayingStrategyTest', 1), ('executor.schedule(task,', 1), ('LinkedQueueNode()', 1), ('empty.dispose();\n', 1), ('tuple\n', 1), ('Observable.just(1).startWithArray().test().assertResult(1);\n', 1), ('JAVA8;\n', 1), ('jsp', 1), ('o.subscribe(inner);\n', 1), ('so.cancel();\n\n', 1), ('K>(bufferSize,', 1), ('(int)elements).doFinally(Functions.EMPTY_ACTION)\n', 1), ('a.onNext(o);\n', 1), ('(bt.hasNext())', 1), ('sourceThrows()', 1), ('TestHelper.checkDoubleOnSubscribeObservableToCompletable(new', 1), ('services', 1), ('MaybeSource<Downstream>', 1), ('disposeSelfPeriodicDirect()', 1), ('equivalence}.\n', 1), ('ConsumingQueueIterator(T...', 1), ('OpenJdk6ListTests().allTests();\n', 1), ('.onClose(streamA::close)\n', 1), ('#fuseToMaybe()}\n', 1), ('Performs', 1), ('browser.', 1), ('assertFalse(DisposableHelper.set(d,', 1), ('(fulfillmentAction', 1), ('bs1));\n', 1), ('https://github.com/ReactiveX/RxJava/issues/3885\n', 1), ('getCreateWithNullUnsupportedMethod(),', 1), ('becomes\n', 1), ('(sender', 1), ('errorAll(Subscriber<?>', 1), ('this.allowInterrupt', 1), ('MaybeFromCallable<T>(callable));\n', 1), ('Ugh!\n', 1), ('assertThrows(UnsupportedOperationException.class,', 1), ('this.source2', 1), ('decoratedRun;\n', 1), ('FlattenJustPerf', 1), ('TestSubscriber<Object>[]', 1), ('attention-grabbing.\n', 1), ('fixture', 1), ('meanwhile.', 1), ('Single.concat(Flowable.fromCallable(new', 1), ('IUnitOfWork<Student>', 1), ('fn.indexOf("io/reactivex/");\n\n', 1), ('Ordering.natural(),', 1), ('takes\n', 1), ('pp.concatMapSingle(\n', 1), ('studentRepository.registerModified(shyam);\n', 1), ('ready()', 1), ('Completable.concat(up,', 1), ('BaseFilterSubscriber(Predicate<?', 1), ('accessibleObject.getDeclaredAnnotations();\n', 1), ('Bound.NO_BOUND));\n', 1), ('suppressThrows;\n', 1), ('Emitter(CompletableObserver', 1), ('FlowableReduceSeedSingle(Publisher<T>', 1), ('reloadCount.incrementAndGet();\n', 1), ('bufferSize);\n\n', 1), ('setAccessible(boolean', 1), ('line.trim();\n\n', 1), ('numbered",', 1), ('ScalarSubscription(Subscriber<?', 1), ('SingleZipIterable(Iterable<?', 1), ('.testAllPublicStaticMethods(Resources.class);\n', 1), ('assertTrue(ArbitraryInstances.get(ListMultimap.class).isEmpty());\n', 1), ('readClassPathFiles', 1), ('getBounds()', 1), ('"X"));\n', 1), ('VideoResource}.\n', 1), ('.assertResult("1234");\n', 1), ('eventString', 1), ('gopi', 1), ('(requesting', 1), ('(classInfo.getName().equals(cls.getName()))', 1), ('super(cancellable);\n', 1), ('.<Void>toFlowable()\n', 1), ('rangeFlatMapJust;\n\n', 1), ('navigateToPage()', 1), ('assertEquals("prefetch', 1), ('"Observable");\n\n', 1), ('CharSource.wrap(data);\n', 1), ('timer.replace(scheduler.schedulePeriodicallyDirect(this,', 1), ('.flatMap(Functions.justFunction(Maybe.<Integer>empty()),\n', 1), ('SimpleQueueTest', 1), ('Enum#valueOf}.', 1), ('testsForVector()', 1), ('available",\n', 1), ('flowableInner;\n\n', 1), ('idx1)', 1), ('Extension', 1), ('testsForUnmodifiableSet()', 1), ('assertEquals(Long.valueOf(2),', 1), ('googleOptional.toJavaUtil()}\n', 1), ('ObservableConcatWithMaybe(Observable<T>', 1), ('ObserveOnCompletableObserver\n', 1), ('mutableClass', 1), ('statement.setString(3,', 1), ('priority);\n', 1), ('features.', 1), ('PublishSubject<T>();\n', 1), ('verifyThread(Schedulers.single(),', 1), ('ticketsCollection.insertOne(doc);\n', 1), ('account)', 1), ('ResourceCompletableObserver', 1), ('CollectorTester<>(collector,', 1), ('(LotteryTicketId', 1), ('there,', 1), ('2000));\n', 1), ('SingletonImmutableSet<E>(element);\n', 1), ('checkNotNull(streamA);\n', 1), ('DoOnDisposeObserver(SingleObserver<?', 1), ('be:', 1), ('did\n', 1), ('.put(Stopwatch.class,', 1), ('SettableFuture}).\n', 1), ('IgnoreObservable(CompletableObserver', 1), ('double})', 1), ('ToListObserver(SingleObserver<?', 1), ('(latch.getCount()', 1), ('TypeVariable}\n', 1), ('wip++;\n', 1), ('WeatherObserver}', 1), ('never()).request(anyLong());\n', 1), ('FlowableScan<T>', 1), ('IncrementingIterable(size);\n\n', 1), ('lastTwoPositives', 1), ('io.reactivex.internal.operators.single.SingleZipArray.ZipCoordinator;\n\npublic', 1), ('testRangeWithOverflow4()', 1), ('STRING_CONSTANT', 1), ('accumulates\n', 1), ('ObservableTake<T>', 1), ('Readable.class,\n', 1), ('tests\n\n', 1), ('mapFailHandlerThrowsConditional()', 1), ('switchIfEmpty(MaybeSource<?', 1), ('users,', 1), ('76:', 1), ('delegateList()', 1), ('FloatBuffer.class,\n', 1), ('EmptySubscription.error(t,', 1), ('ListTestSuiteBuilder}', 1), ('otherSource)', 1), ('Single.just(1).subscribe(rso);\n\n', 1), ('WrappingScheduledExecutorServiceTest', 1), ('ForEachWhileSubscriber<T>\nextends', 1), ('addOtherEntries()', 1), ('MapViewOfValuesAsSingletonSets', 1), ('guess', 1), ('Flowable.just(1).throttleFirst(100,', 1), ('derivedFeatures;\n', 1), ('(component)', 1), ('OrcMage("sword"),', 1), ('OutputStream)}.\n', 1), ('memHeap.getUsed();\n\n', 1), ('Flow),', 1), ('allocation/deallocation', 1), ('{SUPPORTS_SET,', 1), ('tasksPerThread;\n', 1), ('c0', 1), ('buffer,\n', 1), ('executeService.submit(reader2);\n\n', 1), ('".class)";\n', 1), ('setSubscription(Subscription', 1), ('onComplete)?}.\n', 1), ('lotteryTicket);\n', 1), ('FlowableDoOnLifecycle(Flowable<T>', 1), ('itrB.hasNext())', 1), ('MergeTckTest', 1), ('ConcatIterableEagerTckTest', 1), ('dictumst.";\n\n', 1), ('RxJavaPlugins.getErrorHandler();\n', 1), ('ArbitraryInstances.get(Boolean.class));\n', 1), ('this.callback', 1), ('ObservableOnErrorNext<T>', 1), ('height="243"', 1), ('ObservableSource<List<Integer>>', 1), ('(rnd.nextDouble()', 1), ('ticketsCollection.deleteMany(new', 1), ('ArrayBlockingQueue<>(bound);\n', 1), ('assertTrue(ArbitraryInstances.get(SortedMapDifference.class).areEqual());\n', 1), ('tf.toString());\n\n', 1), ('"Exception', 1), ('"a\\r\\n",', 1), ('Name', 1), ('non-directory\n', 1), ('provided)', 1), ('put(type,', 1), ('added\n', 1), ('Completable.amb(Arrays.asList(pp0.ignoreElements(),', 1), ('COMPLETE_MASK))', 1), ('nextIndex()', 1), ('showing', 1), ('consumer.accept(iterA.next(),', 1), ('machineStateGlobal', 1), ('UP,\n', 1), ('StringConverter(Class<T>', 1), ('RxJavaPlugins.onSubscribe(Flowable.never(),', 1), ('differing', 1), ('out);\n', 1), ('TakeLastObserver(Observer<?', 1), ('Flowable.just(1).singleElement().toFlowable()\n', 1), ('createdDateValues[i]);\n', 1), ('m.value;\n', 1), ('Single<?>[]', 1), ('wheelProperties.put(HasModel.PROPERTY,', 1), ('7),', 1), ('2).blockingLast(3).intValue());\n', 1), ('mortezaadi@gmail.com\n', 1), ('c.onSuccess(2);\n\n', 1), ('Maps.toStringImpl(this);\n', 1), ('(failOnEmpty)', 1), ('Emitter(s);\n', 1), ('Observable.defer(new', 1), ('out;\n', 1), ('SubscriptionHelper.cancel(actual);\n', 1), ('Completable.error(error).subscribe(rco);\n\n', 1), ('@Param({"0",', 1), ('stream(Collection<T>', 1), ('java.util.function.Function', 1), ('MaybeIgnoreElement<T>(source));\n', 1), ('pp.singleElement().unsubscribeOn(Schedulers.computation())\n', 1), ('Futures.withTimeout(this,', 1), ('LongBuffer.class,\n', 1), ('numberOfSubscribers,\n', 1), ('store.onAction(action));\n', 1), ('emit(Subject<T>', 1), ('generateHashMultimap(K', 1), ('.put(ImmutableSortedMap.class,', 1), ('first-out', 1), ('account);\n', 1), ('(Fruit', 1), ('ArrayList<UnicastProcessor<T>>();\n', 1), ('MaybeDoFinallyTest', 1), ('inodes', 1), ('addTearDown(new', 1), ('50)\n', 1), ('add(@NonNull', 1), ('Observable.<Event>generate(new', 1), ('(suppressedTests.contains(method))', 1), ('Invokable#isOverridable}.\n', 1), ('16;\n', 1), ('(Modifier.isPublic(field.getModifiers())\n', 1), ('for)', 1), ("'items.size()=xx'", 1), ('.named("CopyOnWriteArraySet")\n', 1), ('Object[].class,', 1), ('SYNC_DISPOSED)', 1), ('testAsMapRemoveImplementsList()', 1), ('qs)', 1), ('resourceInfo(Nested.class).getClass());\n', 1), ('FlowableGenerate<T,', 1), ('ws.poll().onError(t);\n', 1), ('SimpleQueue<CompletableSource>', 1), ('ConcurrentHashMap.class);\n', 1), ('super(inEdgeMap,', 1), ('SUBSET_VIEW,\n', 1), ('Concurrently', 1), ('throttlePeriod);\n', 1), ('parent);\n\n', 1), ('ignoreTests\n', 1), ('testGetClassName()', 1), ('fs.get();\n', 1), ('enumValue.name();\n', 1), ('assertEquals(ImmutableSet.of().iterator(),', 1), ('LOGGER.info("Constructing', 1), ('boundarySubscriber.getAndSet((WindowBoundaryInnerSubscriber)BOUNDARY_DISPOSED);\n', 1), ('generateHashdMap(key,', 1), ('.scan(0,', 1), ('dependency', 1), ('random;\n\n', 1), ('normalErrorConditional()', 1), ('super(upstream);\n', 1), ('Observable<V>', 1), ('proceed', 1), ('unsafe()', 1), ('singleStart()', 1), ('.concatMapIterable(new', 1), ('TestHelper.checkDisposed(PublishProcessor.create().ignoreElements().onTerminateDetach());\n', 1), ('collection.size());\n', 1), ('com.google.common.collect.testing.testers.CollectionCreationTester.getCreateWithNullUnsupportedMethod;\n\nimport', 1), ('servers.size())', 1), ('io.reactivex.functions.*;\n\n/**\n', 1), ('socketChannel.read(buffer);\n', 1), ('set!"', 1), ('this.spellDao', 1), ('AsyncCallable}', 1), ('com.google.common.util.concurrent.AtomicDouble;\nimport', 1), ('id.getId());\n', 1), ('java.util.Comparator}', 1), ('REQUESTED', 1), ('.delaySubscription(Flowable.error(new', 1), ('urlByteSourceFactory()', 1), ('Spliterator<?', 1), ('.test(true);\n\n', 1), ('io.reactivex.Scheduler.Worker}\n', 1), ('(this.size()', 1), ('values-to-keys.', 1), ('SingleDetachTest', 1), ('"Brown");\n', 1), ('Multiset.entrySet()}', 1), ('subtypeOf(Type', 1), ('RxJavaPlugins.setInitIoSchedulerHandler(callable2scheduler);\n', 1), ('loadFactor);\n', 1), ('UnsubscribeOnSingleObserver(SingleObserver<?', 1), ('handleEvent(StartingData', 1), ('"com/google/common/io/testdata/i18n.txt");\n', 1), ('m.invoke("INSTANCE");\n', 1), ('testAddAndRemove(ConcurrentMap<String,', 1), ('mergeDelayError2ErrorFirst()', 1), ('EventConsumer(int', 1), ('mergeDelayErrorPublisher()', 1), ('SkipUntilMainSubscriber(Subscriber<?', 1), ('Consumer<TestObserver<T>>', 1), ('(potion', 1), ('"/etc/fonts",', 1), ('non-null,\n', 1), ("<p>Don't", 1), ('generateNavigableMap(\n', 1), ('checkDoubleOnSubscribeObservable(Function<Observable<T>,', 1), ('ROGUE\n', 1), ('publishError(innerObserver,', 1), ('<p>More', 1), ('WithPublicConstants();\n', 1), ('Modifier.isPublic(getModifiers());\n', 1), ('ByteArrayOutputStream#write(byte[])}', 1), ('getArrayClass((Class<?>)', 1), ('(bufferedReader.readLine()', 1), ('polled', 1), ('URL("file:///c:/Documents%20and%20Settings/");\n', 1), ('2288246011222124525L;\n\n', 1), ('TakeUntilPredicateObserver<T>', 1), ('SingleJust<Integer>(10);\n', 1), ('Single}.', 1), ('multimaps', 1), ('BiPredicate.\n', 1), ('names.size())', 1), ('(AnnotatedElement.class.isAssignableFrom(TypeVariable.class))', 1), ('(compareAndSet(acquired,', 1), ('newSubscriber()', 1), ('details3', 1), ('basicCoverage()', 1), ('setValue(T', 1), ('EndConsumerHelper.composeMessage(rso.getClass().getName()));\n', 1), ('visitWildcardType((WildcardType)', 1), ('".":\n', 1), ('fromIterator.next()', 1), ('Mutable();\n\n', 1), ('firstEmpty()', 1), ('<strong>Supported', 1), ('assertThat(timer.elapsed(MILLISECONDS)).isAtLeast(10L);\n', 1), ('testsForConcurrentLinkedQueue()', 1), ('EnumHashBiMap<>(keyType);\n', 1), ('fail.append("The', 1), ('AlchemistShop()', 1), ('orderEntriesByValue(Comparator<?', 1), ('customerStream.forEach((cust)', 1), ('onComplete);\n', 1), ('finish...");\n', 1), ('assertNotNull(SingleInternalHelper.ToObservable.valueOf("INSTANCE"));\n', 1), ('Arrays.asList(getAddNullSupportedMethod(),', 1), ('ObservableBuffer<T,', 1), ('blockingSubscribeObserverError()', 1), ('observableProducer()', 1), ('InMemoryAppender(PartyMemberBase.class);\n', 1), ('ObservableAll<T>', 1), ('InternalConsumer', 1), ('DisposableHelper.values().length);\n', 1), ('DeterministicRandom', 1), ('(!compareAndSet(false,', 1), ('executor.execute(this);\n', 1), ('generateCharMatcher()', 1), ('reader.read();', 1), ('checkNotNull(file1);\n', 1), ('0)))', 1), ('finalization\n', 1), ('Observable<?>', 1), ('count.get();\n', 1), ('com.google.common.collect.Iterables.transform;\n\nimport', 1), ('FeatureSpecificTestSuiteBuilder<?,', 1), ('ArrayDeque<Object>());\n\n', 1), ('entity.toString());\n', 1), ('calculates', 1), ('ExpressionTest<E', 1), ('casts\n', 1), ('csub.add(w2);\n', 1), ('Multiset#forEachEntry}.\n', 1), ('ArrayList<E>(size);\n', 1), ('.observeOn(Schedulers.io()),\n', 1), ('RxJavaPlugins.setInitNewThreadSchedulerHandler(initReplaceWithImmediate);\n', 1), ('ArbitraryInstances.get(SomeAbstractClass.class));\n', 1), ('io.reactivex.internal.operators.flowable.FlowableSequenceEqual.*;\nimport', 1), ('checkNotNull(elements);', 1), ('Dummies.DummyCountDownLatch.class);\n', 1), ('CompletableCreate(source));\n', 1), ('future.cancel(runner', 1), ('java.io.InputStreamReader;\n\nimport', 1), ('sendOnCompleted()', 1), ('generateListMultimap(K', 1), ('ImmutableSet', 1), ('suite.\n', 1), ('compareAndSet(PARENT_INDEX,', 1), ('Arrays.hashCode(objects);\n', 1), ('CallbackCompletableObserver(Action', 1), ('create(WeaponType', 1), ('getAnnotatedBounds()}.', 1), ('Stream.of("a",', 1), ('AnyObserver(Observer<?', 1), ('get(type));\n', 1), ('"[L...")?\n', 1), ('replace()', 1), ('ullamcorper', 1), ('"singleSupplier', 1), ('retryWhen(\n', 1), ('assertNotNull(document.toString().contains(VALUE));\n', 1), ('comparator));\n', 1), ('relate', 1), ('retries.\n', 1), ('testOnErrorExceptionIsThrownFromSingleUnsafeSubscribe()', 1), ('child.onNext(o);\n', 1), ('ImmutableMap.this.keySet();\n', 1), ('backpressureNoRequest()', 1), ('Sets.newHashSet(v0())));\n', 1), ('CacheDisposable(SingleObserver<?', 1), ('Assert.assertTrue(exceptions.get(1)', 1), ('members;\n\n', 1), ('ObservableAutoConnect(ConnectableObservable<?', 1), ('t.setDaemon(true);\n', 1), ('.testAllPublicInstanceMethods(ClassPath.from(getClass().getClassLoader()));\n', 1), ('blew', 1), ('MaybeFromFuture<T>', 1), ('super(Pow2.roundToPowerOfTwo(capacity));\n', 1), ('(note', 1), ('ObservableBufferBoundary<T,', 1), ('Dao', 1), ('nature</li>\n', 1), ('ts1.assertNoErrors();\n\n', 1), ('neque', 1), ('M', 1), ('msg.setBody(message);\n', 1), ('community.\n', 1), ('ancestors', 1), ('TestByteSource(byte[]', 1), ('suite.addTest(testsForLinkedHashSet());\n', 1), ('(gate)', 1), ('TestHelper.checkDisposed(PublishSubject.<Integer>create().singleElement().doOnEvent(new', 1), ('OpenJdk6SetTests().allTests();\n', 1), ('height="515"', 1), ('5718521705281392066L;\n\n', 1), ('Ordering.natural();\n', 1), ('MutableClassToInstanceMap<B>(backingMap);\n', 1), ('o.subscribe(new', 1), ('held.\n', 1), ('Collection#stream}', 1), ('Completable.concat(Flowable.range(1,', 1), ('TypeToken<HashMap<String,', 1), ('initialization,', 1), ('entryArray', 1), ('(RegularImmutableList<Object>)', 1), ('set.add(inner);\n', 1), ('com.iluwatar.databus;\n\nimport', 1), ('getAvailableLayerEntities()', 1), ('congue.', 1), ('getValueNotInPopulatedMap()', 1), ('15.12.2015', 1), ('}.mergeWith(Maybe.<Integer>empty())\n', 1), ('FlowableFlatMapCompletableCompletable(Flowable<T>', 1), ('runLatch.getCount());\n\n', 1), ('RegularImmutableSet}.\n', 1), ('nothing!");\n', 1), ('RxJavaPlugins.setOnCompletableSubscribe(completableObserver2completableObserver);\n', 1), ('Delay(sd,', 1), ('crashOnComplete;\n\n', 1), ('JarFileFinder.pickAnyJarFile();\n', 1), ('8).equals("CompletableObserver"))', 1), ('times(1)).onError(e);\n', 1), ('failSingleObservableBlockingFirst()', 1), ('TASK_COUNT;', 1), ('feugiat', 1), ('interchangeable.\n', 1), ('connectableObservable;\n', 1), ('.suppressing(suppressForEnumSet())\n', 1), ('setupDownstream()', 1), ('io.reactivex.*;\n\n/**\n', 1), ('to.assertValue(0);\n', 1), ('Object>>>', 1), ('java.nio.channels.SocketChannel;\n\n/**\n', 1), ('ObjectHelper.requireNonNull(d,', 1), ('SingleObserver\n', 1), ('observableInner', 1), ('LotteryNumbers()', 1), ('testConstructingWithNullExecutor_fails()', 1), ('(!parent.isDirectory())', 1), ('subscriptions)', 1), ('BadObservable', 1), ('List<A>', 1), ('ReduceObserver<T>(observer,', 1), ('BlockingSubscriber<Integer>', 1), ('r.close();\n', 1), ('encodingInputs.length;', 1), ('list.hashCode();\n', 1), ('classFullName.substring(0,', 1), ('FlowableConcatMapCompletable<T>', 1), ('onDisposed(value);\n', 1), ('ofImmutable(\n', 1), ('-7449079488798789337L;\n\n', 1), ('mock.assertLastMethodCalled("scheduleAtFixedRate",', 1), ('filesystem-specific\n', 1), ('//return', 1), ('CachedThreadScheduler.\n', 1), ('<p>One', 1), ('Selector.open();\n', 1), ('onSubscribeCrashed()', 1), ('SingleDoOnDispose(SingleSource<T>', 1), ('fs.requestFusion(mode', 1), ('SafeSubscriberWithPluginTest', 1), ('mapFailWithSkip()', 1), ('CharSource.empty())\n', 1), ('RxJavaPlugins.setInitIoSchedulerHandler(initReplaceWithImmediate);\n\n', 1), ('DListener());\n\n', 1), ('V2', 1), ('com.google.j2objc.annotations.J2ObjCIncompatible;\nimport', 1), ('completableComplete()', 1), ('servant,', 1), ('getJavaChannel().socket().bind(new', 1), ('ConcurrentSkipListMap<String,', 1), ('overrides.\n', 1), ('list.indexOf(3));\n\n', 1), ('Mockito.never()).onComplete();\n', 1), ('Single.fromPublisher(Flowable.empty())\n', 1), ('assertTrue(ticket2.isPresent());\n', 1), ('emptyConditionalBackpressured()', 1), ('AbstractObservableWithUpstreamTest', 1), ('j)\n', 1), ('o.dispose();\n\n', 1), ('height="278"', 1), ('architecture.', 1), ('(int)elements).subscribeOn(Schedulers.single())\n', 1), ('ObservableFlatMapCompletableCompletable<T>', 1), ('assertEquals(false,', 1), ('execTime;\n\n', 1), ('generateImmutableTable(\n', 1), ('Acquire', 1), ('NPEs', 1), ('(int)elements).publish().autoConnect()\n', 1), ('CrashingMapperIterator(int', 1), ('delayedRunnableCrash()', 1), ('assertEquals(Long.valueOf(1),', 1), ('bufferSupplier);\n', 1), ('TextualAorAn', 1), ('spscLinkedArrayQueueNoNepotism()', 1), ('UnsignedLong.ZERO)\n', 1), ('251330541679988317L;\n\n', 1), ('assertFalse(fakePool.hasNext());\n\n', 1), ('Functions.toFunction(function5);\n', 1), ('is.cancel();\n\n', 1), ('Partially', 1), ('visit(t.getActualTypeArguments());\n', 1), ('redoStack.offerLast(previousSpell);\n', 1), ('FileByteSink(File', 1), ('ScheduledDirectPeriodicTask(new', 1), ('AtomicReference<AsyncDisposable<T>[]>', 1), ('generator-like', 1), ('assertThat(e)\n', 1), ('request[4]});\n', 1), ('assertTrue(b.isCancelled());\n', 1), ('r1);\n\n', 1), ('aa,', 1), ('mapErrorNoError()', 1), ('TestHelper.checkUtilityClass(FlowableBlockingSubscribe.class);\n', 1), ('arbitraryNullFriendlyComparator()', 1), ('FlattenIterableSubscriber(Subscriber<?', 1), ('org.junit.Test;\n\n/**', 1), ('fromEntity)', 1), ('setup(Blackhole', 1), ('cache.', 1), ('RegularImmutableSet<Object>(Collections.emptySet());\n\n', 1), ('task.cancel(true);\n', 1), ('(Object[])h[cap];\n', 1), ('a.onNext(o);\n\n', 1), ('observer1', 1), ('unmodifiableList', 1), ('longs.compareAndSet(i,', 1), ('tool', 1), ('Collections.addAll(queue,', 1), ('tryEmitScalar(Callable<?', 1), ('==\n', 1), ('#poll()}\n', 1), ('getListIteratorFullyModifiableMethod()', 1), ('3972397474470203923L;\n\n', 1), ('scheduler.scheduleDirect(runnable,', 1), ('subinterface.\n', 1), ('ExternalConsumer(bh,', 1), ('dropping.\n', 1), ('fromEntryList(\n', 1), ('OnErrorReturnItemTckTest', 1), ('javaImpl', 1), ('ba3', 1), ('com.iluwatar.servicelayer.hibernate.HibernateUtil;\nimport', 1), ('this.argumentsList', 1), ('thisOptional.isPresent()', 1), ('list.subList(2,', 1), ('java.util.ServiceLoader;\nimport', 1), ('ListenableFutureTaskTest', 1), ('java.util.Random;\n\nimport', 1), ('onCallback\n', 1), ('testStringConverter_reverse()', 1), ('sit;\n\n', 1), ('checkArgument(superclass', 1), ('.put(MapDifference.class,', 1), ('this.mar', 1), ('Single.wrap(new', 1), ('ArrayDeque<ObservableSource<?', 1), ('ss.test();\n', 1), ('expectedValuesPerKey;\n', 1), ('IgnoreMaybeObserver(CompletableObserver', 1), ('Integer[100', 1), ('Enum.valueOf(enumClass,', 1), ('exchange.\n', 1), ('suppressForUnmodifiableList()', 1), ('LEVEL', 1), ('ObservableElementAtMaybe<T>', 1), ('Completable-like', 1), ('TestHelper.checkDisposed(PublishSubject.create().flatMapIterable(new', 1), ('CONSTANT1,\n', 1), ('completeAfterNext()', 1), ('internal(Blackhole', 1), ('TestHelper.checkDisposed(Completable.complete().andThen(Single.just(1)));\n', 1), ('MESSAGE', 1), ('.put(Set.class,', 1), ('completeAfterMain()', 1), ('(Observer<T>)INSTANCE;\n', 1), ('testElementAtOrDefaultWithMinusIndexFlowable()', 1), ('member.toString());\n', 1), ('testClassPathEntries_emptyURLClassLoader_noParent()', 1), ('direction,', 1), ('del;\n\n', 1), ('(null)', 1), ('java.awt.Dimension;\nimport', 1), ('FlowableConcatMapMaybePerf', 1), ('Callable.\n', 1), ('BQueue-', 1), ('ts.values();\n', 1), ('field.get();\n\n', 1), ('500;\n', 1), ('properties.entrySet()\n', 1), ('LotteryAdministration', 1), ('Spliterator<Integer>', 1), ('source2;\n\n', 1), ('.concatMapSingle(Functions.justFunction(Single.never()))\n', 1), ('isCancelled(Subscription', 1), ('withSingleDoubleOnSubscribe()', 1), ('ae.initCause(ex);\n', 1), ('singleCreate()', 1), ('assertEquals("No', 1), ('made,', 1), ('createDerivedKeySetSuite(TestSetGenerator<K>', 1), ('visitGenericArrayType((GenericArrayType)', 1), ('periodic)', 1), ('assertNull(ArbitraryInstances.get(WithNullConstant.class));\n', 1), ('Constructor}.', 1), ('CollectionFeature(Feature<?', 1), ('LoggerFactory.getLogger(StudentRepository.class);\n\n', 1), ('available=%d', 1), ('spellbookDao.findAll();\n', 1), ('rowsFuture', 1), ('ObservableDematerialize(ObservableSource<Notification<T>>', 1), ('loss,', 1), ('Completable.mergeDelayError(Flowable.just(pp.ignoreElements())).test();\n\n', 1), ('PatternFilenameFilter', 1), ('SingleOperator<?', 1), ('#fileTraverser()}', 1), ('groupBy(Blackhole', 1), ('studentToBeUpdated)', 1), ('TakeUntilOtherSubscriber(this);\n', 1), ('scales', 1), ('(QueueDisposable<T>)s;\n', 1), ('generateNavigableMap(key,', 1), ('promise.onError(exceptionHandler);\n', 1), ('reader.read())', 1), ('org.hamcrest.CoreMatchers.is;\nimport', 1), ('assertTrue(errors.get(0).toString(),', 1), ('generateFloatBuffer()', 1), ('TimeIntervalSubscriber(Subscriber<?', 1), ('used;', 1), ('3451719290311127173L;\n', 1), ('bounded.subscribe(new', 1), ('parent.dispose();\n', 1), ('verify(subscription).dispose();\n', 1), ('SequentialExecutor(fakePool);\n', 1), ('names-', 1), ('Maybe.zip(Arrays.asList(pp.singleElement(),', 1), ('printThisBefore();\n', 1), ('isAbstract()', 1), ('reserved.', 1), ('all.size());\n', 1), ('t1}\n', 1), ('CompletableHide(this));\n', 1), ('.put(File.class,', 1), ('ObservableFromTest', 1), ('RxJavaPlugins.onSubscribe(Completable.never(),', 1), ('V>(delegate,', 1), ('getTearDown()', 1), ('""))\n', 1), ('MultiInputStream(Collections.nCopies(10_000_000,', 1), ('(index++', 1), ('ScalarDisposable<T>\n', 1), ('.addEqualityGroup(classInfo(Test.class),', 1), ('long[]', 1), ('ps.test(true);\n\n', 1), ('Features\n\n', 1), ('ConcurrentLinkedQueue<T>(items);\n', 1), ('source.blockingFirst().intValue());\n\n', 1), ('sets,\n', 1), ('PerfBoundedSubscriber', 1), ('java.util.function.IntConsumer;\nimport', 1), ('serially', 1), ('OS_NAME("os.name"),\n\n', 1), ('resource;', 1), ('Iterator<Runnable>', 1), ('Fetched', 1), ('order(List<AnEnum>', 1), ('capped()', 1), ('FlowableSubscriber<Open>,', 1), ('OnSuccess(value),', 1), ('connect(String', 1), ('BiObjectPredicate();\n\n', 1), ('CrashingIterator(int', 1), ('producerLookAhead;\n', 1), ('TestPlatform()', 1), ("7's", 1), ('MaybeFromRunnable<T>', 1), ('BackpressureHelper.multiplyCap(Long.MAX_VALUE,', 1), ('subscribers.length);\n', 1), ('HasUpstreamCompletableSource', 1), ('abstract.', 1), ('1024.0);\n', 1), ('.single(-99)\n', 1), ('thisOptional', 1), ('(%s)', 1), ('Functions.justFunction(null))\n', 1), ('outerWrapper.getWrappedRunnable();\n', 1), ('setImplementation(Random.class,', 1), ('holderField', 1), ('deduped.length;\n', 1), ('io.reactivex.plugins.RxJavaPlugins}\n', 1), ('128', 1), ('generateDouble()', 1), ('assertEquals(e.getCause().getMessage(),', 1), ('Completable.merge(\n', 1), ('com.google.common.collect.testing.testers.Platform.listListIteratorTesterNumIterations;\nimport', 1), ('(constants', 1), ('ArrayList<Throwable>(sources.length', 1), ('assertEquals(Integer.valueOf(12),', 1), ('IgnoreObservable<T>', 1), ('LinkedHashMap<>(map);\n', 1), ('create(Class<K>', 1), ('listeners.forEach(listener', 1), ('InMemoryAppender(Reader.class);\n', 1), ('com.example:ui-thread}).\n', 1), ('delegate().iterator())', 1), ('io.reactivex.Emitter;\nimport', 1), ('(!from.renameTo(to))', 1), ('s.writeDouble(get(i));\n', 1), ('ImmutableMapEntrySet<K,', 1), ('numberOfObservers)', 1), ('verifyNoMoreInteractions(exceptionHandler);\n', 1), ('tempDir;\n', 1), ('(Supplier<Heavy>)', 1), ('*/\n@ExtendWith(SpringExtension.class)\n@ContextConfiguration(classes', 1), ('Range.all();\n', 1), ('succeeded)', 1), ('Observable#subscribe}', 1), ('super.offer(e);\n', 1), ('doOnDisposeCalled()', 1), ('ArbitraryInstances.get(Runnable.class).run();\n', 1), ('function8', 1), ('com.iluwatar.multiton;\n\nimport', 1), ('observe.\n', 1), ('Schedulers.io();', 1), ('super(webClient);\n', 1), ('"Bip",', 1), ('DisposeTask(once,', 1), ('testForEachKnownOrder()', 1), ('PriorityBlockingQueue<TimedRunnable>();\n\n', 1), ('java.util.Objects#equals}', 1), ('Observable.fromArray(array).reduce(0,', 1), ('bitEquals(double', 1), ('multisets.get(j).add(queries[j],', 1), ('result.usingGenerator(generator);\n', 1), ('java.nio.file.Files.createDirectory;\nimport', 1), ('<i>extend</i>', 1), ('threadFactory;\n\n', 1), ('https://code.google.com/p/guava-libraries/issues/detail?id=1505\n', 1), ('Optional<S>}', 1), ('FlowableBlockingSubscribe()', 1), ('TestSuite(testerClass);\n', 1), ('lock\n', 1), ('LinkedHashMultimapGwtSerializationDependencies<K,', 1), ('AtomicBoolean();\n\n\n', 1), ('java.lang.String.valueOf;\n\nimport', 1), ('((CompositeException)to.errors().get(0)).getExceptions().size());\n', 1), ('EnumSerializedForm(EnumMap<K,', 1), ('Iterators.peekingIterator(ImmutableSet.of().iterator()))\n', 1), ('WithPublicConstants();\n\n', 1), ('(!(ex.getCause().getCause()', 1), ('ImmutableBiMap.copyOf(inEdges),', 1), ('this.layers', 1), ('(ex.isPresent())', 1), ('assertEquals(-100,', 1), ('"observable."', 1), ('runOperation(int', 1), ('(!m.signature.contains("Observable")\n', 1), ('sampleInstances.get(rawType);\n', 1), ('testIsEmpty_map()', 1), ('requestedMode)', 1), ('SingleHolder.DEFAULT;\n', 1), ('standardToArray();\n', 1), ('emulated()', 1), ('code.', 1), ('ExecutorScheduler', 1), ('href="http://reactivex.io/documentation/operators/ignoreelements.html">ReactiveX', 1), ('queue.offer(v);\n', 1), ('ConnectableObservable()', 1), ('DisposableSingleObserver&lt;Integer&gt;', 1), ('deleteRecursivelyOrLog(java.nio.file.Path', 1), ('writer2', 1), ('System.out.println(")");\n', 1), ('testElementAtWithMinusIndexFlowable()', 1), ('hooks', 1), ('logPatternCompilerError(ServiceConfigurationError', 1), ('shouldRetrieveChildren()', 1), ('accumsan', 1), ('SafeTreeMap.\n', 1), ('MaybeOperator', 1), ('splitrsBuilder', 1), ('parameterizedType.getOwnerType())', 1), ('assertTrue(executor.isShutdown());\n', 1), ('Builder<E>();\n', 1), ('ParallelFilterConditionalSubscriber(ConditionalSubscriber<?', 1), ('RunnableAdapter<T>', 1), ('LOCAL_CLASS_HAS_NO_OWNER', 1), ('assertFalse(fallback.hasObservers());\n\n', 1), ('MaybeIsEmptySingle(MaybeSource<T>', 1), ('BiFunction<List<Object>,', 1), ('"testdata/i18n.txt"));\n', 1), ('read(@NullableDecl', 1), ('"io.reactivex:io";\n', 1), ('CompletableConcatSubscriber\n', 1), ('patternCompiler.compile(pattern);\n', 1), ('assemblyTrackingObservable()', 1), ('offered', 1), ('zone.', 1), ('ambWithFirstFires()', 1), ('onXXX}\n', 1), ('jsp;\n', 1), ('FlowableBuffer<T,', 1), ('checkNonnegative(expectedValuesPerKey,', 1), ('throughput.\n', 1), ('BackpressureHelper.multiplyCap(3,', 1), ('Nazgul(NazgulName.ADUNAPHEL));\n', 1), ('v2));\n', 1), ('schedulerKind;\n\n', 1), ('createValues()', 1), ('apply(double', 1), ('paramString(CharMatcher.class,', 1), ('hit,\n', 1), ('onSuccess(U', 1), ('mergeDelayError4()', 1), ('suppressForAbstractSequentialList()', 1), ('JavaVersion.CURRENT.newArrayType(componentType);\n', 1), ('rmo.onSuccess(1);\n\n', 1), ('suppressForLinkedHashSet()', 1), ('ConcatMapMaybeSubscriber(Subscriber<?', 1), ('java.util.stream.IntStream;\n\nimport', 1), ('characterFrequency(String', 1), ('pp1.singleOrError().takeUntil(pp2).test();\n\n', 1), ('(p.matcher(line).find())', 1), ('getService(String', 1), ('eq(fields))).thenReturn(expectedDetails);\n\n', 1), ('request\n//', 1), ('(T)o;\n', 1), ('"Adam",', 1), ('components)', 1), ('generateJavaOptional()', 1), ('Single.mergeDelayError(Flowable.just(\n', 1), ('BootstrappingGlue', 1), ('AtomicReference<SlotPair<T>>();\n\n', 1), ('observer.onSubscribe(sd);\n', 1), ('"new', 1), ('capacity;\n\n', 1), ('ImmutableAsList<E>', 1), ('onAfterNext;\n', 1), ('777);\n', 1), ('rare.\n', 1), ('height="309"', 1), ('1001,', 1), ('.put(StringReader.class,', 1), ('set.clear();\n', 1), ('.concatMapSingle(Functions.justFunction(ss))\n', 1), ('visitFile(Path', 1), ('Tenant("Adidas",', 1), ('ts.awaitTerminalEvent();\n', 1), ('generator.invoke(this,', 1), ('assertTrue(ArbitraryInstances.get(DelayQueue.class).isEmpty());\n', 1), ('@MapFeature.Require(SUPPORTS_PUT)\n', 1), ('(!unbounded)', 1), ('videoDetails', 1), ('intentions', 1), ('assertTrue(unsubscribeThread', 1), ('pairs\n', 1), ('com.google.common.base.Throwables.throwIfUnchecked;\n\nimport', 1), ('((ScalarCallable<Integer>)m).call().intValue());\n', 1), ('File("/C:\\\\\\u20320', 1), ('RxJavaPlugins.clearAssemblyTracking();\n//', 1), ('Set<V>>},', 1), ('MaybeMapTest', 1), ('NullPointerException()));\n', 1), ('Completable.timer(2,', 1), ('presentInstances(\n', 1), ('lists[i];\n', 1), ('BrokenBarrierException.class,\n', 1), ('InnerObserver<T>(0,', 1), ('AsyncTask#onError(Throwable)}.\n', 1), ('charset).read();\n', 1), ('edges.', 1), ('(System.getenv("CI")', 1), ('checker,', 1), ('pendingWrites);\n', 1), ('FlatMapTckTest', 1), ('suppressForEmptyList()', 1), ('"capacityHint");\n', 1), ('Callable<Object>,', 1), ('SomeClass.logger.removeHandler(handler);\n', 1), ('hashCodeOf()', 1), ('Futures.addCallback(this,', 1), ('.flatMapObservable(new', 1), ('assertNotNull(SingleInternalHelper.ToFlowable.valueOf("INSTANCE"));\n', 1), ('(!veryEnd)', 1), ('Logger.getLogger(TearDownStack.class.getName());\n\n', 1), ('Maybe-specific', 1), ('System.out.println("Sequence', 1), ('s),', 1), ('CompletableTimeout(this,', 1), ('.put(ImmutableListMultimap.class,', 1), ('SingleSubject()', 1), ('AppConfigTest', 1), ('tester.testAllPublicInstanceMethods(converter);\n', 1), ('f.serialize());\n\n', 1), ('time);\n', 1), ('TEST_PART_MODEL', 1), ('"Blair");\n', 1), ('.iterator());\n', 1), ('checkNotNull(equivalence);\n', 1), ('ObservableRetryPredicate<T>', 1), ('elementOrder.hashCode()', 1), ('RetentionPolicy.RUNTIME,\n', 1), ('Scout}', 1), ('lock.writeLock(),', 1), ('DelaySubscriber(SubscriptionArbiter', 1), ('ba3;\n', 1), ('source.iterator();\n', 1), ('UnitTest(final', 1), ('entirely.', 1), ("sb.append(line).append('\\n');\n", 1), ('AsyncExecutor\n', 1), ('java.util.Queue#poll()\n', 1), ('Completable.concatArray(Completable.complete(),', 1), ('assertEmptyEnum(Class<E>', 1), ('TestIntegerSetGenerator', 1), ('AlbumListPage(WebClient', 1), ('Executors.newSingleThreadedExecutor();\n', 1), ('isDone.get();\n', 1), ('rangeAsync(Blackhole', 1), ('"onComplete()");\n', 1), ('ArbitraryInstances.get(ArrayList.class).size());\n', 1), ('super(200L);\n', 1), ('Integer.parseInt(properties.getProperty("mongo-port"));\n', 1), ('Returns:\n', 1), ('IntervalSubscriber(ts);\n', 1), ('.getFile());\n', 1), ('e4.getMessage());\n\n', 1), ('exactSequence()', 1), ('(Modified', 1), ('shorterSequence()', 1), ('fs.onError(ex);\n', 1), ('Iterators.pollNext(entryIterator());\n', 1), ('terminate(AtomicReference<Throwable>', 1), ('@Ignore("This', 1), ('TestException("onComplete()");\n', 1), ('validity\n', 1), ('step;\n', 1), ('ObjectHelper.requireNonNull(completionValue,', 1), ('CustomCompletableObserver', 1), ('checked.\n', 1), ('@Documented\n', 1), ('Single.using(new', 1), ('doOnDisposeError()', 1), ('Flowable.empty().blockingLatest().iterator().next();\n', 1), ('SingleEquals<T>(first,', 1), ('map.size();\n', 1), ('view.displayGiant(model);\n\n', 1), ('.put(RowSortedTable.class,', 1), ('this.onAfterTerminated', 1), ('parameterizedType', 1), ('mapMaker', 1), ('(unaligned),', 1), ('qs.requestFusion(QueueDisposable.ANY);\n', 1), ('gen.samples();\n', 1), ('reportDisposableSet()', 1), ('assertEquals(ByteSource.empty(),', 1), ('2nd', 1), ('describing', 1), ('subscriber.onError(new', 1), ('Dummies', 1), ('flowableInner()', 1), ('RxJavaPlugins.resetAssemblyTracking();\n//\n//\n//', 1), ('MaybeFromCallable(Callable<?', 1), ('"1048576",', 1), ('SingleElementSubscriber(Subscriber<?', 1), ('com.google.common.collect.testing.features.ListFeature.SUPPORTS_ADD_WITH_INDEX;\nimport', 1), ('(Application', 1), ('ParallelFlowable#sequential(int)\n', 1), ('queue.remove(timedRunnable);\n', 1), ('SequentialDisposable\nextends', 1), ('reacts', 1), ('(DwarvenMineWorker', 1), ('workQueue);\n', 1), ('getNumbers()', 1), ('modifiedStudents', 1), ('8828587559905699186L;\n', 1), ('ObjectHelper.requireNonNull(error,', 1), ('this.singleSupplier', 1), ('readable;\n', 1), ('SerialDisposable.\n', 1), ('MergeMaybeObserver<T>\n', 1), ('pp.single(-99).unsubscribeOn(Schedulers.computation())\n', 1), ('VolatileSizeArrayList<Integer>();\n\n', 1), ('DisposableLambdaObserver(Observer<?', 1), ('negatives', 1), ('com.google.common.collect.testing.features.CollectionFeature.KNOWN_ORDER;\nimport', 1), ('member;\n\n', 1), ('allPotions.addAll(topShelf);\n', 1), ("'rail'\n", 1), ('generateImmutableSet(E', 1), ('ParallelMapSubscriber(Subscriber<?', 1), ('map.values())', 1), ('StrictSubscriber(Subscriber<?', 1), ('href="http://staff.ustc.edu.cn/~bhua/publications/IJPP_draft.pdf">BQueue</a>', 1), ('ps2)\n', 1), ('ArbitraryInstances.get(Reader.class).read());\n', 1), ('s.requestMore(1);\n', 1), ('parentheses");\n', 1), ('RxJavaPlugins.getOnSingleCreate());\n//', 1), ('COMPANY:\n', 1), ('property.key());\n', 1), ('okay', 1), ('immediateFuture(0);\n', 1), ('FutureSingleObserver<T>', 1), ('org.apache.isis.applib.fixturescripts.FixtureScript;\n\nimport', 1), ('LordVarys}', 1), ('visited.remove(type);\n', 1), ('this.lists', 1), ('this.customerId;\n', 1), ('FlowableError<T>', 1), ('list("src/test/java/io/reactivex/",', 1), ('limit,\n', 1), ('CompoundOrdering<Object>', 1), ('completely', 1), ('"Alfonso",', 1), ('((nextNode', 1), ('DelayErrorInnerObserver<R>(actual,', 1), ('InvalidObjectException', 1), ('thread.<br>\n', 1), ('delegate().awaitNanos(nanosTimeout);\n', 1), ('samples();\n', 1), ('scheduler).subscribe(ts);\n\n', 1), ('Reflection.getPackageName(Iterable.class));\n', 1), ('setRest(Future<?>', 1), ('infinite.\n', 1), ('spConsumerNode(node);\n', 1), ('Socket(InetAddress.getLocalHost(),', 1), ('eventType', 1), ('subscribeTo(Publisher<Integer>', 1), ('forEachWhile()', 1), ('MinimalSet(Class<?', 1), ('fullName)', 1), ('Enums.getField(AnEnum.FOO);\n', 1), ('up.onNext(Completable.complete());\n', 1), ('write:\n', 1), ('Reader}.\n', 1), ('foreseeable', 1), ('reportError(t);\n', 1), ('Emitter(SingleObserver<?', 1), ('assertFalse(RxJavaPlugins.isLockdown());\n', 1), ('testScanDirectory_symlinkCycle()', 1), ('Target()', 1), ('Single.ambArray(Single.just(1),', 1), ('wip.decrementAndGet();\n', 1), ('ScalarDisposable<R>(observer,', 1), ('generateSortedMap(\n', 1), ('<p>Some', 1), ('java.util.prefs.BackingStoreException;\nimport', 1), ('loadAllCount', 1), ('Field},', 1), ('validationNull()', 1), ('AbstractSet<String>()', 1), ('super(ObjectHelper.requireNonNull(value,', 1), ('single.toMaybe();\n', 1), ('determine\n', 1), ('c.cancel();\n\n', 1), ('PRODUCTS:\n', 1), ('tempFile', 1), ('Parses', 1), ('selector)', 1), ('FlowableFlatMapCompletableSyncPerf', 1), ('collections\n', 1), ('2.1.4', 1), ('Enums.getEnumConstants(enumClass).get(value);\n', 1), ('(Test)', 1), ('subject\n', 1), ('SingleSubscribeOn<T>(this,', 1), ('testListenerCalledOnCancelFromNotRunning()', 1), ('target);\n', 1), ('testScanIntegersWithInitialValue()', 1), ('action.accept(function.apply(fromIterator.nextInt(),', 1), ('perspective,', 1), ('value.set(Thread.currentThread());\n', 1), ('delegateCollection().isPartialView();\n', 1), ('InterruptedException.class)\n', 1), ('File(path).toURI());\n', 1), ('.containsExactly(fullpath("/with/absolute.jar"));\n', 1), ('CompletableConcatSubscriber(CompletableObserver', 1), ('wide', 1), ('mapWrongParallelism()', 1), ('<dd>Any', 1), ('TestSingle<T>', 1), ('//This', 1), ('java.nio.file.Files.createSymbolicLink;\nimport', 1), ('java.util.jar.JarEntry;\nimport', 1), ('intCounter', 1), ('io.reactivex.Observer<T>,', 1), ('"door");\n', 1), ('File#getName}.', 1), ('consectetur', 1), ('backingIterator.hasNext();\n', 1), ('}).take(2).subscribe(ts);\n\n', 1), ('individual\n', 1), ('BorderLayout.NORTH);\n', 1), ('identity\n', 1), ('"UTF-8");\n', 1), ('MaybeDoAfterSuccessTest', 1), ('RxJavaPlugins.onBeforeBlocking();\n', 1), ('factory);\n', 1), ('(boundarySubscriber.compareAndSet(null,', 1), ('actual.hasSubscribers();\n', 1), ('Arrays.fill(innerArray,', 1), ('integerList', 1), ('completableSource', 1), ('ExceptionInInitializerError', 1), ('RESTRICTS_KEYS,\n', 1), ('Helpers.getMethod(testCase.getClass(),', 1), ('ThreadSafeDoubleCheckLocking();\n', 1), ('io.reactivex.internal.fuseable.HasUpstreamMaybeSource;\n\nimport', 1), ('concatDelayError(Iterable<?', 1), ('generateLinkedHashMultiset(E', 1), ('FilePredicate.IS_DIRECTORY;\n', 1), ('member.act(Action.GOLD);\n', 1), ('BOUNDARY,\n', 1), ('tenant)', 1), ('doesWriterOwnThisLock()', 1), ('HTML,', 1), ('Serialization.writeMultiset(this,', 1), ('testSortedSet()', 1), ('BufferExactBoundaryObserver(Observer<?', 1), ('(Java', 1), ('cancelAfterNext()', 1), ('argumentsList;\n', 1), ('.put(FloatBuffer.class,', 1), ('ArrayListMultimap(Multimap<?', 1), ('NavigableSet<String>', 1), ('ArbitraryInstances.get(FirstConstantIsNull.class));\n', 1), ('BigDecimal.valueOf(generateInt());\n', 1), ('sourceCode.indexOf("This', 1), ('ConsumingQueueIterator(Queue<T>', 1), ('BiFunction()', 1), ('ObservableLastSingle(ObservableSource<T>', 1), ('HashBasedTable.create();\n', 1), ('terms,', 1), ('programming,\n', 1), ('Arrays.asList(doc.getString("numbers").split(",")).stream().mapToInt(Integer::parseInt).toArray();\n', 1), ('MaybeFromRunnableTest', 1), ('io.reactivex.observables.ConnectableObservable}', 1), ('io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther;\nimport', 1), ('non-final', 1), ('PublishDisposable<T>(t,', 1), ("haven't", 1), ('prone', 1), ('onChannelReadable(key);\n', 1), ('io.reactivex.Flowable;\n\n/**\n', 1), ('Enumeration<JarEntry>', 1), ('}).subscribe(input.observer);\n', 1), ('RxJavaPlugins.onAssembly(cos));\n\n', 1), ('CapturingObserver<Object>();\n', 1), ('jarFile.getName());\n\n', 1), ('current.close();\n', 1), ('addObserver(O', 1), ('ObservableBufferBoundary(ObservableSource<T>', 1), ('operator,\n', 1), ('toArray(upperBounds);\n', 1), ('com.gargoylesoftware.htmlunit.html.HtmlPage;\n\nimport', 1), ('suite.addTest(testsForCheckedList());\n', 1), ('#onSubscribe(Subscription)}', 1), ('s.schedule(r,', 1), ('*/\n@VmOptions({"-Xms8g",', 1), ('(map.containsValue(null))', 1), ('Integer.parseInt(map.get("age")),', 1), ('startOffset);\n', 1), ('onErrorCall;\n', 1), ('IllegalStateException("Attempt', 1), ('evenNumber));\n\n\n', 1), ('SubscriptionHelper.deferredRequest(this,', 1), ('Observable<S,', 1), ('pipeline', 1), ('andThenMaybeCompleteValue()', 1), ('candidateTests', 1), ('task.onPostCall(get());\n', 1), ('java.nio.channels.DatagramChannel;\nimport', 1), ('emptyThrower()', 1), ('ImmutableSet()', 1), ('rxThreadsAfter.isEmpty());\n', 1), ('FlowableAmb<T>', 1), ('Proxy.getInvocationHandler(obj);\n', 1), ('RxJavaPlugins.setErrorHandler(Functions.emptyConsumer());\n', 1), ('reference;', 1), ('"Inner");\n\n', 1), ('locales\n', 1), ('-3096000382929934955L;\n\n', 1), ('spellbooks)', 1), ('bs)', 1), ('subscribed,', 1), ('(Character.isDigit(s.charAt(0)))', 1), ('DefaultSubscriberImpl', 1), ('Types()', 1), ('com.google.gson.JsonElement;\nimport', 1), ('minimizes', 1), ('Completable.concat(Arrays.asList(a));\n\n', 1), ('newArtificialTypeVariable(\n', 1), ('Already', 1), ('sourceCode.indexOf("{@code', 1), ('fast', 1), ('m.map(Functions.identity());\n', 1), ('popular', 1), ('Exceptions.propagate(e);\n', 1), ('d2));\n\n', 1), ('HideCompletableObserver', 1), ('PathCharSinkFactory(null);\n', 1), ('ObservableTake(ObservableSource<T>', 1), ('matcher.replaceAll(replacement);\n', 1), ('"WIZARD_ID")\n', 1), ('runnable2runnable', 1), ('<li>§1.3:', 1), ('SingleDoOnTest', 1), ('push(List<E>', 1), ('File("fish2.out");\n', 1), ('ClassToInstanceMap}</a>.\n', 1), ('multimap.keySet()).comparator()}', 1), ('pickAnyJarFile()', 1), ('head!"));\n', 1), ('(BlockingQueue<String>)', 1), ('dispose(AtomicReference<Disposable>', 1), ('"d', 1), ('componentType);\n\n', 1), ('FlowableSwitchMapMaybeTest', 1), ('checkMaybeScheduler()', 1), ('parent.error;\n\n', 1), ('packets",', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/PublishSubject.png"', 1), ('f.flatMapSingle(Functions.justFunction(Single.just(2)));\n', 1), ('CustomerDto("2",', 1), ('Reactive-Streams:', 1), ('String},', 1), ('TestHelper.checkDisposed(Flowable.just(1).throttleFirst(1,', 1), ('iterator\n', 1), ('!m.getName().endsWith("Scheduler")\n//', 1), ('drop();\n\n', 1), ('List<Fruit>', 1), ('assertFalse(allOdd.blockingGet());\n', 1), ('inappropriate', 1), ('statement.', 1), ('testRequestFromFinalSubscribeWithRequestValue()', 1), ('Free', 1), ('predicates.\n', 1), ('HasUpstreamObservableSource<T>', 1), ('Supplier[]{Hunter::new},\n', 1), ('nazguls.put(NazgulName.HOARMURATH,', 1), ('EventConsumer(String', 1), ('MongoConnectionPropertiesLoader', 1), ('w2;\n\n', 1), ('Functions.NaturalComparator.class.getMethod("valueOf",', 1), ('854110278590336484L;\n\n', 1), ('MaybeMergeTest', 1), ('MISSING,\n', 1), ('this})', 1), ('123));\n', 1), ('replacing', 1), ('(!containsKey(key))', 1), ('Release', 1), ('findAll);\n\n', 1), ('unit=SECONDS,', 1), ('WASHING', 1), ('AtomicReference<LinkedQueueNode<E>>', 1), ('buffers.offer(b);\n', 1), ('FlatMapSingleObserver(MaybeObserver<?', 1), ('to:', 1), ('comparators.length;', 1), ('charset).write(from);\n', 1), ('ThreadPoolDispatcher', 1), ('(Entry<AnEnum,', 1), ('create(SingleOnSubscribe<T>', 1), ('RequestEarly()', 1), ('nazguls;\n\n', 1), ('RandomAccessFile(file,', 1), ('picked', 1), ('unsorted', 1), ('Futures.catching(this,', 1), ('isEmpty', 1), ('ps2.ignoreElements())).test();\n\n', 1), ('useOfMute();\n', 1), ('TypeToken<ImmutableSetMultimap<String,', 1), ('suppressForLinkedBlockingQueue()', 1), ('period\n', 1), ('lazySet(FUSED);\n', 1), ('non-positive.\n', 1), ('"Subscriber",', 1), ('ps.switchMapCompletable(new', 1), ('ALLOWS_NULL_KEYS(ALLOWS_NULL_KEY_QUERIES),\n', 1), ('assertTrue(Comparators.isInOrder(Collections.singleton(1),', 1), ("iterable's", 1), ('q.offer(group);\n', 1), ('RxJavaPlugins.onAssembly(oos));\n\n', 1), ('o.onNext(3);\n', 1), ('interpreter', 1), ('ObservableFlattenIterableTest', 1), ('processing.putIfAbsent(Thread.currentThread().getName(),', 1), ('MapFeature.GENERAL_PURPOSE)\n', 1), ('testsForArrayBlockingQueue()', 1), ('SingleNever();\n\n', 1), ('Completable.complete()).test();\n\n', 1), ('assertTrue(numbers1.equals(numbers2));\n', 1), ('this.throwable', 1), ('Single<Upstream>', 1), ('Single.&lt;Event&gt;create(emitter', 1), ('observableFlowable()', 1), ('ObjectHelper.verifyPositive(parallelism,', 1), ('OTHER_EXCEPTION_TYPES', 1), ('System.out.println("GC");\n', 1), ('reactor)', 1), ('data-bus', 1), ('(SortedSet<String>)', 1), ('Initialize-on-demand-holder', 1), ('observableInner()', 1), ('characteristics,\n', 1), ('fileCharSourceFactory()', 1), ('AbstractFlowableWithUpstreamTest', 1), ('fromNullable(@NullableDecl', 1), ('elements.");\n', 1), ('fail("Rx', 1), ('first.getAndSet(CANCELLED);\n', 1), ('.mergeWith(Maybe.just(elements))\n', 1), ('priority)', 1), ('com.google.common.base.StandardSystemProperty.PATH_SEPARATOR;\n\nimport', 1), ('SingletonImmutableSet<E>(delegate.iterator().next());\n', 1), ('governing\n', 1), ('advantages:\n', 1), ('timerCancelRace()', 1), ('U>)p))', 1), ('((Callable<U>)p).call();\n', 1), ('encoding.encoding.decodingStream(source);\n', 1), ('DoFinallySubscriber<T>(s,', 1), ('ObservableSwitchMapMaybe(Observable<T>', 1), ('mostly', 1), ('val);\n', 1), ('@Target({ElementType.TYPE,', 1), ('violated,', 1), ('FileNotFoundException,', 1), ('Result[4];\n\n', 1), ('ObservableIntervalRange(long', 1), ('!inMaybe)', 1), ('Locale.US);\n', 1), ('DecoupledClassLoader(new', 1), ('toString().compareTo(o.toString());\n', 1), ('ImmutableSet<V>>>', 1), ('ExecutorScheduler(executor);\n', 1), ('Optional.ofNullable(idToCustomer.get(id));\n', 1), ('completeFirst()', 1), ('"scheduleWithFixedDelay";\n', 1), ('!name.contains("Perf")', 1), ('Weekday.values())', 1), ('LOGGER.info("Executed', 1), ('Flowable.combineLatest(Arrays.asList(\n', 1), ('Consumer<TestSubscriber<Integer>>()', 1), ('testWaitingForeverForPromiseToBeFulfilled();\n', 1), ('overloads', 1), ('serialDisposable.update(firstSet);\n\n', 1), ('valueOf(number)', 1), ('ImmutableSortedMap.of()))\n', 1), ('com.iluwatar.singleton;\n\nimport', 1), ('testElementAtOrDefaultObservable()', 1), ('(emptyInstanceGenerated.containsKey(type.getType()))', 1), ('useInfinite,', 1), ('stats).\n', 1), ('FlowableAllSingle<T>', 1), ('precomputeCharMatcher(CharMatcher', 1), ('300));\n', 1), ('SelectionKey#channel()}.\n', 1), ('failure,', 1), ('RxJavaPlugins.onAssembly((Maybe<T>)source);\n', 1), ('Nested', 1), ('from(temporaryList);\n', 1), ('assertNotNull(ArbitraryInstances.get(GenericDeclaration.class));\n', 1), ('kvMap', 1), ('Helpers.assertEqualInOrder(fewer,', 1), ('Maybe.empty();\n\n', 1), ('FlowableSingleSingle<T>(source,', 1), ('out.write(b,', 1), ('converter.convert("CHEETO"));\n', 1), ('concat(IntStream...', 1), ('xs.toList().toFlowable();\n', 1), ('WrappedRunnable(command);\n', 1), ('SecurityManager()', 1), ('SingleInternalHelper.ToFlowable.values().length);\n', 1), ('collector));\n\n', 1), ('CollectorTester.of(Comparators.<Integer>least(2,', 1), ('ObservableBufferExactBoundary<T,', 1), ('printErrorString(final', 1), ('WeaponFactory#create(WeaponType)}', 1), ('com.google.common.collect.testing.testers.CollectionAddAllTester.getAddAllUnsupportedSomePresentMethod;\nimport', 1), ('javax.swing.JScrollPane;\nimport', 1), ('FromArrayTckTest', 1), ('CompactHashMap.create();\n', 1), ('ObservableSerialized<T>', 1), ('spells;\n\n', 1), ('fallback)\n', 1), ('threads2.size());\n', 1), ('PartyMemberBase#toString()}', 1), ('assertFreshInstanceReturned(Class<?>...', 1), ('Save', 1), ('(Map<String,', 1), ('executor.startProcess(lazyval(20,', 1), ('writeReplace', 1), ('soldierResponse;\n', 1), ('suite.addTest(testsForEnumSet());\n', 1), ('Maybe.just(1).subscribe(tc);\n\n', 1), ('reserved', 1), ('StringSourceFactory', 1), ('Single.just(1).map(new', 1), ('List<Object>>()', 1), ('java.io.OutputStreamWriter;\n\n/**', 1), ('multiplyCap(long', 1), ('Thread.sleep(250);\n\n', 1), ('assertEquals(getOrderedElements(),', 1), ('TypeToken<Multimap<String,', 1), ('object-oriented', 1), ('difficult', 1), ('create(CompletableOnSubscribe', 1), ('getTopping()', 1), ('MutateTask(multiset,', 1), ('MessageData}.\n', 1), ('"valueComparator");\n', 1), ('list3.add(7);\n', 1), ('observer1)', 1), ('.filter(number', 1), ('Map}.\n', 1), ('phone);\n', 1), ('rejectingExecutorWorker()', 1), ('keyComparator().compare(key,', 1), ('CollectionTestSuiteBuilder<E>', 1), ('com.google.common.base.Defaults;\nimport', 1), ('"fail");\n', 1), ('NoRecurse', 1), ('RxJavaPlugins.onComputationScheduler(COMPUTATION);\n', 1), ('repeatWhen(final', 1), ('fail("should', 1), ('(account', 1), ('selector.selectedKeys();\n\n', 1), ('decorates', 1), ('MultiReader(Iterator<?', 1), ('s.request(maxConcurrency', 1), ('newDir("some-dir");\n\n', 1), ('source.onNext(7);\n\n', 1), ('Nazgul(NazgulName.KHAMUL));\n', 1), ('ImmutableListMultimap.of(key,', 1), ('BasicFuseableSubscriber(Subscriber<?', 1), ('input;', 1), ('GroupedUnicast.createWith(key,', 1), ('externally:\n', 1), ('(((HasUpstreamMaybeSource<?>)m.isEmpty()).source()));\n', 1), ('Charset}', 1), ('EmptySubscription.complete(t);\n', 1), ('FutureSubscriber()', 1), ('span', 1), ('TakeUntilMainObserver<T>(observer);\n', 1), ('Flowable.fromArray(values)\n', 1), ('lowerBound', 1), ('Helpers.assertEmpty(map);\n', 1), ('wrap(MaybeSource<T>', 1), ('uniformly.\n', 1), ('FutureCallback<QueryResult>()', 1), ('Processor.\n', 1), ('.put(SortedMap.class,', 1), ('value);', 1), ('b.append("Thread', 1), ('critical\n', 1), ('(ps.isCancelled())', 1), ('Iterators.getNext(entryIterator(),', 1), ('HeavyFactory();\n', 1), ('verify()', 1), ('finalAccum);\n', 1), ('#UTF_8}', 1), ('Observable.just(2).delay(100,', 1), ('collection.stream()}', 1), ('URI', 1), ('BiConsumer<T1,', 1), ('Priority', 1), ('DoAfterTerminateObserver<T>', 1), ('ballThread.resumeMe();\n', 1), ('Pattern}.', 1), ('Student(3,', 1), ('PublisherBufferSkipSubscriber(Subscriber<?', 1), ('disallowPrimitiveType(bounds,', 1), ('OptionalLong.of(boxedLast.get())', 1), ('io.reactivex.internal.operators.flowable.FlowableRange;\nimport', 1), ('63', 1), ('close(OperatorWindowBoundaryCloseObserver<T,', 1), ('.suppressing(suppressForEmptyList())\n', 1), ('AbstractTester<?>>)', 1), ('to.assertValue("a");\n', 1), ('ArrayList<V>', 1), ('disposeWhenFallback()', 1), ('parent.task.replace(scheduler.scheduleDirect(new', 1), ('contains(value,', 1), ('assertNull(ArbitraryInstances.get(EmptyEnum.class));\n', 1), ('(qd', 1), ('producer.get().request(1);\n//\n//', 1), ('Retry<T>', 1), ('testTreeSet()', 1), ('functions.\n', 1), ('singleSource', 1), ('NonStaticFieldIgnored()', 1), ('gen.order(insertionOrder);\n', 1), ('produced\n', 1), ('@Empty}', 1), ('ConcatArraySubscriber<T>(sources,', 1), ('WrappingExecutorService\n', 1), ('mn', 1), ('See",\n', 1), ('ImmutableSet.of(backingEntry.getValue());\n', 1), ('Functions.toFunction(function6);\n', 1), ('Functions.justFunction(Completable.never()),', 1), ('RxJavaPlugins.class.getMethod("is"', 1), ('Iterator<Entry<Class<?', 1), ('fatal.\n', 1), ('SingleUnsubscribeOn(SingleSource<T>', 1), ('entryOf(k5,', 1), ('multiset.\n', 1), ('File(generateString());\n', 1), ('assertEquals(String.valueOf(NumberCrunchingTask.CRUNCHED_NUMBER),', 1), ('io.reactivex.disposables;\n', 1), ('assertTrue(ArbitraryInstances.get(ImmutableClassToInstanceMap.class).isEmpty());\n', 1), ('pp.switchMapSingle(new', 1), ('PatternFilenameFilter(Pattern', 1), ('FeatureEnumTest', 1), ('href="http://reactivex.io/documentation/operators/count.html">ReactiveX', 1), ('ByteStreams.nullOutputStream();\n', 1), ('CountSubscriber(SingleObserver<?', 1), ('Implement', 1), ('(streamA.isParallel()', 1), ('rangeFlatMap;\n\n', 1), ('CompletableOperator#apply(CompletableObserver)', 1), ('this.completionValue', 1), ('assertEquals(TEST_CAR_PRICE,', 1), ('\\"James', 1), ('Stream.empty();\n', 1), ('Subscriber",', 1), ('expectedKeys}', 1), ('currentThread();\n', 1), ('Concrete', 1), ('!path.get(path.size()', 1), ('observerSingleNot(final', 1), ('representing\n', 1), ('inner.queue();\n', 1), ('Stream.of(get(key)).filter(el', 1), ('this.targetNode', 1), ('testPluginException()', 1), ('testSetName()', 1), ('}).subscribe();\n\n\n', 1), ('AtomicReference<SingleDisposable<T>[]>', 1), ('ExecutorWorker(Executor', 1), ('tryPutIntoPool(boolean', 1), ('supertypeOf(newArrayType(lowerBounds[0]));\n', 1), ('POOLS', 1), ('flags()', 1), ('EMPTY_GENERATORS;\n\n', 1), ('MaybeFromCompletable<T>(this));\n', 1), ('MessageCollectorMember(String', 1), ('generate(TypeToken<?>', 1), ('Iterable<Type>', 1), ('"resource', 1), ('innerError(inner,', 1), ('lvElement(calcElementOffset(index', 1), ('removeAll},', 1), ('checkDisposed(Flowable<T>', 1), ('org.junit.rules.TemporaryFolder;\n\nimport', 1), ('WeakReference<>(shadowLoader);\n', 1), ('MaybeDelayWithCompletable<T>', 1), ('SimpleObjectGlue', 1), ('getAddUnsupportedNotPresentMethod(),\n', 1), ('workers.add(doWorkOnNewTrampoline("B",', 1), ('determined.\n', 1), ('cast(key,', 1), ('iterates', 1), ('fuseToFlowable();\n}\n', 1), ('MatchResult}', 1), ('paste', 1), ('mutable\n', 1), ('ObservableReduceTest', 1), ('users.', 1), ('RxJavaPlugins.setOnMaybeSubscribe(maybe2observer);\n', 1), ('Currency.getInstance(Locale.US);\n', 1), ("Object's", 1), ('AnEnum[elements.length];\n', 1), ('removal,', 1), ('(inner.done)', 1), ('(q1', 1), ('bf.onSubscribe(new', 1), ('ThrottleTimerImpl', 1), ('RuntimeException})', 1), ('.setDefault(Method.class,', 1), ('Task\n', 1), ('-8223395059921494546L;\n', 1), ('observed.\n', 1), ('executed,', 1), ('"Lynda",', 1), ('generateHashdMap(K', 1), ('above;', 1), ('instance,\n', 1), ('AtomicLongArray(length);\n\n', 1), ('RetryBiObserver<T>(s,', 1), ('times(4)).onNext(anyString());\n', 1), ('StringBuilder("?");\n', 1), ('CRUNCHED_NUMBER', 1), ('opens.");\n', 1), ('FilterReader', 1), ('findLast(Stream<T>', 1), ('testFirstCountLessItems()', 1), ('resolution.', 1), ('subscribers.add(open);\n\n', 1), ('projection,', 1), ('mock(SingleObserver.class);\n', 1), ('c.cancel();\n', 1), ('io.reactivex.internal.operators.observable.ObservableDelaySubscriptionOther;\nimport', 1), ('ImmutableMap.this.containsKey(key);\n', 1), ('AutoCloseable}', 1), ('assertEquals(3600,', 1), ('Exception.class);\n', 1), ('request.\n', 1), ('newTaskFor(Runnable', 1), ('assertTrue(ArbitraryInstances.get(ConcurrentMap.class).isEmpty());\n', 1), ('ParallelReduceFullTest', 1), ('AlchemistShop();\n\n', 1), ('totalCalories=%d",', 1), ('optional.\n', 1), ('action.accept(function.apply(itrA.next(),', 1), ('exec.\n', 1), ('junit.framework.Assert.assertTrue;\n\nimport', 1), ('InMemoryTicketRepository', 1), ('io.reactivex.internal.observers.BlockingMultiObserver;\nimport', 1), ('this.handler', 1), ('assertTrue(Functions.predicateReverseFor(s).test(1));\n\n', 1), ('TimeOutObserver(cd,', 1), ('evictedGroups.poll())', 1), ('RxJavaPlugins#setInitIoSchedulerHandler(io.reactivex.functions.Function)}', 1), ('ORDERING.immutableSortedCopy(input).get(0);\n', 1), ('this.latch', 1), ('MaybeSubjectTest', 1), ('(expectedSize', 1), ('Tracks', 1), ('FIXME\n', 1), ('URL[0],', 1), ('action.accept(src.get());\n', 1), ('(url.getProtocol().equalsIgnoreCase("file"))', 1), ('onError);\n', 1), ('invoked).\n', 1), ('previousSpell.undo();\n', 1), ('list.add(t2);\n', 1), ('Present<T>(checkNotNull(reference));\n', 1), ('CompletableTimer', 1), ('3880992722410194083L;\n\n', 1), ('init(int', 1), ('.append(baseClassName.toLowerCase()).append(".").append(g.getName().replace(".java",', 1), ('assertTrue(between.toString(),', 1), ('testSortedMultiset()', 1), ('OBSERVER_SUCCESS()', 1), ('encodings.\n', 1), ('observer.blockingGetError(timeout,', 1), ('f.cancel(allowInterrupt);\n', 1), ('ListeningExecutorService}', 1), ('checkDoubleOnSubscribeSingleToMaybe(Function<Single<T>,', 1), ('File(baseDir,', 1), ('assertFalse(fallback.hasObservers());\n', 1), ('Flowable.<Integer>empty().switchIfEmpty(Flowable.range(1,', 1), ('1000).doOnNext(new', 1), ("multimap's", 1), ('setImplementation(PrintWriter.class,', 1), ('SubscriptionLambdaSubscriber<T>(s,', 1), ('interface",', 1), ('SortedMapInterfaceTest<String,', 1), ('testCancellationDuringFutureGet()', 1), ('super(false,', 1), ('checkBadSourceFlowable(Function<Flowable<T>,', 1), ('file1', 1), ('testFileTraverser_multipleDirectoryLayers_breadthFirstStartsWithTopLayer()\n', 1), ('groups.put(mapKey,', 1), ('done");\n\n', 1), ('any.get().stream().map(constructor)', 1), ('TestExecutor(mock);\n', 1), ('(pathname.length()', 1), ('interfaceType;\n', 1), ('loader);\n', 1), ('dispatchReadEvent(SelectionKey', 1), ('Flowable.range(1,num).doOnNext(new', 1), ('customComparator()', 1), ('#visit}.', 1), ('ObservableScan(ObservableSource<T>', 1), ('assertNull(Observable.fromArray(1,', 1), ('name()', 1), ('.stream()\n', 1), ('Describes', 1), ('jarOut', 1), ('Callable<Maybe<Integer>>()', 1), ('Functions.emptyConsumer()).isDisposed());\n', 1), ('MODIFIABLE', 1), ('ItemQueue()', 1), ('IntervalObserver(to);\n', 1), ('items.size(),', 1), ('put(Entry<?', 1), ('succeeds', 1), ('FlowableFromObservableTest', 1), ('TakeUntilOtherSubscriber', 1), ('better\n', 1), ('to2.assertResult(1);\n', 1), ('lazySet(remaining);\n', 1), ('optional.', 1), ('customer.', 1), ('ON_NEXT))', 1), ('SafeObserver<T>', 1), ('Tasks', 1), ('RxJavaPlugins.setComputationSchedulerHandler(replaceWithImmediate);\n\n', 1), ('publisherExecutorService()', 1), ('v2);\n\n', 1), ('Scheduler:}', 1), ('priority;\n\n', 1), ('MaybeObserver()', 1), ('com.google.common.io.SourceSinkFactory.CharSinkFactory;\nimport', 1), ('LineProcessor<T>', 1), ('assertNull(new', 1), ('SubscriptionHelperTest', 1), ('BaseTypeParser.parse(MaybeNo2Dot0Since.findSource("Flowable"),', 1), ('cos', 1), ('Replace', 1), ('testSingle_serialization()', 1), ('PrimitiveIterator.OfDouble', 1), ('s.onSubscribe(parent.arbiter);\n', 1), ('java.nio.file.SecureDirectoryStream;\nimport', 1), ('Frequency:', 1), ('accept(TestSubscriber<T>', 1), ('creation.', 1), ('Spliterator.ORDERED', 1), ('TestHelper.checkDisposed(Observable.just(1).unsubscribeOn(Schedulers.single()));\n', 1), ('FlowableNever', 1), ('LOGGER.debug("FileLoggerModule::unprepare();");\n', 1), ('testGetIfPresent_whenNoMatchingConstant()', 1), ('fromSingleNull()', 1), ('<p>Null', 1), ('//NOSONAR\n\n', 1), ('Function5', 1), ('class.\n\n', 1), ('DelayTckTest()', 1), ('com.google.common.hash.HashCode;\nimport', 1), ('w.schedule(task);\n\n', 1), ('otherErrorSingle()', 1), ('successfully.\n', 1), ('clientName;\n\n', 1), ('named,', 1), ('fourth\n', 1), ('already-present', 1), ('relative.jar");\n', 1), ('this.attempts.intValue();\n', 1), ('.runOn(ImmediateThinScheduler.INSTANCE,', 1), ('SimpleFileWriter(nonExistingFile.getPath(),', 1), ('flowMaybe', 1), ('readLine()', 1), ('fileName.substring(dotIndex', 1), ('ImmutableSortedMap<K,', 1), ('IllegalArgumentException(String.format("number', 1), ('SingleDefer<T>', 1), ('2404266111789071508L;\n\n', 1), ('testAsMapValuesImplementList()', 1), ('combine(Builder<K,', 1), ('StringConverter<T', 1), ('}\n\n\n\n', 1), ('apply(Type', 1), ('s.request(prefetch', 1), ('ImmutableList.of();\n', 1), ('read(CharBuffer', 1), ('reader.readInt();\n', 1), ('iae', 1), ('keyType()', 1), ('service;\n\n', 1), ('plugin.\n', 1), ('ac.onComplete(value,', 1), ('generatePattern()', 1), ('ImmutableMap::copyOf);\n', 1), ('commit', 1), ('d3', 1), ('testRemove()', 1), ('stream(OptionalInt', 1), ('super(incidentEdgeMap);\n', 1), ('Multi-Core', 1), ('unit="', 1), ('checkFiles()', 1), ('com.google.common.base.Charsets.US_ASCII;\nimport', 1), ('entrySet().contains(null)}', 1), ('asAnnotation(Class<?>', 1), ('(continueNextSource)', 1), ('REMOVE_EXACTLY:\n', 1), ('ALLOWS_NULL_ENTRY_QUERIES,', 1), ('Observer",', 1), ('mergeTwoAsyncStreamsOfN(final', 1), ('fullPath', 1), ('MapTestSuiteBuilderTests', 1), ('p.setup();\n\n', 1), ('DummyCountDownLatch()', 1), ("u.getAbsolutePath().replace('\\\\',", 1), ('io.reactivex.internal.fuseable.FuseToMaybe;\nimport', 1), ('Vector<>(MinimalCollection.of(elements));\n', 1), ('Multimap}.\n', 1), ('-1;', 1), ('getNoOfServers()', 1), ('between.size());\n', 1), ('.onErrorResumeNext(Single.error(new', 1), ('Flowable.fromArray(sources).concatMapEager((Function)MaybeToPublisher.instance());\n', 1), ('Initialize', 1), ('used.', 1), ('topShelf.size());\n\n', 1), ('(comparator', 1), ('mask);\n', 1), ('java.util.concurrent.DelayQueue;\nimport', 1), ('enumClass.hashCode();\n', 1), ('wildcard.getLowerBounds();\n', 1), ('DisposableHelper.DISPOSED.dispose();\n', 1), ('testConsume()', 1), ('onSuccessCall,', 1), ('((ScheduledExecutorService)executor).schedule(task,', 1), ('.switchIfEmpty(Observable.just(2)\n', 1), ('runLatch.await();\n\n', 1), ('asByteSource(file).read(processor);\n', 1), ('loader)),', 1), ('tell', 1), ('prepareParameters(final', 1), ('LastSubscriber<T>(observer,', 1), ('enum}', 1), ('(crashDispose)', 1), ('cbuf', 1), ('Files', 1), ('resubscriptions', 1), ('Iterable<Integer>()', 1), ('this.webClient.getPage(PAGE_URL);\n', 1), ('app-engine', 1), ('array[i++];\n', 1), ('createRandom()', 1), ('MultimapFeature', 1), ('9:45', 1), ('TestHelper.checkUtilityClass(Disposables.class);\n', 1), ('Arrays.asList("class', 1), ('Observer},', 1), ('Queue<Integer>', 1), ('"Carlson");\n', 1), ('DragonSlayer', 1), ('StatusMember(int', 1), ('parent.onDisposeCall.run();\n', 1), ('@Ignore("subscribe()', 1), ('MapWithIndexSpliterator<F,', 1), ('Expressions\n', 1), ('<i>compile</i>', 1), ('TypeToken<OptionalDouble>()', 1), ('studentToBeInserted)', 1), ('(output)\n', 1), ('Naftalin', 1), ('PotatoPeelingTask(5));\n\n', 1), ('Wadler}\n', 1), ('ObservableBufferUntilSubscriberTest', 1), ('FlowableGroupBy(Flowable<T>', 1), ('IllegalStateException()));\n', 1), ('TestHelper.checkEnum(EmptyComponent.class);\n\n', 1), ('isCancelled.\n', 1), ('exec.submit(periodicWrapper);\n', 1), ('BadFlowable', 1), ('[Hello!]', 1), ('workers.add(worker);\n', 1), ('requestCancelRaceDelayError()', 1), ('Captures', 1), ('serverRequest(Request', 1), ('exec.schedule(periodicWrapper,', 1), ('user.isActive(),\n', 1), ('TestHelper.checkDisposed(Flowable.just(1).toObservable());\n', 1), ('assertTrue(numbers.getNumbers().contains(3));\n', 1), ('maybe)', 1), ('typical', 1), ('channel",', 1), ('reader.read(cbuf);\n', 1), ('errorMapper', 1), ('actualDetails);\n', 1), ('layer.setCake(cake);\n', 1), ('StandardSystemProperty}.\n', 1), ('delivery', 1), ('times(1)).onSuccess(Arrays.asList(1,', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/PublishProcessor.png"', 1), ('onErrorWithNull()', 1), ('.thenApply(new', 1), ('ObservableScalarXMap', 1), ('Collection<U>', 1), ('fhada\\n",', 1), ('ArbitraryInstances.get(PrintStream.class).println("test");\n', 1), ('g.getName().endsWith(".java"))', 1), ('findClass(\n', 1), ('Single.<Integer>just(1);\n', 1), ('together\n', 1), ('ParallelReduceFull<T>', 1), ('Number}', 1), ('hashFunction', 1), ('SlidingDoor())', 1), ('assertEquals(WashingMachineState.ENABLED,', 1), ('collector.accumulator().accept(accum,', 1), ('com.google.common.testing.AbstractPackageSanityTests;\nimport', 1), ('"Nunc', 1), ('completable;\n', 1), ('contents.");\n', 1), ('getWrappedRunnable();\n}\n', 1), ('assertEquals(this.commanderResponse.get(),', 1), ('Schedulers()', 1), ('nKeys', 1), ('String>(),', 1), ('scheduleTimed()', 1), ('ExceptionHelper()', 1), ('Clients', 1), ('Thread.sleep(delayMillis);\n', 1), ('runFuture()', 1), ('RxJavaPlugins#setInitSingleSchedulerHandler(io.reactivex.functions.Function)}', 1), ('USER_NAME("user.name"),\n\n', 1), ('DomainTest', 1), ('ClassLoader(grandParent)', 1), ('withPublisherCallAfterTerminalEvent()', 1), ('assertFalse(Comparators.isInOrder(asList(0,', 1), ('toSingle(final', 1), ('NumberExpression(j),\n', 1), ('validation.', 1), ('fail.append(fn).append("', 1), ('<li>Its', 1), ('Flowable.empty().blockingLast();\n', 1), ('RxJavaPlugins.setOnObservableReturn(new', 1), ('ConcurrentHashMultisetBasherTest', 1), ('getOnlyElement(map.entrySet());\n', 1), ('closeResource(resource);\n', 1), ('occurring', 1), ('SingleResumeNext<T>', 1), ("FilterOutputStream's", 1), ('TestSubscriber<Void>', 1), ('mostRecentObserver.getIterable();\n', 1), ('1");\n', 1), ('EmptyCompletableObserverTest', 1), ('initialize();\n\n', 1), ('HtmlPage', 1), ('it.hasNext();', 1), ('"Unable', 1), ('ObservableToListSingle<T,', 1), ('deferredSetOnce(AtomicReference<Subscription>', 1), ('errors,\n', 1), ('jsonElement.getAsJsonObject().get("eventClassName").getAsString();\n', 1), ('SubscriptionHelper.isCancelled(s.get());\n', 1), ('promise.fulfill(NumberCrunchingTask.CRUNCHED_NUMBER);\n', 1), ('suppressForSingletonList()', 1), ('706635022205076709L;\n\n', 1), ('cs2;\n', 1), ('path.add("..");\n', 1), ('CustomCompletableObserver(upstream);\n', 1), ('service(SimpleObjects.class).listAll();\n', 1), ('public:', 1), ('created");\n', 1), ('UndeliverableException(new', 1), ('Assert.assertTrue(latch.await(10,', 1), ('testAll()', 1), ('TypeToken<ArrayListMultimap<String,', 1), ('assertNull(generator.generateFresh(type));\n', 1), ('tidy', 1), ('Multimap.\n\n', 1), ('subscribers.getAndSet(CANCELLED))', 1), ('innerWrapper.getWrappedRunnable());\n', 1), ('ps.concatMapSingle(\n', 1), ('QueueDisposable<?>', 1), ('SampleElements<AnEnum>', 1), ('mapFailWithRetryLimitedConditional()', 1), ('enum\n', 1), ('connect(dbName,', 1), ('ImmutableMap.of()))\n', 1), ('tags', 1), ('PublicFinalMethods', 1), ('"onCallback', 1), ('expectedSize);\n', 1), ('sos', 1), ('DESCENDING_VIEW,\n\n', 1), ('TypeToken<LinkedHashMultiset<String>>()', 1), ('domainapp.integtests.bootstrap.SimpleAppSystemInitializer;\n\n/**\n', 1), ('com.google.common.collect.Iterables.getOnlyElement;\n\nimport', 1), ('scenario(travis,', 1), ('-82,', 1), ('Flowable.<T>fromPublisher(items)\n', 1), ('BufferedWriter(\n', 1), ('IllegalStateException}.</dd>\n', 1), ('Their', 1), ('(Spliterator<T>)', 1), ('precedence', 1), ('BlockingObservableLatestIterator<T>();\n\n', 1), ('maintainability', 1), ('TypeVariableImpl#equals(Object)}', 1), ('actual.tryOnNext(v);\n', 1), ('An\n', 1), ('§3.9', 1), ('ONE,', 1), ('ResourceInfo("right/sibling/some.txt",', 1), ('concatMapToFlowableEmpty.subscribeWith(new', 1), ('#or(Object)}', 1), ('collect(@NonNull', 1), ('java.io.Flushable;\nimport', 1), ('getter;\n\n', 1), ('checkSchedulerBadMethod(Flowable.class.getSimpleName());\n', 1), ('@director:");\n', 1), ('List<Entry<String,', 1), ('ElementAtObserver(Observer<?', 1), ('ArbitraryInstances()', 1), ('observer1;\n\n', 1), ('DisposeOnCancel(Disposable', 1), ('OptionalInt},', 1), ('"txt"}', 1), ('this.observers.add(observer);\n', 1), ('this.queue.offer(value);\n', 1), ('TestHelper.checkDisposed(Observable.generate(new', 1), ('CakeInfo(cake.getId(),', 1), ('large', 1), ('Customer(1,', 1), ('Single.timer(100,', 1), ('Multimaps#synchronizedListMultimap}.\n', 1), ('onPluginsXLift()', 1), ('java.util.stream.Collectors;\n\n/**\n', 1), ('instantiating', 1), ('assertNull(RxJavaPlugins.onAssembly((Flowable)null));\n\n', 1), ('(multiset.removeExactly(key,', 1), ('blockingFirstEmpty()', 1), ('input.toCharArray();\n', 1), ('mock(Store.class);\n', 1), ('java.io.Closeable}.', 1), ('winning', 1), ('initReplaceWithImmediate', 1), ('mention', 1), ('"hello\\nworld")\n', 1), ('trim(now,', 1), ('threadPool', 1), ('ObjectHelper.requireNonNull(delayIndicator,', 1), ('recommended;', 1), ('(QueueDisposable<?>)d;\n\n', 1), ('shadowConstants.add(result.get());\n', 1), ('channel.getJavaChannel().register(selector,', 1), ('NullPointerException(IllegalArgumentException)");\n', 1), ('oldValue)', 1), ('exec.executeAll();\n\n', 1), ('.map(Functions.identity()));\n', 1), ('cucumber.api.java.After;\nimport', 1), ('href="https://github.com/google/guava/wiki/LivingWithNullHostileCollections">several', 1), ('SwitchMapSingleObserver(SwitchMapSingleSubscriber<?,', 1), ('thus\n', 1), ('InMemoryAppender(SimpleTroll.class);\n', 1), ('B>(w.w,', 1), ('createEntrySet();\n', 1), ('(!clazz.isInstance(error))', 1), ('Multiset>>', 1), ('QueueSubscription.BOUNDARY);\n', 1), ('\\"English\\",}";\n', 1), ('Interrupter(currentThread()));\n\n', 1), ('SingleDoOnSubscribe(SingleSource<T>', 1), ('or(S)},', 1), ('BackpressureHelper.addCap(r,', 1), ('timeBulkGet(long', 1), ('ArrayListMultimap},', 1), ('fo.cancel(false);\n\n', 1), ('parseJavaClassPath().toArray(new', 1), ('Publisher"));\n', 1), ('<p>Users', 1), ('Single.zip(Collections.singleton(Single.just(1)),', 1), ('JdkPattern(Pattern.compile(pattern));\n', 1), ('com.iluwatar.flux.store;\n\nimport', 1), ('java.lang.System#getProperty\npublic', 1), ('argument)', 1), ('sourceFused;\n\n', 1), ('list.add(ex);\n', 1), ('cakeView', 1), ('FlattenCrossMapPerf', 1), ('Disposable"))', 1), ('Optional.absent()}.\n', 1), ('collector.finisher().apply(finalAccum));\n', 1), ('".B.1",', 1), ('SortedJoinInnerSubscriber<T>\n', 1), ('validation,', 1), ('DelayObserver<T>(s,', 1), ('toArray(argumentsList);\n', 1), ('cakeView.render();\n', 1), ('CANCELLED.cancel();\n', 1), ('ALLOWS_ANY_NULL_QUERIES(\n', 1), ('testStackOverflowErrorIsThrown()', 1), ('assertEquals(ImmutableList.of(I18N),', 1), ('Boolean.toString(rainbowFish.getSleeping()));\n', 1), ('Maybe.amb(Arrays.asList(Maybe.just(1),', 1), ('Preconditions.checkArgument(n', 1), ('FlowableWindowBoundarySelector(\n', 1), ('bot.setLayout(new', 1), ('org.mockito.*;\n\nimport', 1), ('io.reactivex.functions.BiFunction;\n\npublic', 1), ('testGetClassPathUrls()', 1), ('-2223459372976438024L;\n\n', 1), ('TypeToken<ImmutableTable<String,', 1), ('StripedBenchmark', 1), ('10:13', 1), ('}).toFlowable();\n', 1), ('SafeTreeSetTest', 1), ('AtomicReference<Producer>', 1), ('text);\n', 1), ('expectedValuesPerKey,', 1), ('"WOMBAT")).isAbsent();\n', 1), ('FlowableTakeUntil<T,', 1), ('draws', 1), ('ObservableReduceSeedSingle(ObservableSource<T>', 1), ('test(@NonNull', 1), ('add(AtomicLong', 1), ('exist.', 1), ('unable', 1), ('MemoryUsage', 1), ('scheduling</li>\n', 1), ('java.net.URL;\n\nimport', 1), ('ObservableDebounceTimed(ObservableSource<T>', 1), ('assertNull(entity.getId());\n\n', 1), ('merge(SingleSource<?', 1), ('sourceCode.substring(n', 1), ('ObservableElementAtMaybe(ObservableSource<T>', 1), ('IllegalStateException("Execution', 1), ('StripBoundarySubscriber<T>(s));\n', 1), ('onSuccessCrashes()', 1), ('LimitSubscriber(Subscriber<?', 1), ("builder.append(JavaVersion.CURRENT.typeName(ownerType)).append('.');\n", 1), ('"FlowableCountSingle",\n', 1), ('soNext(LinkedQueueNode<E>', 1), ('BlockingObservableIterator<T>\n', 1), ('somewhere', 1), ('TearDownStack()', 1), ('com.google.common.util.concurrent.AbstractFutureBenchmarks.Impl;\nimport', 1), ('StringReader(decodingInputs[i', 1), ('MaybeSource<U>>', 1), ('basename}', 1), ('ArbitraryInstances.get(short.class));\n', 1), ('AbstractIterator<T>', 1), ('assertFalse(Comparators.isInOrder(asList(5,', 1), ('testOrdering()', 1), ('flowableSingle()', 1), ('sever', 1), ('sourceList.peek();\n', 1), ('AsyncDisposable(Observer<?', 1), ('(instance', 1), ('SingleEquals(SingleSource<?', 1), ('SubscriptionHelper', 1), ('reuseScheduledExecutorAsWorker()', 1), ('"Danson");\n', 1), ('nonBlocking', 1), ('CompletableDoFinally(this,', 1), ('generateTreeMultiset(freshElement);\n', 1), ('Byte.class,\n', 1), ('String(factory.getSinkContents(),', 1), ('com.iluwatar.hexagonal.domain.LotteryTicketCheckResult.CheckResult;\nimport', 1), ('TakeSubscriber(Subscriber<?', 1), ('CompletableDefer(Callable<?', 1), ('RxJavaPlugins.setNewThreadSchedulerHandler(replaceWithImmediate);\n\n', 1), ('RxJavaPlugins}', 1), ('accountNo)', 1), ('List\n', 1), ("sender's", 1), ('xchgProducerNode(nextNode);\n', 1), ('Database', 1), ('concatMapToFlowableEmpty;\n\n', 1), ('getAuthorsCount();\n\n}\n', 1), ('mock(Runnable.class);\n', 1), ('SingleOperator&lt;String&gt;', 1), ('(DAO)', 1), ('asyncReloader.reload(new', 1), ('(allows\n', 1), ('it.remove();\n\n', 1), ('io.reactivex.internal.operators.completable.CompletableMergeDelayErrorArray.MergeInnerCompletableObserver;\nimport', 1), ('Producer("Producer_"', 1), ('"errorMapper', 1), ('(and\n', 1), ('.forEach(e', 1), ('result[i].getExceptionList().size());\n', 1), ('throws.\n', 1), ('PatternFilenameFilter}.\n', 1), ('incrementCount(String', 1), ('reactorMain', 1), ('Maybe.just(1));\n', 1), ('TakeLastTimedObserver(Observer<?', 1), ('outEdgeMap).inverse(),', 1), ('Stores.\n', 1), ('s.request(BackpressureHelper.addCap(u,', 1), ('DefaultObserver<String>', 1), ('World!").ignoreElements();\n', 1), ('org.junit.Assert.assertSame;\n\nimport', 1), ('testGet_reflect()', 1), ('#forEachPair}', 1), ('MapWithIndexSpliterator<\n', 1), ('generateConcurrentMap()', 1), ('(purgeEnabled', 1), ('sa.produced(1);\n\n', 1), ('key.interestOps(interestedOps);\n', 1), ('Flowable<Event>', 1), ('SerializedSubscriber<T>(s),', 1), ('cdl.countDown();\n//', 1), ('TestException()).doOnSubscribe(new', 1), ('Primitives.wrap(type).cast(generateFresh(TypeToken.of(type)));\n', 1), ('entrySet().hashCode();\n', 1), ('q.isEmpty()', 1), ('RxJavaPlugins.onCompletableLift(cop));\n\n', 1), ('Java8Holder()', 1), ('maybe;\n\n', 1), ('generateNumber()', 1), ('SubscriptionHelper.CANCELLED);\n', 1), ('Function7', 1), ('startWith(CompletableSource', 1), ('sequence.', 1), ('testGet_nonStaticFieldNotUsed()', 1), ('Buchholz\n', 1), ('this.customerId', 1), ('InMemoryCustomerDao', 1), ('assertEquals("RxThreadFactory[Test]",', 1), ('implementations.put(type,', 1), ('array.",', 1), ('splits.addLast(prefix);\n', 1), ('(BusinessException', 1), ('AsyncSubscription(Disposable', 1), ('Enum}', 1), ('OBSERVER_ONERROR_NOTIMPLEMENTED()', 1), ('spellDao.findByName(name);\n', 1), ('Balking', 1), ('SerializedSubscriber<T>(t);\n', 1), ('PublishSubscription<T>(t,', 1), ('java.util.Queue.\n', 1), ('AtomicReference<SingleDisposable<T>[]>(EMPTY);\n', 1), ('writeSelfReferencingJarFile(jarFile,', 1), ('CombinerObserver(LatestCoordinator<T,', 1), ('Termination();\n\n', 1), ('flush().', 1), ('checkDoubleOnSubscribeSingleToObservable(Function<Single<T>,', 1), ('access.\n', 1), ('"Terry",', 1), ('}).toFlowable().blockingLast().toString();\n\n', 1), ('(char', 1), ('queuing', 1), ('bs.peek();\n\n', 1), ('assertSame(m,', 1), ('.addEqualityGroup(Comparators.lexicographical(String.CASE_INSENSITIVE_ORDER))\n', 1), ('Maybe<T>\nimplements', 1), ('SubscriptionHelper.isCancelled(get());\n', 1), ('Modifier.isVolatile(getModifiers());\n', 1), ('"February"),\n', 1), ('(need', 1), ('MaybeFromAction<T>(run));\n', 1), ('List".equals(page.getTitleText());\n', 1), ('java.util.TreeSet;\n\n/**\n', 1), ('concatWith(next);\n', 1), ('ec)', 1), ('<p>Why', 1), ('java.nio.file.Files.deleteIfExists(dir);\n', 1), ('Writer.class,\n', 1), ('parser', 1), ('factory.getExpected(bytes);\n', 1), ('super(bytes,', 1), ('com.google.common.collect.testing.DerivedCollectionGenerators.SortedMapSubmapTestMapGenerator;\nimport', 1), ('assertNull(RxJavaPlugins.onSubscribe(Completable.never(),', 1), ('Flowable.sequenceEqual(\n', 1), ('@Retention(RetentionPolicy.CLASS)\n', 1), ('checkDisposed(Observable<?>', 1), ('2075626741;', 1), ('transform(Entry<Class<?', 1), ('onNext(Observer<?', 1), ('invokeGeneratorMethod(generate,', 1), ('c0)\n', 1), ('TestObserver<String>();\n', 1), ('countryInput).or(Country.DEFAULT);}\n', 1), ('from()}', 1), ('testOnErrorExceptionIsThrownFromUnsafeSubscribe()', 1), ('doSomethingWith(foo));\n', 1), ('testWithFollowingFirst()', 1), ('options', 1), ('this.bounds', 1), ('currentIndex', 1), ('"scheduleAtFixedRate";\n', 1), ('time,\n', 1), ('lists[index]', 1), ('obs.update(currentWeather);\n', 1), ('Iterable<ClassPath.ClassInfo>', 1), ('FinalizableReferenceQueue();\n', 1), ('tss[i]', 1), ('manifestClasspath("file:the^file.jar");\n', 1), ('testGet_io()', 1), ('RetryBiObserver(Observer<?', 1), ('enumValues', 1), ('CollectionSize(int', 1), ('TakeLastTimedObserver<T>(t,', 1), ('mapper.apply(v);\n\n', 1), ('buffering', 1), ('FlowableGenerate(Callable<S>', 1), ('RxJavaPlugins.setSingleSchedulerHandler(scheduler2scheduler);\n', 1), ('.assertErrorMessage("test");\n', 1), ('NullPointerException("Operator', 1), ('messageData', 1), ('(int)elements).groupBy(new', 1), ('current.get();\n\n', 1), ('collection.add(new', 1), ('moment.\n', 1), ('Observable#safeSubscribe(Observer)}', 1), ('testers;\n', 1), ('loader;', 1), ('testClass)', 1), ('FlowableRepeatUntil<T>', 1), ('ScanSubscriber<T>', 1), ('context.get(IUnitOfWork.DELETE);\n', 1), ('ArbitraryInstances.get(ByteSource.class));\n', 1), ('org.apache.log4j.PropertyConfigurator.configure("logging.properties");\n', 1), ('java.util.concurrent.Future}', 1), ('Completable#as}', 1), ('assertTrue(s2.isDisposed());\n\n', 1), ('unsubscribeComposes()', 1), ('toFlowable().repeat();\n', 1), ('newThread()', 1), ('secondary)', 1), ('ArbitraryInstances.get(BigDecimal.class).intValue());\n', 1), ('(!p.tillTheEnd)', 1), ('"Overrides"', 1), ('observeOn.\n', 1), ('"c").inOrder();\n', 1), ('assertNotNull(ArbitraryInstances.get(Object.class));\n', 1), ('computeReserializedCollectionFeatures(Set<Feature<?>>', 1), ('.put(MatchResult.class,', 1), ('paramNumber;', 1), ('ResourceInfo("left/sibling/another.txt",', 1), ('com.google.inject.Inject;\nimport', 1), ('this.onCallback', 1), ('REQUEST_MASK', 1), ('lineCount++;\n', 1), ('TestMapEntrySetGenerator(SampleElements<K>', 1), ('org.mockito.ArgumentMatchers.anyInt;\nimport', 1), ('factor.\n', 1), ('PublisherBufferExactSubscriber(Subscriber<?', 1), ('o.toJavaUtil()}', 1), ('com.google.common.collect.testing.MapTestSuiteBuilder}.\n', 1), ('this.number', 1), ('SingleSubject<T>();\n', 1), ('RandomAmountInputStream', 1), ('inner.requestMore(1);\n', 1), ('.subscribe(o);\n\n', 1), ('ParallelReduceFullMainSubscriber(Subscriber<?', 1), ('NonCachingWithConstructorCheckValidator.INSTANCE;\n', 1), ('AbstractFlowableWithUpstream<Notification<T>,', 1), ('Helpers.mapEntry(AnEnum.A,', 1), ('ArbitraryInstances.get(Integer.class));\n', 1), ('SingleToObservable(v);\n', 1), ('FakeOp(2));\n', 1), ('io.reactivex.internal.operators.single.*;\nimport', 1), ('assertGoodFeatureEnum(CollectionFeature.class);\n', 1), ('createFile(left.resolve("some.txt"));\n\n', 1), ('PublishProcessor<T>();\n', 1), ('iaculis', 1), ('4066607327284737757L;\n\n', 1), ('FUSED_EMPTY', 1), ('assertTrue(first.isPresent());\n', 1), ('reduceWithSingle()', 1), ('SkipUntilTckTest', 1), ('Optional.of(new', 1), ('DisposableSubscriber<U>', 1), ('"hello")\n', 1), ('commanderResponse;\n\n', 1), ('Spliterator.DISTINCT', 1), ('(polled', 1), ('cancellation.', 1), ('#hasValue()},', 1), ('job', 1), ('machineStateGlobal);\n', 1), ('testIsInOrder()', 1), ('Entry::getKey);\n', 1), ('customerTwo', 1), ('.groupBy(new', 1), ('com.google.common.io.SourceSinkFactory.ByteSinkFactory;\nimport', 1), ('principle.', 1), ('Without', 1), ('delegate().invokeAll(tasks);\n', 1), ('queue.add(strings[j]);\n', 1), ('basic,', 1), ('super(type,', 1), ('matches(Test', 1), ('TestSortedMapGenerator<String,', 1), ('io.reactivex.internal.subscriptions.DeferredScalarSubscription;\nimport', 1), ('chars.length)', 1), ('annotation.",\n', 1), ('safe.\n', 1), ('error)).test().assertValue(1);\n', 1), ('sources.offer(p);\n', 1), ('testAsMapGetImplementsSortedSet()', 1), ('getInternalHeavyValue()', 1), ('(Enum<NaturalComparator>[])m.invoke(null))', 1), ('doorProperties.put(HasModel.PROPERTY,', 1), ('arrayInner', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.flatMapMaybe.png"', 1), ('(!buffers.isEmpty())', 1), ('Account>', 1), ('testLinkedHashMap()', 1), ('findAll', 1), ('ArbitraryInstances.get(MatchResult.class).groupCount());\n', 1), ('.put(NavigableSet.class,', 1), ('ss.test().assertFailure(IOException.class);\n\n', 1), ('Junchang-', 1), ('*/\n@Test\npublic', 1), ('testGet_interface()', 1), ('rejected,', 1), ('t.onSubscribe(parent.arbiter);\n', 1), ('MergeCompletableObserver(CompletableObserver', 1), ('ObservableSampleTimed(ObservableSource<T>', 1), ('types.toArray(new', 1), ('classes}.', 1), ('FilterWriter(new', 1), ('FileSystemException', 1), ('observer.error;\n', 1), ('consistently\n', 1), ('MergeWithCompletableTckTest', 1), ('hand', 1), ('.put(IntBuffer.class,', 1), ('this(THREAD_FACTORY);\n', 1), ('assertNPE(List<Throwable>', 1), ('e6,', 1), ('ts.assertValues(10,', 1), ('toObservableAndBack()', 1), ('blockingGetErrorTimeout()', 1), ('MaybeUsing(Callable<?', 1), ('RxJavaPlugins.onAssembly((Maybe<T>)MaybeEmpty.INSTANCE);\n', 1), ('special\n', 1), ('magna', 1), ('FlowableAutoConnectTest', 1), ('noInterrupt()', 1), ('java.util.concurrent.TimeUnit.MILLISECONDS;\nimport', 1), ('fillShelves();\n', 1), ('enqueue(Runnable', 1), ('TestHelper.checkDisposed(\n', 1), ('fulfilled,', 1), ('(checkNext)', 1), ('pairwise', 1), ('(as\n', 1), ('b.substring(definitionStart,', 1), ('"Z', 1), ('normalEager()', 1), ('testCollectToStringObservable()', 1), ('Producer()', 1), ('handleException(exception);\n', 1), ('(f.getType())', 1), ('stackCopy', 1), ('-5011338112974328771L;\n\n', 1), ('derive', 1), ('s.request(-99);\n', 1), ('this.subject', 1), ('id)));\n', 1), ('frc)', 1), ('testForEach_nullValues()', 1), ('.singleElement()\n', 1), ('ObservableReduceWithSingle<T,', 1), ('expression.interpret());\n', 1), ('700));\n', 1), ('org.junit.Assert.assertFalse;\n\nimport', 1), ('maybeObserver)', 1), ('CompletableFromRunnableTest', 1), ('Collections.unmodifiableList(result);\n', 1), ('listener.accept(event));\n', 1), ('ImmutableClassToInstanceMap}.\n', 1), ('close();\n', 1), ('}).blockingIterable();\n', 1), ('#replaceResource(Disposable)\n', 1), ('timeout(2000).atLeastOnce()).move();\n\n', 1), ('thenAccept(Consumer<?', 1), ('emptiness.\n', 1), ('System.identityHashCode(operation.operate(collection.stream()));\n', 1), ('(smaller)', 1), ('runAll()', 1), ('makeServiceCalls(adidas));\n', 1), ('yBits;\n', 1), ('Functions.toFunction(biFunction);\n', 1), ('makeSuiteForTesterClass((Class<?', 1), ('layerBean', 1), ('BigDecimal', 1), ('automating\n', 1), ('getLayers()', 1), ('support.', 1), ('SubscribeOnObserver<T>\n', 1), ('V>(new', 1), ('maximum\n', 1), ('list.contains(o);\n', 1), ('projected', 1), ('CompletableToFlowable<Integer>(composer.apply(pp.ignoreElements())).subscribe(ts);\n', 1), ('nisl', 1), ('(!cdl.await(3,', 1), ('basicWithErrorSerialized()', 1), ('newThread().shutdown();\n', 1), ('setDefault(String.class,', 1), ('list.retainAll(c);\n', 1), ('parent.onSubscribe.accept(s);\n', 1), ('"Second").repeat().single("");\n', 1), ('java.nio.file.Files#write(java.nio.file.Path,', 1), ('ClassPathUtil()', 1), ('childrenStream.count());\n', 1), ('channel.', 1), ('onAfterTerminated,\n', 1), ('abc', 1), ('(!ts.isDisposed())', 1), ('e.get()', 1), ('DISPOSED\n', 1), ('values.length', 1), ('instance2);\n', 1), ('static.', 1), ('(QueueDisposable<U>)', 1), ('ObservableFlatMapMaybe<T,', 1), ('<p>Copying', 1), ('TypeToken.of(getDeclaringClass());\n', 1), ('onCompleteteCrash()', 1), ('s.onSubscribe(set);\n', 1), ('methods2', 1), ('assertTrue(ex.isTerminated());\n', 1), ('WithExceptionalConstructor()', 1), ('(containsValue)', 1), ('generateTreeMap(\n', 1), ('fromDto,', 1), ('"non-existing-file");\n', 1), ('cs;\n', 1), ('event[0]);\n', 1), ('rangeAsyncPipeline', 1), ('Uninterruptibles()', 1), ('when(func.call()).thenThrow(throwable);\n\n', 1), ('props', 1), ('".B.2",', 1), ('V>(expectedSize);\n', 1), ('Completable.merge(Flowable.just(Completable.complete()),', 1), ('CompletableDoFinallyTest', 1), ('ImmutableBiMap.copyOf(outEdges),', 1), ('periodicDirectTaskRace()', 1), ('getPackageName(Class<?>', 1), ('END:\n', 1), ('pickInstance(T[]', 1), ('evenItems.get(1));\n', 1), ('generateBimap(K', 1), ('testExceptionThrownFromOnSubscribe()', 1), ('event-loops,', 1), ('entries;', 1), ('toSingle(toFlowable().retry());\n', 1), ('shouldCallOnError()', 1), ('(ArrayList<V>)', 1), ('doc.put("phone",', 1), ('mock(Runnable.class);\n\n', 1), ('ArbitraryInstances.get(PrintWriter.class).println("test");\n', 1), ('initialize(Class<?>...', 1), ('primary,', 1), ('threadPool)\n', 1), ('mutual', 1), ('defaults\n', 1), ('"absent");', 1), ('"file', 1), ('EmptyCharSourceFactory();\n', 1), ('ScheduledRunnable(r0,', 1), ('-5454794857847146511L;\n\n', 1), ('generate(paramType);\n', 1), ('mergeSingleSingle()', 1), ('HONDA,\n', 1), ('ToMapTckTest', 1), ('"Publisher",\n', 1), ('Iterables.filter(bounds,', 1), ('calls[0]);\n\n', 1), ('disposable.dispose();\n\n', 1), ('exceptionHandler;\n', 1), ('MaybeUnsubscribeOn<T>', 1), ('id=%d', 1), ('drainAndCancel()', 1), ('Observer<Open>,', 1), ('{base});\n', 1), ('Servant}', 1), ('JAVA7.newArrayType(componentType);\n', 1), ('singletons\n', 1), ('spells.add(spell);\n', 1), ('command.process();\n', 1), ('ClassLoader.getResources()\n\n', 1), ('io.reactivex.internal.operators.single.SingleToFlowable;\nimport', 1), ('descending,', 1), ('this.visitor.visitCommander(new', 1), ('TestHelper.checkEnum(SubscriptionHelper.class);\n', 1), ('PURGE_PERIOD_SECONDS_KEY', 1), ('Integer.MAX_VALUE.\n', 1), ('FlowableSwitchMapSingle<T,', 1), ('short', 1), ('TestMaybe<T>', 1), ('<h3>Alternatives</h3>\n', 1), ('Result();\n\n', 1), ('io.reactivex.observables.GroupedObservable;\nimport', 1), ('java.util.function.BiPredicate;\nimport', 1), ('TakeWhileSubscriber<T>(s,', 1), ('retries;\n', 1), ('.switchMapSingle(Functions.justFunction(Single.error(new', 1), ('users\n', 1), ('readers",', 1), ('AtomicReferenceArray<Disposable>', 1), ('ObservableSwitchMapSingle<T,', 1), ('Single.just(1).concatWith(Single.just(2))\n', 1), ('interruptibly));\n', 1), ('s.onNext(1);\n\n', 1), ('dr)', 1), ('CompletableCreateTest', 1), ('((ExecutorService)executor).submit(task);\n', 1), ('Functions.emptyConsumer();\n', 1), ('Maecenas', 1), ('super(Orcs::new);\n', 1), ('CollectTckTest', 1), ('TestHelper.checkUtilityClass(Exceptions.class);\n', 1), ('lineNumber(CharSequence', 1), ('when(bakingService.getAllCakes()).thenReturn(cakes);\n\n', 1), ('dictumst.', 1), ('findLast(LongStream', 1), ('<p>Unless', 1), ('10000', 1), ('second));\n', 1), ('TrampolineScheduler();\n\n', 1), ('"executor-"', 1), ('prefix;\n\n', 1), ('BlockingSubscriber<T>(queue);\n\n', 1), ('testMultiset()', 1), ('((ScheduledWorker)w).executor.shutdownNow();\n\n', 1), ('Writer.class,', 1), ('h,', 1), ('MissingBackpressureException("could', 1), ('raw.', 1), ('service.submit(new', 1), ('3).sorted()\n', 1), ('ALLOWS_NULL_VALUE_QUERIES),\n', 1), ('mergeFunction,', 1), ('TestHelper.checkDisposed(Flowable.just(1).timeInterval());\n', 1), ('testCurrentTimeDriftForwards()', 1), ('Spliterator.OfLong', 1), ('inUse.add(instance);\n', 1), ('ArbitraryInstances.get(char.class));\n', 1), ('FileReader(new', 1), ('originalEntities', 1), ('Types.toString(componentType)', 1), ('proxy;\n', 1), ('PathByteSinkFactory', 1), ('finished.");\n', 1), ('NATURAL_ORDER;\n', 1), ('FlowableDistinctTest', 1), ('SelectionKey.OP_ACCEPT;\n', 1), ('Spliterator.ORDERED)', 1), ('onComplete()\n', 1), ('internally', 1), ('<code>AsyncExecutor</code>\n', 1), ('FlowableElementAtSingle(Flowable<T>', 1), ('Links', 1), ('this.getStudents().indexOf(studentToBeUpdated);\n\n', 1), ('JAVA_SPECIFICATION_NAME("java.specification.name"),\n\n', 1), ('ZERO(0),\n', 1), ('gen;\n\n', 1), ('verify(child).accept(eq(visitor));\n', 1), ('(TypeVariableInvocationHandler)', 1), ('testMultipleProducers(q);\n', 1), ('flowSingle.subscribe(new', 1), ('tillTheEnd;\n', 1), ('studentRepository.commit();\n', 1), ('future.</b>', 1), ('X_RETURNER', 1), ('checkNotNull(elements);\n', 1), ('pairwise.\n', 1), ('testOnErrorExceptionIsThrown()', 1), ('TesterRequirements', 1), ('LinkedHashMultiset(int', 1), ('io.reactivex.subjects.PublishSubject;\n;\n\npublic', 1), ('disallows', 1), ('typeVariable;\n', 1), ('DeferTckTest', 1), ('com.iluwatar.fluentinterface.fluentiterable.lazy.LazyFluentIterable;\nimport', 1), ('nextCancelRaceBackpressuredConditional()', 1), ('lambdas', 1), ('t.set(throwable);\n', 1), ('pairwise.', 1), ('JdbcDataSource();\n', 1), ('.zipWith(iterate(elements),', 1), ('imagined', 1), ('"parallelism");\n', 1), ('preferred</b>.\n', 1), ('MaybeConcatArray(MaybeSource<?', 1), ('.put(Reader.class,', 1), ('ListFeature.SUPPORTS_ADD_WITH_INDEX,\n', 1), ('e3);\n', 1), ('us.concatMapCompletable(completableComplete(),', 1), ('Helpers}.\n', 1), ('documented', 1), ('testClassPathEntries_duplicateUri_parentWins()', 1), ('Path}', 1), ('Validator(T', 1), ('BufferBoundarySubscriber<?,', 1), ('java.util.function.IntFunction;\nimport', 1), ('loggedMuteShouldRunTheCheckedRunnableAndNotThrowAnyExceptionIfCheckedRunnableDoesNotThrowAnyException()', 1), ('ImmutableEnumMap(EnumMap<K,', 1), ('AtomicReference<Type>', 1), ("Letter('y'))));\n\n", 1), ('ObserverTest<GOrcs>', 1), ('Auto-generated', 1), ('java.nio.file.SimpleFileVisitor;\nimport', 1), ('File(p);\n\n', 1), ('PerfConsumer(bh));\n\n', 1), ('doneProducing.countDown();\n', 1), ('ResourceObserverTest', 1), ('Stream)\n', 1), ('VolatileSizeArrayListTest', 1), ('o2).subscribeOn(Schedulers.trampoline()).map(new', 1), ('Boolean.toString(rainbowFish.getHungry()));\n', 1), ('FileInputStream(filename);\n', 1), ('"Mapper-run");\n', 1), ('(GWT).\n', 1), ('continuous', 1), ('Traverser.forTree(FILE_TREE);\n', 1), ('derived\n', 1), ('ExceptionHelper.terminate(this);\n', 1), ('testNumbersCantBeModified()', 1), ('ObservableDistinct<T,', 1), ('TakeUntilMainObserver<T>', 1), ('AbstractMultimapAsMapImplementsMapTest', 1), ('imagined\n', 1), ('getAuthorBooksCount(String', 1), ('newBuilderUsing(delegate,', 1), ('addOutEdge(edge,', 1), ('Observable.fromArray(array).reduce(this);\n\n', 1), ('boundaryError()', 1), ('FlowableDefer<T>', 1), ('collector.combiner().apply(left,', 1), ('onDrop(n);\n', 1), ('result.put(enumInstance.name(),', 1), ('zip(final', 1), ('record)', 1), ('nextElement', 1), ('BackingStoreException.class,\n', 1), ('cs.onError(null);\n', 1), ('getSubListOriginalListSetAffectsSubListLargeListMethod(),\n', 1), ('first4.get(3));\n', 1), ('negativeRequest()', 1), ('proxied', 1), ('SubscriptionHelper.validate(null,', 1), ('applications.\n', 1), ('(Object[])m0.invoke(null);\n', 1), ('noDisposeOnAllSuccess()', 1), ('iterations', 1), ('0).subscribe(new', 1), ('TestException("Second");\n', 1), ('tasks.size();', 1), ('outer.flatMap(new', 1), ('TimeoutFallbackObserver<T>(actual);\n', 1), ('Flowable.fromArray(array).flatMap(new', 1), ('PublishSubject<Void>', 1), ('#getInstance}', 1), ('onScheduleIO()', 1), ('asList();\n\n', 1), ('#mapWithIndex(DoubleStream,\n', 1), ('PublishProcessor.create().ignoreElements().blockingAwait();\n', 1), ('SubscriptionHelper.setOnce(this.s,', 1), ('countersCollection.findOneAndUpdate(find,', 1), ('Workaround', 1), ('higher.\n', 1), ('emitter.isDisposed();\n', 1), ('equal(File', 1), ('MessageCollectorMember', 1), ('DefaultSubscriberImpl();\n', 1), ('NoAnonymousInnerClassesTest.class.getResource("/");\n', 1), ('CHECKED(IOException.class),\n', 1), ('error(ZipSubscriber<T,', 1), ('multimapView;\n\n', 1), ('DecoupledClassLoader', 1), ('emulate', 1), ('UserDto("John",', 1), ('latest;\n', 1), ('-3521127104134758517L;\n', 1), ('option",', 1), ('(counter[0]++', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.toObservable.png"', 1), ('SortedJoinInnerSubscriber[n];\n\n', 1), ('Uses:\n', 1), ('MaybeObserveOn<T>', 1), ('CompletableLift(CompletableSource', 1), ('1635</a>,\n', 1), ('.suppressing(suppressForTreeSetNatural())\n', 1), ('HashSet<>(Arrays.asList(6,', 1), ('assertTrue(ArbitraryInstances.get(Equivalence.class).equivalent(1,', 1), ('testEmptyRangeSendsOnCompleteEagerlyWithRequestZero()', 1), ('function::apply}.\n', 1), ('ScalarSubscriptionTest', 1), ('Reactive-Streams\n', 1), ('com.iluwatar.servicelayer.spellbook.SpellbookDao;\nimport', 1), ('this.member', 1), ('MaybeToSingle(MaybeSource<T>', 1), ('disallowPrimitiveType(lowerBounds,', 1), ('resource.getDetails(2,', 1), ('scenario(jenkins,', 1), ('(!m.signature.contains("Maybe"))', 1), ('File#isFile}', 1), ('dependentPromiseIsFulfilledWithAnExceptionIfTheFunctionThrowsException()', 1), ('type/method.', 1), ('Collections.singletonList(1);\n\n', 1), ('stress', 1), ('onErrorCall,', 1), ('lineNum++;\n\n', 1), ('this.tasks', 1), ('etc...\n', 1), ('getAvailableToppings()', 1), ('"-3",', 1), ('Flowable.range(v,', 1), ('assertTrue("Diff', 1), ('diagrams:\n', 1), ('finalizeReferentCalled', 1), ('stream.writeInt(multimap.keySet().size());\n', 1), ('fn.replace(".java",', 1), ('printThisAfter();\n', 1), ('TestOutputStream(ByteStreams.nullOutputStream(),', 1), ('fo.onSubscribe(s2);\n\n', 1), ('overrideInitIoScheduler()', 1), ('https://github.com/JCTools/JCTools/blob/master/LICENSE\n', 1), ('longs', 1), ('(lines.peek()', 1), ('pitfall', 1), ('.reduceWith(new', 1), ('java.nio.file.Files}', 1), ('.put(ByteSource.class,', 1), ('doOnTerminate}', 1), ('N>create(EXPECTED_DEGREE));\n', 1), ('StrictPerf', 1), ('mockedVisitor', 1), ('SetFeature', 1), ('commanderResponse;\n', 1), ('ticket.getNumbers().getNumbersAsString());\n', 1), ('map(RandomAccessFile', 1), ('CrashingMappedIterable<Single<Integer>>(1,', 1), ('byteSource;\n\n', 1), ('.put(Table.class,', 1), ('execTime),', 1), ('separated', 1), ('input.observable.subscribeOn(Schedulers.computation());\n', 1), ('SingleDoFinally(SingleSource<T>', 1), ('(CREATE_TRACE)', 1), ('createFile();\n\n', 1), ('Observable.<Void>never().blockingMostRecent(null).iterator().next());\n', 1), ('MaybeSubscribeOn(MaybeSource<T>', 1), ('nazguls.get(name);\n', 1), ('byte[],', 1), ('host);\n', 1), ('TestHelper.assertNoOffer(sc);\n', 1), ('removeOutEdge(edge);\n', 1), ('singleObserver;\n', 1), ('io.reactivex.schedulers.AbstractSchedulerTests;\nimport', 1), ('163080509307634843L;\n\n', 1), ('Completable.fromObservable(ps2);\n', 1), ('generateDoubleBuffer()', 1), ('.subscribe(ts);\n', 1), ('longs.weakCompareAndSet(i,', 1), ('subscriber.onNext(value);\n', 1), ('ParallelSortedJoin(ParallelFlowable<List<T>>', 1), ('stackCopy)', 1), ('onAction(Action', 1), ('FileOutputStream(ERROR_FILE));\n\n', 1), ('setFileName(String', 1), ('delegate().awaitTermination(timeout,', 1), ('guaranteed\n', 1), ('com.google.common.reflect.Invokable;\nimport', 1), ('root]\n', 1), ('Thus', 1), ('SingleRetryTest', 1), ('8080,', 1), ('lines.addAll(0,', 1), ('HEALING:\n', 1), ('Supplies', 1), ('EMPTY_GENERATORS', 1), ('assertNotNull(ArbitraryInstances.get(Currency.class).getCurrencyCode());\n', 1), ('immediately",', 1), ('LinkedHashMultimapGwtSerializationDependencies(Map<K,', 1), ('SingleDisposable(SingleObserver<?', 1), ('Functions.toFunction(function8);\n', 1), ('dispatchReadEvent(key,', 1), ('(SortedSet<K>)', 1), ('bloat', 1), ('testListIterator_fullyModifiable()', 1), ('CakeLayerInfo("layer2",', 1), ('!queue.offer(t))', 1), ('parsing\n', 1), ('delegate.higherEntry(checkValid(key));\n', 1), ('ArbitraryInstances', 1), ('possible.', 1), ('ImmutableSet}', 1), ("SingleSource}'s", 1), ('combination', 1), ('worker.action(actions);\n', 1), ('LongFunctionWithIndex)}.\n', 1), ('SpscLinkedArrayQueue<Integer>(16);\n\n', 1), ('list.equals(obj);\n', 1), ('Changes', 1), ('io.reactivex.exceptions.MissingBackpressureException}.</dd>\n', 1), ('construct', 1), ('Enums', 1), ('s.request(BackpressureHelper.multiplyCap(skip,', 1), ('INVENTORY_SIZE', 1), ('#orNull}.\n', 1), ('needs\n', 1), ('thread-local', 1), ('ObservableSwitchIfEmptyTest', 1), ('Ticker.class,\n', 1), ('Item}s', 1), ('!line.contains("2.0."))', 1), ('joinHelper(1);\n', 1), ('assertTrue("Should', 1), ('list1.add(w);\n', 1), ('false).firstEntry();\n', 1), ('model', 1), ('InnerCompletableCache', 1), ('fuseToObservable();\n}\n', 1), ('com.google.common.collect.UnmodifiableIterator;\nimport', 1), ('doubleOnSubscribe(Subscriber<?>', 1), ('OptionalDouble.empty())\n', 1), ('flag.set(true);\n', 1), ('loadData()', 1), ('assertEquals(Arrays.asList(3L,1L,2L,3L,4L,5L),', 1), ('ScanSeedSubscriber(Subscriber<?', 1), ('BusinessOperation<String>', 1), ('EqualCoordinator<T>(s,', 1), ('AtomicReference<CacheDisposable<T>[]>', 1), ('q2.poll();\n', 1), ('usages', 1), ('</p>\n', 1), ('RxJavaPlugins.setNewThreadSchedulerHandler(scheduler2scheduler);\n', 1), ('.suppressing(suppressForLinkedBlockingDeque())\n', 1), ('behave', 1), ('triangular\n\n', 1), ('justUnsubscribed()', 1), ('(replenishMain', 1), ('"Dagger', 1), ('Arrays.asList(contents));\n', 1), ('-7789753024099756196L;\n\n', 1), ('ListenableFutureTask<Integer>', 1), ('optionals.stream().filter(Optional::isPresent).map(Optional::get)}', 1), ('LOGGER.info("All', 1), ('Keep', 1), ('doubleFilterAsync()', 1), ('m.setAccessible(true);\n\n', 1), ('Integer.parseInt(map.get("lengthMeters")),\n', 1), ('bi-predicate', 1), ('(servers)', 1), ('(method.isAnnotationPresent(Empty.class))', 1), ('totalCalls', 1), ('byteSource.wasStreamOpened();\n', 1), ('.append(rawType.getName())\n', 1), ('localFuture.cancel(false);\n', 1), ('lineBuf.add(buf,', 1), ('that.apply(t)}', 1), ('concatArray()', 1), ('RxJavaPlugins.setOnObservableAssembly(new', 1), ('MergeMaybeObserver<T>', 1), ('timeComplete_Cancel(int', 1), ('FileByteSink', 1), ('d.cancel();\n', 1), ('wheelProperties', 1), ('StackOverflowError', 1), ('testRequestThroughMap()', 1), ('deduped', 1), ('completionValueSupplier;\n', 1), ('ObservableTakeLastTimed<T>', 1), ("SingleObserver}s'", 1), ('"4"})\n', 1), ('3628800,', 1), ('adidas', 1), ('concatEager(Iterable<?', 1), ('Queen();\n\n', 1), ('assertEquals(expectedExceptions,', 1), ('ObservableCount<T>(source));\n', 1), ('FlowableConcatMap<T,', 1), ('testSimpleError()', 1), ('DoOnDisposeObserver<T>(s,', 1), ('finalizer', 1), ('fileName;\n\n', 1), ('disallowFilesSecurityManager', 1), ('0L\n', 1), ('method.getName();\n', 1), ('scan(Completable.class);\n', 1), ('Modifier.isStatic(getModifiers());\n', 1), ('DeferredScalarSubscription<U>', 1), ('Maps.keyOrNull(ceilingEntry(key));\n', 1), ('AtomicDoubleArray', 1), ('executor.startProcess(lazyval(50L,', 1), ('onAfterTerminateCrashes()', 1), ('BlockingFirstObserver<T>', 1), ('wrapping\n', 1), ('B.class,', 1), ('ParallelFromArray<T>(publishers));\n', 1), ('Consumer<Integer>\n', 1), ('generateRange(C', 1), ('that)\n', 1), ('eventLoop()', 1), ('UnsupportedOperationException("scheduleAtFixedRate', 1), ('ImmediateThinWorker', 1), ('expectedValuesPerKey;\n\n', 1), ('PublishTckTest', 1), ('type.getSimpleName()', 1), ('NullFriendlyComparator<T>();\n', 1), ('ObservableFromCallable<T>', 1), ('inputStream.read(data,', 1), ('lock;\n', 1), ('Cupertino");\n', 1), ('checkNotNull(random);\n', 1), ('unexpected\n', 1), ('nonemacher\n', 1), ('whileErrorThrows()', 1), ('servant.feed(q);\n', 1), ('statusRecordsTheStartTime()', 1), ('generateLong()', 1), ('SingleObserveOn(SingleSource<T>', 1), ('pattern.hashCode();\n', 1), ('@Param({"2",', 1), ('rangeFlatMapJust(Blackhole', 1), ('FlowableUsing(Callable<?', 1), ('DelaySubscriber(Subscriber<?', 1), ('GcFinalization.awaitDone(\n', 1), ('chain.\n', 1), ('iterator}.', 1), ('executor.schedule(periodicWrapper,', 1), ('rest.get();\n', 1), ('SelectionKey.OP_READ;\n', 1), ('org.springframework.test.context.ContextConfiguration;\nimport', 1), ('agrees', 1), ('assertEquals("Plugins', 1), ('deferred,', 1), ('java.nio.file.Files#createTempDirectory}.\n', 1), ('Dummies.DummyExecutor.class);\n', 1), ('flatMapMaybe(final', 1), ('Observable.just(1).flatMapSingle(new', 1), ('run.set(ScheduledRunnable.THREAD_INDEX,', 1), ('SimpleFluentIterable(Iterable<E>', 1), ('constructors.\npublic', 1), ('ts.onNext(t);\n', 1), ('observer.onNext(item);\n', 1), ('customers.', 1), ('System.setSecurityManager(disallowFilesSecurityManager);\n', 1), ('joiner.add(iterator.next().toString());\n', 1), ('FlowableNever()', 1), ('party",', 1), ('WizardDao', 1), ('disposeUpFront()', 1), ('chains', 1), ('plainExecutor()', 1), ('suppressForArrayBlockingQueue()', 1), ('(map.containsKey(null))', 1), ('Messenger', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/retryWhen.f.png"', 1), ('(Royalty', 1), ('declaring', 1), ('4096', 1), ('themselves', 1), ('com.google.caliper.api.SkipThisScenarioException;\nimport', 1), ('nullResultCallable', 1), ('administration.getAllSubmittedTickets();\n', 1), ('outputStreamOpened', 1), ('ae;\n', 1), ('Set<Member>', 1), ('ToFlowable', 1), ('FileCharSinkFactory(null);\n', 1), ('(limit', 1), ('FlowableAll(Flowable<T>', 1), ('startTime', 1), ('(at.hasNext())', 1), ('apply(List<Object>', 1), ('LinkedHashMultiset<E>();\n', 1), ('sorted(comparator,', 1), ('JAVA_LIBRARY_PATH("java.library.path"),\n\n', 1), ('innerWrapper', 1), ('assertEquals(Collections.singletonMap(k0(),', 1), ('retrying,', 1), ('QueueDrainHelper.createQueue(prefetch);\n\n', 1), ('DisposableHelper.dispose(this);\n\n', 1), ('TimeOutObserver(set,', 1), ('}.mergeWith(Single.<Integer>just(1))\n', 1), ('doc)', 1), ('Provided', 1), ('Inventory\n', 1), ('doOnSubscribe()', 1), ('ballThread.setUncaughtExceptionHandler(exceptionHandler);\n', 1), ('!line.startsWith("*"))', 1), ('GuardedQueueTest', 1), ('EqualCoordinatorHelper', 1), ('q.isEmpty();\n', 1), ('wrapped.\n', 1), ('s.actual);\n', 1), ('doAfterNext(@NonNull', 1), ('System.out.printf("', 1), ('super("No', 1), ('CompletableFuture.\n', 1), ('this.errors.pop();\n', 1), ('ExampleAnnotation', 1), ('disposePeriodicDirect()', 1), ('mappings\n', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/maybe.png"', 1), ('hasNext;\n', 1), ("f.getAbsolutePath().substring(prefix.length()).replace('\\\\',", 1), ('Count</a>\n', 1), ('publishers\n', 1), ('OnErrorNextSubscriber<T>(s,', 1), ('testClassPathEntries_notURLClassLoader_withParent()', 1), ('io.reactivex.internal.operators.observable.ObservableInterval.IntervalObserver;\nimport', 1), ('CompletableFromObservable<T>(observable));\n', 1), ('nameBuilder.append(s).append("\\r\\n");\n//', 1), ('resubscribed\n', 1), ('list.listIterator(7);\n', 1), ('OutputStreamWriter(byteSink.openStream(),', 1), ('testGet_enum()', 1), ('byte.class,\n', 1), ('Request', 1), ('subclasses.', 1), ('"10000"', 1), ('reject.set(false);\n', 1), ('between...").get().toString());\n', 1), ('initiate', 1), ('Inventory(INVENTORY_SIZE);\n', 1), ('LambdaSubscriber<T>(Functions.emptyConsumer(),\n', 1), ('UnsubscribeOnMaybeObserver<T>', 1), ('com.google.common.annotations.GwtIncompatible;\n\n/**\n', 1), ('FUSED', 1), ('taskDone;\n\n', 1), ('line\\n",', 1), ('ActionDisposable(Action', 1), ('task.cancel(false);\n', 1), ('onNextOnErrorCrash()', 1), ('.suppressing(suppressForCheckedList())\n', 1), ('ARRAY_MASK;\n', 1), ('(Function)Functions.identity()));\n', 1), ('enqueueing', 1), ('spscLinkedNewBufferPeek()', 1), ('ImmutableMultiset<E>', 1), ('testAggregateAsIntSumResultSelectorThrowsObservable()', 1), ('com.google.common.base.internal.Finalizer;\nimport', 1), ('(AbstractTester<?', 1), ('parent.onAfterTerminate.run();\n', 1), ('EnumSet.copyOf(MinimalCollection.of(elements));\n', 1), ('PlayerDetails(email,', 1), ('queue.put(msg);\n', 1), ('Maybe.just(1)));\n', 1), ('Overwrites', 1), ('same-thread', 1), ('10).elementAt(5).toFlowable()\n', 1), ("'c',", 1), ('o.onTerminateDetach();\n', 1), ('ArrayListMultimap.create();\n\n', 1), ('"subscribers");\n', 1), ('getListIteratorUnmodifiableMethod()', 1), ('subject.onNext("one");\n', 1), ('this.gen', 1), ('generators.\n', 1), ('fromPublisher(toFlowable().repeat());\n', 1), ('LotteryNumbers.createRandom();\n', 1), ("'m'))));\n", 1), ('generateLinkedHashMap(K', 1), ('t.getName().equals(cakeInfo.cakeToppingInfo.name))\n', 1), ('Its', 1), ('g;\n', 1), ('Character(String', 1), ('BasicFuseableConditionalSubscriber(ConditionalSubscriber<?', 1), ('connectableObservable2ConnectableObservable', 1), ('layers)', 1), ('add(Disposable', 1), ('Integer.getInteger(KEY_SINGLE_PRIORITY,', 1), ('withSingleErrors()', 1), ('completionValueSupplier.call();\n', 1), ('(Entry<K,', 1), ('folder,', 1), ('to2.assertNotComplete();\n\n', 1), ('doOnSubscribe(@NonNull', 1), ('checkIn(T', 1), ('Eventually', 1), ('SafeSubscriberTestException(String', 1), ('<li>While', 1), ('e5)', 1), ('frontController', 1), ('serviceCache', 1), ('TimestampTckTest', 1), ('ambWith(SingleSource<?', 1), ('java.util.concurrent.atomic.AtomicReferenceArray;\nimport', 1), ('com.mongodb.client.MongoDatabase;\nimport', 1), ('one";\n', 1), ('ObjectHelper.requireNonNull(observable,', 1), ('SimpleFluentIterable<>(iterable);\n', 1), ('System.out.println(b);\n\n', 1), ('round', 1), ('ScalarSubscription<T>(s,', 1), ('request()}', 1), ('Dispose', 1), ('emitter.onNext(t);\n', 1), ('wash()\n', 1), ('setUp,', 1), ('List<HtmlAnchor>', 1), ('};', 1), ('onComplete(Observer<?>', 1), ('addAndGet(-e);\n', 1), ('disposeOnCurrentThread()', 1), ('byte\n', 1), ('com.iluwatar.servicelocator;\n\nimport', 1), ('B>());\n', 1), ('latch;\n\n', 1), ('Flowable.fromIterable(sources).concatMapDelayError((Function)MaybeToPublisher.instance());\n', 1), ('(!line.startsWith("//")', 1), ('entityName', 1), ('dequeued\n', 1), ('doc.put("email",', 1), ('onTerminate,', 1), ('io.reactivex.parallel;', 1), ('differentContents);\n', 1), ('toNpe(ex);\n', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/CompletableSubject.png"', 1), ('Maybe.amb(Arrays.asList(pp1.singleElement(),', 1), ('elements()', 1), ('HolderThreadSafe}.', 1), ('23.5\n', 1), ('junit.framework.Assert.assertTrue;\nimport', 1), ('WeatherObserver>', 1), ('FlowableOnBackpressureBufferStrategy(Flowable<T>', 1), ('generateInteger()', 1), ('java.io.tmpdir}', 1), ('InterruptedException()));\n', 1), ('might\n', 1), ('com.iluwatar.servicelayer.magic;\n\nimport', 1), ('Flowable.just("one").doOnNext(new', 1), ('{baseUrl});\n', 1), ('SingletonTest(final', 1), ('direct.dispose();\n', 1), ('Flowable.fromArray(array);\n', 1), ('out.write(initialBytes);\n', 1), ('assertTrue(Comparators.isInStrictOrder(Collections.<Integer>emptyList(),', 1), ('wr.get());\n', 1), ('executor.startProcess(lazyval(10,', 1), ('from.', 1), ('BufferOpenObserver(BufferBoundaryObserver<?,', 1), ('Subclasses', 1), ('varieties', 1), ('setContents.toArray(emptyArrayForContents));\n', 1), ('AnySubscriber(SingleObserver<?', 1), ('Class#toString', 1), ('classValue', 1), ('"cold",', 1), ('flatten(Throwable', 1), ('java.lang.Thread.currentThread;\nimport', 1), ('Executors.newFixedThreadPool(THREAD_COUNT);\n', 1), ('Optional}</a>.\n', 1), ('ex.map(Exception::getMessage).orElse(""));\n', 1), ('SingleScheduler(ThreadFactory', 1), ('addCap(long', 1), ('#hasValue()}', 1), ('captured', 1), ('(crashOnSubscribe)', 1), ('considering', 1), ('TestHelper.checkDisposed(Single.just(1).observeOn(Schedulers.single()));\n', 1), ('Nullable', 1), ('((HasUpstreamMaybeSource<Integer>)source.map(Functions.<Integer>identity())).source());\n', 1), ('SingleFromUnsafeSource<T>(onSubscribe));\n', 1), ('OnBackpressureBufferTckTest', 1), ('getFeatures()', 1), ('Value', 1), ('BASE16(BaseEncoding.base16());\n\n', 1), ('FunctionsTest', 1), ('t.getStackTrace())', 1), ('Optional.toJavaUtil(o)}', 1), ('Flowable.just(1).subscribe(new', 1), ('System.out.print(b);\n', 1), ('this.sourceCount', 1), ('recognize\n', 1), ('.join(\n', 1), ('AbstractNioChannel(ChannelHandler', 1), ('Bounded', 1), ('JAVA_CLASS_PATH.value();\n', 1), ('MaybeErrorCallable<T>(supplier));\n', 1), ('assertNull(ArbitraryInstances.get(WithGenericConstant.class));\n', 1), ('(Modifier.isPublic(method.getModifiers())\n', 1), ('SingleInternalHelper', 1), ('visitParameterizedType((ParameterizedType)', 1), ('assertTrue(onErrorFailedException.getCause()', 1), ('get(offset);\n', 1), ('value.call();\n', 1), ('onSubscribe()}', 1), ('keys},', 1), ('QueueDisposable<U>', 1), ('assertEquals(INITIAL_COUNT,', 1), ('RandomAccessFile', 1), ('latest,', 1), ('FeatureUtil.getTesterRequirements(method);\n', 1), ('ObservableFlatMapCompletablePerf', 1), ('largest', 1), ('#toByteArray}.)\n', 1), ('get(key).equals(oldValue))', 1), ('.expectCollects(Arrays.asList(6,', 1), ('AtomicReference<Future<?>>\nimplements', 1), ('BiPredicate', 1), ('Flowable#as}', 1), ('zip(streamA,', 1), ('reduceWithObjectsFlowable()', 1), ('commonly', 1), ('ImmediateThinScheduler.INSTANCE.createWorker();\n\n', 1), ('onErrorWithSuper()', 1), ('blocking\n', 1), ('ElementAtTckTest', 1), ('super.setUp();\n', 1), ('(QueueDisposable<R>)', 1), ('assertTrue(ArbitraryInstances.get(ConcurrentNavigableMap.class).isEmpty());\n', 1), ('load()', 1), ('Service>', 1), ('q.drop();\n', 1), ('.named("EnumSet")\n', 1), ('prepares', 1), ('Inventory#addItem(Item)}\n', 1), ('"+99324554",', 1), ('.suppressing(suppressForTreeSetWithComparator())\n', 1), ('TypeToken<LinkedHashSet<String>>()', 1), ('com.iluwatar.databus.data.StoppingData;\nimport', 1), ('Completable}.', 1), ('numInstances))\n', 1), ('actualFieldsDetails);\n', 1), ('lowerBounds;\n', 1), ('CompletableFromObservableObserver<T>(s));\n', 1), ('generateHashMultiset(freshElement);\n', 1), ('keys,\n', 1), ('AllSubscriber(Subscriber<?', 1), ('suite.addTest(testsForEmptySet());\n', 1), ('simple2()', 1), ('equals(final', 1), ('Iterators.unmodifiableIterator(delegate.iterator());\n', 1), ('FlowableSwitchMapMaybePerf', 1), ('applicationFile', 1), ('SubscriptionArbiterTest', 1), ('*not*', 1), ('UTF-8:', 1), ('toObservableEnum()', 1), ('TestHelper.race(parallel1,', 1), ('inEdgeMap,', 1), ('SimpleFileWriter("testfile.txt",', 1), ('v));\n', 1), ('LoggerFactory.getLogger(CustomerClientApp.class);\n\n', 1), ('copyOf(contents.iterator());\n', 1), ('BackpressureHelper.multiplyCap(1,', 1), ('}).take(100);\n', 1), ('TakeLastSubscriber(Subscriber<?', 1), ('performOperationsUsing(inMemoryDao);\n', 1), ('directoryOf(baseClassName);\n', 1), ('ArrayList<Disposable>();\n\n', 1), ('File(this.testFolder.getRoot(),', 1), ('subscribers.offer(inner);\n\n', 1), ('times(1)).onNext("1");\n', 1), ('needed\n', 1), ('spscArrayQueueNull()', 1), ('Stream.of("a:0",', 1), ('.switchMapSingle(Functions.justFunction(Single.never()))\n', 1), ('2500;\n\n', 1), ('ExecutionException.class,\n', 1), ('queue.offer(latest.clone());\n', 1), ('-1215060610805418006L;\n\n', 1), ('cb', 1), ('.expect("A",', 1), ('singleDocRefersToSingleTypes()', 1), ('(readClassPathFiles.implies(p))', 1), ('listenerLatch.countDown();\n', 1), ('processor.onNext("two");\n', 1), ('resultCalc)', 1), ('referencing\n', 1), ('actual.onNext(n);\n', 1), ('prettyPrint(",', 1), ('assertSame(a,', 1), ('assertNull(RxJavaPlugins.onAssembly((Maybe)null));\n\n', 1), ('doc.getString("bank"),\n', 1), ('(according', 1), ('ds.downstreamRequest(-99);\n\n', 1), ('TestHelper.compositeList(ex);\n', 1), ('checkDoubleOnSubscribeCompletableToSingle(Function<Completable,', 1), ('RegularImmutableSet<E>', 1), ('BufferOpenObserver<Open>\n', 1), ('BaseTypeParser', 1), ('Flowable.just(1).test();\n', 1), ('eros.', 1), ('SortedJoinInnerSubscriber(SortedJoinSubscription<T>', 1), ('OnErrorNextObserver<T>(t,', 1), ('ClassInfo("a/b/Bar$1Local.class",', 1), ('ObservableSkipLast(ObservableSource<T>', 1), ('slowPath(a,', 1), ('source1;\n\n', 1), ('sit)', 1), ('checkState(previousNode', 1), ('Single.ambArray(Single.never()));\n', 1), ('stay', 1), ('toList(iterable.iterator());\n', 1), ('manifestClasspath("file:/with/absolute/dir");\n', 1), ('assertNull(m.toString(),', 1), ('SubscribeTask', 1), ('arrayList', 1), ('SingleCache(SingleSource<?', 1), ('SafeTreeMap(Map<?', 1), ('FlowableTake<T>', 1), ('SwitchMapDelayErrorTckTest', 1), ('read));\n', 1), ('io.reactivex.internal.operators.observable.ObservableGroupJoin.*;\nimport', 1), ('short.class,\n', 1), ('CreateEmitter<T>', 1), ('delegate.put(checkValid(key),', 1), ('lazySet(idx,', 1), ('pp.publish().autoConnect(0);\n\n', 1), ('java.lang.reflect.AccessibleObject;\nimport', 1), ('Optional.orElse(null)}.\n', 1), ('scheduleDirect(final', 1), ('classInfo(ClassPathTest.class))\n', 1), ('incident', 1), ('LatestCoordinator(Observer<?', 1), ('((read', 1), ('(!gate', 1), ('ScheduledExecutorService,', 1), ('deferredUpstreamProducer()', 1), ('suite.addTest(testsForCheckedSortedSet());\n', 1), ('.takeUntil(Functions.alwaysFalse())\n', 1), ('OptionalInt.of(boxedLast.get())', 1), ('match.', 1), ('testStringConverter_serialization()', 1), ('ImmutableList.Builder<Type>', 1), ('ConcatMapSingleMainObserver<?,', 1), ('wrapping\n\n', 1), ('allTests', 1), ('fastPath(a,', 1), ('FlowableSingleSingle(Flowable<T>', 1), ('java.util.function.Function}.\n', 1), ('t5', 1), ('integerList);\n\n', 1), ('getPutNullKeyUnsupportedMethod(),\n', 1), ('task.onError(e.getCause());\n', 1), ('guard', 1), ('CompletableOperator>', 1), ('interestedOps));\n', 1), ('ByteArrayOutputStream.', 1), ('"onSuccessMapper', 1), ('this.value.compareTo(that.value);\n', 1), ('emptyArray()', 1), ('failSingleCompletableBlockingAwait()', 1), ('FlowableOnBackpressureLatest<T>', 1), ('(countersCollection.count()', 1), ('iterable},', 1), ('threadFactory', 1), ('processors,', 1), ('Optional.of(lotteryTicket);\n', 1), ('BufferOpenSubscriber<Open>', 1), ('ObservableFlatMapSingleTest', 1), ('"d",', 1), ('testRequestThroughTakeWhereRequestIsSmallerThanTake()', 1), ('generator.create(elements.toArray());\n', 1), ('assertFalse(list.equals(list2));\n\n', 1), ('assertEquals(OptionalDouble.empty(),', 1), ('scalarEmission', 1), ('consumerIndex.lazySet(newIndex);\n', 1), ('subscription.isDisposed();\n', 1), ('subscribers[0].onNext(3);\n', 1), ('s.indexOf("</code>",', 1), ('unfiltered', 1), ('derivedFeatures', 1), ('visit(t.getGenericComponentType());\n', 1), ('bot', 1), ('TypeToken<List<TwoConstantEnum>>()', 1), ('countDownRunnable', 1), ('onLift.apply(s);\n\n', 1), ('Object[]{"Catapult",', 1), ('FlowableSkipUntil<T,', 1), ('iterA', 1), ('testCancelledFuture()', 1), ('(!tillTheEnd)', 1), ('onErrorReturn(Function<?', 1), ('java.net.URI;\nimport', 1), ('constant.', 1), ('FlowableJoin(\n', 1), ('FileLoggerModule.singleton;\n', 1), ('ConcatMapMaybeMainObserver<?,', 1), ('head();\n', 1), ('Object#equals}', 1), ('first.done;\n\n', 1), ('assertNotNull(scheduler);\n', 1), ('SingleTimer', 1), ('singletonInstanceMethod;\n', 1), ('serves\n', 1), ('tool/framework', 1), ('condition)', 1), ('flush()', 1), ('arrayList.trimToSize();\n', 1), ('Charset,\n', 1), ('./\n', 1), ('observer.onError(t);\n', 1), ('Integer[7]));\n\n', 1), ('consecutive', 1), ('.named("checkedList/ArrayList")\n', 1), ('scanFor(StringBuilder', 1), ('IllegalArgumentException(\n', 1), ('requests.get(1));\n', 1), ('CompletableUsing(Callable<R>', 1), ('.thenApply(Utility::characterFrequency);\n', 1), ('serializedConcurrentOnNext()', 1), ('br.readLine())', 1), ('subjectGenerator)', 1), ('java.nio.file.Files.createTempFile("SinkSourceFile",', 1), ('Consumer("NSA",', 1), ('Charset.class,\n', 1), ('assertTrue(list.containsAll(Arrays.asList(2,', 1), ('Arrays.asList(v0(),', 1), ('FileOutputStream(jarFile));\n', 1), ('countLines()', 1), ('maybeMaybe()', 1), ('peers.\n', 1), ('QueueFuseable.ASYNC)', 1), ('result.add(method);\n', 1), ('BufferUntilSubscriberTest', 1), ('doorProperties.put(HasPrice.PROPERTY,', 1), ('BaseDaoTest(final', 1), ('Collection}', 1), ('FlatMapMaybeObserver(SingleObserver<?', 1), ('copyToList(Iterable<E>', 1), ('title);\n\n', 1), ('secondEmpty()', 1), ('onSubscribeTwice()', 1), ('array(long', 1), ('(comparator.compare(s1,', 1), ('CompletableFromSingle<T>(this));\n', 1), ('this.validator', 1), ('org.junit.Assert.assertNotSame;\nimport', 1), ('fromCallableSingle.subscribe();\n\n', 1), ('CombinerObserver[count];\n', 1), ('(SlidingDoor', 1), ('encompasses', 1), ('ORDERING', 1), ('ImmutableList)\n', 1), ('polled.run.run();\n', 1), ('"scheduleRunnable";\n', 1), ('charFrequency);\n', 1), ('Single.just(1).doAfterTerminate(null);\n', 1), ('r.get()', 1), ('toSortedListCapacityObservable()', 1), ('ElementType.FIELD})\n@Documented\n@GwtCompatible\npublic', 1), ('Audio.playSound(Audio.getAudioStream("./etc/Bass-Drum-1.wav"),', 1), ('1K,', 1), ('ID_GENERATOR', 1), ('super(distinctElements);\n', 1), ('asByteSource(file).hash(hashFunction)}.', 1), ('FileOutputStream(file,', 1), ('.put(Currency.class,', 1), ('targetNode;\n\n', 1), ('CompletableSubscribeOnTest', 1), ('awaitUntil(Date', 1), ('Observable.intervalRange(0,', 1), ('frc);\n\n', 1), ('RxJavaPlugins.lockdown();\n', 1), ('testFolder', 1), ('com.iluwatar.servicelayer.spellbook.Spellbook;\nimport', 1), ('dao;\n', 1), ('CancellationException("unit', 1), ('FlowableBuffer(Flowable<T>', 1), ('.put(ImmutableMultimap.class,', 1), ('Yes,', 1), ('assertNotNull(ArbitraryInstances.get(File.class));\n', 1), ('Laurence', 1), ('Completable.concat(Arrays.asList(new', 1), ('ts.request(5);\n', 1), ('testFileTraverser_multipleDirectoryLayers_traversalReturnsAll()', 1), ('terminate()', 1), ('executeAll()', 1), ('assertEquals("n', 1), ('ObservableLift(ObservableSource<T>', 1), ('next.subscribe(s);\n', 1), ('unwrapScheduleDirectTaskAfterDispose()', 1), ('supplierClass', 1), ('child1', 1), ('RxJavaPlugins.setNewThreadSchedulerHandler(new', 1), ('makeServiceCalls(Tenant', 1), ('taking', 1), ('(whichever', 1), ('dui', 1), ('mergeArrayDelayError(CompletableSource...', 1), ('(TypeVariable<?>)', 1), ('8+', 1), ('MaybeIgnoreElementCompletable(MaybeSource<T>', 1), ('(Reader)', 1), ('placing', 1), ('newValue);\n}\n', 1), ('loop</li>\n', 1), ('task-tracking', 1), ('ArrayListMultimap<>();\n', 1), ('(mark', 1), ('Amb</a>\n', 1), ('disposeAfterRun()', 1), ("Observable}'s", 1), ('"Bobson");\n', 1), ('input.readLine())', 1), ('"("))', 1), ('generateImmutableSortedMultiset(E', 1), ('FlowableLimit(Flowable<T>', 1), ('javax.swing.JPanel;\nimport', 1), ('Edition",', 1), ('ro.onError(new', 1), ('ToMultimapTckTest', 1), ('simpler', 1), ('timeoutOther()', 1), ('getTypeName.invoke(type);\n', 1), ('@Before(value', 1), ('6)));\n\n', 1), ('JAVA_VM_NAME("java.vm.name"),\n\n', 1), ('addAll(Iterable<?', 1), ('"isEqual', 1), ('non-interrupting', 1), ('#zip}.\n', 1), ('ds.onComplete();\n\n\n', 1), ('ArbitraryInstances.get(mutableClass));\n', 1), ('ArrayDeque<T>();\n', 1), ('main.actual.onError(t);\n', 1), ('MaybeConcatIterable(Iterable<?', 1), ('newValue))', 1), ('MaybeContains<T>(this,', 1), ('buf.length)', 1), ('Observers\n', 1), ('(Function)ToObservable.INSTANCE;\n', 1), ('innerNext();\n', 1), ('zip8()', 1), ('.delaySubscription(Observable.error(new', 1), ('interactions', 1), ('.first(2)\n', 1), ('silver', 1), ('issued.', 1), ('FuseToObservable<Long>', 1), ('AsyncResult\n', 1), ('biconsumer()', 1), ('ConcatMapMaybeSubscriber<?,', 1), ('isCheckedException(exceptionClass),\n', 1), ('WithNullConstant()', 1), ('service.shutdownNow();\n', 1), ('DematerializeSubscriber<T>', 1), ('ds.subscribeTo(Flowable.just(1));\n\n', 1), ('sa.missedProduced.set(1);\n\n', 1), ('assertTrue(task.isCancelled());\n\n', 1), ('WeatherType.SUNNY;\n', 1), ('-6178010334400373240L;\n\n', 1), ('AtomicReference<CompletableDisposable[]>', 1), ('FOO,\n', 1), ('rxThreadsAfter', 1), ('messageFromOrcs()', 1), ('contents\n', 1), ('doorProperties));\n\n', 1), ('downloadPromise', 1), ('TestHelper.checkDisposed(Flowable.just(1).takeLast(1));\n', 1), ('pertaining', 1), ('mapWrongParallelismConditional()', 1), ('key;\n\n', 1), ('"B.1",', 1), ('loadFactor)', 1), ('Event>>', 1), ('ThreadPoolExecutor(10,', 1), ('TestHelper.checkDisposed(Maybe.just(1).subscribeOn(Schedulers.single()));\n', 1), ('List<EventObserver>', 1), ('valueComparator,\n', 1), ('DisposableSingleObserver}', 1), ('odio,', 1), ('dispatches', 1), ('String>entryComparator(NullsBeforeTwo.INSTANCE));\n', 1), ('ste', 1), ('entities:");\n', 1), ('BiFunction\n', 1), ('onLift;\n\n', 1), ('stream(OptionalLong', 1), ('remove(CompletableDisposable', 1), ('sourceObs.reduce(second).toObservable();\n\n', 1), ('routes', 1), ('(Set<Locale>', 1), ('from)\n', 1), ('longEqualJava(int', 1), ('maybes', 1), ('entry.\n', 1), ('sources.");\n\n', 1), ('getBytes()', 1), ('singleMaybe()', 1), ('com.iluwatar.factorykit;\n\nimport', 1), ('com.google.common.collect.testing.testers.ListSubListTester.getSubListOriginalListSetAffectsSubListLargeListMethod;\nimport', 1), ('checks\n', 1), ('subscribers.delete(subscriber);\n', 1), ('c.toFlowable();\n', 1), ('testGetValue()', 1), ('doOnEventThrowsSuccess()', 1), ('8080567949447303262L;\n\n', 1), ('ArrayBlockingQueue<Object>(10),\n', 1), ('ALLOWS_NULL_QUERIES,\n', 1), ('DelaySubscriber(serial,', 1), ('writerLock\n', 1), ('24,', 1), ('Maybe.empty().delay(100,', 1), ('Object.class,', 1), ('int[n];\n', 1), ('com.google.common.collect.testing.testers.MapPutTester.getPutNullKeyUnsupportedMethod;\n\nimport', 1), ('a.onNext(t);\n\n', 1), ('((CompositeException)ex).getExceptions();\n', 1), ('pathCharSourceFactory()', 1), ('LineReader(readable);\n', 1), ('"completableSource', 1), ('(Customer', 1), ('Helpers.getMethod(tester.getClass(),', 1), ("O'Dell\n", 1), ('assertNotNull(ArbitraryInstances.get(AnnotatedElement.class));\n', 1), ('loop,', 1), ('x:\\', 1), ('Usually', 1), ('FlowableLastSingle<T>', 1), ('andThen(SingleSource<T>', 1), ('TakeLastSubscriber<T>', 1), ('testGet_constructorPreferredOverConstants()', 1), ('bt', 1), ('exception");\n//', 1), ('(classDefPassed)', 1), ('createdExceptions', 1), ('doubleOnSubscribe(MaybeObserver<?>', 1), ('non-backpressured', 1), ('UnsubscribeSubscriber<T>', 1), ('Unit[5];\n', 1), ('testMergeWithCurrentThreadScheduler1()', 1), ('RxJavaPlugins.getOnCompletableCreate());\n\n', 1), ('BiMap}', 1), ('subscriber.assertResult("Hello', 1), ('(indexes[i]', 1), ('increase);\n', 1), ('figure', 1), ('ADD,\n', 1), ('timeout(2000).atLeastOnce()).move();\n', 1), ("'toByteArray'", 1), ('readers)', 1), ('createObservable()', 1), ('partProperties.put(HasModel.PROPERTY,', 1), ('-2945777694260521066L;\n\n', 1), ('generateClass()', 1), ('intermittently,', 1), ('currentWeather);\n', 1), ('cachedService.getId());\n', 1), ('com.google.common.collect.testing.testers.CollectionAddTester.getAddUnsupportedNotPresentMethod;\nimport', 1), ('InnerQueuedSubscriber<R>(this,', 1), ('world\n', 1), ('CollectorTester(\n', 1), ('f.doFinally(MaybeDoFinallyTest.this).filter(Functions.alwaysTrue());\n', 1), ('overrideInitSingleScheduler()', 1), ('Key', 1), ('InstantPeriodicTaskTest', 1), ('2.13', 1), ('javaUtilOptional)', 1), ('!file.setLastModified(System.currentTimeMillis()))', 1), ('MaybeOperator.apply():\n', 1), ('e.g.,', 1), ('inEdges()', 1), ('loggedMute(CheckedRunnable', 1), ('testImmutableTable()', 1), ('Arrays.fill(mainArray,', 1), ('FlowableMaterialize(Flowable<T>', 1), ('fakePool;\n', 1), ('DataBus();\n\n', 1), ('ClassPath.Scanner.getClassPathEntry(\n', 1), ('LinkedList.class,\n', 1), ('readAllLines(f);\n\n', 1), ('TaskTest(final', 1), ('BlockingFlowableIterator(int', 1), ('toFlowable().retry(times,', 1), ('char[],', 1), ('delete.\n', 1), ('String.format("id=%s', 1), ('>>>>', 1), ('suppressForAbstractList()', 1), ('ArrayDeque<>();\n', 1), ('asByteSourceFactory(final', 1), ('Lists.newArrayList(v0())));\n', 1), ('List<Object>>', 1), ('Schedulers.newThread().createWorker();\n', 1), ('Mute()', 1), ('customerResource.save(customerThree);\n', 1), ('-4945480365982832967L;\n\n', 1), ('RANDOM', 1), ('additional,', 1), ('clearing', 1), ('RxJavaPlugins.initNewThreadScheduler(c));\n\n', 1), ('suppression.\n', 1), ('IgnoreElementsSubscriber(CompletableObserver', 1), ('inventorySize);\n', 1), ('.subscribeOn(Schedulers.computation()).blockingFirst().intValue());\n', 1), ('asByteSink(to).write(from);\n', 1), ('testElementAtWithIndexOutOfBoundsFlowable()', 1), ('System.out.println(arg1', 1), ('(left.hasNext())', 1), ('generateReader()', 1), ('noting', 1), ('ObjectHelper.requireNonNull(a.next(),', 1), ('AbstractSet<Entry<K,', 1), ('Ordering#natural()}', 1), ('empty,\n', 1), ('Function4', 1), ('TakeLastTimedObserver<T>\n', 1), ('com.google.common.testing.CollectorTester;\nimport', 1), ('"Operator', 1), ('ListenableFutureTester', 1), ('maps.\n', 1), ('action.getDescription(),', 1), ('file1.delete();\n', 1), ('com.google.common.collect.TreeMultimap;\nimport', 1), ('overrideInitNewThreadScheduler()', 1), ('#ALLOWS_NULL_VALUES}).', 1), ('assertSame(oos,', 1), ('.addEqualityGroup(new', 1), ('CacheTckTest', 1), ('PrintStream.class,', 1), ('stream(java.util.Optional<T>', 1), ('Functions.justCallable(Maybe.just(1)));\n', 1), ('PURGE_ENABLED;\n\n', 1), ('InvalidPreferencesFormatException.class,\n', 1), ('futureObservable', 1), ('suppressed.",', 1), ('FreshValueGeneratorTest.class.getDeclaredMethod("testNulls"))\n', 1), ('ballThread.start();\n', 1), ('testGetClassPathFromManifest_absoluteJar()', 1), ('FlowableMergeWithSingleTest', 1), ('Test).\n', 1), ('handle)', 1), ('list.set(i', 1), ('(singleton)', 1), ('ZipEntry(entry));\n', 1), ('studentToBeUpdated.getName()', 1), ("Doesn't", 1), ('FloatBuffer.allocate(0))\n', 1), ('DoOnEachObserver<T>', 1), ('FUSED_EMPTY)', 1), ('MergeWithSingleTckTest', 1), ('serialDisposable;\n\n', 1), ('resultSelector));\n', 1), ('q,', 1), ('this.keyComparator', 1), ('"Frodo",', 1), ('e2);\n', 1), ('times(1)).accept(Integer.valueOf(2));\n', 1), ('temp.add(feature.toString());\n', 1), ('troll.fleeBattle();\n', 1), ('upper', 1), ('Handler', 1), ('false</li>\n', 1), ('ToFlowableIterator(Iterator<?', 1), ('doExpectCollects(@NullableDecl', 1), ('stopped;\n\n', 1), ('LOGGER.error("ERROR:', 1), ('singletonInstanceMethod', 1), ('resources.add(resourceName);\n', 1), ('<p>(If', 1), ('filtered;\n', 1), ('w.schedule(action,', 1), ('TestHelper.checkDisposed(PublishSubject.create().singleOrError().doOnDispose(new', 1), ('assertSame(fos,', 1), ('java.util.function.Supplier},', 1), ('Short.class,\n', 1), ('up.onNext(1);\n\n', 1), ('this.observer2', 1), ('ticket);\n\n', 1), ('.put(CharBuffer.class,', 1), ('.withFeatures(computeReserializedCollectionFeatures(parentBuilder.getFeatures()))\n', 1), ('s.onError(npe);\n', 1), ('cachedKeySet;\n', 1), ('1024d));\n', 1), ('"sourceSupplier', 1), ('allPotions.stream().map(System::identityHashCode).distinct().count());\n\n', 1), ('RuntimeException("bad"));\n\n', 1), ('mark;\n', 1), ('wizards)', 1), ('testSetMultimap()', 1), ('baseLoader.load(new', 1), ('thereAreNumSimpleObjects(int', 1), ('addInner(InnerSubscriber<T,', 1), ('f0', 1), ('Emitter(MaybeObserver<?', 1), ('java.util.Collections#emptySet()},', 1), ('Supplier<Collection<Object>>', 1), ('TypeToken<Set<EmptyEnum>>()', 1), ('InitializingOnDemandHolderIdiom();\n', 1), ('Nazgul(NazgulName.JI_INDUR));\n', 1), ('Entry.class,\n', 1), ('FlowableConcatMapSingleTest', 1), ('fusionMode()', 1), ('!isPrivate()', 1), ('sourceObs.concatMap(new', 1), ('reportMoreProduced(long', 1), ('DescendingMap', 1), ('testToIteratorWithException()', 1), ('cancelAfterFirst()', 1), ('List<Maybe<Integer>>', 1), ('succeeded.\n', 1), ('Functions.justFunction(Maybe.error(new', 1), ('strategy.execute();\n', 1), ('verifyGetOnPendingFuture(Future<?>', 1), ('s.scheduleDirect(r));\n\n', 1), ('.forEachWhile(Functions.alwaysTrue(),', 1), ('task.setFirst(f1);\n', 1), ('Validator#get()}', 1), ('CacheLoader}.\n', 1), ('Flowable.just(i).subscribeOn(Schedulers.computation());\n', 1), ('TakeUntil', 1), ('ALLOWS_NULL_VALUES(ALLOWS_NULL_QUERIES),\n\n', 1), ('writeV1(RainbowFish', 1), ('createFromEntities(final', 1), ('resourceName', 1), ('ObjectHelper.requireNonNull(resumeSingleInCaseOfError,', 1), ('"minus', 1), ('this.tearDown', 1), ('(exceptions.isEmpty())', 1), ('value.get());\n', 1), ('8");\n', 1), ('createTempFile();\n', 1), ('arise.', 1), ('Maybe.zip(Maybe.error(new', 1), ('assertNull(RxJavaPlugins.onObservableError(null));\n//\n//', 1), ('DwarvenMineWorker.Action...', 1), ('storage', 1), ('generics,', 1), ('child)\n', 1), ('BiMap<K,', 1), ('deserialization', 1), ('SlidingDoor}', 1), ('added...");\n\n', 1), ('ballThread.interrupt();\n', 1), ('MyError', 1), ('[0,%d)",\n', 1), ('testGetResource_notFound()', 1), ('onNextAfterComplete()', 1), ('otherOnNextPublisher()', 1), ('IgnoreElementsTckTest', 1), ('flag.get();\n', 1), ('E>>\n', 1), ('(file.isFile())', 1), ('assertFalse(bar.isAnnotationPresent(ExampleAnnotation.class));\n', 1), ('ArrayDeque<Throwable>', 1), ('Integer>(new', 1), ('BufferOpenObserver<Open>', 1), ('entries)\n', 1), ('java.util.Collections#emptyMap()},', 1), ('this.mapFactory', 1), ('suite.addTest(testsForUnmodifiableSet());\n', 1), ('exec.executeAll();\n', 1), ('CompletableMergeDelayErrorArray(CompletableSource[]', 1), ('inter-operating', 1), ('"key";\n', 1), ('Converter<T,', 1), ('ob', 1), ('super("Order', 1), ('ArbitraryInstances.get(Set.class));\n', 1), ('withObservableError2()', 1), ('numbers\n', 1), ('(behavior.getOwnerType(LocalClass.class)', 1), ('RxJavaPlugins.onError(npe);\n', 1), ('source)));\n', 1), ('threadToInterrupt.interrupt();\n', 1), ('enabled)', 1), ('Michael', 1), ('created,\n', 1), ('terminal,', 1), ('observer);\n}\n', 1), ('c.getResource(c.getSimpleName()', 1), ('randomIterator;\n\n', 1), ('assertFalse(""', 1), ('ByteArrayInputStream', 1), ('queue.offer(now,', 1), ('EventBus}.\n', 1), ('this.collectionSize', 1), ('java.io.Reader;\n\n/**\n', 1), ('g.onComplete();\n', 1), ('initialRequest)', 1), ('list.toArray());\n', 1), ('function7', 1), ('assertTrue(it.isDisposed());\n', 1), ('ObservableConcatWithMaybe<T>', 1), ('WildcardTypeImpl', 1), ('comparators[i].compare(left,', 1), ('Perform', 1), ('preserve', 1), ('TestException("Mapper");\n', 1), ('erat', 1), ('SingleDetach<T>(this));\n', 1), ('secondChoice}\n', 1), ('CompletableConcatSubscriber(s,', 1), ('(!validation.test(t))', 1), ('concatObservable()', 1), ('8082,', 1), ('parser.parse(event);\n', 1), ('-4663883003264602070L;\n\n', 1), ('subscriber}\n', 1), ('newCachedThreadPool();\n', 1), ('files}.\n', 1), ('LoggerFactory.getLogger(PromiseSupport.class);\n\n', 1), ('MultimapBuilder.hashKeys().arrayListValues().build()}.\n', 1), ('sources.length', 1), ('ObjectHelper.requireNonNull(completableSource,', 1), ('itrB', 1), ('pick', 1), ('CompletableToObservable<T>(this));\n', 1), ("JDK's", 1), ('sourceOverflow()', 1), ('LOGGER.error("Thread', 1), ('FlowableFlatMapMaybeEmptyPerf', 1), ('T2', 1), ('networks', 1), ('generateHashMultiset(E', 1), ('TestHelper.checkDisposed(PublishSubject.<Integer>create().flatMapSingle(new', 1), ('ba2', 1), ('Retry(\n', 1), ('Processor<Integer,', 1), ('identity;\n', 1), ('(this.commanderResponse.isPresent())', 1), ('delaySubscription(ObservableSource<U>', 1), ('FirstConstantIsNull();\n', 1), ('actions\n', 1), ('DeferredScalarObserver', 1), ('WithLatestInnerSubscriber(WithLatestFromSubscriber<?,', 1), ('cake\n', 1), ('.contains("java.util.Map.java.util.Map"))', 1), ('innerError(MergeInnerObserver', 1), ('values");\n', 1), ('}).toFlowable());\n', 1), ('com.iluwatar.twin;\n\nimport', 1), ('input.size)\n', 1), ('cursus.', 1), ('Serializable,', 1), ('blockingSingleEmpty()', 1), ('done:', 1), ('users.stream().map(this::convertFromEntity).collect(Collectors.toList());\n', 1), ('negatives()', 1), ('request[1],', 1), ('gap\n', 1), ('otherOnCompleteCompletable()', 1), ('inputOrder.arrange(list);\n', 1), ('{}({})', 1), ('Callable<Map<Object,', 1), ('1ms\n\n', 1), ('FlowableDistinct<T,', 1), ('watch', 1), ('findAllWizards()', 1), ('e.onSuccess(null);\n', 1), ('DeferredScalarSubscription<U>\n', 1), ('DoFinallyObserver(s,', 1), ('SubscriptionCancelThrows', 1), ('limitAndTake()', 1), ('javax.swing.JTable;\nimport', 1), ('super-source)', 1), ('containsValue', 1), ('tus', 1), ('Steps\n', 1), ('http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/main/java/util/concurrent/Executors.java?revision=1.90\n', 1), ('guarantees\n', 1), ('us.hide().concatMapCompletable(completableComplete(),', 1), ('CountDownLatch(n);\n', 1), ('a.hasNext();\n', 1), ('com.google.common.collect.ListMultimap#asMap}.\n', 1), ('healing"));\n', 1), ('optional.get();\n', 1), ('T>(key,', 1), ('SkipLastObserver<T>(s,', 1), ('"https://github.com/google/guava/wiki/NewCollectionTypesExplained#bimap">', 1), ('final.\n', 1), ('RESTRICTS_VALUES,\n', 1), ('CountSubscriber', 1), ('order(List<Entry<K,', 1), ('out;\n\n', 1), ('inventorySize={}",', 1), ('Predicates.alwaysTrue())\n', 1), ('Logger.getLogger(App.class);\n', 1), ('outgoing', 1), ('Joiner.on(",', 1), ("'wins')\n", 1), ('formatCompact4Digits(double', 1), ('SecurityException");\n', 1), ('int.class,', 1), ('com.google.common.collect.testing.testers.ListAddAtIndexTester;\nimport', 1), ('Flowable.fromCallable(new', 1), ('(Function)ToFlowable.INSTANCE;\n', 1), ('RuntimeException)', 1), ('@SuppressWarnings({"unchecked"})\n', 1), ('Maybe<"))', 1), ('(BiPredicate<T,', 1), ('retry(count,', 1), ('unwrapWorkerPeriodicTask()', 1), ('typeVariableMethods.get(methodName);\n', 1), ('orderPreservingCopy.put(checkNotNull(e.getKey()),', 1), ('collected.', 1), ('this.inventorySize', 1), ('timeoutException()', 1), ('reference}', 1), ('resumeThrows()', 1), ('(!getFeatures().contains(KNOWN_ORDER))', 1), ('checkNotNull(name);\n', 1), ('getModifiers()', 1), ('LexicographicalOrdering<T>', 1), ('context;\n\n', 1), ('outputStreamClosed;\n\n', 1), ('t2);\n\n', 1), ('injected', 1), ('TestException()).onTerminateDetach().subscribe(ts);\n\n', 1), ('objects)', 1), ('io.reactivex.plugins;\n', 1), ('MagicService', 1), ('repeatUntil()', 1), ('(ticket', 1), ('parallelism();\n', 1), ('ObservableUnsubscribeOnTest', 1), ('holders()', 1), ('testPluginExceptionWhileOnErrorThrows()', 1), ('(int)((time', 1), ('(resolve)', 1), ('.andThen(Completable.fromAction(new', 1), ('org.mockito.Mock;\nimport', 1), ('inventory.getItems();\n', 1), ('rootPane.setDefaultButton(del);\n', 1), ('observableNoPublisher()', 1), ('FlowableUsing<T,', 1), ('suppressThrows)', 1), ('Single.zip(Arrays.asList(source,', 1), ('Formatted', 1), ('auctor', 1), ('CompletableFromCallable(callable));\n', 1), ('io.reactivex.internal.schedulers.SchedulerMultiWorkerSupport.WorkerCallback;\nimport', 1), ('.assertValueCount(2)\n', 1), ('File(Files.createTempDir(),', 1), ('TemporaryFolder();\n\n', 1), ('V>>()', 1), ('equalsWith()', 1), ('/right\n', 1), ('FlowableReduceWithSingle<T,', 1), ('lazySet(REQUESTED);\n', 1), ('t));\n', 1), ('valueSupplier)', 1), ('tempDir', 1), ('overrideInitNewThreadSchedulerCrashes()', 1), ('JdkMatcher(pattern.matcher(t));\n', 1), ('lowestFrequencyChar()', 1), ('result.setException(ex);\n', 1), ('Entity\n', 1), ('channel.getHandler().handleChannelRead(channel,', 1), ('(a,', 1), ('obj.getClass())', 1), ('bottomShelf)', 1), ('forEach(Consumer<?', 1), ('Executors.newSingleThreadExecutor();\n\n', 1), ('entity.getId());\n', 1), ('ObjectCountHashMap<>(distinctElements);\n', 1), ('"io.reactivex.internal.operators.");\n//', 1), ('resourceInfo(ClassPath.class).getClass());\n', 1), ('ObjectHelper.requireNonNull(zipper.apply(values.clone()),', 1), ('nextInner))', 1), ('complete(Notification.<T>createOnError(t));\n', 1), ('getCreateWithNullKeyUnsupportedMethod(),\n', 1), ('keySelector.apply(t);\n', 1), ('Maps.unmodifiableEntryIterator(delegate.entrySet().iterator());\n', 1), ('BlockingIgnoringReceiver();\n', 1), ('Number",\n', 1), ('MaybePeekObserver(MaybeObserver<?', 1), ('Collections.singleton("a").iterator();\n', 1), ('EqualsTester', 1), ('subscriptionIndicator)', 1), ('complete(T', 1), ('testNestedTrampolineWithUnsubscribe()', 1), ('doBackward(T', 1), ('java.util.zip.ZipEntry;\nimport', 1), ('FlowableCountSingle<T>', 1), ('servers.add(server);\n', 1), ('File("no/such/file/anywhere"),', 1), ('bufferHelper("");\n', 1), ('SwitchMapMaybeSubscriber<?,', 1), ('delegate.createArray(length);\n', 1), ('behave\n', 1), ('.assertResult(31);\n', 1), ('Optional.empty(),', 1), ('a.request(n);\n', 1), ('FlowableBufferExactBoundary<T,', 1), ('getExceptionList()', 1), ('Comparators.emptiesFirst(naturalOrder());\n', 1), ('error(Callable<?', 1), ('DelayObserver(SequentialDisposable', 1), ('vendor', 1), ('MaybeDoOnEventTest', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/error.png"', 1), ('parent.s.request(e);\n', 1), ('Private', 1), ('TestSubscriber<Object>(0L);\n', 1), ('doOnError(@NonNull', 1), ('splitrA', 1), ('com.google.common.collect.testing.features.CollectionFeature.SERIALIZABLE;\nimport', 1), ('assertTrue("Too', 1), ('to(@NonNull', 1), ('Helpers.copyToSet(requirements.getPresentFeatures());\n', 1), ('expectedValuesPerKey);\n', 1), ('.suppressing(suppressForArraysAsList())\n', 1), ('"FlowableFlatMapSingle",\n', 1), ('InitializingOnDemandHolderIdiom()', 1), ('fusedConditional()', 1), ('HELPER.scheduleDirect(sr,', 1), ('TestHelper.checkDisposed(PublishSubject.<Integer>create().singleElement().doAfterSuccess(afterSuccess));\n', 1), ('FlowableRetryBiPredicate(\n', 1), ('assertThat(file).isNotNull();\n', 1), ('group);\n\n', 1), ('NonBlockingThread\n', 1), ('subscribe(CompletableObserver', 1), ('SampleTimedObserver(Observer<?', 1), ('EmptyByteSourceFactory();\n', 1), ('BlockingObservableLatest(ObservableSource<T>', 1), ('curr))', 1), ('.named("LinkedBlockingQueue")\n', 1), ('LOREM_IPSUM', 1), ('nazguls.put(NazgulName.UVATHA,', 1), ('testVisitSoldier()', 1), ('delegate.floorKey(checkValid(key));\n', 1), ('cs}', 1), ('generate\n', 1), ('!inCompletable)', 1), ('SkipTckTest', 1), ('TestHelper.checkDisposed(Observable.just(1).all(Functions.alwaysTrue()));\n', 1), ('internally,', 1), ('testNegativeMaxElements(q);\n', 1), ('tryEmitScalar(u);\n', 1), ('""\n', 1), ('10));\n\n', 1), ('out.toString("UTF-8"));\n', 1), ('observers.delete(closer);\n', 1), ('testListenerCalledOnException()', 1), ('0x1000;\n', 1), ('action.accept(function.apply(fromIterator.nextLong(),', 1), ('(Enum<?>)', 1), ('re-emits', 1), ('(!HeavyFactory.class.isInstance(heavy))', 1), ('failComputationObservableBlockingSingle()', 1), ('between.add(Thread.currentThread().getName());\n', 1), ('LOGGER.info("Char', 1), ('RxJavaPlugins.getOnSingleCreate();\n//', 1), ('OS,', 1), ('filesystem.', 1), ('Integer(generateInt());\n', 1), ('TimeoutMainObserver<T>(s,', 1), ('Flowables).\n', 1), ('vel,', 1), ('com.google.inject.Injector;\nimport', 1), ('times];\n', 1), ('onSuccess(QueryResult', 1), ('DOWN\n', 1), ('crashOnSubscribe;\n\n', 1), ('implicit', 1), ('TypeToken<Range<String>>()', 1), ('Single.just(1).doOnSuccess(new', 1), ('unsafeDefault', 1), ('subject,', 1), ('operations[random.nextInt(operations.length)];\n', 1), ('checkNotNull(incidentEdgeMap.get(edge));\n', 1), ('ReplayProcessorTimeBoundAsPublisherTckTest()', 1), ('(ClassOwnership', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/AsyncSubject.png"', 1), ('InMemoryAppender(Writer.class);\n', 1), ('SuppressAnimalSniffer', 1), ('.blockingAwait();\n', 1), ('setMap(map);\n', 1), ('ORANGE:\n', 1), ('appeared:', 1), ('startRace()', 1), ('a/../b}', 1), ('io.reactivex.internal.operators.completable.CompletableError;\nimport', 1), ('r1.run();\n', 1), ('JoinSubscription(Subscriber<?', 1), ('Inventory}', 1), ('java.util.concurrent.*;\n\n/**\n', 1), ('addService(Service', 1), ('11', 1), ('ToSingleMaybeSubscriber<T>', 1), ('throwOnGet()', 1), ('actual.hasObservers();\n', 1), ('remove(this);\n', 1), ('r.changeMood();\n', 1), ('(callError)', 1), ('getList().listIterator(getNumElements()', 1), ('java.io.IOException,', 1), ('ArbitraryInstances.get(ImmutableSortedMap.class));\n', 1), ('BlockingFlowableIterator<T>\n', 1), ('fromPublisherDispose()', 1), ('tail[indexInTail]', 1), ('this.subscription', 1), ('SingleOperator#apply(SingleObserver)', 1), ('FlowableSingleSingle<T>', 1), ('io.reactivex.subscribers.TestSubscriber;\n\n/**\n', 1), ('assertTrue(d1.isDisposed());\n\n', 1), ('subscribers[0].onNext(1);\n', 1), ('FileInputStream.getChannel().size()', 1), ('CompletableRetryTest', 1), ('java.util.Collections.singleton;\n\nimport', 1), ('copyOf(\n', 1), ('CrashingMappedIterable<Maybe<Integer>>(1,', 1), ('pipes,', 1), ('CompactLinkedHashSet.\n', 1), ('testFreshInstance()', 1), ('Boolean.parseBoolean(properties.getProperty(PURGE_ENABLED_KEY));\n', 1), ('java.nio.channels.SelectableChannel;\nimport', 1), ('Flowable.intervalRange(Long.MIN_VALUE,', 1), ('(If', 1), ('MultisetForEachEntryTester<E>', 1), ('DoubleStream.of(optional.getAsDouble())', 1), ('concat(DoubleStream...', 1), ('java.util.LinkedHashSet}', 1), ('layer.getName(),', 1), ('"Adamson");\n', 1), ('honoring', 1), ('ImmutableMapKeySet<K,', 1), ('del', 1), ('native.', 1), ('FlowableConcatMapCompletable(Flowable<T>', 1), ('.put(UnsignedLong.class,', 1), ('SkipLastTimedObserver<T>', 1), ("'throw',", 1), ('implies', 1), ('WithPublicConstant();\n', 1), ('{primary,', 1), ('ms\n', 1), ('java.util.concurrent.BrokenBarrierException;\nimport', 1), ('generateTreeSet(E', 1), ('@When("^I', 1), ('PerfAsyncConsumer(Blackhole', 1), ('andThen(CompletableSource', 1), ('synchronized.', 1), ('RxJavaPlugins#createNewThreadScheduler(ThreadFactory)}', 1), ('Maybe.ambArray(new', 1), ('MultimapFeature(Feature<?', 1), ('MaybeSource<T>>', 1), ('@Ignore("BackpressureHelper', 1), ('linefeed', 1), ('sa.produced(Long.MAX_VALUE);\n\n', 1), ('readUsingJava(input,', 1), ('instances);\n', 1), ('super.setUp();\n\n', 1), ('context,\n', 1), ('cakeInfo', 1), ('check("Flowable");\n', 1), ('(lowerBounds.length', 1), ('serviceCache.keySet())', 1), ('NoSuchElementCallable', 1), ('<br>Factory', 1), ('Flowable.just("one").doOnTerminate(new', 1), ('DisposableHelper.DISPOSED);\n', 1), ('testRequestToFlowable()', 1), ('java.util.Optional<Integer>', 1), ('INPUTS_COUNT', 1), ('other.error', 1), ('IncrementingPublisher(size));\n', 1), ('Flowable<Completable>()', 1), ('SingleResumeNext(SingleSource<?', 1), ('assertTrue(numbers.getNumbers().contains(1));\n', 1), ('implLocal.get(numStripesLocal).hashCode();\n', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.subscribeOn.png"', 1), ('(curr.releaseSlot())', 1), ('this.s.dispose();\n', 1), ('checkNotNull(handler);\n', 1), ('free,', 1), ('NextObserver<T>();\n', 1), ('grab', 1), ('versions.', 1), ('Pow2', 1), ('["/",', 1), ('Flowable.fromArray(numbers)\n', 1), ('Type.class,\n', 1), ('PURGE_THREAD.getAndSet(null);\n', 1), ('888);\n\n', 1), ('RxJavaPlugins.onSingleScheduler(s));\n\n', 1), ('backpressureDocLine;\n\n', 1), ('(int)elements).replay().autoConnect()\n', 1), ('down.\n', 1), ('innerNext(InnerQueuedSubscriber<T>', 1), ('StringReader.class,\n', 1), ('assertGoodFeatureEnum(MapFeature.class);\n', 1), ('TEST_CAR_PRICE);\n', 1), ('ScanObserver<T>', 1), ('threads1.size());\n', 1), ('context,', 1), ('p.getModel().get(),', 1), ('accept(Observer<Object>', 1), ('v0());\n\n', 1), ('scenarios\n', 1), ('SleepingRunnable(action,', 1), ('trySet(AtomicReference<Disposable>', 1), ('tested\n//\n//', 1), ('plain\n', 1), ('TestHelper.checkDisposed(Single.just(1).flatMapCompletable(new', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.error.png"', 1), ('convenient', 1), ('practice', 1), ('DoubleBuffer', 1), ('DIFFERENT', 1), ('(nullableReference', 1), ('generateJoiner()', 1), ('maxConcurrencyOneDelayErrorFirst()', 1), ('producerIndex.get()', 1), ('(Exception)e;\n', 1), ('"aaaa"));\n', 1), ('b.size()', 1), ('here.', 1), ('Queues.\n', 1), ('"15C");\n', 1), ('consumer,', 1), ('assertFalse(fo.isCancelled());\n\n', 1), ('this.enumClass.equals(that.enumClass);\n', 1), ('requests.add(CANCELLED);\n', 1), ('rather\n', 1), ('parentBuilder.getSubjectGenerator().getInnerGenerator();\n\n', 1), ('Journal.json', 1), ('clazz.substring(idx', 1), ('DEFAULT_TICKETS_COLLECTION', 1), ('Observable.fromArray());\n', 1), ('UnsubscribeOnSingleObserver<T>(observer,', 1), ('(disposing)', 1), ('IllegalStateException("Fail");\n', 1), ('blockingSubscribeConsumerConsumer()', 1), ('multiset.add(queries[i]);\n', 1), ('crashDispose,', 1), ('assertEqualInstance(EmptyEnum.class,', 1), ('CompletableFromCallable', 1), ('produced(r);\n', 1), ('").append(type.name()).append(\'\\n\');\n', 1), ('Comparator<Optional<String>>', 1), ('IoHolder', 1), ('cancelAndCrashWhileRunning()', 1), ('T>)', 1), ('generateImmutableMultiset(E', 1), ('TEST_PART_TYPE);\n', 1), ('Multiset<String>', 1), ('cgcb.Optional<String>', 1), ('errorAll(Observer<?>', 1), ('freshness,', 1), ('.assertResult("123");\n', 1), ('v2;\n', 1), ('LOGGER.error("File', 1), ('(collector.characteristics().contains(Collector.Characteristics.IDENTITY_FINISH))', 1), ('assertEquals(2L,', 1), ('createConsumerThrowsResourceOnError()', 1), ('SingleOperator.apply():\n', 1), ('Number",', 1), ('"Melody",', 1), ('splitr,\n', 1), ('SerializedProcessor<T>', 1), ('ts.awaitTerminalEvent(1,', 1), ('repeat\n', 1), ('100L);\n\n', 1), ('i);\n\n', 1), ('ArrayDeque<UnicastSubject<T>>();\n', 1), ('when(func.call()).thenReturn("test_value");\n\n', 1), ('checkSchedulerBadMethod(Completable.class.getSimpleName());\n', 1), ('Amit', 1), ('AmbArrayTckTest', 1), ('operations:\n', 1), ('failComputationFlowableBlockingSubscribe()', 1), ('UTF_16LE', 1), ('Reflection.getPackageName(Map.Entry.class));\n', 1), ('NATIVE_TYPE_VARIABLE_ONLY', 1), ('ObservableError(Callable<?', 1), ('iterator(ItemType', 1), ('ss.onSuccess(1);\n', 1), ('.mergeWith(Single.just(elements))\n', 1), ('"elementum', 1), ('newly-created', 1), ('Maybe&lt;Integer>', 1), ('checkUtilityClass(Class<?>', 1), ('"January"),\n', 1), ('inputStreamClosed', 1), ('((Future<?>)o).cancel(async);\n', 1), ('period}', 1), ('calculateLowestFrequencyChar();\n', 1), ('ObservableElementAtTest', 1), ('combine(Builder<E>', 1), ('divided.\n', 1), ('SampleElements.mapEntries(keys,', 1), ('checkBadSourceObservable(Function<Observable<T>,', 1), ('("".equals(result))', 1), ('observableForEachWhile()', 1), ('pipelines', 1), ('parallel.\n', 1), ('pretend', 1), ('Ordering.natural());\n', 1), ('assertEquals(Arrays.asList("A.1",', 1), ('RxThreadFactoryTest', 1), ('typesafety', 1), ('innerComplete(InnerQueuedObserver<T>', 1), ('ArbitraryInstances.get(String.class));\n', 1), ('"file:/usr/test/dep.jar")\n', 1), ('defaultGenerate(Class<T>', 1), ('FileChannel', 1), ('WrappedCallable<T>(callable);\n', 1), ('iterableCancelRace()', 1), ('list.indexOf(o);\n', 1), ('(indicating', 1), ('SimplePlainQueue<E>', 1), ('example)\n', 1), ('generateTreeMultiset(E', 1), ('CombineLatestArrayDelayErrorTckTest', 1), ('Thread.sleep(2000);\n', 1), ('toFlowableEnum()', 1), ('logger.log(Level.INFO,', 1), ('doSomethingWith(foo);\n', 1), ('r.nextBytes(ba1);\n', 1), ('(inner.isDisposed())', 1), ('meantime.', 1), ('this.expectedValuesPerKey', 1), ('MatchResult', 1), ('lock.writeLock()));\n', 1), ('MaybeFilter<T>(this,', 1), ('createAsMap()', 1), ('this.topping', 1), ('f2);\n', 1), ('occasionally', 1), ('toJavaUtil(@NullableDecl', 1), ('dataSource.getConnection().createStatement().executeQuery("SELECT', 1), ('pp0.singleElement(),', 1), ('zipWith(MaybeSource<?', 1), ('ArrayList<UnicastSubject<T>>();\n', 1), ('entries.addAll(other.entries);\n', 1), ('onError(Consumer<?', 1), ('DoFinallySubscriber(Subscriber<?', 1), ('framework,', 1), ('public.', 1), ('Jens', 1), ('@length:");\n', 1), ('nextCancelRaceConditional()', 1), ('"lazy".\n', 1), ('UnmodifiableListIteratorTest', 1), ('(Thread.currentThread().isInterrupted())', 1), ('IgnoreObservable<T>(t));\n', 1), ('written.', 1), ('onErrorNoHandler()', 1), ('verify(party).act(member,', 1), ('CakeInfo(Long', 1), ("'self-type').", 1), ('TearDown()', 1), ('allLayers.stream().filter(layer', 1), ('"lotteryTickets";\n', 1), ('userDto.getLastName(),', 1), ('TestMapGenerator<AnEnum,', 1), ('raf,', 1), ('ObservableCombineLatest<T,', 1), ('manifest.getMainAttributes().put(Attributes.Name.CLASS_PATH,', 1), ('GeneratorDisposable(Observer<?', 1), ('RIGHT_CLOSE)', 1), ('streamB.isParallel())', 1), ('Maps::unmodifiableEntry);\n', 1), ('ObservableSource<TRightEnd>', 1), ('items.add(item);\n', 1), ('TypeToken<ImmutableMultiset<EmptyEnum>>()', 1), ('testExecptions()', 1), ('subject.single("")\n', 1), ('list.get(index).getCause()', 1), ("'b',", 1), ('Lists.newArrayList(E[])}', 1), ('sits', 1), ('decoupledLoader', 1), ('clears', 1), ('SpscLinkedArrayQueue<InnerQueuedSubscriber<R>>', 1), ('rightIterable)', 1), ('").append(e.getValue()).append("]"));\n', 1), ('Flowable.<String>never().ignoreElements();\n', 1), ('RxJavaPlugins.onError(e1);\n', 1), ('MoreFiles.asByteSink(file,', 1), ('Maybe<String>', 1), ('Collections.<Integer>emptyList();\n', 1), ('actual.get()', 1), ('ImmutableList.copyOf(list);\n', 1), ('checkNotNull(optionals.iterator());\n\n', 1), ('ObservableWindow(ObservableSource<T>', 1), ('field.getAndSet(TERMINATED);\n', 1), ('exceptionHandler)', 1), ('rangeFlatMap(Blackhole', 1), ('OpenJdk6MapTests', 1), ('assertNotEquals(new', 1), ('denoting', 1), ('Ascii.toLowerCase(fieldName).replaceAll("_",', 1), ('Functions.HashSetCallable.class.getMethod("values");\n', 1), ('ObservableTimer', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.flatMapCompletable.png"', 1), ('backpressure).</dd>\n', 1), ('mo.onError(new', 1), ('withFeatures()', 1), ('Maybe<Upstream>', 1), ('warning.\n', 1), ('SingleElementObserver<T>(t));\n', 1), ('JAVA_IO_TMPDIR("java.io.tmpdir"),\n\n', 1), ('3)\n//', 1), ('EqualCoordinator<T>(observer,', 1), ('3:04', 1), ('subList(int', 1), ('Futures#addCallback}.\n', 1), ('DisposableMaybeObserver}', 1), ('@Transactional\n', 1), ('this.output', 1), ('(Desktop.isDesktopSupported())', 1), ('refresh', 1), ('ConcatInnerObserver(CompletableConcatSubscriber', 1), ('doneButNotEmpty()', 1), ('assertFalse(ArbitraryInstances.get(PeekingIterator.class).hasNext());\n', 1), ('"Enums.stringConverter("', 1), ('iterable).stream()\n', 1), ('cakeLayerInfos);\n', 1), ('"foo";\n', 1), ('testSwitchShouldTriggerUnsubscribe()', 1), ('VALUE', 1), ('mostRecent(Observable<T>', 1), ('lineCount;\n', 1), ('"Files.fileTreeTraverser()";\n', 1), ('Observable.fromArray(innerArray);\n\n', 1), ('Convert', 1), ('ObservableFlatMap<T,', 1), ('java.util.concurrent.RunnableFuture;\nimport', 1), ('(int)elements).skipWhile(Functions.alwaysFalse())\n', 1), ('.suppressing(suppressForArrayBlockingQueue())\n', 1), ('(line.startsWith("public', 1), ('name="bitEquals"></a>This', 1), ('runTearDown()', 1), ('manifest(""))).isEmpty();\n', 1), ('compl', 1), ('ObservableInterval(long', 1), ('MaybeSource.', 1), ('singleSingle()', 1), ('"b");\n\n', 1), ('(O', 1), ('.append(total)\n', 1), ('EventBus\n', 1), ('FileInputStream(path))', 1), ('timeConstruct(long', 1), ('simpleObjects;\n', 1), ('ThreadSafeDoubleCheckLocking()', 1), ('this.timed', 1), ('wherein', 1), ('ChangeKeyOpsCommand(SelectionKey', 1), ('testResourceInfo_of()', 1), ('ComparatorsTest', 1), ('createSplit(F', 1), ('ObservableErrorHandlingTests', 1), ('list2.addAll(Arrays.asList(1,', 1), ('info.name));\n', 1), ('(EnumMap<?,', 1), ('dao)', 1), ('.runOn(Schedulers.computation(),', 1), ('SingleTimer(delay,', 1), ('resource.get();\n', 1), ('swallowIOException)', 1), ('Arrays.equals(this.comparators,', 1), ('qs.requestFusion(QueueSubscription.ANY);\n\n', 1), ('703409937383992161L;\n\n', 1), ('byte[10]),', 1), ('MaybeConcatArrayDelayError<T>(sources));\n', 1), ('#zip', 1), ('com.google.common.util.concurrent.ListeningExecutorService;\nimport', 1), ('(Publisher<?>', 1), ('Arrays.asList(Z,', 1), ('Maybe.<Integer>empty()).test();\n\n', 1), ('threaded,', 1), ('joiner', 1), ('assertValueAndTypeEquals(expected,', 1), ('Single.defer(new', 1), ('Func1<Integer,', 1), ('"src/main/java/io/reactivex/"', 1), ('ConsumeAction', 1), ('IOException("Socket', 1), ('this.channelToPendingWrites.put(key.channel(),', 1), ('Publisher<Object>()', 1), ('RuntimeException",\n', 1), ('MySubscriber<Integer>(0);\n', 1), ('futureResult4.get();\n\n', 1), ('suite.addTest(testsForConcurrentSkipListSetWithComparator());\n\n', 1), ('errorAcceptThrows()', 1), ('ObservablePublishSelector(final', 1), ('testReadLines()', 1), ('CyclicBarrier(2);\n', 1), ('Single.just(7),\n', 1), ('caseDesc,', 1), ('set(AtomicReference<Subscription>', 1), ('Spliterator<E>', 1), ('TypeToken<HashSet<String>>()', 1), ('java.util.Optional.ofNullable(orNull());\n', 1), ('Modifier.isFinal(getModifiers())}.\n', 1), ('BlockingFlowableNext(Publisher<?', 1), ('newTargetIterator()', 1), ('testGet_functors()', 1), ('MergePublisherTckTest', 1), ('deregister\n', 1), ('expectedId', 1), ('meta-annotate', 1), ('<em>Note:</em>', 1), ('incidentEdges)', 1), ('concatEager(Publisher<?', 1), ('assertTrue(appender.log.get(i).getFormattedMessage().contains("items.size()="', 1), ('(QueueSubscription<Object>)', 1), ('matches(char', 1), ('assertFalse(d2.isDisposed());\n\n', 1), ('FlowableConverter<T,', 1), ('suppressForArrayList()', 1), ('Single.just(31);\n\n', 1), ('features,\n', 1), ('Splitr(Spliterator<T>', 1), ('testScan_classPathCycle()', 1), ('expectedValues.addAll(valuesToPut);\n\n', 1), ('MaybePeekObserver<T>(observer,', 1), ('emitters', 1), ('weather\n', 1), ('rangeObservable(Blackhole', 1), ('DoFinallyObserver', 1), ('redoStack.pollLast();\n', 1), ('TypeVariable.class,', 1), ('getSize();\n\n', 1), ('assertFalse("Subscribers?",', 1), ('service.checkTicketForPrize(id,', 1), ('registerView(View', 1), ('AtomicReference<V>(initialValue);\n', 1), ('TestHelper.checkDisposed(PublishSubject.<Integer>create().singleOrError().doAfterSuccess(afterSuccess));\n', 1), ('"SPELLBOOK")\npublic', 1), ('closure,', 1), ('zip7()', 1), ('MaybeDoAfterSuccess(MaybeSource<T>', 1), ('f.elementAt(0).toFlowable();\n', 1), ('ObservableUsing(Callable<?', 1), ('executor.runNext();\n', 1), ('taskDone;\n', 1), ('Enumerate', 1), ('this(source,', 1), ('Equivalence<T>', 1), ('singleSourceAsCs()', 1), ('InventoryTest', 1), ('m.delaySubscription(Flowable.just(1));\n', 1), ('n.toString();\n', 1), ('"unable', 1), ('AsyncCallable<V>', 1), ('testImmutableBiMap()', 1), ('Callable<Void>,', 1), ('ParallelFilterTryTest', 1), ('Function#apply}', 1), ('source.test(0L);\n\n', 1), ('(!in.markSupported())', 1), ('Collections.singleton(\n', 1), ('io.reactivex.internal.disposables.SequentialDisposable;\n\n@RunWith(MockitoJUnitRunner.class)\npublic', 1), ('multipleErrorRace()', 1), ('ZipIterableTckTest', 1), ('io.reactivex.internal.schedulers;\n\n/**\n', 1), ('FlowableSingle(Flowable<T>', 1), ('errorObservable()', 1), ('testGet_array()', 1), ('SocketChannel}.\n', 1), ('IteratorBasedAbstractMap<K,', 1), ('"/flowable/"', 1), ('Observable.<Long>empty()\n', 1), ('lotteryNumbers);\n', 1), ('33;', 1), ('this(25L);\n', 1), ('r2)', 1), ('freshness.get())', 1), ('generateArrayListMultimap(key,', 1), ('4",', 1), ('singleCompletable()', 1), ('Map<WeaponType,', 1), ('propertyName,', 1), ('distinctThreads()', 1), ('workQueue)', 1), ('Optional.of(list.get(0));\n', 1), ('blockingFirstTimeout()', 1), ('c.subscribe(s);\n', 1), ('MaybeObserveOn(MaybeSource<T>', 1), ('System");\n', 1), ('IllegalStateException("Overslept?"', 1), ('com.google.common.util.concurrent.Futures.immediateFuture;\nimport', 1), ('s.readInt();\n', 1), ('THREAD_FACTORY', 1), ('supplied)\n', 1), ('Set)', 1), ('this.outEdgeToNode', 1), ('r3.run();\n\n', 1), ('observer.update((S)', 1), ('(Handler<E>)', 1), ('java.util.concurrent.ExecutorService\n', 1), ('Observer()', 1), ('".1";\n', 1), ('isEmpty();\n\n', 1), ('FlowableOnSubscribe<Long>()', 1), ('Desktop.getDesktop().open(applicationFile);\n\n', 1), ('member.joinedParty(party);\n', 1), ('.append("\\n");\n', 1), ('RxJavaPlugins.initComputationScheduler(null);\n', 1), ('central', 1), ('CrashingMappedIterable(int', 1), ('.switchMapMaybe(Functions.justFunction(Maybe.never()))\n', 1), ('zip9()', 1), ('assertNotSame(Finalizer.class,', 1), ('observeOn}', 1), ('newFile("file-b");\n', 1), ('(numbers.size()', 1), ('docToTicket(doc);\n', 1), ('(multimapView', 1), ('ObservableScanSeed(ObservableSource<T>', 1), ('Partially.GwtIncompatible}', 1), ('SerializationStreamWriter', 1), ('(definitionStart', 1), ('playing', 1), ('Single.never().doOnSubscribe(new', 1), ('testGetFinalizerUrl()', 1), ('SingleInternalHelper()', 1), ('joined.size());\n', 1), ('twice,', 1), ('FlowableConcatMapEager(Flowable<T>', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/ofClass.png"', 1), ('AmbMaybeObserver<T>', 1), ('}).switchIfEmpty(Observable.<Long>never()).subscribe();\n', 1), ('sorted-collection', 1), ('CompletablePeekTest', 1), ('Field[]', 1), ('map.put("one",', 1), ('completionValue;\n\n', 1), ('actualDetails', 1), ('3).sorted(new', 1), ('this.lazySet(n);\n', 1), ('TypeToken<ArrayList<String>>()', 1), ('secondChoice);\n\n', 1), ('(RuntimeException)error;\n', 1), ('types).\n', 1), ('flowSingle;\n\n', 1), ('serialDisposable.get());\n\n', 1), ('ProjectileStrategy());\n', 1), ('InfiniteRange()', 1), ('filtered,', 1), ('dateList\n', 1), ('first.subscribe(new', 1), ('failComputationFlowableToFuture()', 1), ('Enumeration<K>', 1), ('processing\n', 1), ('onErrorAfterCrash()', 1), ('IncrementingIterable(int', 1), ('(BiFunction)INSTANCE;\n', 1), ('apply(PublishSubject<Integer>', 1), ('CollectionFeature.ALLOWS_NULL_VALUES)\n', 1), ('Please', 1), ('asByteSink(file,', 1), ('com.iluwatar.observer.utils.InMemoryAppender;\nimport', 1), ('DisposableSubscriber<T>', 1), ('offset,', 1), ('canceled.\n', 1), ('periodicDirectTaskRaceIO()', 1), ('assertTrue(bs2.isCancelled());\n\n', 1), ('pathByteSinkFactory()', 1), ('List}.\n', 1), ('CompletableDoOnTest', 1), ('Maybe.concat(Flowable.fromCallable(new', 1), ('AppClient();\n', 1), ('file2)', 1), ('enabled.\n', 1), ('java.util.AbstractSequentialList;\nimport', 1), ('"result', 1), ('TakeUntilObserver(Observer<?', 1), ('onErrorResumeNext()', 1), ('UnicastSubject.create();\n', 1), ('REMOVE:\n', 1), ('Flowable.<Long>empty();\n', 1), ('baseIndex);\n\n', 1), ('sifting.', 1), ('java.util.Optional<Double>', 1), ('actions).\n', 1), ('Future<V>', 1), ('WASHING.', 1), ('Dimension(500,', 1), ('EnumBiMap}', 1), ('(path', 1), ('LoggerFactory.getLogger(ReaderAndWriterTest.class);\n\n', 1), ('((evictedGroup', 1), ('CompletableToFlowable<T>', 1), ('WithLatestInnerSubscriber(this,', 1), ('spin,', 1), ('SingleFromUnsafeSource(SingleSource<T>', 1), ('supported).\n', 1), ('assertNotNull(evenItems);\n', 1), ('checkNotNull(valueComparator));\n', 1), ('ArbitraryInstances.get(Double.class));\n', 1), ('timeGetAt(long', 1), ('loadAllCount.get());\n', 1), ('subscriber))', 1), ('completableCreate()', 1), ('Queues.newArrayDeque();\n\n', 1), ('System.out.println("Unable', 1), ('ListIterator#add(Object)};', 1), ('ObserverTest<O', 1), ('Multiplies', 1), ('g.getName()', 1), ('io.reactivex.internal.operators.")\n', 1), ('FlowableCollect(Flowable<T>', 1), ('unnecessarily.', 1), ('.named("LinkedBlockingDeque")\n', 1), ('FilePermission("",', 1), ('inner.requestOne();\n', 1), ('PriorityQueue<>(MinimalCollection.of(elements));\n', 1), ('adminIsLoggedIn', 1), ('backpressure-safe', 1), ('filterErrorConditionalNoError()', 1), ('catastrophic', 1), ('Integer.parseInt(properties.getProperty(PURGE_PERIOD_SECONDS_KEY));\n', 1), ('present:', 1), ('runOn()}', 1), ('cancelDelayed()', 1), ('fs.onSubscribe(new', 1), ('"Completable");\n\n', 1), ('to.assertFailure(TimeoutException.class);\n', 1), ('producing', 1), ('ticket2);\n', 1), ('temp2', 1), ('currentReaderCount;\n\n', 1), ('Flowable.just(1).subscribe(tc);\n\n', 1), ('runListIteratorTest(UNMODIFIABLE);\n', 1), ('potions.get(type);\n', 1), ('title', 1), ('IntStream.empty();\n', 1), ('LOGGER.info("Modifying', 1), ('WrappedRunnable', 1), ('suppressing(Arrays.asList(methods));\n', 1), ('ExecutionContext', 1), ('Flowable.zip(Arrays.asList(\n', 1), ('AbstractObservableWithUpstream<TLeft,', 1), ('SingleToFlowable(v);\n', 1), ('MaybeDoFinally(MaybeSource<T>', 1), ('LineReader}.\n', 1), ('SwitchMapMaybeSubscriber(Subscriber<?', 1), ('spellDao)', 1), ('ObjectHelper.requireNonNull(collectionSupplier,', 1), ('ClassValue<Boolean>', 1), ('assertEquals(0xCAFEBABE,', 1), ('run.set(2,', 1), ('Completable.ambArray(ps.ignoreElements(),', 1), ('CompletableFromSingle<T>(single));\n', 1), ('limiting', 1), ('this.factory.apply(i).getTimeMs());\n', 1), ('ObservableFromUnsafeSource<T>', 1), ('assertEquals("java",', 1), ('accessibleObject.isAnnotationPresent(annotationClass);\n', 1), ('19:25', 1), ('BlockingFirstSubscriber<Integer>());\n', 1), ('subscriber.onNext(1);\n', 1), ('super(length);\n', 1), ('(QueueDisposable<T>)d;\n', 1), ('boolean.class,\n', 1), ('#fuseToFlowable()}\n', 1), ('(retry)', 1), ('observer.assertNoErrors();\n\n', 1), ('ParallelFromPublisher<Integer>(Flowable.just(2),', 1), ('verify(s).cancel();\n', 1), ('accessible.\n', 1), ('(!this.getStudents().contains(studentToBeInserted))', 1), ('"SPELLBOOK_ID")\n', 1), ('singleSubscribe0()', 1), ('change\n', 1), ('onDispose);\n', 1), ('qd.requestFusion(mode);\n', 1), ('assertEquals("Timed[time=5,', 1), ('executor.submit(periodicWrapper);\n', 1), ('awaitUninterruptibly()', 1), ('flatMapMaybe}', 1), ('objIn.readObject();\n', 1), ('WashingMachineState', 1), ('.,', 1), ('fromRunnableDisposed()', 1), ('onChannelAcceptable(key);\n', 1), ('foundLayers.add(found.get());\n', 1), ('System#nanoTime()}.', 1), ('parallelism)', 1), ('Class.\n', 1), ('SingleFromTest', 1), ('FlowableTakePublisher(Publisher<T>', 1), ('Runtime.getRuntime().availableProcessors(),', 1), ('RxJavaPlugins.setOnSingleSubscribe(single2observer);\n', 1), ('java.util.concurrent.atomic.AtomicLong;\nimport', 1), ('(!isCancelled())', 1), ('Completable.error(ex).blockingGet());\n', 1), ('subject.subscribe(observer2);\n', 1), ('pf)', 1), ('FutureTask<Integer>(Functions.justCallable(1));\n', 1), ('Suppress', 1), ('MaybeError<T>(exception));\n', 1), ('HELPER.scheduleDirect(new', 1), ('SomeClass.foo();\n', 1), ('ScalarXMapZHelperTest', 1), ('CountDownLatch(2);\n', 1), ('NullByteSink.INSTANCE)\n', 1), ('ObservableConcatMapTest', 1), ('iterate(long', 1), ('1L),', 1), ('BootStrapping', 1), ('assertEquals("EmptyAction",', 1), ('CompletableFromSingle<T>', 1), ('onError");\n', 1), ('Maybe.just(1).delay(10,', 1), ('stop");\n', 1), ('expectedToString,\n', 1), ('rangeAsync;\n\n', 1), ('(ScheduledThreadPoolExecutor', 1), ('sequential()', 1), ('SingleMiscTest', 1), ('Collections.checkedSortedSet(innerSet,', 1), ('p.d.dispose();\n', 1), ('Set<Currency>', 1), ('(reader', 1), ('bounded;\n\n', 1), ('consumerSuccessThrows()', 1), ('Constructor<T>', 1), ('Function,', 1), ('map.put("hungry",', 1), ('event.toString();\n', 1), ('CompletableCache', 1), ('ps.onError(ex0);\n', 1), ('SpscLinkedArrayQueue<T>(prefetch);\n\n', 1), ('actualCounts', 1), ('setImplementation(BlockingQueue.class,', 1), ('slowPath(Subscriber<?', 1), ('BlockingBaseSubscriber()', 1), ('ThreadPoolDispatcher(int', 1), ('assertEquals(TEST_PART_MODEL,', 1), ('Guice.createInjector(new', 1), ('exec)', 1), ('settingUnderlyingWhenUnsubscribedCausesImmediateUnsubscriptionConcurrently()\n', 1), ('(cachedEntrySet', 1), ('justSource()', 1), ('org.h2.jdbcx.JdbcDataSource;\n\n/**\n', 1), ('rxThreadsAfter.add(t);\n', 1), ('LastSubscriber(SingleObserver<?', 1), ('(reader.read(buffer)', 1), ('BackpressureErrorSubscriber<T>(s));\n', 1), ('pp0.onNext(pp2);\n', 1), ('(DisposableHelper.setOnce(subscription,', 1), ('ac.onComplete(null,', 1), ('io.reactivex.internal.util.AtomicThrowable;\n\npublic', 1), ('MaybeDefer<T>(maybeSupplier));\n', 1), ('cake.setLayers(foundLayers);\n', 1), ('SequentialDisposable.\n', 1), ('(entries.hasNext())', 1), ('rangeSync(Blackhole', 1), ('email,', 1), ('X);\n\n', 1), ('detectJvmBehavior();\n\n', 1), ('doOnDisposeDoubleOnSubscribe()', 1), ('executor.getAndSet(SHUTDOWN);\n', 1), ('FlowableSwitchMapMaybe(Flowable<T>', 1), ('checkDoubleOnSubscribeCompletableToFlowable(Function<Completable,', 1), ('"read"));\n', 1), ('ParallelTransformer<Upstream,', 1), ('trimToSize}\n', 1), ('actualValues', 1), ('TreeMap}', 1), ('scheduleActual(final', 1), ('SuccessorsFunction<File>', 1), ('est.', 1), ('startProcess(task,', 1), ('NULL_KEY', 1), ('FlatMapCompletableMainObserver(Observer<?', 1), ('testGetSimpleName()', 1), ('versa.\n', 1), ('keys)));\n', 1), ('functionThrows()', 1), ('getById(int', 1), ('IQueryService', 1), ('TypeToken<ImmutableSortedMap<String,', 1), ('"Boo"));\n\n', 1), ('nice', 1), ('.assertNoErrors();\n\n', 1), ('readFirstLine(File', 1), ('upstream.request(replenishMain);\n', 1), ('Maybe.concatArrayDelayError(source,', 1), ('Lists.newArrayList(features);\n', 1), ('single.blockingGet();\n', 1), ('MaybeFlatMapNotification(MaybeSource<T>', 1), ('currConsumerNode.lvNext())', 1), ('ArrayList<Long>();\n//\n//', 1), ('PotatoPeelingTask(6));\n', 1), ('null-hostile', 1), ('ObservableDistinctTest', 1), ('tryPutIntoPool(PURGE_ENABLED,', 1), ('Optional.orElseGet},', 1), ('readFile(file);\n\n', 1), ('ObservableAny(ObservableSource<T>', 1), ('sources.size();\n', 1), ('ExecutorService)', 1), ('ObservableConcatMapMaybe(Observable<T>', 1), ('DelayedRunnable(Runnable', 1), ('checkedEntry(from);\n', 1), ('OS_ARCH("os.arch"),\n\n', 1), ('in.reset();\n', 1), ('io.reactivex.internal.fuseable.HasUpstreamMaybeSource;\n\n/**\n', 1), ('ElementType.FIELD})\n', 1), ('active.queue();\n\n', 1), ('isTransient()', 1), ('Observable.just((Object)(item', 1), ('InMemoryPrintWriter', 1), ('this.wizardDao', 1), ('this.veryEnd', 1), ('NonThrowingPredicate<Object>', 1), ('DelayErrorInnerObserver(Observer<?', 1), ('onNextCrashes()', 1), ('multimap.createCollection(key));\n', 1), ('//ignore\n', 1), ('MoreExecutors#listeningDecorator(ScheduledExecutorService)}.\n', 1), ('finder', 1), ('.suppressing(suppressForCopyOnWriteArraySet())\n', 1), ('TestHelper.checkDisposed(Observable.just(Notification.createOnComplete()).dematerialize());\n', 1), ('singletonList', 1), ('java.security.acl.NotOwnerException;\nimport', 1), ('-3688291656102519502L;\n\n', 1), ('IntStream.of(optional.getAsInt())', 1), ('observer.onSuccess(1);\n\n', 1), ('FluentIterable\n', 1), ('ImmutableSet<FileWriteMode>', 1), ('Object>>();\n\n', 1), ('CompletableConcatArray(sources));\n', 1), ('SequentialExecutor(service);\n', 1), ('MaybeDefer<T>', 1), ('readlimit)', 1), ('winningNumbers.getNumbers()));\n', 1), ('repetition', 1), ('performOperationsUsing(dbDao);\n', 1), ('getRemainingElementsCount()', 1), ('Striped.SmallLazyStriped<>(stripes,', 1), ('three}");\n', 1), ('oneStreamOfNthatMergesIn1(final', 1), ('testerClass);\n', 1), ('from(Collection<?', 1), ('both.add(bt.next());\n', 1), ('disposerThrowsNonEager()', 1), ('delaySubscriptionCompletable()', 1), ('RxJavaPlugins.onAssembly(merged);\n', 1), ('current.ready();\n', 1), ('Flowable.merge(\n', 1), ('Executors.newFixedThreadPool(nThreads);\n', 1), ('layer.', 1), ('.withFeatures(featuresList)\n', 1), ('Cache', 1), ('assertEqualInstance(OneConstantEnum.class,', 1), ('assertEquals(UnsignedLong.ZERO,', 1), ('protocol:<br>\n', 1), ('OBSERVER_ONCOMPLETED_FAIL(final', 1), ('ss.onSuccess(null);\n', 1), ('ByToString.INSTANCE)\n', 1), ('getImplementation(Class<T>', 1), ('(LexicographicalOrdering<?>)', 1), ('ForwardingImmutableSet(Set<E>', 1), ('UTF-16BE:', 1), ('fn;\n\n', 1), ('c.onNext(null);\n\n', 1), ("b.append(',').append('", 1), ('errorAndDisposerThrowsEager()', 1), ('mergeArray(MaybeSource<?', 1), ('TimeOutObserver(CompositeDisposable', 1), ('taskLatch.countDown();\n\n', 1), ('java.util.function.Predicate', 1), ('rescheduled', 1), ('-4767392946044436228L;\n\n', 1), ('java.util.Map}', 1), ('assertSame(countDownRunnable,', 1), ('using(Callable<R>', 1), ('generateConcurrentMap(K', 1), ('this.visitor.visitSoldier(new', 1), ('decrementAndGet();\n', 1), ('com.google.common.collect.Queues;\nimport', 1), ('SlidingDoor();', 1), ('WithGenericConstant<String>', 1), ('TypeCapture<int[]>()', 1), ('particular\n', 1), ('io.reactivex.*;\n\n\npublic', 1), ('RxJavaPlugins.setOnCompletableSubscribeError(errorHandler);\n//\n//', 1), ('AsyncCallback\n', 1), ('ln++;\n', 1), ('1000000', 1), ('elementY', 1), ('DbCustomerDao(DataSource', 1), ('LoggerFactory.getLogger(MuteTest.class);\n\n', 1), ('onChannelWritable(SelectionKey', 1), ('RandomNumberGenerator(MIN_NUMBER,', 1), ('AbstractIterator<T>()', 1), ('CompletableErrorSupplier', 1), ('_.,()]*Flowable");\n', 1), ('g)\n', 1), ('SingleNever', 1), ('InnerObserver(Observer<?', 1), ('(this.getStudents().contains(studentToBeUpdated))', 1), ('iteration\n', 1), ('closed");\n', 1), ('Map<Type,', 1), ('Predicate}', 1), ('asFunction()', 1), ('java.nio.file.CopyOption...)}.\n', 1), ('remove(Disposable', 1), ('ObservableUnsubscribeOn(ObservableSource<T>', 1), ('<br>bind', 1), ('developer\n', 1), ('ts.awaitTerminalEvent(2,', 1), ('StringBuilder((17', 1), ('reduceWithObjectsObservable()', 1), ('maybe2maybe', 1), ('super(Hobbits::new);\n', 1), ('ballThread.suspendMe();\n\n', 1), ('java.util.concurrent.ThreadFactory;\n\n/**\n', 1), ('semantically', 1), ('1000),', 1), ('it.dispose();\n\n', 1), ('fullpath("base/relative.jar"),\n', 1), ('Puts', 1), ('onNextNormal()', 1), ('Observable.<String>', 1), ('SpscArrayQueue<Integer>', 1), ('Assert.fail();\n', 1), ('tests\n', 1), ('.put(ByteArrayInputStream.class,', 1), ('InfiniteRangeIterator();\n', 1), ('FlowableReduceWithSingle(Publisher<T>', 1), ('CompletableObserveOnTest', 1), ('deleted', 1), ('in.");\n', 1), ('input)\n', 1), ('deltas.length;', 1), ('testSyntaxException()', 1), ('FluentFuture.from(Futures.immediate*Future)', 1), ('JAVA_EXT_DIRS)', 1), ('#set(AtomicReference,', 1), ('b.intValue();\n', 1), ('assertNull(RxJavaPlugins.onAssembly((ConnectableObservable)null));\n\n', 1), ('elementOrder.compare(left.next(),', 1), ('RxJavaPluginsTest', 1), ('this.disposable', 1), ('reserialized', 1), ('SUPPORTS_REMOVE,', 1), ('.assertFailure(CancellationException.class);\n', 1), ('TreeMultimap(\n', 1), ('called.*/\n', 1), ('FlowableScalarXMap()', 1), ('5"));\n\n', 1), ('ps.test(false);\n\n', 1), ('AmbTckTest', 1), ('7898995095634264146L;\n\n', 1), ('com.iluwatar.promise;\nimport', 1), ('pp1.single(0)),', 1), ('thread-safe.</p>\n', 1), ('fs.get().intValue());\n', 1), ('Extract', 1), ('Mumbai");\n\n', 1), ('limitZero()', 1), ('AssertionError(ex.getMessage());\n', 1), ('publisher.subscribe(s);\n', 1), ('onSuccessThrows()', 1), ('e.onComplete();\n\n', 1), ('add(),', 1), ('checker).read();\n', 1), ('clear(deque);\n', 1), ('TakeUntilOtherSubscriber\n', 1), ('Stream.class)', 1), ('TEST_PART_MODEL);\n', 1), ('testErrorIncludesLastValueAsCause()', 1), ('charFrequency.entrySet().iterator();\n', 1), ('dl.dispose();\n', 1), ('significant', 1), ('io.reactivex.annotations.SchedulerSupport#COMPUTATION', 1), ('#andThen(ObservableSource)\n', 1), ('suppressForArrayDeque()', 1), ('fakePool.execute(\n', 1), ('checkArgument(type', 1), ('SubscribeTask(MaybeObserver<?', 1), ('file.getAbsolutePath();\n', 1), ('set(ON_COMPLETE);\n', 1), ('File(base.relativize(entry.toURI()).getPath()).getPath();\n', 1), ('InMemory', 1), ('assertSame(m.toString(),', 1), ('opt', 1), ('Jones\n', 1), ('k5,', 1), ('"POODLE")).isPresent();\n\n', 1), ('total;\n', 1), ('createdDateValues[i]', 1), ('this.multiset', 1), ('"ComputationSchedulerTest";\n', 1), ('csub.add(w4);\n', 1), ('Timed)', 1), ('studentRepository', 1), ('fileThreadLocal.get());\n', 1), ('V>>\n', 1), ('OptionalInt.empty())\n', 1), ('priority;\n', 1), ('createTempFile},\n', 1), ('list.get(0)', 1), ('testDrainUninterruptibly_doesNotThrow()', 1), ('random.nextInt();\n', 1), ('batched', 1), ('CountDownLatch(4);\n\n', 1), ('.skipCollectionTests()', 1), ('Charsets\n', 1), ('details3,', 1), ('makeActions(Collection<DwarvenMineWorker>', 1), ('(getAndSet(null)', 1), ('taskDeltas', 1), ('FutureSubscriber<Integer>();\n', 1), ('(!asyncResult.isCompleted())', 1), ('ScanTckTest', 1), ('SingleAmb<T>', 1), ('withPublisherError()', 1), ('SchedulerSupport', 1), ('"custom";\n\n', 1), ('classpath)', 1), ('(no-op)', 1), ('2).filter(new', 1), ('alphabetically\n', 1), ('PREDICATE', 1), ("'container'", 1), ('D>(resourceSupplier,', 1), ('V>(evictedGroups);\n', 1), ('keyType;\n\n', 1), ('s.onSuccess(ObjectHelper.equals(values[0],', 1), ('TestHelper.checkUtilityClass(FlowableEventStream.class);\n', 1), ('ArbitraryInstances.get(Random.class).nextInt());\n', 1), ('java.nio.file.FileSystemException;\nimport', 1), ('EqualObserver(EqualCoordinator<T>', 1), ('thousands', 1), ('Math.min(chars.length,', 1), ('interrupted:', 1), ('<h4>Frameworks</h4>\n', 1), ('characterFrequency()', 1), ('result2);\n', 1), ('.last()\n', 1), ('RxJavaPlugins.setOnParallelAssembly(parallelFlowable2parallelFlowable);\n', 1), ('RegularImmutableList_CustomFieldSerializer', 1), ('CompletableObserver\n', 1), ('userConverter.convertFromDto(userConverter.convertFromEntity(u1));\n', 1), ('reduceMaybeBadSource()', 1), ('FlowableSwitchMapCompletable<T>', 1), ('booleanSupplierPredicateReverse()', 1), ('com.google.common.util.concurrent.FuturesGetChecked.GetCheckedTypeValidator;\nimport', 1), ('"+32423455",', 1), ('ObservableThrottleWithTimeoutTests', 1), ('SkipLastTimedSubscriber<T>', 1), ('void.class\n', 1), ('onError));\n', 1), ('singleSupplier;\n\n', 1), ('argValue', 1), ('right.next());\n', 1), ('IntBuffer', 1), ('Arrays.toString(comparators)', 1), ('memory.\n', 1), ('version.\n', 1), ('completable2completable', 1), ('subscriber.onSubscribe(this);\n', 1), ('builder.append(buffer);\n', 1), ('ambWith(MaybeSource<?', 1), ('TestHelper.checkDisposed(PublishProcessor.create().singleElement().takeUntil(Flowable.never()));\n', 1), ('variables.\n', 1), ('testIsEmpty_iterable()', 1), ('-1296597691183856449L;\n', 1), ('acquired;\n', 1), ('assertNull(RxJavaPlugins.onObservableReturn(null));\n//\n//', 1), ('"LotteryNumbers{"', 1), ('ReduceTckTest', 1), ('minFrequency)', 1), ('subscriber1', 1), ('FloatBuffer.allocate(generateInt());\n', 1), ('putAll(Iterable<?', 1), ('SorterFunction<T>', 1), ('maybeSourceAsCs()', 1), ('crashDispose;\n', 1), ('SampleElements<Entry<K,', 1), ('HashCode', 1), ('deterministic', 1), ('fromNullable(javaUtilOptional.orElse(null));\n', 1), ('Mock', 1), ('SUPPORTS_ADD_WITH_INDEX(CollectionFeature.SUPPORTS_ADD),\n', 1), ('RegularImmutableSet<Object>', 1), ('present,\n', 1), ('CompletableFromObservable<T>', 1), ('FlowableFlatMapMaybePerf', 1), ('<br>return', 1), ('replaceResource(Disposable', 1), ('SerializedSubject<T>', 1), ('smaller;\n\n', 1), ('ObservableToFlowabeTestSync', 1), ('mapInvalidSource()', 1), ('TypeToken<List<String>>()', 1), ('restrictive.', 1), ('TestSuite(suite.getName());\n', 1), ('in;\n\n', 1), ('"capacityHint");\n\n', 1), ('accepted\n', 1), ('builder.append(",");\n', 1), ('"Bop",', 1), ('250));\n', 1), ('PoisonPotion();\n', 1), ('contentActions.stream().map(ContentAction::getContent).filter(Content.COMPANY::equals).count());\n\n', 1), ('findAllSpells()', 1), ('Message}', 1), ('ConcurrentSkipListSet<>(arbitraryNullFriendlyComparator());\n', 1), ('ObservableLastSingle<T>', 1), ('Exceptions.throwIfFatal(ex1);\n', 1), ('association', 1), ('JavaVersion.CURRENT.typeName(from);\n', 1), ('jsonElement;\n', 1), ('com.iluwatar.dependency.injection.utils;\n\nimport', 1), ('spuriously</a>', 1), ('UTF-16LE:', 1), ('ObservableIgnoreElementsCompletable<T>', 1), ('blockingLastEmpty()', 1), ('@ManyToMany(cascade', 1), ('isDisposed();\n}\n', 1), ('ComputationScheduler.NONE.createWorkers(max', 1), ('o.toSortedList().blockingGet());\n', 1), ('unfiltered.put("zero",', 1), ('assertFalse(first.isPresent());\n', 1), ('numbers.hashCode());\n', 1), ('toFuture()', 1), ('URL("file:///C:\\\\\\u20320', 1), ('BackpressureHelper.multiplyCap(1L', 1), ('EXCEPTION!");\n', 1), ('ClosableTest', 1), ('testAggregateAsIntSumSourceThrows()', 1), ('Object#hashCode()}.', 1), ('System.setProperty("mongo-host",', 1), ('Flowable<HorrorMovie>', 1), ('boundaryObserver.getAndSet((WindowBoundaryInnerObserver)BOUNDARY_DISPOSED);\n', 1), ('jarFile,', 1), ('jenkins', 1), ('delegateCollection()', 1), ('ImmutableBiMap#toImmutableBiMap}', 1), ('toppingBean.save(topping);\n', 1), ('ObservableEmitter\n', 1), ('FlowableFlatMapCompletableAsyncPerf', 1), ('nazguls.put(NazgulName.ADUNAPHEL,', 1), ('TestingHelper', 1), ('TestHelper.checkDisposed(Maybe.create(new', 1), ('io.reactivex.schedulers.*;\n\n/**\n', 1), ('makeSuiteForTesterClass(Class<?', 1), ('Maybe.fromCallable(null);\n', 1), ('instanceField.get(supplier);\n', 1), ('D>\n', 1), ('createCustomer(ResultSet', 1), ('el', 1), ('Disposables.fromSubscription(s).dispose();\n\n', 1), ('TEMP_DIR_ATTEMPTS\n', 1), ('overrideIoScheduler()', 1), ('List<WeatherObserver>', 1), ('m.schedulerKind', 1), ('situations', 1), ('ArbitraryInstances.get(ByteArrayInputStream.class).read());\n', 1), ('testInterrupt_beforeRunRestoresInterruption()', 1), ('assertNull(RxJavaPlugins.onSubscribe(Observable.never(),', 1), ('delegate().submit(task,', 1), ('comparer));\n', 1), ('observerCompletable()', 1), ('ObservableConcatMap<T,', 1), ('TestHelper.checkDisposed(Flowable.never().onBackpressureLatest());\n', 1), ('TakeWhileObserver<T>', 1), ('Supplier<T>', 1), ('1000];\n', 1), ('exceptionType).hashCode();\n', 1), ('BufferedWriter', 1), ('"FlowableElementAtSingle",\n', 1), ('with:\n', 1), ('error.addThrowable(ex);\n\n', 1), ('a[i].cancel();\n', 1), ('assertNotNull(ArbitraryInstances.get(Ticker.class));\n', 1), ('Maybe.just(1).mergeWith(Maybe.just(2))\n', 1), ('phantom', 1), ('update(Customer', 1), ('TakeWhileSubscriber(Subscriber<?', 1), ('JTable', 1), ('RainbowFish(map.get("name"),', 1), ('flowSingle(Blackhole', 1), ('Invocation', 1), ('classfile(ResourcesTest.class))\n', 1), ('complete(1);\n', 1), ('FlowableMap<T,', 1), ('com.google.common.base.Optional.of(OneConstantEnum.CONSTANT1),\n', 1), ('this.exceptionHandler', 1), ('source1.subscribe(first);\n', 1), ('LinkedBlockingQueue<>(5);\n', 1), ('Supplier', 1), ('assertSame(instance2,', 1), ('.parallel(2,', 1), ('parts:', 1), ('com.iluwatar.observer.WeatherType;\nimport', 1), ('toObservable()));\n', 1), ('layerInfo.calories));\n', 1), ('f.getParentFile();\n\n', 1), ('source1,\n', 1), ('SourceObserver(Observer<?', 1), ('uselessLocales.add(locale);\n', 1), ('Optional.of(student);\n', 1), ('possibleFoo.ifPresent(foo', 1), ('DEFAULT_HOST', 1), ('observableStart()', 1), ('only)', 1), ('Arrays.asList(getCreateWithNullUnsupportedMethod());\n\n', 1), ('obsMaybe.subscribe(new', 1), ('collector.combiner().apply(accum,', 1), ('asList(\n', 1), ('Flowable<Object>()', 1), ('inDateValue\n', 1), ('CountingOutputStream(OutputStream', 1), ('SingleTimeout(SingleSource<T>', 1), ('OtherSingleObserver(SingleObserver<?', 1), ('statement.execute(CustomerSchemaSql.CREATE_SCHEMA_SQL);\n', 1), ('assertSame(sos,', 1), ('subscriber2', 1), ('com.google.common.base.CharMatcher.whitespace;\nimport', 1), ('Ordering.arbitrary()));\n', 1), ('testSimpleBackpressure()', 1), ('(members)\n', 1), ('source2.subscribe(second);\n', 1), ('SchedulerPoolFactory()', 1), ('Handler}', 1), ('FlowableSwitchMapCompletable(Flowable<T>', 1), ('CommandTest', 1), ('#merge(Publisher)\n', 1), ('this.mask;\n', 1), ('CompositeException(list));\n', 1), ('shouldCallOnNextAndOnCompleted()', 1), ('filename', 1), ('delegate.toArray();\n', 1), ('com.iluwatar.hexagonal.banking.WireTransfers;\nimport', 1), ('(onOverflow', 1), ('list;\n\n', 1), ('satisfied.\n', 1), ('TakeUntilMainSubscriber<T>(child);\n', 1), ('Collections.checkedSet(innerSet,', 1), ('subscribe(Flowable<Integer>', 1), ('Optional.of(createCustomer(resultSet));\n', 1), ('this.value.equals(that.value);\n', 1), ('source.groupBy(new', 1), ('enumConstantCache.put(enumClass,', 1), ('Reader#read(CharBuffer)', 1), ('store)', 1), ('.put(Object.class,', 1), ('assertEquals("onSuccess', 1), ('eager,', 1), ('onScheduleComputation()', 1), ('ObservableFlatMapCompletable<T>(source,', 1), ('randomIterator', 1), ('Arrays.asList(options));\n', 1), ('groupBy', 1), ('resultCalc.applyAsInt(i,', 1), ('generateSampleCustomers()', 1), ('onNext(List<T>', 1), ('checkObservableSchedulerDoc()', 1), ('*/\n@Target(value', 1), ('random.nextInt(len)', 1), ('U>>(maxConcurrency);\n', 1), ('therefore,', 1), ('bs.poll();\n\n', 1), ('testOptionalLong()', 1), ('ReplaySelectorTckTest', 1), ('dispatcher)', 1), ('max]\n', 1), ('googleOptional', 1), ('mode.\n', 1), ('onNext(GroupedObservable<Integer,', 1), ('executor.execute(errorTask);\n', 1), ('cancel();\n\n', 1), ('q1.poll();\n', 1), ('ConnectableFlowable>', 1), ('readerLock', 1), ('.onErrorReturn(new', 1), ('ScalarXMapObservable(T', 1), ('(QueueDisposable<Object>)', 1), ('FlowableSkipLast<T>', 1), ('Schedulers.trampoline()));\n', 1), ('3366976432059579510L;\n', 1), ('testFactoryFailureResultsInErrorEmissionFlowable()', 1), ('print()', 1), ('MaybeConcatArrayDelayError(MaybeSource<?', 1), ('SpellStrategy(),\n', 1), ('scheduler2scheduler', 1), ('testFindAll()', 1), ('java.util.HashSet},', 1), ('purgeEnable;\n\n', 1), ('OptionalLong.empty())\n', 1), ('onSuccessError()', 1), ('checkDoubleOnSubscribeMaybeToCompletable(Function<Maybe<T>,', 1), ('UndirectedNetworkConnections<>(ImmutableBiMap.copyOf(incidentEdges));\n', 1), ('little-endian', 1), ('LazyFluentIterable()', 1), ('insertionOrder);\n}\n', 1), ('crashOnNext,\n', 1), ('or(Supplier<?', 1), ('10).firstElement().toFlowable()\n', 1), ('exceptions.size());\n', 1), ('Consumer<GroupedUnicast<K,V>>', 1), ('DoubleBuffer.allocate(0))\n', 1), ('apply(SingleObserver)}', 1), ('TODO(chrisn):', 1), ('toSortedList(comparator,', 1), ('JavaVersion.CURRENT.usedInGenericType(typeArguments);\n', 1), ('testNegativeRequestThrowsIllegalArgumentException()', 1), ('dest.fulfill(func.apply(src.get()));\n', 1), ('assertEquals(Optional.of("2"),', 1), ('TypeToken<OptionalLong>()', 1), ('reconstruct', 1), ('processes\n', 1), ('Exception("barf!");\n', 1), ('equal(@NullableDecl', 1), ('§1.3', 1), ('Math.min(len,', 1), ('fs);\n', 1), ('op)', 1), ('unsafeCreate(Completable)!");\n', 1), ('java.util.zip.DataFormatException;\nimport', 1), ('java.lang.Error}', 1), ('SingleSource.");\n', 1), ('AtomicReference<PublishDisposable<T>[]>', 1), ('domainapp.integtests.specglue;\n\nimport', 1), ('filterErrorNoError()', 1), ('TestSubscriber<Integer>(observer);\n', 1), ('error)).test().assertComplete();\n', 1), ('FlowableJust(final', 1), ('retrievedMsg;\n', 1), ('JAVA_VM_SPECIFICATION_VENDOR("java.vm.specification.vendor"),\n\n', 1), ('FlowableForEachTest', 1), ('System.setSecurityManager(oldSecurityManager);\n', 1), (':Thread.currentThread().getStackTrace())', 1), ('dest.fulfill(null);\n', 1), ('w.subscribe(ts1);\n\n', 1), ('onDrop));\n', 1), ('Deregister', 1), ("future's", 1), ('dr;\n\n', 1), ('features,', 1), ('c.subscribe(inner);\n', 1), ('timePasses(Weekday', 1), ('<em>may</em>', 1), ('runDispose()', 1), ('(without', 1), ('do:', 1), ('SingleDisposable<T>\n', 1), ('File(rxdir).listFiles();\n', 1), ('TestSubscriber<Disposable>', 1), ('requestCancelRace()', 1), ('HashCode}', 1), ('replacement)', 1), ('int[numStripes];\n', 1), ('ticketId);\n', 1), ('java.lang.reflect.Type;\n\n/**\n', 1), ('(QueueSubscription<U>)', 1), ('ObservableFlatMapMaybePerf', 1), ('FlowableStartWithTests', 1), ('WithLatestFromSubscriber<?,', 1), ('(file.isDirectory())', 1), ('ParameterizedType))', 1), ('Comparator<Iterable<String>>', 1), ('Bounds', 1), ('child2', 1), ('Output', 1), ('writer.flush();\n\n', 1), ('.named("ArrayDeque")\n', 1), ('(idx3', 1), ('bound.");\n', 1), ('singleObserver;\n\n', 1), ('testCopyToOutputStream()', 1), ("Letter('M'),", 1), ('JAVA8.newArrayType(componentType);\n', 1), ('getOwnerType().equals(that.getOwnerType())', 1), ('ImmutableSortedSetFauxverideShim}', 1), ('identically.', 1), ('tail.', 1), ('takeAsync()', 1), ('TestSubscriber<Integer>(2L);\n\n', 1), ('monitoring,\n', 1), ('MonitorBenchmark', 1), ('collectionSize)', 1), ('TypeToken<SortedMap<?,', 1), ('ArbitraryInstances.get(Comparable.class);\n', 1), ("SequentialExecutor's", 1), ('Single.merge(Single.just(Single.just(1)))\n', 1), ('BigInteger.class,\n', 1), ('assertFalse(o.isDisposed());\n\n', 1), ('q.put(new', 1), ('Object}.\n', 1), ('(exceptionHandler', 1), ('race(r1,', 1), ('ParallelFlowable<U>', 1), ('lookup', 1), ('Object.\n', 1), ('});\n\n//', 1), ('invokeGeneratorMethod(Method', 1), ('filterFailWithError()', 1), ('overrideInitComputationScheduler()', 1), ('PlayerDetails("elsa@foo.bar",', 1), ('eager,\n', 1), ('ObservableScalarXMap()', 1), ('processFile(fail,', 1), ('(!member.equals(actor))', 1), (".}'", 1), ('dust!"));\n', 1), ('#ALLOWS_NULL_VALUE_QUERIES\n', 1), ('(int)elements).timeInterval()\n', 1), ('java.util.concurrent.CyclicBarrier;\nimport', 1), ('TestingExecutorsTest', 1), ('ListeningScheduledExecutorService\n', 1), ('rmo.onError(new', 1), ('backingMap', 1), ('E.g.', 1), ('assertEquals(Direction.UP,', 1), ('delayErrorWithMaxConcurrencyError()', 1), ('WashingMachine}\n', 1), ('args.add(argValue);\n', 1), ('AssertionError(clazz', 1), ('.test();\n', 1), ('timed()', 1), ('completableObserver;\n', 1), ('requestMaxEnum()', 1), ('b);\n\n', 1), ('to.valueCount();\n', 1), ('ScalarSubscription(subscriber,', 1), ('MaybeError(Throwable', 1), ('InvocationTargetException', 1), ('SafeSubscriberTest', 1), ('cancellation/dispose</strong>.\n', 1), ('#isPublic}', 1), ('characterToFrequency;\n', 1), ('aggressively', 1), ('.materialize().subscribe(observer);\n', 1), ('trust', 1), ('ConcurrentHashMap(Map<?', 1), ('this.dao', 1), ('SchedulerPoolFactory.start();\n', 1), ('asByteSource(from).copyTo(to);\n', 1), ('serviceName)', 1), ('io.reactivex.internal.operators.observable.ObservableTimeoutTimed.TimeoutSupport;\nimport', 1), ('LOGGER.info(joiner.toString());\n', 1), ('errorIsDisposed()', 1), ('mistakes', 1), ('@Ignore("THe', 1), ('InternalError.class)\n', 1), ('AmbInnerObserver<T>(this,', 1), ('equivalently', 1), ('scanner.scan(notJar,', 1), ('disposeInDrainLoop()', 1), ('CreateTckTest', 1), ('stopIndex;\n', 1), ('fruit.add(f);\n', 1), ('dir.length', 1), ('#execute', 1), ('ArbitraryInstances.get(ImmutableMultiset.class));\n', 1), ('CompletableAmb', 1), ('Expression\n', 1), ('WeakScalarSubscription<T>', 1), ('recursion,', 1), ('messages.add(data.getMessage());\n', 1), ('LOGGER.info("waiting");\n', 1), ('Print\n', 1), ('artificialDelayOf(long', 1), ('doOnSubscribe(final', 1), ('around.', 1), ('fusedFlatMapExecutionHidden()', 1), ('@Nullable', 1), ('generateCharset()', 1), ('instances.size());\n', 1), ('}).test(true);\n\n', 1), ('fusedFilterBecomesEmpty()', 1), ('SimpleFluentIterable}', 1), ('RxJavaPlugins.setOnObservableSubscribeError(errorHandler);\n//\n//', 1), ('any.', 1), ('io.reactivex.internal.operators.observable;\n\n\nimport', 1), ('ownerType}.\n', 1), ('value",', 1), ('-1);\n', 1), ('protocol,', 1), ('decoupledLoader.loadFinalizer();\n\n', 1), ('(LotteryNumbers)', 1), ('java.util.concurrent.ConcurrentHashMap;\n\n/**\n', 1), ('RuntimeException}.\n', 1), ('put(entry);\n', 1), ('Schedulers.newThread();', 1), ('@OneToMany(mappedBy', 1), ('decodingStream.close();\n', 1), ('dispose3()', 1), ('By\n', 1), ('rawType.hashCode();\n', 1), ('ByteArrayOutputStream.class,', 1), ('countAction', 1), ('ThreadLocalRandom.current().nextLong(5000))));\n', 1), ('fulfillmentAction.run();\n', 1), ('HashMultiset.create();\n', 1), ('DelayMaybeObserver<T>(actual);\n', 1), ('ONE(1),\n', 1), ('-7969063454040569579L;\n', 1), ('bench.length', 1), ('testOnNextAfterOnCompleted()', 1), ('comparator.compare(min,', 1), ('SingleSubjects\n', 1), ('joined.openStream();\n', 1), ('testFreshCurrency()', 1), ('normalNonEager()', 1), ('com.google.common.collect.testing.IteratorFeature.MODIFIABLE;\nimport', 1), ('File(fullName).getName();\n', 1), ('SingleObserver<Boolean>', 1), ('getFile()', 1), ('BaseDaoTest<E', 1), ('java.nio.file.Files.readAllBytes(file);\n', 1), ('<li>of', 1), ('Flushable.",', 1), ('(s.contains("junit.runners."))', 1), ('firstSet', 1), ('function}.\n', 1), ('mockedVisitor);\n\n}\n', 1), ('tearDown', 1), ('io.reactivex.ObservableSource;\n\n/**\n', 1), ('ground!"\n', 1), ('BlockingObservableLatest<T>', 1), ('(\\\\d+)', 1), ('disposer));\n', 1), ('et', 1), ('remaining%n",', 1), ('ListenableFuture},\n', 1), ('.flatMapIterable(new', 1), ('sequenceEqual(source1,', 1), ('instantiating.\n', 1), ('ArrayListMultimap)\n', 1), ('takeSome()', 1), ('StringReader(string);\n', 1), ('onError}.', 1), ('size}.', 1), ('qualifying', 1), ('DisposableObserver<V>', 1), ('andThenMaybeError()', 1), ('implLocal', 1), ('US-ASCII:', 1), ('Observable.just("one").doOnComplete(new', 1), ('Queuing.pdf', 1), ('task.setRest(f1);\n', 1), ('backingMap.containsKey(key);\n', 1), ('IntBinaryOperator', 1), ('findPattern("BehaviorSubject<.*>\\\\s+bp");\n', 1), ('(Weekday', 1), ('handler,\n', 1), ('videoResource', 1), ('setOnceAndRequest()', 1), ('rightIterable.iterator();\n', 1), ('io.reactivex.functions.BiFunction;\n\n/**\n', 1), ('writer.write("\\n");\n', 1), ('DoOnEachConditionalSubscriber<T>(\n', 1), ('layerInfo)', 1), ('JAVA8', 1), ('<h4>{@link', 1), ('onError}).\n', 1), ('source2)\n', 1), ('Completable.mergeDelayError(Arrays.asList(Completable.complete()))\n', 1), ('type.cast(field.get(null));\n', 1), ('startOffset,', 1), ('remembers', 1), ('noSubsequentSubscriptionDelayError()', 1), ('BufferBoundaryObserver(BufferExactBoundaryObserver<T,', 1), ('TimeUnit.SECONDS.toNanos(1)', 1), ('io.reactivex.internal.observers.DeferredScalarDisposable;\n\npublic', 1), ('Publisher<?>>()', 1), ('following\n', 1), ('+cal.get(Calendar.YEAR));\n', 1), ('java.nio.file.Files#newBufferedReader(java.nio.file.Path,', 1), ('Source:\n', 1), ('setFunds(String', 1), ('defaultIfEmpty}', 1), ("'%s'", 1), ('this.onDisposeCall', 1), ('NotificationLite.acceptFull(o,', 1), ('testWriterNotNull()', 1), ('File(App.class.getClassLoader().getResource("sample-ui/login.html").getPath());\n\n', 1), ('page\n', 1), ('assertSame(cos,', 1), ('checkNotNull(file2);\n', 1), ('applied\n', 1), ('java.util.concurrent.Executor)}.\n', 1), ('assertTrue(list.contains(2));\n', 1), ('UnsignedBytes.LexicographicalComparatorHolder.UnsafeComparator.INSTANCE;\n', 1), ('holder.getHeavy();\n', 1), ('Single>', 1), ('include:\n', 1), ('CompletableConcatIterable(sources));\n', 1), ('reasons).\n', 1), ('Observable.just("one").doOnNext(new', 1), ('onComplete));\n', 1), ('always)', 1), ('testInterpret(NumberExpression', 1), ('ObservableTimestampTest', 1), ('ImmutableSortedMap))', 1), ('filterFailWithRetryConditional()', 1), ('checkNotNull(collector);\n', 1), ('List<String>[]', 1), ('DisposeTask(AtomicBoolean', 1), ('isPrivate()', 1), ('CompletableOperator.apply():\n', 1), ('onCompleteteNoSubscribeOnErrorCrash()', 1), ('ContentAction(Content.PRODUCTS));\n', 1), ('pools.\n', 1), ('tryOnErrorSerialized()', 1), ('Charset.forName("UTF-16");\n\n', 1), ('(exceptions)', 1), ('Schedulers.start();\n\n', 1), ('Observer<GroupedObservable<Integer,', 1), ('testSubscriberAsTo()', 1), ('timeout0(final', 1), ('Single.ambArray(Single.error(new', 1), ('func;\n\n', 1), ('ObservableIgnoreElements<T>(source));\n', 1), ('SimpleForwardingListenableFuture<V>\n', 1), ('VideoResource(fieldJsonMapper,', 1), ('rawType.getTypeParameters();\n', 1), ('<p>We', 1), ('!DEFAULTS.containsKey(type),', 1), ('isCancelled.get();\n', 1), ('(HtmlAnchor', 1), ('name);\n\n', 1), ('(int)elements).scan(new', 1), ('w4', 1), ('q.forEachWhile(this);\n', 1), ('ArrayListMultimap(int', 1), ('AsyncSubscription(Subscriber<?', 1), ('o.hashCode();\n', 1), ('MissingBackpressureException(String', 1), ('LoggerFactory.getLogger(WriterTest.class);\n\n', 1), ('ObservableTimerTest', 1), ('testAsMapGetImplementsSet()', 1), ('Observable.just("three",', 1), ('Flowable.combineLatestDelayError(Arrays.asList(\n', 1), ('methods.add(getContainsEntryWithIncomparableValueMethod());\n', 1), ('cake.getLayers())', 1), ('(FreshInvocationHandler)', 1), ('RxJavaPlugins.onNewThreadScheduler(NEW_THREAD);\n', 1), ('fromCallable(@NonNull', 1), ('syncFusedUnboundedIn()', 1), ('Callable<List<Object>>,', 1), ('(batchSize', 1), ('java.util.Collections#emptySet}\n', 1), ('obsSingle(Blackhole', 1), ('FlowableTransformer<Upstream,', 1), ('1000));\n', 1), ('executing...");\n', 1), ('ObjectHelper.requireNonNull(completionValueSupplier,', 1), ('-2848918821531562637L;\n\n', 1), ('LastObserver<T>(observer,', 1), ('Function8', 1), ('(tried', 1), ('(missing', 1), ('B2BService(timer);\n', 1), ('"/"', 1), ('.named("ArrayBlockingQueue")\n', 1), ('java.util.HashMap},\n', 1), ('(ClassNotFoundException', 1), ('ExecutorSchedulerDelayedRunnableTest', 1), ('.map(TaskTest::get)\n', 1), ('getAddSupportedNullPresentMethod(),\n', 1), ('delaySubscriptionTimeCustomScheduler()', 1), ('halberd"));\n', 1), ('timed.time());\n', 1), ('testArrayList()', 1), ('BackpressureHelper.producedCancel(this,', 1), ('publishCompleted(innerObserver,', 1), ('List<ByteSource>', 1), ('this.remoteAddress', 1), ('slidingDoor', 1), ('testConcurrentMap()', 1), (':\n', 1), ('KeySetView\n\n', 1), ('featureAsObject;\n', 1), ('exhausted', 1), ('(VirtualMachineError)', 1), ('containsValue(null)},', 1), ('end()', 1), ('Splitr(Spliterator.OfLong', 1), ('socket.getInputStream());\n', 1), ('"FlowableReduceMaybe",\n', 1), ('s.onSubscribe(bs);\n\n', 1), ('typeVariableImpl', 1), ('assertTrue("Deferred', 1), ('generateLinkedHashMultimap(key,', 1), ('all",', 1), ('FreshValueGenerator().generateFresh(type));\n', 1), ('ObservableTransformer<Upstream,', 1), ('ObservableTimeoutTimed<T>', 1), ('complete(sp.first);\n', 1), ('Java8HolderTest', 1), ('SingleDefer<T>(singleSupplier));\n', 1), ('bench.timeUnsafe(100000);\n', 1), ('onCallback;\n\n', 1), ('userDto)', 1), ('unblock()', 1), ('"Enums.stringConverter(com.google.common.base.EnumsTest$TestEnum.class)",\n', 1), ('(to.errorCount()', 1), ('suppressForCopyOnWriteArraySet()', 1), ('CompletableFromRunnable', 1), ('OperatorMergePerf', 1), ('ArbitraryInstances.get(Iterator.class));\n', 1), ('MissingBackpressureException()));\n', 1), ("Splitter.on('/').omitEmptyStrings().split(pathname);\n", 1), ('testGetClassPathFromManifest_jarInCurrentDirectory()', 1), ('ImmutableSortedSet<E>', 1), ('ObservableDebounce(ObservableSource<T>', 1), ('"composer', 1), ('TestException()).subscribe(Functions.emptyConsumer(),', 1), ('Flowable.<String>', 1), ('StandardSystemProperty(String', 1), ('value</em>', 1), ('Modifier.isStatic(field.getModifiers())\n', 1), ('mergeNSyncStreamsOf1(final', 1), ('TimeoutTckTest', 1), ('ConcurrentLinkedQueue<GroupedUnicast<K,', 1), ("MaybeSource's", 1), ('-5636543848937116287L;\n', 1), ('String.class);\n\n', 1), ('never()).cancel();\n\n', 1), ('SortedMap\n', 1), ('peek()', 1), ('parent.innerNext(t);\n', 1), ('MaybeToFlowable<T>(this));\n', 1), ('8.x', 1), ('InsecureRecursiveDeleteException', 1), ('!m.signature.contains("SingleSource")\n', 1), ('featuresList', 1), ('validate(projection.andThen(validation::test)::apply,', 1), ('.onClose(streamB::close);\n', 1), ('queryFuture.transform(QueryResult::getRows,', 1), ('Completable.fromRunnable(null);\n', 1), ('DisposableCompletableObserver()', 1), ('com.iluwatar.semaphore;\n\nimport', 1), ('testLastCountLessItems()', 1), ('(int)elements).defaultIfEmpty(0)\n', 1), ('DisposableLambdaObserverTest', 1), ('assertNotNull(FinalizableReferenceQueue.getStartFinalizer(finalizerCopy));\n', 1), ('ArbitraryInstances.get(ImmutableSet.class));\n', 1), ('seem', 1), ('LinkedQueueNode(E', 1), ('cd.assertError(CompositeException.class);\n', 1), ('ConnectableObservable}\n', 1), ('beneath', 1), ('second.queue;\n\n', 1), ('cpu', 1), ('PackageSanityTests()', 1), ('(AccessControlException', 1), ('Arrays.asList(header));\n\n', 1), ('copyToSet(multimap().get(k));\n\n', 1), ('(x,', 1), ('fileName;\n', 1), ('reference;\n\n', 1), ('io.reactivex.internal.util.Pow2;\n\n/**\n', 1), ('holderField.get(this.holder);\n', 1), ('LOGGER.info(specificFieldsDetails);\n\n', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/isEmpty.png"', 1), ('RUNTIME', 1), ('handling;', 1), ('RACE_LONG_LOOPS', 1), ('KingJoffreyTest', 1), ('NO_REQUEST)', 1), ('std-Out\n', 1), ('(mongoClient', 1), ('#fromNullable}', 1), ("s.indexOf('>',", 1), ('FreshValueGenerator}.\n', 1), ('assertEquals("x",', 1), ('lvProducerNode())', 1), ('.put("\\\\r\\\\n', 1), ('(g.getName().startsWith(baseClassName)', 1), ('longEqualUnsafe(int', 1), ('default:', 1), ('CakeBakingException(String.format("Topping', 1), ('listIterator}', 1), ('LinkedHashMultimap.create();\n', 1), ('java.io.Serializable', 1), ('catchingAsync(\n', 1), ('(features', 1), ('hint', 1), ('onComplete();\n}\n', 1), ('endOfWashing()', 1), ('up;\n', 1), ('properties.get(stat);\n', 1), ('(!parentBuilder.getFeatures().contains(NoRecurse.SUBMAP))', 1), ('composeMessage(String', 1), ('com.google.common.io.Resources;\nimport', 1), ('alias', 1), ('pre-JDK8', 1), ('assertTrue(newByteSource(0,', 1), ('onErrorFailedException', 1), ('SettableFuture")\n@GwtCompatible(emulated', 1), ('"6710884",', 1), ('ObservableFlatMapSingle<T,', 1), ('(multicasts)', 1), ('blockingQueues()', 1), ('fromEntity;\n', 1), ('comparerCrash()', 1), ('AbstractHolderTest', 1), ('LinkedQueueNode<T>(e);\n', 1), ('(unless', 1), ('ObjectHelper.requireNonNull(valueSelector.apply(t),', 1), ('FluentFuture<RowKey>', 1), ('<G>', 1), ('"hello\\nworld\\r")\n', 1), ('addTearDown(TearDown', 1), ('name.jar");\n', 1), ('SchedulerPoolFactory', 1), ('FlowableAnySingle<T>', 1), ('USER_HOME("user.home"),\n\n', 1), ('"1223-121212",', 1), ('ObservableEmpty', 1), ('Pune");\n', 1), ('concatMap}', 1), ('self()', 1), ('failureHandlingEnum()', 1), ('Arrays.asList(elements.clone());\n', 1), ('Observable.unsafeCreate(Observable.just(1));\n', 1), ('configuration\n', 1), ('testForEachUnknownOrder()', 1), ('LordBaelish(kingsHand));\n', 1), ('calculateLineCount()', 1), ('RxJavaPlugins.setSingleSchedulerHandler(replaceWithImmediate);\n\n', 1), ('io.reactivex.flowables;\n', 1), ('patternStr)', 1), ('DummyCountDownLatch', 1), ('assertTrue(numbers.getNumbers().contains(4));\n', 1), ('expected</i>,', 1), ('stackCopy;\n', 1), ('AtomicReference<Runnable>\n', 1), ('resumeSingleInCaseOfError)', 1), ('55556', 1), ('LEMON:\n', 1), ('SerializedForm");\n', 1), ('pickInstance(currencies,', 1), ('.put(ImmutableClassToInstanceMap.class,', 1), ('header)', 1), ('NTFS\n', 1), ('"all",', 1), ('testers.\n', 1), ('SAME', 1), ('delegate().execute(command);\n', 1), ('assertNull(RxJavaPlugins.onAssembly((Completable)null));\n\n', 1), ('Completable.merge(pp1.map(new', 1), ('CompletableFromObservable(ObservableSource<T>', 1), ('Flowable.intervalRange(5,', 1), ('ConcatMapInner<R>(this);\n', 1), ('setException(Exception', 1), ('TestHelper.checkDisposed(Observable.just(1).takeLast(1));\n', 1), ('result.set(t.getGenericComponentType());\n', 1), ('assertEquals("EmptyRunnable",', 1), ('DoAfterObserver(MaybeObserver<?', 1), ('.assertResult("12345678");\n', 1), ('assertTrue(s.isCancelled());\n\n', 1), ('Reader.class,\n', 1), ('fromDto', 1), ('matcher.precomputedInternal();\n', 1), ('com.google.common.collect.testing.Helpers.mapEntry;\nimport', 1), ('verify(exceptionHandler).accept(eq(exception));\n', 1), ('Object.equals.\n', 1), ('memberSupplier.get();\n', 1), ('get\n', 1), ('executor.execute(listener);\n', 1), ('flowable2subscriber', 1), ('leaked', 1), ('Reset', 1), ('checkDoubleOnSubscribeFlowableToMaybe(Function<Flowable<T>,', 1), ('getRawType().equals(that.getRawType())\n', 1), ('RxJavaPlugins.setOnCompletableSubscribe(new', 1), ('complete(T).', 1), ('unsubscribed?",', 1), ('ClassPathXmlApplicationContext("applicationContext.xml");\n', 1), ('java.util.Collections;\n\nimport', 1), ('.assertResult(0L);\n', 1), ('manifestClasspath("file:/with/absolute.jar', 1), ('Subclasses\n', 1), ('String.format("%s%d",', 1), ('sources[31]', 1), ('.ifPresent(lastOfFirstTwo', 1), ('Integer[d];\n\n', 1), ('CompoundOrdering)', 1), ('Disposables.fromAction(aa).dispose();\n\n', 1), ('fulfillExceptionally(ex);\n', 1), ('Observer");\n', 1), ('SingleEquals<T>', 1), ('CountObserver', 1), ('queueReference;\n\n', 1), ('DoOnEachSubscriber(\n', 1), ('io.reactivex.Scheduler.Worker', 1), ('us.concatMap(new', 1), ('totalElementsCount;\n', 1), ('#connect(io.reactivex.functions.Consumer)}', 1), ('this.target', 1), ('entries;\n', 1), ('Single.just(1).ambWith(error).test().assertValue(1);\n', 1), ('R>(subject,', 1), ('overrideInitComputationSchedulerCrashes()', 1), ('ImmutableSet<E>>', 1), ('UTF-16:', 1), ('testToIterator()', 1), ('(!current.compareAndSet(null,', 1), ('assertNull(fs.get(5,', 1), ('trampoline()', 1), ('FileWriter(file))', 1), ('includes', 1), ('luctus,', 1), ('GwtCompatible', 1), ('ForwardingObject\n', 1), ('OnComplete());\n', 1), ('this.lazySet(0,', 1), ('SerializedSubscriber<T>(s);\n', 1), ('safeObserver', 1), ('Operations\n', 1), ('rarely', 1), ('@SuppressWarnings("SelfComparison")\n', 1), ('Maybe.zip(pp.singleElement(),', 1), ('actionCaptor.getAllValues();\n', 1), ('pp0.single(0)),', 1), ('Defaults.defaultValue(Primitives.unwrap(type));\n', 1), ('Observable.timer(0,', 1), ('PublishSubject\n', 1), ('nonExistingFile', 1), ('java.util.Comparator;\n\n/**', 1), ('Charsets.US_ASCII)).isNotEqualTo(I18N);\n', 1), ('latch.getCount());\n', 1), ('isEmpty}', 1), ('initialization\n', 1), ('collections.', 1), ('((NavigableSet<K>)', 1), ('1000;\n\n', 1), ('ParentClassHasConstant', 1), ('Cake()', 1), ('delegate.call();\n', 1), ('flowableMaybe()', 1), ('checkNotNull(genericDeclaration);\n', 1), ('ObservableCombineLatest(ObservableSource<?', 1), ('toIndex);\n', 1), ('java.security.AccessControlException;\nimport', 1), ('createNullSuccess()', 1), ('agreements,\n', 1), ('behalf', 1), ('manipulate', 1), ('met.\n', 1), ('innerNext(InnerQueuedSubscriber<Integer>', 1), ('deletedStudents', 1), ('ToSingleMaybeSubscriber<T>(observer,', 1), ('ticket.getPlayerDetails().getEmail());\n', 1), ('outEdgeToNode;\n', 1), ('.onErrorResumeNext(Single.just(2))\n', 1), ('user-supplied', 1), ('TimeIntervalObserver<T>(t,', 1), ('RegularImmutableSortedSet<Object>', 1), ('bufferHelper("\\n",', 1), ('copyOf(Map<?', 1), ('ObservableThrottleLastTests', 1), ('SingleEqualsTest', 1), ('suite.', 1), ('list.remove(o);\n', 1), ('IllegalStateException("§2.12', 1), ('OBSERVER_ONERROR_FAIL()', 1), ('Maybe.just(1).doAfterSuccess(null);\n', 1), ('FiniteRangeIterator', 1), ('"Hello!"),\n', 1), ('tempor', 1), ('just(1,', 1), ('embedding', 1), ('RxJavaPlugins.onAssembly(myb));\n\n\n', 1), ('assertTrue(fakePool.hasNext());\n', 1), ('Fast\n', 1), ('SubscribeOnMaybeObserver<T>(observer);\n', 1), ('AssertionError(e.toString());\n', 1), ('RxJavaPlugins.onSingleError(ex));\n//\n//', 1), ('.concatWith(Observable.<Integer>never())\n', 1), ('Iterators.getNext(descendingEntryIterator(),', 1), ('modern', 1), ('CompletableHide(CompletableSource', 1), ('object).delegate;\n', 1), ('up,', 1), ('java.nio.file.Files.deleteIfExists(file);\n', 1), ('innerError(SwitchMapInnerObserver<T,', 1), ('CompletableAwaitTest', 1), ('ParameterizedTypeImpl(\n', 1), ('FlowableSequenceEqualSingle(Publisher<?', 1), ('DelayMaybeObserver<T>\n', 1), ('delegate.pollLastEntry();\n', 1), ('open-source\n', 1), ('STREAMS_ONLY_ELEMENT', 1), ('ArbitraryInstances.get(UnsignedInteger.class));\n', 1), ('StringBuilder("Anonymous', 1), ('second.done;\n', 1), ('equals', 1), ('particularly', 1), ('ObjectHelper.requireNonNull(singleSupplier,', 1), ('DebounceInnerObserver(DebounceObserver<T,', 1), ('stack.clear();\n', 1), ('assertEquals(TEST_PART_PRICE,', 1), ('matcher', 1), ('<p>Named', 1), ('Publisher<T>>', 1), ('(").append(g.getName()).append(":").append(i', 1), ('TrampolineSchedulerTest', 1), ('slow\n', 1), ('o.takeUntil(Functions.alwaysFalse());\n', 1), ('this.features.add(feature);\n', 1), ('generateReadable()', 1), ('}).take(1);\n', 1), ('addThrowable(AtomicReference<Throwable>', 1), ('ArbitraryInstances.get(Multimap.class));\n', 1), ('studentDatabase;\n\n', 1), ('BallThread();\n', 1), ('Flowable.just("one");\n', 1), ('overproduction', 1), ('"r"', 1), ('#addListener}.\n', 1), ('GwtFluentFutureCatchingSpecialization<V>', 1), ('copy.entrySet())', 1), ('suite.addTest(testsForArrayList());\n', 1), ('SingleDelayWithPublisher(SingleSource<T>', 1), ('TestObserver<Integer>()));\n', 1), ('string-mapped', 1), ('ObservableTimeout(\n', 1), ('SafeTreeMapTest', 1), ('SpscLinkedArrayQueue<InnerQueuedSubscriber<R>>(Math.min(prefetch,', 1), ('this.exceptionType.exceptionType;\n', 1), ('FrontController', 1), ('counter[0]--;\n', 1), ('at",\n', 1), ('io.reactivex.internal.fuseable.FuseToObservable;\n\nimport', 1), ('NPE', 1), ('TestHelper.checkDisposed(pp1.singleElement().timeout(pp2));\n', 1), ('-6076952298809384986L;\n\n', 1), ('64M,', 1), ('SafeSubscriber(Subscriber<?', 1), ('feed', 1), ('displayed', 1), ('FlowableDelaySubscriptionOther(Publisher<?', 1), ('TimeUnit.MILLISECONDS).take(elements)\n', 1), ('RxJavaPlugins.onCompletableError(ex));\n//\n//', 1), ('domainapp.dom.modules.simple.SimpleObjects;\nimport', 1), ('System.out.print(clazz.getName());\n', 1), ('FilePermission(file.getAbsolutePath(),', 1), ('toppingBean.findOne(matchingToppings.iterator().next().getId());\n', 1), ('CombineLatestArrayTckTest', 1), ('void}', 1), ('byteSink;\n\n', 1), ('fs.cancel(false);\n\n', 1), ('(!numbers.equals(other.numbers))', 1), ('GENERATORS;\n\n', 1), ('AbstractTester>', 1), ('compose()', 1), ('addInner(InnerObserver<T,', 1), ('generateByteObject()', 1), ('Implementation:', 1), ('Comparators.lexicographical(comparator))\n', 1), ('Alphabet', 1), ('ZipSingleObserver<T>(this,', 1), ('suiteName', 1), ('MergeInnerObserver();\n', 1), ('SingleDoFinally<T>', 1), ('filterFailWithSkip()', 1), ('registerObserver(EventObserver', 1), ('Observable.range(Integer.MAX_VALUE,', 1), ('Flowable<List<Integer>>>()', 1), ('createMessage("you",', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/amb.png"', 1), ('Bloch', 1), ('(!numbers.contains(num))', 1), ('TransformAction<V>(this,', 1), ('manifestClasspath("', 1), ('ResumeSingleObserver<T>', 1), ('DwarvenGoldmineFacade()', 1), ('pathCharSinkFactory()', 1), ('"file:"', 1), ('pendingBuffer', 1), ('not-renamed', 1), ('Sirois\n', 1), ('DelayedDispose(DelayedRunnable', 1), ('result.getExceptionList());\n', 1), ('(2^31', 1), ('com.iluwatar.fluentinterface.fluentiterable.simple.SimpleFluentIterable;\nimport', 1), ('replaceAll(String', 1), ('supplier;\n\n', 1), ('notFused()', 1), ('Charsets.UTF_8)', 1), ('mute-idiom', 1), ('cs.test().assertEmpty().cancel();;\n', 1), ('doubleToRawLongBits(array[i]);\n', 1), ('MaybeTransformer<Upstream,', 1), ('loader)),\n', 1), ('SingleObserver<Object>,', 1), ('filterInvalidSource()', 1), ('sendLogRequests(PrintWriter', 1), ('terminated:', 1), ('r2.run();\n', 1), ('Schedulers.IoHolder());\n\n', 1), ('ComputationSchedulerInternalTest', 1), ('non-blocking\n', 1), ('checkNotNull(mode);\n', 1), ('DisposableMaybeObserver&lt;Integer&gt;', 1), ('b.append("', 1), ('sourceEmpty', 1), ('TrampolineApp.loop(10,', 1), ('PublisherVerification<T>', 1), ('delaySubscriptionFlowable()', 1), ('MultiInputStream}.\n', 1), ('String.valueOf(value);\n', 1), ('assertFreshInstance(Class<?>', 1), ('zip2()', 1), ('TypeVariableImpl<D>', 1), ('far.', 1), ('Map<Stats,', 1), ('string,', 1), ('LegacyComparable("x");\n', 1), ('FinalizableReferenceQueue.DecoupledLoader', 1), ('failOnEmpty));\n', 1), ('Producer(BlockingQueue<Object>', 1), ('list.get(i).intValue());\n', 1), ('ImmutableMap()', 1), ('ForEachWhileObserver<T>\nextends', 1), ('EventDispatcher()', 1), ('CompletableSource.\n', 1), ('FilterWriter', 1), ('Sets");\n', 1), ('ImmediateThinScheduler()', 1), ('times.size(),', 1), ('recipient', 1), ('ts.values().size();\n', 1), ('MapNotificationObserver(\n', 1), ('List<Completable>', 1), ('File(file).getName();\n', 1), ('1,jvmArgsAppend', 1), ('multiset.add("a",', 1), ('io.reactivex.internal.functions.Functions.*;\nimport', 1), ('TestHelper.checkDisposed(PublishProcessor.create().singleElement().takeUntil(Maybe.never()));\n', 1), ('org.openjdk.jmh.annotations.Setup;\nimport', 1), ('getContainsEntryWithIncomparableKeyMethod(),\n', 1), ('innerComplete(InnerQueuedSubscriber<T>', 1), ('.expectCollects(10,', 1), ('"onError(io.reactivex.exceptions.TestException:', 1), ('2).limit(elements)\n', 1), ("b.append(line).append('\\n');\n", 1), ('SchedulerLifecycleTest', 1), ('preJava7FreshCurrency()', 1), ('accessibleObject.getAnnotation(annotationClass);\n', 1), ('assertTrue(ArbitraryInstances.get(TreeMap.class).isEmpty());\n', 1), ('Client', 1), ('clearly', 1), ('FlowableCollectTest', 1), ('List<EventEmitter>', 1), ('create(Map<Class<?', 1), ('TestHelper.checkDisposed(Completable.complete().observeOn(Schedulers.single()));\n', 1), ('cakeLayerInfos.stream().mapToInt(c', 1), ('ProjectileStrategy(),\n', 1), ('assertNotNull(entitiesLeft);\n', 1), ('setReplace()', 1), ('subscription,', 1), ('observer.blockingGet(defaultValue);\n', 1), ('splitrB.characteristics()\n', 1), ('trick', 1), ('absence', 1), ('cb)', 1), ('transferFunds(int', 1), ('asyncResult4', 1), ('final,', 1), ('Reader}', 1), ('did', 1), ('enumConstants', 1), ('(results.size()', 1), ('EventDispatcher', 1), ('SubscriptionDisposable(Subscription', 1), ('SwitchMapSingleObserver(SwitchMapSingleMainObserver<?,', 1), ('d.complete(v);\n', 1), ('RuntimeException(new', 1), ('WindowSkipObserver<T>(t,', 1), ('CompletableMergeTest', 1), ('performance.', 1), ('database,', 1), ('elements.next();\n', 1), ('GroupBySubscriber(Subscriber<?', 1), ('AppendToQueueTask(TimedRunnable', 1), ('CompletableConcatIterable(Iterable<?', 1), ('tmp.toArray(new', 1), ('undoStack.offerLast(command);\n', 1), ('TestWriter(TestOption...', 1), ('Lists.newArrayListWithExpectedSize(nTasks);\n', 1), ('io.reactivex.subscribers.TestSubscriber;\n\n\npublic', 1), ('io.reactivex.disposables.Disposables;\n\npublic', 1), ('Collections.unmodifiableSet(features);\n', 1), ('AsyncSubject.\n', 1), ('wrap(SingleSource<T>', 1), ('set,\n', 1), ('LOGGER.info("Java8Holder', 1), ('backingMap.remove(key);\n', 1), ('tss[i].assertFailure(IllegalArgumentException.class);\n', 1), ('<p>Historically,', 1), ('generateGoogleOptional()', 1), ('Absent.withType();\n', 1), ('NonPublicConstantIgnored();\n\n', 1), ('holderField.setAccessible(true);\n\n', 1), ('aggregator,', 1), ('classesInitialized', 1), ('LATEST\n}\n', 1), ('Maximum', 1), ('CombineLatestIterableDelayErrorTckTest', 1), ('singleton\n', 1), ('start).contentEquals(joined));\n', 1), ('amet', 1), ('ArbitraryInstances.get(Executor.class).execute(ArbitraryInstances.get(Runnable.class));\n', 1), ('z,', 1), ('HashMap<V,', 1), ('SafeSubscriberTestException("failed"));\n', 1), ('JAVA7;\n', 1), ('this.caseDesc', 1), ('assertSame(Dispatcher.getInstance(),', 1), ('doAfterTerminate(final', 1), ('(testerSuite.countTestCases()', 1), ('delegate().lockInterruptibly();\n', 1), ('testClassPathEntries_notURLClassLoader_noParent()', 1), ('inSingle;\n\n', 1), ('direct.lazySet(DisposableHelper.DISPOSED);\n', 1), ('t4', 1), ('NewThreadScheduler', 1), ('blockingSubscribeConsumerConsumerAction()', 1), ('machineStateGlobal;\n\n', 1), ('Promise()', 1), ('SafeSubscriber<String>(OBSERVER_ONNEXT_FAIL(onError));\n', 1), ('CompoundOrdering}.\n', 1), ('this.setUp', 1), ('assertFalse(bs1.isCancelled());\n', 1), ('TestSubscriber<String>();\n', 1), ('subscriber.assertNotTerminated();\n', 1), ('KingsHand}.', 1), ('Performance', 1), ('trampoline().shutdown();\n', 1), ('Futures#getChecked}.', 1), ('annotations,', 1), ('ObservableMergeWithSingleTest', 1), ('inner.request(e);\n', 1), ('JDK7\n', 1), ('EnumMap}', 1), ('IOTask', 1), ('suite.addTest(testsForAbstractSequentialList());\n', 1), ('com.iluwatar.flux.store.Store;\nimport', 1), ('com.google.common.collect.testing.testers.CollectionAddAllTester.getAddAllUnsupportedNonePresentMethod;\nimport', 1), ('-10.0f);\n', 1), ('com.google.common.util.concurrent.Futures.immediateFailedFuture;\nimport', 1), ('innerNext(WindowBoundaryInnerObserver<T,', 1), ('FallbackSubscriber<T>', 1), ('Entry[entries.length];\n', 1), ('Public', 1), ('"http://www.gwtproject.org/javadoc/latest/com/google/gwt/core/shared/GwtIncompatible.html">the\n', 1), ('FluentIterableTest', 1), ('them).', 1), ('1).hide();\n', 1), ('assertFalse(executor.isShutdown());\n', 1), ('copyOf(all.iterator());\n', 1), ('Nazgul(NazgulName.REN));\n', 1), ('checker', 1), ('supplier);\n\n', 1), ('Message[]{\n', 1), ('To\n', 1), ('testClass.getDeclaredMethods())', 1), ('just(6,', 1), ('elements.length;\n', 1), ('typeVariableImpl)', 1), ('issued', 1), ('returned.', 1), ('"spellbook",', 1), ('containers', 1), ('assertEquals(m.toString(),', 1), ('partProperties.put(HasPrice.PROPERTY,', 1), ('Completable.complete().doOnEvent(new', 1), ('io.reactivex.subscribers.SubscriberFusion;\n\npublic', 1), ('Spliterator.OfDouble', 1), ('ElementAtSubscriber(MaybeObserver<?', 1), ('assertEquals("Should', 1), ('processing.', 1), ('CakeToppingInfo("topping",', 1), ('File#isDirectory}', 1), ('check("Completable");\n', 1), ('segment.\n', 1), ('SubscribeOnObserver(s,', 1), ('set.add(random.nextInt());\n', 1), ('resultSet));\n', 1), ('ElfMage("cleaning"),', 1), ('consumer.accept(map::put);\n', 1), ('e.serialize().onError(null);\n', 1), ('inner.actual.onComplete();\n', 1), ('java.util.jar.JarFile;\nimport', 1), ('DoubleStream#findFirst()\n', 1), ('ScalarSubscription<R>(s,', 1), ('checkFusedIsEmptyClear(Observable<T>', 1), ('testsForCheckedSet()', 1), ('non-hacky', 1), ('FileOutputStream(OUTPUT_FILE));\n', 1), ('generateIntBuffer()', 1), ('testWriteAndRead()', 1), ('log.\n', 1), ('4]\n', 1), ('ps.single(-99).test(false);\n\n', 1), ('testFactoryFailureResultsInErrorEmission()', 1), ('isDone.compareAndSet(false,', 1), ('this.soldierResponse', 1), ('fulfill(task.call());\n', 1), ('this.dispatcher', 1), ('initialBytes);\n', 1), ('doOnErrorThrows()', 1), ('exception")).subscribe(new', 1), ('Event,', 1), ('here?"),\n', 1), ('size}.\n', 1), ('requested.addAndGet(-produced);\n', 1), ('CompletableDisposeOn', 1), ('bothError()', 1), ('milliseconds)', 1), ('.concatWith(Completable.complete())\n', 1), ('Maybe.create((MaybeEmitter&lt;?', 1), ('MoreFiles}', 1), ('Because', 1), ('successError()', 1), ('org.junit.Assert.assertNotEquals;\n\npublic', 1), ('Reflection}', 1), ('testLast()', 1), ('.startWith(Observable.fromIterable(li))\n', 1), ('emptyByteSourceFactory()', 1), ('.concatMapCompletable(completableThrows())\n', 1), ('ReferenceDisposable<T>', 1), ('tryEmitScalar(U', 1), ('Logger.getLogger(Jdk7FileFactory.class.getName());\n\n', 1), ('onAfterNext', 1), ('JAVA8.typeName(type);\n', 1), ('#isPackagePrivate}.\n', 1), ('javadoc;\n\n', 1), ('7565982551505011832L;\n\n', 1), ('tf', 1), ('inUse.size());\n', 1), ('configurations,', 1), ('PathCharSinkFactory(initialString);\n', 1), ('height="335"', 1), ('ZipWithTckTest', 1), ('ListIterator<Integer>', 1), ('len));\n', 1), ('PublishProcessor<PublishProcessor<Integer>>', 1), ('scanForBadMethod(StringBuilder', 1), ('ObservableGenerateTest', 1), ('Futures#catching},', 1), ('ALBUM_LIST_HTML_FILE;\n\n', 1), ('Collection)\n', 1), ('server\n', 1), ('CompletableSource[count', 1), ('TestByteSource(content.getBytes(UTF_8),', 1), ('CancellableDisposableTest', 1), ('APPLE:\n', 1), ('shadowConstants);\n', 1), ('withCompletableDispose()', 1), ('FlowableMergeWithMaybe<T>', 1), ('EventConsumer(numInstances,', 1), ('Comparators.emptiesFirst(comparing(String::length));\n', 1), ('LongStream.of(0,', 1), ('Set>...', 1), ('}}).ignoreElements();\n\n', 1), ('offer(final', 1), ('MaybeTimer(long', 1), ('ReferenceDisposable<Runnable>', 1), ('repeat.\n', 1), ('assertEquals(WashingMachineState.WASHING,', 1), ('14,', 1), ('(WithLatestInnerObserver', 1), ('Reflection.getPackageName("NoPackage"));\n', 1), ('onChannelWritable(key);\n', 1), ('TestInputStream(new', 1), ('ImmutableMap.this.size();\n', 1), ('FlowableConcatWithMaybe(Flowable<T>', 1), ('Catch', 1), ('header,', 1), ('baseUrl', 1), ('getMongoClient()', 1), ('ImmutableBiMap<K,', 1), ('ArbitraryInstances.get(BiMap.class));\n', 1), ('testGet_nullConstant()', 1), ('java.security.PermissionCollection;\nimport', 1), ('stream.writeObject(valueComparator());\n', 1), ('ImmutableListMultimap}.', 1), ('ImmutableList<String>>>()', 1), ('System.out.println("Domain', 1), ('assertFalse(d.isDisposed());\n', 1), ('onBackpressureBuffer.\n', 1), ('property),', 1), ('addOutEdge(E', 1), ('rowKeyFuture', 1), ('FUSED_READY)', 1), ('WILL', 1), ('System.out.println("==>', 1), ('java.util.Optional.empty();\n', 1), ('isLoaded()', 1), ('shadowTestEnum', 1), ('SkipLastSubscriber<T>(s,', 1), ('Type.class.getMethod("getTypeName");\n', 1), ('dataSource.\n', 1), ('testTable()', 1), ('.subscribe()\n', 1), ('disposable.', 1), ('testsForLinkedBlockingDeque()', 1), ('locates', 1), ('call();\n}\n', 1), ('useMonitor;\n\n', 1), ('mergeArray(this,', 1), ('.put(OptionalInt.class,', 1), ('ln', 1), ('java.util.stream.LongStream;\nimport', 1), ('ThreadLocal<File>', 1), ('observableNoSubscription()', 1), ('DummyThreadFactory', 1), ('this.spellbookDao', 1), ('ParallelReduce(ParallelFlowable<?', 1), ('resourceInfo(ClassPathTest.class).getClass());\n', 1), ('Maybe.never().timeout(f,', 1), ('BehaviorSubject},', 1), ('response.\n', 1), ('createDataSource();\n', 1), ('entries.size();\n', 1), ('com.iluwatar.abstractdocument.domain.Part;\nimport', 1), ('list3.addAll(Arrays.asList(1,', 1), ('Flowable\n\n', 1), ('Collections.enumeration(keySet());\n', 1), ('fromFuture}\n', 1), ('DoAfterNextTckTest', 1), ('ObservableMaterialize<T>(items).subscribe(observer);\n', 1), ('isFull()', 1), ('RxJavaPlugins.setInitComputationSchedulerHandler(initReplaceWithImmediate);\n\n', 1), ('RegularImmutableSortedSet_CustomFieldSerializer', 1), ('childrenStream', 1), ('generateReader();\n', 1), ('SafeSubscriberTestException("onCompleteFail");\n', 1), ('"RunnableDisposable(disposed="', 1), ('com.iluwatar.hexagonal.domain.LotteryConstants;\n\n/**\n', 1), ('io.reactivex.schedulers.SchedulerRunnableIntrospection;\n\n/**\n', 1), ('Argument', 1), ('Single.just(2),\n', 1), ('.assertResult(1024);\n', 1), ('comparer;\n\n', 1), ('Delayed.\n', 1), ('list3', 1), ('(e.isShutdown())', 1), ('testRequestThroughTakeThatReducesRequest()', 1), ('AtomicReference<SlotPair<T>>', 1), ('this.suiteName', 1), ('(!m.signature.contains("Single"))', 1), ('FlowableRetryPredicate<T>', 1), ('TrampolineScheduler.instance();\n\n', 1), ('biConsumerThrows(e1))\n', 1), ('JsonFileJournal', 1), ('0xFFF;\n\n', 1), ('"March"),\n', 1), ('Single.fromPublisher(Flowable.error(new', 1), ('CompletableDoFinally(CompletableSource', 1), ('assertEquals(startTime,', 1), ('doOnDispose(final', 1), ('testSuccess()', 1), ('types).', 1), ('"Fizz",', 1), ('cakeBean.save(cake);\n', 1), ('tester.addEqualityGroup(generator.generateFresh(type));\n', 1), ('node...\n\n', 1), ('TestHelper.checkDisposed(PublishProcessor.create().elementAt(0));\n', 1), ('tempFile.getParentFile().toURI().toURL();\n', 1), ('SingleObserver&lt;T&gt;,', 1), ('Ordering.from(valueComparator).onResultOf(Maps.<V>valueFunction()));\n', 1), ('"Melody");\n', 1), ('runOn(scheduler,', 1), ('.suppressing(suppressForArrayList())\n', 1), ('shelves.', 1), ('FlowableConcatMapMaybeTest', 1), ('asynchronously.', 1), ('absent:', 1), ('com.google.common.collect.testing.testers.MapCreationTester.getCreateWithNullKeyUnsupportedMethod;\nimport', 1), ('MultimapForEachTester<K,', 1), ('InnerCompletableCache(CompletableObserver', 1), ('Spam', 1), ('checkNotNull(error);\n', 1), ('com.iluwatar.cqrs.queries;\n\nimport', 1), ('onErrorFailureWithUnsubscribeFailure()', 1), ('ImmutableSortedMap}', 1), ('{Object.class});\n', 1), ('this.onCompleteCall', 1), ('PotionFactory()', 1), ('Message.POISON_PILL,\n', 1), ('Deliberately', 1), ('assertThat(urls.get(1)).isEqualTo(new', 1), ('delayErrorWithMaxConcurrencyAsync()', 1), ('POOLS.put(e,', 1), ('java.util.concurrent.locks.ReentrantLock;\n\n/**', 1), ('(name.endsWith(".class")', 1), ('t.sendOnCompleted();\n\n', 1), ('ToSingleObserver(SingleObserver<?', 1), ('FiniteRangeIterator(long', 1), ('TimerSubscriber(s);\n', 1), ('S}', 1), ('noOverrequest()', 1), ('MaybeTakeUntilMaybe(MaybeSource<T>', 1), ('V>of(entry.getKey(),', 1), ('assertSame(SomeAbstractClass.INSTANCE,', 1), ('Callable<Result>', 1), ('ObservableTimeoutTimed.FallbackObserver<T>(actual,', 1), ('numElements;\n\n', 1), ('clearIsPassthrough()', 1), ('TypeToken<TreeMap<String,', 1), ('replaceValues}', 1), ('EmptySubscription.error(iae,', 1), ('MaybeSubscribeOnTest', 1), ('-6270983465606289181L;\n\n', 1), ('enabled', 1), ('out;', 1), ('createExecutor(ThreadFactory', 1), ('this.onAfterNext', 1), ('Streams.zip(\n', 1), ('action.', 1), ('in.read();\n', 1), ('FlowableReduceMaybe<T>\nextends', 1), ('threads2.add(Thread.currentThread().getName());\n', 1), ('lowerBound}.', 1), ('subscribers[0].onNext(2);\n', 1), ('run/call', 1), ('StringArrayList', 1), ('badInnerSource()', 1), ('"erat.', 1), ('createMessage("late_for_the_party",', 1), ('AbstractSequentialList<String>()', 1), ('generateImmutableList(E', 1), ('generateHashSet(freshElement);\n', 1), ('this.fromSpliterator', 1), ('examine', 1), ('TestSubscriber<Integer>(1L)', 1), ('TakeUntilMainObserver<T>\n', 1), ('NioReactor}', 1), ('in",\n', 1), ('balking', 1), ('failSingleSingleBlockingGet()', 1), ('letter.print();\n', 1), ('toInclusive));\n', 1), ('flowableInner', 1), ('errorDisposeRace()', 1), ('allowInterrupt;\n\n', 1), ('(including', 1), ('ArbitraryInstances.get(mutableClass);\n', 1), ('source1', 1), ('however', 1), ('distinctKeys);\n', 1), ('pp0.onError(new', 1), ('mutableClass,', 1), ('descendingEntryIterator();\n\n', 1), ('upstream()', 1), ('Set.iterator()', 1), ('testDrain_throws(BlockingQueue<Object>', 1), ('topping.setCake(cake);\n', 1), ('System.out.println(")");\n\n', 1), ('defaultShouldReportNoCustomOnError()', 1), ('Blackhole.\n', 1), ('XPath', 1), ('(!q.offer(u))', 1), ('isEqual));\n', 1), ('o));\n', 1), ('Observer<?>', 1), ('FutureTask,', 1), ('doOnDisposeSuccess()', 1), ('UnSubscribe/Error/etc', 1), ('Causes', 1), ('Multiset}', 1), ('basicSerialized()', 1), ('FlowableOnBackpressureLatestTest', 1), ('FlowableMergeWithMaybe(Flowable<T>', 1), ('UNCHECKED(RuntimeException.class);\n\n', 1), ('innerError(InnerQueuedSubscriber<R>', 1), ('ms.add(Maybe.<Integer>never());\n', 1), ('s.onSubscribe(gd);\n', 1), ('commitModify()', 1), ('ObservableFlatMapSinglePerf', 1), ('PriorityBlockingQueue\n', 1), ('assertFalse(filter.accept(dir,', 1), ('rejectingExecutor()', 1), ('emitters)', 1), ('com.google.common.base.Optional;\nimport', 1), ('StandardSystemPropertyTest', 1), ('Multisets.forSet()}', 1), ('runtime;\n', 1), ('Trampline.Worker\n', 1), ('get(null)},', 1), ('threadToInterrupt;\n', 1), ('Lists.charactersOf(str).spliterator(),\n', 1), ('generateNavigableSet(\n', 1), ('SingleHolder', 1), ('reference)', 1), ('JJ', 1), ('parse', 1), ('ObservableMapNotificationTest', 1), ('service\n', 1), ('ObservableDeferTest', 1), ('setImplementation(Queue.class,', 1), ('biConsumerDispose()', 1), ('@OneToMany(cascade', 1), ('java.util.concurrent.locks.ReentrantLock;\n\n/**\n', 1), ('-8127758972444290902L;\n\n', 1), ('list.get(index).getMessage());\n', 1), ('<i>specific</i>', 1), ('FutureTask<T>(task)', 1), ('singleObserver', 1), ('DefaultIfEmpty</a>\n', 1), ('readBytes(File', 1), ('IAE\n', 1), ('LOGGER.info("Line', 1), ('retain/cache', 1), ('overwriting', 1), ('concatArrayDelayError}', 1), ('java.util.ServiceLoader}', 1), ('Map<ScheduledThreadPoolExecutor,', 1), ('"CHEETO")).isPresent();\n', 1), ('tree-like', 1), ('LatchedSingleObserver(Blackhole', 1), ('io.reactivex.processors.UnicastProcessor;\n\n@Test\npublic', 1), ('.suppressing(suppressForPriorityBlockingQueue())\n', 1), ('java.lang.Thread.sleep;\nimport', 1), ('ReferenceDisposable<Action>', 1), ('odio.', 1), ('AmbCoordinator(Subscriber<?', 1), ('LinkedHashSet<>(size);\n\n', 1), ('s.request(BackpressureHelper.multiplyCap(n,', 1), ('2).map(new', 1), ('generateArrayList(E', 1), ('.put(ImmutableSortedSet.class,', 1), ('delayIndicator}', 1), ('SingleLift<T,', 1), ('testAdd()', 1), ('assertNull(ArbitraryInstances.get(NonPublicClass.class));\n', 1), ('unit.convert(time,', 1), ('ObjectHelper.requireNonNull(combiner.apply(s),', 1), ("type's", 1), ('assertBadRequestReported(Publisher<?>', 1), ('requests.get(0));\n', 1), ('"NewThreadSchedulerTest";\n', 1), ('cs\n', 1), ('concat2()', 1), ('interruptible()', 1), ('isolation', 1), ('super(method.getName());\n', 1), ('workers;\n\n', 1), ('LongStream.empty();\n', 1), ('currencies', 1), ('errors:\n', 1), ('testMenuItemSelected()', 1), ('this.sourceMode', 1), ('asyncResult', 1), ('toSingle(toFlowable().retry(times));\n', 1), ('O>', 1), ('(total', 1), ('scanning', 1), ('B2BService})', 1), ('completed.set(true);\n', 1), ('MapWithIndexSpliterator<Spliterator.OfLong,', 1), ('firstRecord.getMessage());\n', 1), ('VolatileSizeArrayList)', 1), ('predicate.apply(a)', 1), ('onSuccess()}.\n', 1), ('generateObject()', 1), ('Executors.newFixedThreadPool(5);\n', 1), ('Optional#absent}.\n', 1), ('onErrorReturn(Functions.justFunction(item));\n', 1), ('Optional.empty())\n', 1), ('setImplementation(BlockingDeque.class,', 1), ('MAX_STACK_DEPTH);\n', 1), ('targeted', 1), ('executor.endProcess(asyncResult1);\n', 1), ('Optional.ofNullable}.\n', 1), ('href="https://github.com/google/guava/wiki/UsingAndAvoidingNullExplained#optional">using', 1), ('StudentRepository}', 1), ('ConnectableObservable,', 1), ('assertTrue(d.isCancelled());\n\n//', 1), ('map.entrySet())', 1), ('CollectCollectors.toImmutableSet();\n', 1), ('NioDatagramChannel}', 1), ('RxJavaPlugins.setOnSingleLift(new', 1), ('assertEquals(Arrays.asList(6L,', 1), ('contentEquals(URL', 1), ('roundToPowerOfTwo(final', 1), ('ElfWarlord("protecting"),', 1), ('java.util.NoSuchElementException;\n\npublic', 1), ('@Ignore("The', 1), ('parallel;\n\n', 1), ('list);\n\n', 1), ('DROP_LATEST\n}\n', 1), ('Arrays.asList(Finalizer.class.getDeclaredClasses()));\n', 1), ('localFuture.set(i);\n', 1), ('("/"', 1), ('TestLogHandler();\n', 1), ('ListAddAtIndexTester.getAddNullSupportedMethod(),\n', 1), ('(int)elements).delaySubscription(1,', 1), ('fail("Not', 1), ('shadow', 1), ('NewThreadWorker(ThreadFactory', 1), ('List<Comparator<Object>>', 1), ('SubscriptionHelper.CANCELLED.cancel();\n', 1), ('Supplier[]{Wizard::new}\n', 1), ('filterFailHandlerThrows()', 1), ('parallelFlowable2parallelFlowable', 1), ('multimap.keySet().size(),\n', 1), ('Consumer<Character>\n', 1), ('testStringArray()', 1), ('.named(getName()', 1), ('expected",', 1), ('"FlowableSingleMaybe",\n', 1), ('OS_VERSION("os.version"),\n\n', 1), ('lookAheadStep;\n', 1), ('UnsupportedOperationException(methodName);\n', 1), ('this(keyComparator,', 1), ('getStoredLogRecords()', 1), ('suite.addTest(testsForArrayBlockingQueue());\n', 1), ('slate.\n', 1), ('source.blockingFirst();\n', 1), ('lowerBounds.hashCode()', 1), ('SingleSource[0])\n', 1), ('assertEquals(integers.size(),', 1), ('verifyNoMoreInteractions(store);\n\n', 1), ('generateComparable()', 1), ('cancelDelayError()', 1), ('testSynchronousDrop()', 1), ('successDisposeRace()', 1), ('to.assertValue(0L);\n\n', 1), ('testNegativeMaxElements()', 1), ('ObservableFlatMapMaybeEmptyPerf', 1), ('onErrorInner(Throwable', 1), ('TypeVariableInvocationHandler(TypeVariableImpl<?>', 1), ('InnerCompletableObserver(s,', 1), ('observableNoSubscribers()', 1), ('Visits', 1), ('org.mockito.Mockito.*;\n\npublic', 1), ('testDistinctUntilChangedOfNoneWithKeySelector()', 1), ('runLatch', 1), ('this.incidentEdgeMap', 1), ('flowable;\n', 1), ('sequences\n', 1), ('ArrayList<Integer>(Flowable.bufferSize()', 1), ('assertFalse(ticket1.equals(ticket3));\n', 1), ('app.promiseUsage();\n', 1), ('pp.onNext("one");\n\n', 1), ('(paramType.isAssignableFrom(BooleanSupplier.class))', 1), ('unknown', 1), ('com.google.common.collect.testing.SampleElements.Enums;\nimport', 1), ('ResourceSingleObserverTest', 1), ('ImmediateThinScheduler.INSTANCE.createWorker().schedule(Functions.EMPTY_RUNNABLE,', 1), ('blocking/synchronous', 1), ('this.sergeantResponse', 1), ('spell)', 1), ('NioServerSocketChannel(int', 1), ('create(E...', 1), ('WithPrivateConstructor();\n', 1), ('SINGLE;\n\n', 1), ('number;\n\n', 1), ('featureAsObject', 1), ('"rx2.single-priority";\n\n', 1), ('suppressForConcurrentHashMap()', 1), ('basepackage)', 1), ('o.elementAt(0).toObservable();\n', 1), ('getGenericDeclaration()', 1), ('Flowable.<Long>empty()\n', 1), ('ArrayList<>(inventorySize);\n', 1), ('ProtocolViolationException("Subscription', 1), ('ConcatMapSingleObserver(ConcatMapSingleMainObserver<?,', 1), ('checkPermission(Permission', 1), ('lpConsumerNode()', 1), ('commanderResponse,\n', 1), ('instances!",', 1), ('Queues.newLinkedBlockingQueue(1).remainingCapacity());\n', 1), ('this.crashOnError', 1), ('(Enum<E>', 1), ('Completable.merge(Flowable.just(pp1.ignoreElements(),', 1), ('RegularImmutableList<Object>', 1), ('addServer(Server', 1), ('-8158322871608889516L;\n\n', 1), ('selector.close();\n', 1), ('DefaultIfEmptyTckTest', 1), ('throwIf(options.contains(option));\n', 1), ('throwable.printStackTrace();\n', 1), ('InMemoryAppender(Inventory.class);\n', 1), ('PREDICATE);\n', 1), ('#visit}', 1), ('(int)elements).share()\n', 1), ('{}.capture()\n', 1), ('java.util.concurrent.TimeUnit.SECONDS;\nimport', 1), ('List<AnEnum>', 1), ('delayedErrorOnError()', 1), ('prefix-count}.\n', 1), ('separation', 1), ('testFlatMap()', 1), ('(javaUtilOptional', 1), ('getUninterruptibly(Future<V>', 1), ('assertFalse(fo.isDisposed());\n', 1), ('checkNotNull(factory.getExpected(data));\n', 1), ('swapped', 1), ('CompletableTimeoutTest', 1), ('correspondence\n', 1), ('ListMultimap}.\n', 1), ('put(Class<?', 1), ('delegate.navigableKeySet();\n', 1), ('this.initialCollection', 1), ("computation's", 1), ('for.', 1), ('Iterable<Flowable<T>>', 1), ('timePasses()', 1), ('SingleSource<List<Integer>>>()', 1), ('Zhu\n', 1), ('com.iluwatar.servicelayer.wizard.WizardDao;\n\n/**\n', 1), ('poll();\n\n', 1), ('innerObserver.onComplete();\n', 1), ('entries.add(entryOf(key,', 1), ('(setOnce(field,', 1), ('"Hello?', 1), ('print:\n', 1), ('CopyOnWriteArraySet<>(MinimalCollection.of(elements));\n', 1), ('{}.getClass();\n', 1), ('DragonSlayer(\n', 1), ('essentially', 1), ('stack.remove(stack.size()', 1), ('checkValid(toKey),', 1), ('fromSingle(final', 1), ('subscribedObserver', 1), ('PackageSanityTests', 1), ('.concatWith(Maybe.<Integer>empty())\n', 1), ('classFullName)', 1), ('last4.size());\n\n', 1), ('javax.swing.SwingUtilities;\nimport', 1), ('OnErrorNotImplementedException);\n', 1), ('customerResource.delete(customer.getId());\n\n', 1), ('this.out', 1), ('intersect(Set<?>', 1), ('assertWithMessage(property.toString()).that(property.value()).isNotNull();\n', 1), ('writer.write(line);\n', 1), ('assertTrue(ArbitraryInstances.get(SortedSetMultimap.class).isEmpty());\n', 1), ('this.studentDatabase', 1), ('Consumer<TestSubscriber<T>>()', 1), ('files.offer(base.listFiles());\n\n', 1), ('random.nextInt(10);\n', 1), ('failComputationFlowableBlockingLast()', 1), ('OBSERVER_ONNEXT_ONERROR_FAIL()', 1), ('throwIf(CLOSE_THROWS);\n', 1), ('want\n', 1), ('this.priority', 1), ('property.toString());\n', 1), ('!inSingle)', 1), ('longArray[i]', 1), (').subscribe(to);\n\n', 1), ('Single.concat(Observable.fromArray(array))\n', 1), ('ArbitraryInstances.get(CharSequence.class));\n', 1), ('ObservableWindowBoundary(ObservableSource<T>', 1), ('testsForLinkedHashSet()', 1), ('clazz2', 1), ('Objects.hashCode(getX(),', 1), ('"g",', 1), ('potion;\n', 1), ('Arrays.fill(sources,', 1), ('comparators)', 1), ('ConcatMapSupport<R>', 1), ('testOnCompletedAfterOnError()', 1), ('List<LetterComposite>', 1), ('Functions.toFunction(function9);\n', 1), ('assertThat(result).isAbsent();\n', 1), ('-622603812305745221L;\n\n', 1), ('CollectionType(Supplier<Collection<Object>>', 1), ('information:");\n', 1), ('get},', 1), ('these\n', 1), ('otherwise...");\n', 1), ('JAVA_CLASS_VERSION("java.class.version"),\n\n', 1), ('.fulfillInAsync(\n', 1), ('defaultPeriodicTask()', 1), ('CustomerDao}', 1), ('io.reactivex.Maybe;\n\n/**\n', 1), ('set.add("b");\n', 1), ('!lines.get(1).equals(header[1]))', 1), ('treasureChest', 1), ('toFuture}', 1), ('BackpressureHelper.produced(r,', 1), ('ALLOWS_NULL_VALUES);\n', 1), ('withoutParentDisposed()', 1), ('file.length());\n', 1), ('ImmutableSortedMap.orderedBy(comparator).putAll(entries).build();\n', 1), ('MutableClassToInstanceMap.this.delegate().entrySet();\n', 1), ('Flowable.<Integer>never()\n', 1), ('lazySet(COMPLETE_MASK', 1), ('subscribe(groupBy,', 1), ('lectus.', 1), ('CallbackCompletableObserver(onError,', 1), ('SingleDelayWithCompletable<T>', 1), ('SafeSubscriberTestException("failure', 1), ('!visited.add(type))', 1), ('setBackingMap(new', 1), ('system\n', 1), ('href="http://reactivex.io/documentation/completable.html">ReactiveX', 1), ('com.google.common.collect.ImmutableMap.IteratorBasedImmutableMap;\nimport', 1), ('Benchmarks', 1), ('wireTransfers.setFunds("123-12312",', 1), ('sortCancelRace()', 1), ('runLatch.getCount());\n', 1), ('Section\n', 1), ('BlockingQueue}', 1), ('Float(generateFloat());\n', 1), ('this.<T>toFlowable().startWith(other);\n', 1), ('requestWrongFusion()', 1), ('(context', 1), ('assertEquals(25,', 1), ('_.,()]*SingleSource");\n', 1), ('AtomicReference<T>();\n\n', 1), ('initiated', 1), ('children.add(letter);\n', 1), ('startNewDay()', 1), ('RxJavaPlugins.setOnFlowableAssembly(flowable2Flowable);\n', 1), ('exits.\n', 1), ('FlowableRepeatUntil(Flowable<T>', 1), ('IOException()),\n', 1), ('BiConsumerSingleObserver(BiConsumer<?', 1), ('checkDoubleOnSubscribeMaybeToSingle(Function<Maybe<T>,', 1), ('domainapp.integtests.specglue.modules.simple;\n\nimport', 1), ('SUPPORTS_ADD_WITH_INDEX,\n', 1), ('w2.schedule(countAction);\n\n', 1), ('complete(a);\n', 1), ('OBSERVER_ONNEXT_FAIL(final', 1), ('lpValue();\n', 1), ('CRUD', 1), ('problem:\n', 1), ('fastPath(Subscriber<?', 1), ('comparators;\n\n', 1), ('ObservableSource<TLeftEnd>', 1), ('generateDoubleObject()', 1), ('handlers.put(eventType,', 1), ('z', 1), ('primitive-specialized', 1), ('#getWrappedRunnable()}.\n', 1), ('#create(SingleOnSubscribe)}', 1), ('bytes.toByteArray();\n', 1), ('"BY_TO_STRING";\n', 1), ('delegate.execute(command);\n', 1), ('Functions.<Integer>emptyConsumer(),\n', 1), ('readFile(in,', 1), ('System.out.println(ex);\n', 1), ('Maps.equalsImpl(this,', 1), ('Consumer<HashMap<String,', 1), ('ObservableRange(1,', 1), ('producerNode.get();\n', 1), ('list.toArray(a);\n', 1), ('consumed.', 1), ('TakeLastTckTest', 1), ('FromFutureTckTest', 1), ('pp.single(0)),', 1), ('source2;\n', 1), ('TestCharSink(TestOption...', 1), ('onSuccess));\n', 1), ('(OnErrorNotImplementedException', 1), ('(getAndSet(Long.MIN_VALUE)', 1), ('MockReference(FinalizableReferenceQueue', 1), ('assertTrue(times.size()', 1), ('}).take(10).subscribe(ts);\n', 1), ('Builds', 1), ('stop;\n', 1), ('java.util.LinkedHashMap}', 1), ('zero",', 1), ('lazySet(CANCELLED);\n', 1), ('flatMap},', 1), ('testCollectorFailureDoesNotResultInErrorAndOnNextEmissionsObservable()', 1), ('#onComplete()},\n', 1), ('testsForAbstractSet()', 1), ('statement.close();\n', 1), ('CustomSingleObserver&lt;T&gt;', 1), ('TestException(""', 1), ('!m.signature.contains("Observable"))', 1), ('assertFalse(run.isDisposed());\n', 1), ('AllowConcurrentEvents', 1), ('VolatileSizeArrayList()', 1), ('hell', 1), ('Comparable<Delayed>', 1), ('testBackpressureWithNoInitialValue()', 1), ('Single.<Integer>error(error).subscribe(rso);\n\n', 1), ('cast()', 1), ('1).contains("public', 1), ('game', 1), ('inner.cancel();\n\n', 1), ('ProtocolViolationException("Disposable', 1), ('assertEquals(101,', 1), ('value.hashCode(),', 1), ('AtomicAction();\n\n', 1), ('OnSuccess(T', 1), ('MergerBiFunction<T>', 1), ('this.crashRequest', 1), ('byte-order\n', 1), ('"empty"', 1), ('SortedCopyBenchmark', 1), ('http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/main/java/util/concurrent/Delayed.java?revision=1.11\n', 1), ('generateTreeMap(key,', 1), ('merge(o1,', 1), ('throwIfUnchecked(e);\n', 1), ('Feature<Multiset>', 1), ('available.add(create());\n', 1), ('w1', 1), ('LinkedBlockingDeque<Object>(),\n', 1), ('IntervalRangeObserver', 1), ('target;\n', 1), ('ParallelReduceFullInnerSubscriber(ParallelReduceFullMainSubscriber<T>', 1), ('builder.append("Player:', 1), ('generateFloatObject()', 1), ('generateLinkedHashSet(E', 1), ('Observer<Notification<T>>,', 1), ('SettableFuture.create();\n', 1), ('SpscLinkedArrayQueue<Integer>(8);\n', 1), ('ArbitraryInstancesTest', 1), ('qs.requestFusion(QueueSubscription.ANY);\n', 1), ('fallback},', 1), ('(Subscriber<T>)INSTANCE;\n', 1), ('this(out,', 1), ('"relative/path/to/some.jar",\n', 1), ('FutureCallback<V>', 1), ('noSuchElementCallableEnum()', 1), ('char.class,\n', 1), ('this.op.perform();\n', 1), ('InnerQueuedObserver<R>(this,', 1), ('StringBuilder.class);\n', 1), ('symmetry.', 1), ('nameBuilder', 1), ('WONDERLAND",', 1), ('subscriberSingleNot(final', 1), ('io.reactivex.internal.fuseable.QueueSubscription;\nimport', 1), ('LOGGER.info("Downloading', 1), ('}).named("CompactLinkedHashSet")\n', 1), ('innerDoubleOnError()', 1), ('subscriber.onSubscribe(parent);\n\n', 1), ('t.get();\n', 1), ('pp;\n', 1), ('v3)', 1), ('7514387411091976596L;\n\n', 1), ('observer.assertNoErrors();\n', 1), ('shutdown', 1), ('restarting', 1), ('generateImmutableSortedSet(\n', 1), ('testFinalizeClassHasNoNestedClasses()', 1), ('getActualTypeArguments()', 1), ('testIdGeneration()', 1), ('NavigableSet<E>', 1), ('studentToBeDeleted.getName()', 1), ('(timeout', 1), ('BlockingObservableToIteratorTest', 1), ('queue.add(timedRunnable);\n\n', 1), ('Runnable>', 1), ('testIssue1451Case2()', 1), ('writer.writeInt(instance.comparators.length);\n', 1), ('ToSingleObserver<T>(s));\n', 1), ('IOException("");\n', 1), ('testHashMultimap()', 1), ('io.reactivex.annotations.SchedulerSupport#SINGLE', 1), ('File#createTempFile(String,', 1), ('connection,', 1), ('assertFalse(nonExistingFile.exists());\n\n', 1), ('trims', 1), ('exceptions");\n\n', 1), ('tf.newThread(Functions.EMPTY_RUNNABLE);\n\n', 1), ('human-readable', 1), ('readClassPathFiles.add(new', 1), ('createNullValueSerialized()', 1), ('Buffer', 1), ('job.\n', 1), ('pp.concatMapSingleDelayError(Functions.justFunction(ms),', 1), ('obsSingle', 1), ('instead\n', 1), ('applicationFile);\n', 1), ('KingJoffrey}', 1), ('RxJavaPlugins.setInitSingleSchedulerHandler(callable2scheduler);\n', 1), ('Supplier>', 1), ('HeavyFactory', 1), ('primitives\n', 1), ('MaybeNo2Dot0Since', 1), ('MaybeFlatMapSingle(MaybeSource<T>', 1), ('never()).onNext(value);\n\n', 1), ('lexy', 1), ('List,', 1), ('Differ', 1), ('ClassValue<Boolean>()', 1), ('LAZY_LARGE', 1), ('(iteratorNotification.isOnNext())', 1), ('TestException("Resume")))\n', 1), ('SingleTakeUntilTest', 1), ('checkNotNull(unit);\n', 1), ('removeAll(Collection<?>', 1), ('PublishSubject<Object>', 1), ('targetNode)', 1), ('source.reduce(sum);\n\n', 1), ('Sets.equalsImpl?\n\n', 1), ('MoreFiles.asByteSource(file);\n', 1), ('hasNext());\n', 1), ('MagicServiceImpl', 1), ('BackpressureLatestSubscriber(Subscriber<?', 1), ('SLEEP_AFTER_CANCEL', 1), ('subscription.get().request(n);\n', 1), ('<p>May', 1), ('(create,', 1), ('list.get(0).getMessage());\n', 1), ('SelectionKey.OP_WRITE);\n', 1), ('HashMultisetAddPresentBenchmark', 1), ('fromCompletable}', 1), ('timedWait()', 1), ('buffer\n', 1), ('packet;\n', 1), ('encodingStream.close();\n', 1), ('RegularImmutableBiMap}.\n', 1), ('cap)', 1), ('FlattenIterableObserver(Observer<?', 1), ('unwantedFeatures.retainAll(features);\n', 1), ('assertTrue(checkResult.getPrizeAmount()', 1), ('org.reactivestreams.Subscriber', 1), ('MaybeConcatIterable<T>', 1), ('list.listIterator();\n', 1), ('ObservableOperator<Long,', 1), ('CollectionSize.Require}', 1), ('select,', 1), ('<B,', 1), ('ObservableAll(ObservableSource<T>', 1), ('"null', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.from.Future.s.png"', 1), ('MaybeDoAfterSuccess<T>', 1), ('enumMap.entrySet())', 1), ('DelaySubscriptionTckTest()', 1), ('FlowableEmpty();\n\n', 1), ("'throws'", 1), ('preJava7FreshCurrency();\n', 1), ('createValues();\n', 1), ('testPrimitiveArray()', 1), ('!m.signature.contains("ObservableSource")\n', 1), ('ps.publish().autoConnect(0);\n\n', 1), ('crashOnComplete,', 1), ('price:', 1), ('object);\n\n', 1), ('NSA', 1), ('Feature<Map>', 1), ('Pow2()', 1), ('isolated', 1), ('com.google.common.reflect.ClassPath.ClassInfo;\nimport', 1), ('this(SINGLE_THREAD_FACTORY);\n', 1), ('Internal', 1), ('SingleSource<U>>', 1), ('RandomAmountInputStream(InputStream', 1), ('DISPOSED;\n\n', 1), ('sorted()', 1), ('Consumer}', 1), ('actionCaptor', 1), ('TestByteSink(options);\n', 1), ('Document());\n', 1), ('bulkGetSetLocal', 1), ('errors.addThrowable(t))', 1), ('innerComplete(T', 1), ('delayErrorWithMaxConcurrency()', 1), ('multi.skip(0));\n', 1), ('benchmarked', 1), ('system-dependent\n', 1), ('rootLocaleFormat("%s.%s()', 1), ('(AmbInnerObserver<T>', 1), ('synchronized).\n', 1), ('type.getDeclaredFields();\n', 1), ('java.util.jar.Attributes;\nimport', 1), ('testAssertEqualInOrder()', 1), ('InMemoryCustomerDao();\n', 1), ('suite.addTestSuite(CompactLinkedHashSetTest.class);\n', 1), ('assertEquals(ImmutableSet.<Object>copyOf(shadowTestEnum.getEnumConstants()),', 1), ('IteratorBasedImmutableMap.this;\n', 1), ('MaybeDelayTest', 1), ('shadows"));\n', 1), ('defaultGenerate(rawType);\n', 1), ('Counts', 1), ('"default"', 1), ('Future#isDone', 1), ('swaps', 1), ('4).toObservable()\n', 1), ('18', 1), ('request(initialRequest);\n', 1), ('generateImmutableMultimap(K', 1), ('necessary).\n', 1), ('observer.update(weather);\n', 1), ('Functions.identity();\n', 1), ('Spliterator<?>,', 1), ('ZipSingleObserver<T>\n', 1), ('MultiEdgesConnecting(Map<E,', 1), ('option)', 1), ('SkipLastTimedObserver<T>(t,', 1), ('languages,', 1), ('File("fish1.out");\n', 1), ('flowableFlowable()', 1), ('null)).isEmpty();\n', 1), ('ImmutableClassToInstanceMap.builder()\n', 1), ('map.put("a",', 1), ('subscribe(Publisher<?>[]', 1), ('EAGER', 1), ('createAndCacheHeavy()', 1), ('DragonSlayer(new', 1), ('MaybeTimeoutMaybe(MaybeSource<T>', 1), ('ObservableNever()', 1), ('BackpressureStrategy.BUFFER)\n', 1), ('Resources.getResource(getClass(),', 1), ('e2))', 1), ('testListenerCalledOnCancelFromRunning()', 1), ('onErrorOnErrorCrashConditional()', 1), ('Flowable.just(6,', 1), ('emissions.\n', 1), ('2:04', 1), ('concatMap(Function<?', 1), ('Warren', 1), ('s.onSubscribe(null);\n', 1), ('TestHelper.checkDisposed(PublishSubject.create().singleElement().doFinally(this));\n', 1), ('SafeSubscriber<String>(OBSERVER_ONERROR_NOTIMPLEMENTED()).onError(new', 1), ('assertTrue(ticket1.isPresent());\n', 1), ('assertFalse(list.equals(list3));\n\n', 1), ('imply', 1), ('createCollection(@NullableDecl', 1), ('duration\n', 1), ('ClassPath.from(getClass().getClassLoader());\n', 1), ('trySplit()', 1), ('").append(pattern).append("\\n");\n\n', 1), ('FlowableSubscriber<Integer>', 1), ('assertNotNull(all);\n', 1), ('ts.onSubscribe(is);\n\n', 1), ('validates', 1), ('sake,', 1), ('suppressing(Method...', 1), ('non-terminal', 1), ('timedRunnable.disposed', 1), ('Random().nextInt())),\n', 1), ('SafeSubscriberTestException("onError', 1), ('delayCustomScheduler()', 1), ('openComplete(BufferOpenObserver<Open>', 1), ('FakeOp', 1), ('setImplementation(Deque.class,', 1), ('STRENGTH:\n', 1), ('matcher.matches();\n', 1), ('method.setAccessible(true);\n', 1), ('swap', 1), ('System.out.println("Waiting', 1), ('testRangeWithZero()', 1), ('(Class<K>)', 1), ('Publisher<Timed<Object>>', 1), ('flowable2Flowable', 1), ('location', 1), ('ds.onError(new', 1), ('Spliterators.AbstractSpliterator<Customer>(Long.MAX_VALUE,', 1), ('suite.addTest(testsForCheckedSet());\n', 1), ('Maybe.just(1).delaySubscription(Flowable.error(new', 1), ('java.io.FilePermission;\nimport', 1), ('nearly', 1), ('Model', 1), ('ConcurrentHashMultiset}:', 1), ('.put(Map.class,', 1), ('TestHelper.checkDisposed(ps.switchMapCompletable(Functions.justFunction(cs)));\n', 1), ('reactorMain.execute(()', 1), ('600),', 1), ('collectAndLowercaseAndTrim);\n', 1), ('Yamauchi\n', 1), ('java.nio.charset.StandardCharsets;\nimport', 1), ('Nazgul(NazgulName.UVATHA));\n', 1), ('Functions.justFunction(Single.just((Object)1)));\n', 1), ('UsingTckTest', 1), ('10).lastElement().toFlowable()\n', 1), ('FlowableSubscriber<T>()', 1), ('readObject(java.io.ObjectInputStream', 1), ('writeV2(RainbowFishV2', 1), ('somebody', 1), ('it.next().intValue());\n', 1), ('threads1.add(Thread.currentThread().getName());\n', 1), ('interacting', 1), ('testExecutor.scheduleWithFixedDelay(DO_NOTHING,', 1), ('streams;', 1), ('ForwardingFluentFuture<V>(future);\n', 1), ('Member>', 1), ('keys.get(keyIndex);\n', 1), ('biConsumerThrows(final', 1), ('instead).', 1), ('CountingOutputStream', 1), ('SingleDoAfterSuccess(SingleSource<T>', 1), ('channel.getInterestedOps());\n', 1), ('Object()).reduce(new', 1), ('function4', 1), ('comparable.compareTo(null);\n', 1), ('TakeUntil(frc,', 1), ('suite.addTest(testsForBadlyCollidingHashSet());\n', 1), ('BaseEncoding}', 1), ('"properties', 1), ('file.entries();\n', 1), ('ByteArraySourceFactory', 1), ('RxJavaPlugins.setOnSingleSubscribe(new', 1), ('Equality', 1), ('<li>.', 1), ('poolSize)', 1), ('publisher,', 1), ('generateChar()', 1), ('usedInGenericType(Type[]', 1), ('ConnectableFlowable()', 1), ('ByteStreams.skipFully(multi,', 1), ('extracted', 1), ('href="http://reactivex.io/documentation/operators/replay.html">ReactiveX', 1), ('ScalarXMapFlowable(T', 1), ('assertEquals(TimeUnit.SECONDS,', 1), ('completeAfterCancel()', 1), ('WithLatestInnerSubscriber\n', 1), ('#call()}', 1), ('onCompleteAfterCrash()', 1), ('"(",', 1), ('"flowable."', 1), ('manifestClasspath("relative.jar', 1), ('com.google.common.collect.testing.testers.SortedMapNavigationTester;\nimport', 1), ('sum).map(error);\n\n', 1), ('Completable.fromSingle(Single.error(new', 1), ('TakeTckTest', 1), ('innerSuccessCompletesAfterMain()', 1), ('VALUES', 1), ('Single.ambArray()\n', 1), ('createPrintAction(final', 1), ('ImmutableList<Integer>', 1), ('state.subscribe(s);\n', 1), ('ms.onSuccess(1);\n', 1), ('executor.execute(()', 1), ('AbstractTester<?>', 1), ('BufferBoundaryObserver<?,', 1), ('LoggerFactory.getLogger(ReaderWriterLock.class);\n\n\n', 1), ('int[].class);\n', 1), ('TreeMultimap},', 1), ('pre-allocated', 1), ('delegate.lowerKey(checkValid(key));\n', 1), ('Edition', 1), ('bufferHelper("\\n\\r",', 1), ('File.createTempFile("not_a_jar",', 1), ('MutateTask(ConcurrentHashMultiset<String>', 1), ('timeUnitNullFail()', 1), ('SafeSubscriber<Integer>(actual);\n\n', 1), ('(op)', 1), ('Enter', 1), ('scan', 1), ('CollectionTestSuiteBuilder<E>\n', 1), ('MaybeMap<T,', 1), ('Executor-based', 1), ('timedTestScheduler()', 1), ('checkSingleSchedulerDoc()', 1), ('nonBlocking;\n', 1), ('fullpath(String', 1), ('-4255299542215038287L;\n\n', 1), ('FlowableTakeUntilPredicate<T>', 1), ('ImmutableBiMap.of(key,', 1), ('Maybe.zip(Arrays.asList(Maybe.error(new', 1), ('methodDefEnd;\n', 1), ('#dispose()}', 1), ('assertEquals("IdentityFunction",', 1), ('generateLocale()', 1), ('warning\n', 1), ('found;\n\n', 1), ('DBMS.\n', 1), ('nonCachingWithConstructorCheckValidator()', 1), ('varying', 1), ('assertTrue(fallback.hasObservers());\n\n', 1), ('CharMatcher()', 1), ('asCharSource(File', 1), ('DocumentImplementation(props);\n', 1), ('ConsumeAction(Promise<T>', 1), ('rethrowing', 1), ('ImmutableList.of("a"));\n', 1), ('(context.containsKey(IUnitOfWork.DELETE))', 1), ('.assertFailure(Throwable.class);\n', 1), ('potentially', 1), ('(condition)', 1), ('SafeTreeMap<>(delegate.headMap(checkValid(toKey),', 1), ('type.getConstructor();\n', 1), ('ObservableAutoConnectTest', 1), ('ObservableDefer(Callable<?', 1), ('generated;\n', 1), ('jt.getSelectedRow();\n', 1), ('!NativeTypeVariableEquals.class.getTypeParameters()[0].equals(\n', 1), ('"src/perf/java")));\n', 1), ('buffer.clear();\n', 1), ('crashOnSubscribe,', 1), ('s.defaultReadObject();\n\n', 1), ('acquireForReaders()', 1), ('1000d);\n\n', 1), ('Byte(generateByte());\n', 1), ('Logger.getLogger(ClassPathTest.class.getName());\n\n', 1), ('1000),\n', 1), ('.suppressing(suppressForAbstractSet())\n', 1), ('allPotions.addAll(bottomShelf);\n\n', 1), ('serialDisposable', 1), ('.put(com.google.common.base.Optional.class,', 1), ('Observable.intervalRange(5,', 1), ('TestHelper.assertBadRequestReported(Flowable.range(1,', 1), ('(q.peek()', 1), ('pattern.equals(((JdkPattern)', 1), ('effects.\n', 1), ('s.schedulePeriodically(Functions.EMPTY_RUNNABLE,', 1), ('<li>We', 1), ('to.values().size());\n', 1), ('pendingPacket', 1), ('mapFactory;\n', 1), ('crashDispose;\n\n', 1), ('Indexed.this.get(index);\n', 1), ('remove(d);\n', 1), ('testScanFunctionThrowsAndUpstreamCompletesDoesNotResultInTwoTerminalEvents()', 1), ('requirements', 1), ('atomic\n', 1), ('tickets.clear();\n', 1), ('TypeVariableImpl}.', 1), ('optional,', 1), ('errorHandler1', 1), ('ConcurrentHashMap<K,', 1), ('this.numberOfObservers', 1), ('(s.isFull())', 1), ('BlockingObserver<T>', 1), ('Optional#absent}.', 1), ('").append(ste).append("\\r\\n");\n', 1), ('requests.size());\n\n', 1), ('mock(DefaultObserver.class);\n\n', 1), ('factory-kit', 1), ('countersCollection', 1), ('TestException());\n\n\n', 1), ('suite.addTest(testsForEmptyList());\n', 1), ('Enums.getIfPresent(Country.class,', 1), ('shrieks', 1), ('LinkedHashMultiset<E>(distinctElements);\n', 1), ('Single.concat(Flowable.just(Single.just(1)))\n', 1), ('subj.onError(ex);\n', 1), ('InMemoryAppender(KingJoffrey.class);\n', 1), ('Integer.toString(generateInt());\n', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.onErrorReturn.png"', 1), ('make\n', 1), ('add(E', 1), ('toObservableTake()', 1), ('assertFalse(last.isPresent());\n', 1), ('hides', 1), ('factory.createSource(string.getBytes(Charsets.UTF_8)).asCharSource(Charsets.UTF_8);\n', 1), ('178,\\"description\\":', 1), ('generate(type);\n', 1), ('java.util.Collections.sort;\n\nimport', 1), ('Resets', 1), ('SUPPORTS_REMOVE)\n', 1), ('testGetResource_relativePath()', 1), ('"azzzzzz",', 1), ('WeatherObserver\n', 1), ('p.times', 1), ('String[]{"1","a","2"}).flatMapSingle(new', 1), ('FlowableLastSingle(Publisher<T>', 1), ('ObservableTakeLast(ObservableSource<T>', 1), ('rco.onComplete();\n\n', 1), ('BooleanRunnable(decoratedRun);\n', 1), ('cancellation,', 1), ('parseJavaClassPath();\n', 1), ('assertEquals(threads2.toString(),', 1), ('ResourceInfo("left/some.txt",', 1), ('throwIfThrowable()', 1), ('assertNotNull(Dispatcher.getInstance());\n', 1), ('TestHelper.checkUtilityClass(BlockingHelper.class);\n', 1), ('createKeyArray(int', 1), ('throwIf(TestOption', 1), ('assertFreshInstances(Class<?>...', 1), ('Immutable', 1), ('dispatcher.\n', 1), ('bounds.equals(that.bounds);\n', 1), ('com.iluwatar.pageobject.pages;\n\nimport', 1), ('writers\n', 1), ('notifyObservers()', 1), ('f.delay(100,', 1), ('checkNotNull(rawType);\n', 1), ('callOrder.add(op);\n', 1), ('mutableWithSelector()', 1), ('Set<TestEnum>', 1), ("'.');\n", 1), ('toStringOf()', 1), ('.flatMap(Functions.justFunction(Completable.complete().toFlowable()),', 1), ('ArrayDeque<Object>();\n\n', 1), ('RegularImmutableSet(Set<E>', 1), ('onNextNull()', 1), ('dateValue', 1), ('HasUpstreamSingleSource<T>', 1), ('LinkedBlockingQueue<Object>(10),\n', 1), ('bs);\n', 1), ('AsyncSubscription()', 1), ('Completable.mergeArrayDelayError(new', 1), ('observableDocRefersToObservableTypes()', 1), ('LinkedHashMultiset.create();\n', 1), ('ArrayList<ScheduledThreadPoolExecutor>(POOLS.keySet()))', 1), ('o.subscribe(to);\n\n', 1), ('Pattern.class,\n', 1), ('expectedKeys', 1), ('b0.add(t);\n', 1), ('File("/home/build/x/y/z").toURI(),\n', 1), ('LinkedHashSet}.', 1), ('comparer.test(a,', 1), ('Single-Producer-Single-Consumer', 1), ('ConcurrentLinkedQueue<Runnable>();\n', 1), ('Ticker.systemTicker())\n', 1), ('(DisposableHelper.setOnce(this.upstream,', 1), ('suppressForConcurrentLinkedQueue()', 1), ('io.reactivex.internal.util.AppendOnlyLinkedArrayList.NonThrowingPredicate;\nimport', 1), ('mapFactory)', 1), ('Consumer<TestObserver<T>>()', 1), ('Maybe.amb(Arrays.asList(pp0.singleElement(),', 1), ('SingleDelayWithCompletable(SingleSource<T>', 1), ('java.util.Comparator.comparing;\nimport', 1), ('MongoTicketRepository', 1), ('com.google.common.base.Optional.of("2"),\n', 1), ('"May"));\n', 1), ('loadCount.incrementAndGet();\n', 1), ('ProtocolViolationException("More', 1), ('f.get(0,', 1), ('action.accept(function.apply(fromIterator.next(),', 1), ('observableSubscribe1()', 1), ('testPluginExceptionWhileOnErrorThrowsAndUnsubscribeThrows()', 1), ('newMatchResult()', 1), ('SimpleDateFormat(inDateFormat);', 1), ('shared.onError(npe);\n', 1), ('gen.createArray(length);\n', 1), ('false});', 1), ('human\n', 1), ('MaybeObserveOn<T>(this,', 1), ('loggedMuteShouldLogExceptionTraceBeforeSwallowingIt()', 1), ('studentToBeUpdated);\n\n', 1), ('spellDao;\n\n', 1), ('isPowerOfTwo(final', 1), ('deleteSchema(DataSource', 1), ('MpscFillOnceSimpleQueue(int', 1), ('ScheduledTask', 1), ('ObjectHelper.requireNonNull(singleFunction,', 1), ('this.batchSize', 1), ('ImmutableTable.of(row,', 1), ('unsafeCreate()', 1), ('annotationClass.getAnnotation(Retention.class);\n', 1), ('testHashSet()', 1), ('compose(MaybeTransformer<?', 1), ('ElementAtObserver(MaybeObserver<?', 1), ('nike', 1), ('layer.getName().equals(info.name)).findFirst();\n', 1), ('depth.set(Thread.currentThread().getStackTrace().length);\n', 1), ('DescendingMap();\n', 1), ('multimap().putAll(k,', 1), ('Promise<String>()\n', 1), ('DisposeOnCancelTest', 1), ('SingleDelayWithSingle(SingleSource<T>', 1), ('getAndNullValue()', 1), ('TestCharSink', 1), ('cakeInfo)', 1), ('RegularImmutableMap<Object,', 1), ('retryUntil}', 1), ('NoAnonymousInnerClassesTest', 1), ('normalDone()', 1), ('testAddSampleInstances_noInstance()', 1), ('counterpart', 1), ('pp.singleElement(),', 1), ('testShop()', 1), ('concatWith()', 1), ('SingleObserveOn<T>(this,', 1), ('io.reactivex.internal.subscriptions.ScalarSubscription;\nimport', 1), ('observableNoSubscriber()', 1), ('defaultSchedulePeriodicallyDirectRejects()', 1), ('suiteName,', 1), ('annotate', 1), ('assertTrue("No', 1), (',\n', 1), ('@CollectionFeature.Require(SUPPORTS_REMOVE)\n', 1), ('(name.equals(Finalizer.class.getName()))', 1), ('implementing\n', 1), ('.put(Buffer.class,', 1), ('\\"AS', 1), ('ImmutableCollection.Builder<E>', 1), ('Observable.just(1).throttleWithTimeout(100,', 1), ('this.onTerminate', 1), ('InetSocketAddress', 1), ('queue.isEmpty()', 1), ('Flowable.just(Maybe.just(1)))\n', 1), ('com.google.common.util.concurrent.Futures;\nimport', 1), ('assertTrue(ts.errors().get(0).getCause().getMessage().contains("abc"));\n', 1), ('this.expectedExecutionTime', 1), ('CollectObserver(SingleObserver<?', 1), ('TestSubscriber<Integer>(0L)', 1), ('FlowableUnsubscribeOn<T>', 1), ('validator)', 1), ('runnable.toString());\n', 1), ('tc.onSubscribe(new', 1), ('typeVars', 1), ('student,', 1), ('ThreadDeath)', 1), ('.suppressing(suppressForConcurrentSkipListSetNatural())\n', 1), ('remove(AsyncSubscription<T>', 1), ('ts2.assertNotComplete();\n\n', 1), ('NON_CACHING_WITHOUT_CONSTRUCTOR_CHECK(nonCachingWithoutConstructorCheckValidator()),\n', 1), ('TimeUnit.SECONDS).blockingAwait();\n', 1), ('fields)', 1), ('SortedMapSubmapTestMapGenerator<K,', 1), ('-266195175408988651L;\n\n', 1), ('bs.offer(b);\n', 1), ('RxJavaPlugins.onIoScheduler(s));\n\n', 1), ('ForwardingMapEntry<Class<?', 1), ('com.google.common.collect.testing.features.TesterRequirements;\nimport', 1), ('java.util.regex}', 1), ('lobortis', 1), ('ticket4', 1), ('hashCode(@NullableDecl', 1), ('UnknownCommand(),', 1), ('testFind()', 1), ('service.submitTicket(LotteryTestUtils.createLotteryTicket("lucky@orb.com",\n', 1), ('JSON\n', 1), ('ObserveOnCompletableObserver(CompletableObserver', 1), ('sourceSupplier;\n\n', 1), ('.count();\n\n', 1), ('.put(Ticker.class,', 1), ('common.io}.\n', 1), ('testImmutableMultimap()', 1), ('in;\n', 1), ('SortedMap<R,', 1), ('perhaps', 1), ('configuring', 1), ('blockingFirstTimeout2()', 1), ('onExceptionResumeNext}', 1), ('Frameworks', 1), ('"onError(java.lang.NullPointerException:', 1), ('fo.onError(ex);\n', 1), ('SourceSinkFactory}', 1), ('retainedReferencesToOtherClassValues', 1), ('sourceCode.indexOf("@SuppressWarnings({",', 1), ('bus', 1), ('implements\n', 1), ('unit));\n\n', 1), ('<A', 1), ('ObservableGenerate<T,', 1), ('getAuthorByUsername(String', 1), ('Maybe<Object>()', 1), ('tc.complete);\n\n', 1), ('LoggerFactory.getLogger(AlchemistShop.class);\n\n', 1), ('next.scheduleAtFixedRate(new', 1), ('instance!\n', 1), ('multiset.spliterator().forEachRemaining(actualValues::add);\n', 1), ('fields.\n', 1), ('Objects::nonNull,', 1), ('Publisher<E>', 1), ('true),', 1), ('assertNull(RxJavaPlugins.onCompletableLift(null));\n//\n//', 1), ('RuntimeException(error);\n', 1), ('ps1.onComplete();\n', 1), ('backingMap.entrySet();\n', 1), ('Single",', 1), ('observer.errorCount);\n', 1), ('Collection}:\n', 1), ('ObservableOperator<Integer,', 1), ('TimeUnit.MINUTES,', 1), ('TEMP_DIR_ATTEMPTS;', 1), ('MultimapsFilterEntriesAsMapTest', 1), ('SORTED', 1), ('source1.subscribe(observer1);\n', 1), ('V>(initialCapacity,', 1), ('UnicastProcessorTckTest', 1), ('assertTrue(t.isDaemon());\n', 1), ('TestHelper', 1), ('Comparable#compareTo}', 1), ("cancel'\\r\\n", 1), ('load.\n', 1), ('SortedMultiset<E>', 1), (".expect('a',", 1), ('{"@integration"},', 1), ('((Observer<Object>)it).onError(new', 1), ('io.reactivex.exceptions.UndeliverableException', 1), ('SerializedForm<B>', 1), ('Subscriber<?>[]', 1), ('"mixed\\n",', 1), ('predicate).singleElement();\n', 1), ('poll();\n}\n', 1), ('Converter', 1), ('workers)', 1), ('testOnErrorNotImplementedIsThrown()', 1), ('EnumSerializedForm<K', 1), ('fetched', 1), ('-8.0f);\n', 1), ('enqueue(action,', 1), ('w);\n', 1), ('scheduler.scheduleDirect(this,', 1), ('8094547886072529208L;\n', 1), ('TimeIntervalSubscriber<T>', 1), ('(!deferred.isCancelled())', 1), ('errorMapper));\n', 1), ('unsafeCreate(SingleSource<T>', 1), ('LotteryTicketId', 1), ('member.toString();\n', 1), ('observer.nextCount);\n\n', 1), ('assertEquals(BlockingObserver.TERMINATED,', 1), ('FlowableToListSingle<T,', 1), ('TypeToken<NavigableSet<String>>()', 1), ('Single.just(2).contains(1).test().assertResult(false);\n', 1), ('href="https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained">writing', 1), ('listenable', 1), ('traverser\n', 1), ('evictionAction', 1), ('java.awt.event.ActionEvent;\nimport', 1), ('MaybeNo2Dot0Since.findSource("Flowable");\n\n', 1), ('Publisher>', 1), ('generateRandomNumbers()', 1), ('behaviors.\n', 1), ('other.subscribe(fallback);\n', 1), ('apply(long', 1), ('NoSuchElementException(),', 1), ('personalized', 1), ('ObserveOnCompletableObserver(s,', 1), ('ParallelSortedJoin<T>', 1), ('RxJavaPlugins.onAssembly(sos));\n\n', 1), ('(run', 1), ('SubscriptionHelper.CANCELLED', 1), ('count).\n', 1), ('testFinalizeReferentCalled()', 1), ('(nextNotification.isOnError())', 1), ('exceeded', 1), ('other.subscribe(otherSubscriber);\n', 1), ('dependentPromiseIsFulfilledWithAnExceptionIfConsumerThrowsAnException()', 1), ('sendOnError(Throwable', 1), ('VALUE_COLLECTIONS_SUPPORT_ITERATOR_REMOVE;\n\n', 1), ('ElfBeast("cooking"),', 1), ('Richard', 1), ('anymore",ex.getCause().getMessage());\n', 1), ('Spliterator.OfInt', 1), ('java.nio.MappedByteBuffer;\nimport', 1), ('readAllLines(File', 1), ('assertGoodTesterAnnotation(Class<?', 1), ('bi-predicate.\n', 1), ('ok,', 1), ('this.crashOnComplete', 1), ('ArrayList<T>(initialCapacity);\n', 1), ('IntervalSubscriber(Subscriber<?', 1), ('iterable.\n', 1), ('CompositeException(errors));\n', 1), ('bs.cancel();\n', 1), ('pp0.single(0),', 1), ('8));\n', 1), ('ps2;\n', 1), ('assertTrue("map', 1), ('WORKER', 1), ('http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\n', 1), ('map);\n', 1), ('io.reactivex.schedulers;\n', 1), ('System.setErr(new', 1), ('timed.value().intValue());\n', 1), ('FlowableFlatMapCompletable<T>(source,', 1), ('testAsyncReload()', 1), ('resources.\n', 1), ('assertNull(RxJavaPlugins.onSubscribe(Maybe.never(),', 1), ('another.', 1), ('asyncDrain()', 1), ('actual.onError(throwable);\n', 1), ('requestCrashed()', 1), ('in.closed();\n', 1), ('TestEnumMapGenerator', 1), ('result.set(t.getComponentType());\n', 1), ('completableObserver)', 1), ('point,', 1), ('PriorityQueue.class,\n', 1), ('MaybeTakeUntilTest', 1), ('StringWriter', 1), ('ms.test().assertResult();\n\n', 1), ('Publisher<Timed<Object>>>()', 1), ('tenantCallsCount.get(tenantName).get();\n', 1), ('side-effects', 1), ('onExceptionResumeNext(final', 1), ('doorProperties', 1), ('ArbitraryInstances.get(ImmutableList.class));\n', 1), ('BASE32_HEX(BaseEncoding.base32Hex()),\n', 1), ('follow\n', 1), ('unsubscribing.",', 1), ('onChannelAcceptable(SelectionKey', 1), ('worker");\n', 1), ('generateSampleCustomers())', 1), ('add(Object', 1), ('testAsMapValuesImplementSet()', 1), ('(optional.isPresent())', 1), ('junit.framework.TestSuite;\n\npublic', 1), ('"With', 1), ('assertThat(ArbitraryInstances.get(Appendable.class).toString()).isEmpty();\n', 1), ('assertGoodFeatureEnum(CollectionSize.class);\n', 1), ('StripBoundarySubscriber(Subscriber<?', 1), ('putAll(map.entrySet());\n', 1), ('Loads', 1), ('nondeterministic', 1), ('testExecutor.schedule(Executors.callable(DO_NOTHING),', 1), ('assertError(Class<?', 1), ('generateNavigableSet(freshElement);\n', 1), ('java.util.concurrent.CyclicBarrier;\n\nimport', 1), ('put(Item', 1), ('compositeList(Throwable', 1), ('DelayQueue.class,\n', 1), ('java.nio.file.Files.createFile;\nimport', 1), ('ps.single(-99).subscribe(Functions.<Integer>emptyConsumer());\n\n', 1), ('#drain()', 1), ('TestEnumSetGenerator', 1), ('.named("ConcurrentLinkedQueue")\n', 1), ('generator.createArray(length);\n', 1), ('Math.min(off,', 1), ('(int)elements).takeUntil(Flowable.never())\n', 1), ('(!gate)', 1), ('this.modes', 1), ('RxMethod();\n\n', 1), ('43;\n', 1), ('getOnlyElement(entries);\n', 1), ('coming', 1), ('assertThat(scanner.getResources()).hasSize(1);\n', 1), ('testStringConverter_convert()', 1), ('value+time', 1), ('ObjectHelper.requireNonNull(unit', 1), ('-6951100001833242599L;\n\n', 1), ('layers=%s",', 1), ('generateFile()', 1), ('JdkBackedImmutableBiMap_CustomFieldSerializer', 1), ('workers.add(worker2);\n', 1), ('MaybeZipIterable(Iterable<?', 1), ('delegate.get(key);\n', 1), ('member.getDeclaringClass();\n', 1), ('FlowableOnErrorNext<T>', 1), ('producerNode.value', 1), ('onErrorResumeNext(Functions.justFunction(next));\n', 1), ('o.flatMap(\n', 1), ('actual.lazySet(s);\n', 1), ('BufferBoundaryObserver(BufferBoundarySupplierObserver<T,', 1), ('notifyObservers();\n', 1), ('simplifyPath}', 1), ('<p>Java', 1), ('ObservableDoOnEachTest', 1), ('SequentialDispose(SequentialDisposable', 1), ('CacheDisposable<T>', 1), ('past', 1), ('impl;\n', 1), ('onLift(CompletableOperator', 1), ('BadFlowable().test();\n', 1), ('com.google.inject.Guice;\nimport', 1), ('VirtualMachineError}</li>\n', 1), ('featureEnumClass)', 1), ('TypeToken<ImmutableMultimap<EmptyEnum,', 1), ('background.\n', 1), ('ByteArrayInputStream(newPreFilledByteArray(0,', 1), ('testForEach_nullKeys()', 1), ('sum).toObservable();\n\n', 1), ('ie.printStackTrace();\n', 1), ('ts.assertFailure(InterruptedException.class);\n', 1), ('UserDto(user.getFirstName(),', 1), ('SingleObserver}s.', 1), ('splits.addLast(spliterator);\n', 1), ('Observable.just((String)null);\n', 1), ('T>[])', 1), ('write(DomainEvent', 1), ('-3589550218733891694L;\n\n', 1), ('propertyName', 1), ('TestHelper.checkDisposed(PublishSubject.create().ignoreElements().unsubscribeOn(new', 1), ('io.reactivex.Maybe', 1), ('OperatorsAreFinal', 1), ('proxy\n', 1), ('resumeDispose()', 1), ('com.google.common.math.LongMath;\nimport', 1), ('v5)', 1), ('this.fromEntity', 1), ('OnBackpressureBufferStrategySubscriber<T>\n', 1), ('BlockingObservableIterable<T>', 1), ('dispose2CurrentThread()', 1), ('type.getComponentType();\n', 1), ('CustomerResource(new', 1), ('super.putAll(copy);\n', 1), ('ListFactory}', 1), ('testEmpty_serialization()', 1), ('Arrays.asList(1));\n', 1), ('to.assertSubscribed().assertNoValues();\n\n', 1), ('CakeToppingInfo(next.getId(),', 1), ('Helpers.getMethod(MultisetForEachEntryTester.class,', 1), ('ordering(int', 1), ('<p>WARNING:', 1), ('(parentBuilder.getFeatures().contains(SERIALIZABLE))', 1), ('this.singletonInstanceMethod', 1), ('requireNonNull(T', 1), ('delayErrorWithMaxConcurrencyAsyncError()', 1), ('onErrorCall;\n\n', 1), ('(allTests.hasMoreElements())', 1), ('up.onComplete();\n\n', 1), ('set.add("c");\n', 1), ('(GWT)', 1), ('assertFalse(list.containsAll(Arrays.asList(2,', 1), ('{lowerBound},', 1), ('f.getAbsolutePath();\n', 1), ('.named("PriorityBlockingQueue")\n', 1), ('ObservableSwitchMapCompletable(Observable<T>', 1), ('writer.println(clientName', 1), ('pointing', 1), ('concepts', 1), ('addTenant(String', 1), ('IS_FILE', 1), ('-5417183359794346637L;\n\n', 1), ('RIGHT_IS_GREATER;', 1), ('assertFalse(list3.equals(list));\n', 1), ('(!found.isPresent())', 1), ('lookAheadStep', 1), ("fn.substring(idx).replace('/',", 1), ('FindCustomer', 1), ('jvmArgsAppend', 1), ('CustomMaybeOperator&lt;T&gt;', 1), ('com.iluwatar.datamapper;\n\nimport', 1), ('NioServerSocketChannel}', 1), ('45));\n\n', 1), ('findPattern("QueueSubscription\\\\.(NONE|SYNC|ASYNC|ANY|BOUNDARY)");\n', 1), ('Optional.of(OneConstantEnum.CONSTANT1),\n', 1), ('Observable.fromArray(numbers)\n', 1), ('testScanIntegersWithoutInitialValue()', 1), ('development', 1), ('TestHelper.checkDisposed(CompletableSubject.create().doOnComplete(Functions.EMPTY_ACTION));\n', 1), ('assertTrue(f.isDisposed());\n\n', 1), ('other)\n', 1), ('purge:', 1), ('BlockingObserverTest', 1), ('Single.just(1).hide())\n', 1), ('ObservableTakeLast<T>', 1), ('never-completing', 1), ('ObservableThrottleFirstTimed<T>', 1), ('ObjectHelper.requireNonNull(reducer.apply(accumulator,', 1), ('assertTrue(o.hasCustomOnError());\n', 1), ('doOnLifecycle}', 1), ('unsubscribingWithoutUnderlyingDoesNothing()', 1), ('unique;\n\n', 1), ('ElementAtObserver(SingleObserver<?', 1), ('futures.\n', 1), ('AtomicBoolean(true);\n', 1), ('Observable.just(1).forEachWhile(Functions.alwaysTrue(),', 1), ('FlowableScan(Flowable<T>', 1), ('.onErrorReturnItem(1)\n', 1), ('(!queue.isEmpty())', 1), ('MoreFiles#fileTraverser()}', 1), ('.flatMap(\n', 1), ('withFeatures(Iterable<?', 1), ('counter);\n', 1), ('RxJavaPlugins.setInitIoSchedulerHandler(initReplaceWithImmediate);\n', 1), ('.assertResult(15);\n', 1), ('lvElement(int', 1), ('publishers)', 1), ('ObjectHelper.requireNonNull(singleSource,', 1), ('parent.onError.accept(t);\n', 1), ('"/";\n\n', 1), ('Runnable}.', 1), ('entryIterator.next().getKey();\n', 1), ('com.iluwatar.servicelayer.spellbook;\n\nimport', 1), ('convertFromEntity(final', 1), ('m.schedulerDocLine', 1), ('inner.onSubscribe(new', 1), ('singletonInstanceMethod;\n\n', 1), ('long-term', 1), ('TestHelper.checkDisposed(PublishSubject.<Integer>create().reduce(0,', 1), ('sodales', 1), ('this.exceptionType', 1), ('algorithmically.\n', 1), ('ScanSeedObserver(Observer<?', 1), ('correspond', 1), ('Enums}.\n', 1), ('io.reactivex.internal.operators.parallel.*;\nimport', 1), ('SafeTreeMap(NavigableMap<K,', 1), ('Collection<?>', 1), ('connecting', 1), ('mock(MaybeObserver.class);\n', 1), ('ENABLED\n', 1), ('THROWING_DISPOSABLE', 1), ('normalJustConditional()', 1), ('7;\n', 1), ('q.peek();', 1), ('testUnsubscribed()', 1), ('generateImmutableList(freshElement);\n', 1), ('ts.values().get(0);\n', 1), ('"platea', 1), ('compose(SingleTransformer<?', 1), ('2.1.6', 1), ('getBottomShelf()', 1), ('{java.lang.annotation.ElementType.ANNOTATION_TYPE})\n@Retention(value', 1), ('(sample', 1), ('observer.onError(error.terminate());\n', 1), ('message.getBytes().length,', 1), ('ObservableDoOnSubscribeTest', 1), ('ImmediateThinScheduler.INSTANCE.scheduleDirect(new', 1), ('customers:-");\n', 1), ('assertNotNull(topShelf);\n', 1), ('.suppressing(suppressForSingletonSet())\n', 1), ('HasUpstreamPublisher<T>', 1), ('append\n', 1), ('(set.size()', 1), ('CakeToppingInfo(cake.getTopping().getId(),', 1), ('wrap(((SingleTransformer<T,', 1), ('TestMaybe<Integer>();\n', 1), ('map(raf,', 1), ('lastIndexOf(Object', 1), ('OperatorWindowBoundaryOpenObserver(WindowBoundaryMainObserver<T,', 1), ('ScalarCallable);\n', 1), ('SkipThisScenarioException();\n', 1), ('producedCancel(AtomicLong', 1), ('domain:");\n', 1), ('ClqSimpleQueue<T>', 1), ('management\n', 1), ('ConverterTest', 1), ('object$")\n', 1), ('processor.onNext("one");\n', 1), ('URLClassLoader(getClassPathUrls(),', 1), ('.put(GenericDeclaration.class,', 1), ('stream(Iterator<T>', 1), ('Modifier.isFinal(getModifiers());\n', 1), ('assertNotNull(getClass().getResource("internal/Finalizer.class"));\n', 1), ('Void\n', 1), ('invoked).', 1), ('asReader)\n', 1), ('LazyFluentIterable', 1), ('overrideConnectableFlowable()', 1), ('oldSecurityManager', 1), ('f.concatMapCompletable(\n', 1), ('capacities.\n', 1), ('HalfSerializer', 1), ('List<Store>', 1), ('HashSet<String>();\n', 1), ('asCharSourceFactory(final', 1), ('complete(Notification.<T>createOnComplete());\n', 1), ('testDistinctUntilChangedOfNone()', 1), ('tester.getTestMethodName());\n', 1), ('FlowableTakePublisher<T>', 1), ('testPluginErrorHandlerReceivesExceptionFromFailingUnsubscribeAfterCompletionThrows()', 1), ('ImmutableList},', 1), ('f.doFinally(CompletableDoFinallyTest.this);\n', 1), ('TestException\n', 1), ('InstantPeriodicTask(Runnable', 1), ('implied', 1), ('modes;\n\n', 1), ('Object#toString}.\n', 1), ('ObservableSource}s', 1), ('cs.test().assertResult();\n\n', 1), ('constraint.', 1), ('AG,', 1), ('#count()\n', 1), ('toppingInfo)', 1), ('started));\n', 1), ('s3.dispose();\n\n', 1), ('this.error.println(value);\n', 1), ('ArbitraryInstances.get(Comparator.class).compare("abc",', 1), ('wrap(HashMap<String,', 1), ('FileOutputStream(aFile,', 1), ('"/")\n', 1), ('OtherSubscriber<T>(observer,', 1), ('testRangeWithOverflow3()', 1), ('Types.toString(type);\n', 1), ('getMongoDatabase()', 1), ('disposeCrash()', 1), ('count.\n', 1), ('Aggregator', 1), ('FileLoggerModule.singleton', 1), ('LotteryService', 1), ('remove(InnerCompletableCache', 1), ('ConcurrentMap<Class<?>,', 1), ('java.util.stream.DoubleStream;\nimport', 1), ('last(1).asList();\n', 1), ('customerResource.save(customer);\n\n', 1), ('suppressForCheckedSortedSet()', 1), ('workaround', 1), ('delegate.scheduleAtFixedRate(wrapTask(command),', 1), ('newParameterizedType(rawType,', 1), ('spc', 1), ('-5331524057054083935L;\n\n', 1), ('java.util.concurrent.LinkedBlockingQueue;\n\n/**\n', 1), ('!disjoint(a,', 1), ('example.', 1), ('isomorphic', 1), ('"cHEETO")).isAbsent();\n', 1), ('CompletableConcatIterable', 1), ('ImmutableSetMultimap.of(key,', 1), ('ObjectHelper.requireNonNull(comparer,', 1), ('"/etc/config.txt",', 1), ('mock(GiantModel.class);\n', 1), ('ImmutableList.copyOf(limit(cycle(asList),', 1), ('managing', 1), ('EmptyDisposable.complete(actual);\n', 1), ('(DatagramSocket', 1), ('"Files.isFile()";\n', 1), ('DisposableMaybeObserver&lt;&gt;()', 1), ('createSubmapSuite(\n', 1), ('ObjectHelper.requireNonNull(onSuccessMapper,', 1), ('handleEvent(StoppingData', 1), ('SourceSinkFactory<S,', 1), ('washingMachine.getWashingMachineState());\n', 1), ('rangeFlatMapJust.subscribe(new', 1), ('allCustomers)', 1), ('comparables', 1), ('Single()', 1), ('rng.nextBytes(encodingInputs[i]);\n', 1), ('File(file.getName());\n', 1), ('mock(Action.class);\n\n', 1), ('SecurityException', 1), ('findSource(Maybe.class.getSimpleName());\n\n', 1), ('TestSubscriber<Disposable>(observer);\n\n', 1), ('ByteArrayOutputStream}.\n', 1), ('B>>()', 1), ('accept(TestObserver<Integer>', 1), ('SingleFromCallableTest', 1), ('"\\r\\n"', 1), ('ArbitraryInstances.get(ShortBuffer.class).capacity());\n', 1), ('FileCharSourceFactory();\n', 1), ('(mac,', 1), ('non,', 1), ('userConverter.convertFromDto(dtoUser);\n', 1), ('v.ignoreElements();\n', 1), ('"/**",\n', 1), ('iterate(boolean', 1), ('sufficient', 1), ('connectableObservable)', 1), ('emitter.timePasses(day);\n', 1), ('TestObserver<Mutable>', 1), ('FlowableTakeLastTimed(Flowable<T>', 1), ('setDelegates(\n', 1), ('1.4', 1), ('(!key.isValid())', 1), ('.put(PeekingIterator.class,', 1), ('assertUninterruptibleDrained(q);\n', 1), ('.onErrorResumeNext(Single.just(""))\n', 1), ('CacheLoaderTest', 1), ('maybeCreate()', 1), ('ByteSource}', 1), ('executor.get();\n\n', 1), ('SingleUsingTest', 1), ('afterTerminateThrows()', 1), ('.onBackpressureLatest().subscribe(ts);\n\n', 1), ('backingIterator.next();\n', 1), ('drain(\n', 1), ('ImmutableSortedMap<?,', 1), ('assertNotNull(finalizerCopy);\n', 1), ('OtherSubscriber<T>(actual);\n', 1), ('developed', 1), ('ExceptionHelper.\n', 1), ('getLastServedId()', 1), ('relating', 1), ('AtomicReference<AsyncSubscription<T>[]>', 1), ('FlowableCountSingle(Flowable<T>', 1), ('https://github.com/ReactiveX/RxJava/issues/969\n', 1), ('AtomicLong(Long.MIN_VALUE);\n\n', 1), ('expectedInstance', 1), ('testWrite()', 1), ('member.isSynthetic();\n', 1), ('errorAfterMainDelayError()', 1), ('Cake();\n', 1), ('String.valueOf(left).compareTo(String.valueOf(right));\n', 1), ('src.subscribe(main);\n', 1), ('ThreadDeath.class)\n', 1), ('bufferHelper(input,', 1), ('BufferBoundarySupplierSubscriber(Subscriber<?', 1), ('logic\n', 1), ('call(Subscriber<?', 1), ('Fiducia', 1), ('MIN_NUMBER', 1), ('(SubscriptionHelper.setOnce(field,', 1), ('testImmutableSortedSet()', 1), ('Z', 1), ('codes\n', 1), ('invoker', 1), ('conditionalPath()', 1), ('DummyScheduledThreadPoolExecutor()', 1), ('HashMultiset(int', 1), ('f.onBackpressureLatest();\n', 1), ('fileTreeTraverser()', 1), ('completableSourceAsSs()', 1), ('!m.signature.contains("Maybe")\n', 1), ('(matchingToppings.isEmpty())', 1), ('withObservableError()', 1), ('FutureTask<Long>', 1), ('part.getModel().get());\n', 1), ('named()', 1), ('RxJavaPlugins.initSingleScheduler(null);\n', 1), ('Thread.currentThread().setContextClassLoader(null);\n', 1), ('member.act(action);\n', 1), ('directExecutor())\n', 1), ('testHashMultiset()', 1), ('checkMaybeSchedulerDoc()', 1), ('"testForEachEntryDuplicates"));\n', 1), ('<p>Keys', 1), ('BasicFuseableObserver(Observer<?', 1), ('ZipSubscriber[n];\n', 1), ('classValue.get(exceptionType);\n', 1), ('withTearDown(Runnable', 1), ('newProxy(Class<T>', 1), ('toSafe()', 1), ('OnErrorNextSubscriber(Subscriber<?', 1), ('ObservableAutoConnect<T>', 1), ('subscribers.lazySet(EMPTY);\n', 1), ('assertSame(o2,', 1), ('setBody(String', 1), ('fin', 1), ('java.util.function.Predicate},', 1), ('SubscriptionHelper.isCancelled(first.get());\n', 1), ('Collections.singletonList(v);\n', 1), ('<p>Much', 1), ('System.out.print("java.lang.RuntimeException:', 1), ('ListenableFuture<Boolean>', 1), ('vel', 1), ('8).equals("@link', 1), ('Stream#concat(Stream,', 1), ("'d'))));\n", 1), ('obsMaybe(Blackhole', 1), ('refuse', 1), ('FlowableFromCallable(Callable<?', 1), ('(Thread.currentThread()', 1), ('0L;\n}\n', 1), ('dispatched\n', 1), ('System.setProperty(\n', 1), ('BackpressureErrorSubscriber<T>\n', 1), ('(dir', 1), ('ImmutableList.copyOf(elements);\n', 1), ('this.elementOrder', 1), ('Callable<Map<K,', 1), ('checkNext;\n\n', 1), ('Throws', 1), ('fromEntryList((Collection<?', 1), ('awaitNanos(long', 1), ('observables.add(Flowable.just(i));\n', 1), ('Child', 1), ('retrieve', 1), ('!email.contains("@"),', 1), ('createdDateValues);\n', 1), ('rco.errors.size());\n', 1), ('(future.set(null))', 1), ('FlowableTakeLast(Flowable<T>', 1), ('wizardDao,', 1), ('"abcd");\n', 1), ('java.io.IOException', 1), ('JdkPatternCompiler();\n', 1), ('CollectionSize.ANY);\n', 1), ('testGet_nonPublicConstantNotUsed()', 1), ('org.springframework.test.context.junit.jupiter.SpringExtension;\nimport', 1), ('recognize', 1), ('printThisBefore()', 1), ('"x/y/z").toURI());\n', 1), ('com.iluwatar.throttling.timer;\n\nimport', 1), ('Flowable<Notification<Integer>>', 1), ('(RxJavaPlugins.isFailOnNonBlockingScheduler()\n', 1), (".append('>')\n", 1), ('assertNull(result[0]);\n', 1), ('immediately,', 1), ('String>,', 1), ('car.getParts().forEach(p', 1), ('Random();\n\n', 1), ('178}";\n', 1), ('}).subscribe(ts);\n', 1), ('RxJavaPlugins.onSubscribe(Single.just(1),', 1), ('SubscriptionLambdaSubscriber(Subscriber<?', 1), ('ConcurrentHashMap,', 1), ('tests.nextElement();\n', 1), ('(emptyGenerate', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.just.png"', 1), ('(WeatherObserver', 1), ('comparator\n', 1), ('mock(FlowableSubscriber.class);\n\n', 1), ('unknown\n', 1), ('3167244060586201109L;\n', 1), ('RangeTckTest', 1), ('FlowableDebounce<T,', 1), ('retentionPolicy', 1), ('testExecutor.schedule(DO_NOTHING,', 1), ('assertFalse(list.removeAll(Arrays.asList(10,', 1), ('assertFalse(list.retainAll(Arrays.asList(1,', 1), ('CountDownLatch(max', 1), ('makeServiceCalls(nike));\n', 1), ('are.*', 1), ('FieldJsonMapper(),', 1), ('testNoTimedTaskPartRetention()', 1), ('queries.\n', 1), ('(currentCount', 1), ('t9)', 1), ('customer.setLastName("Danielson");\n', 1), ('AmbInnerSubscriber[count];\n', 1), ('.put(ImmutableBiMap.class,', 1), ('3).toSortedList(4)\n', 1), ('review,', 1), ('doc.put("bank",', 1), ('violated,\n', 1), ('Ascii::toUpperCase))\n', 1), ('retainedReferencesToOtherClassValues.add(classValue);\n', 1), ('Event.values().length;', 1), ('purgeEnabled,', 1), ('LoggerFactory.getLogger(ReaderTest.class);\n\n', 1), ('FlatMapMaybeObserver(Observer<?', 1), ('Practical', 1), ('(throwable)', 1), ('MaybeDetachTest', 1), ('(!polled.disposed)', 1), ('http://www.apache.org/licenses/LICENSE-2.0",\n', 1), ('stream)\n', 1), ('g.put(Integer.valueOf(10)));\n', 1), ('GENERAL_PURPOSE(SUPPORTS_PUT,', 1), ('pp.purgePeriod;\n\n', 1), ('((requestedMode', 1), ('sad\n', 1), ('File(new', 1), ('MergeInnerCompletableObserver\n', 1), ('otherOnCompletePublisher()', 1), ('Resources.toString(resource,', 1), ('Supplier[]{Rogue::new},\n', 1), ('fetchCounterFuture,\n', 1), ('?>>', 1), ('unit);}\n', 1), ('fromObservable(final', 1), ('"Second");\n\n', 1), ('false);\n\n', 1), ('(enumConstants.length', 1), ('64M', 1), ('FlowableMapNotification<T,', 1), ('5566860102500855068L;\n\n', 1), ('indexes[minIndex]++;\n\n', 1), ('describe', 1), ('trimToSize()', 1), ('Callable<Scheduler>,', 1), ('.addEqualityGroup(lexy,', 1), ('Functions.EMPTY_RUNNABLE.toString());\n', 1), ('"Failed', 1), ('is:\n', 1), ('SingleDoOnSubscribe<T>', 1), ('Objects.equal(getGenericComponentType(),', 1), ('reactorMain.awaitTermination(4,', 1), ('discussed', 1), ('long)}.\n', 1), ('TestHelper.checkDisposed(Observable.just(1).toFlowable(BackpressureStrategy.MISSING));\n', 1), ('FlowableSwitchMapCompletableTest', 1), ('Predicate<String>', 1), ('o.toSortedList().toObservable().blockingFirst());\n', 1), ('AndroidIncompatible}.', 1), ('ByteArrayInputStream(content.getBytes(US_ASCII));\n', 1), ('assertEquals(TestEnum.CHEETO,', 1), ('LotteryTest', 1), ('function9', 1), ('GiantView', 1), ('TestHelper.checkDisposed(Observable.intervalRange(1,', 1), ('.concatMapCompletable(Functions.justFunction(Completable.error(new', 1), ('.put(TimeUnit.class,', 1), ('FlowableJoin<TLeft,', 1), ('createSymbolicLink(right.resolve("sibling"),', 1), ('.put(OptionalDouble.class,', 1), ('flowMaybe.subscribe(new', 1), ('Ordering<Field>', 1), ('assertTrue(ArbitraryInstances.get(NavigableSet.class).isEmpty());\n', 1), ('LotteryTicketId(doc.getInteger("ticketId")),', 1), ('bes', 1), ('14))));\n', 1), ('Validator#exceptions}', 1), ('read(char[]', 1), ('create(Set<Integer>', 1), ('annotationClass.getDeclaringClass(),\n', 1), ('suite.addTestSuite(SafeTreeMapTest.class);\n', 1), ('Retry', 1), ('testNoTimedTaskAfterScheduleRetention()', 1), ('bq', 1), ('Maybe.fromRunnable(null);\n', 1), ('assertTrue(u.isDisposed());\n', 1), ('forcePut(K', 1), ('weaklyReferenceQueue();\n', 1), ('SerializedEmitter(ObservableEmitter<T>', 1), ('execute-around', 1), ('ps.singleOrError().doOnDispose(new', 1), ('Set<Type>', 1), ('#refCount()\n', 1), ('interfaceMethodCalled(interfaceType,', 1), ('Operation.values();\n', 1), ('File("testfile.txt");\n', 1), ('delayIndicator)', 1), ('super(mock);\n', 1), ('dtoEntities', 1), ('FAILS_FAST_ON_CONCURRENT_MODIFICATION,\n', 1), ('Maybe.just(1).subscribe(rmo);\n\n', 1), ('failComputationObservableBlockingLast()', 1), ('ConditionalSubscriber<T>', 1), ('ORDERING.sortedCopy(input).get(0);\n', 1), ('Feature<Collection>,', 1), ('saifasif\n', 1), ('flowableSubscribe0()', 1), ('DoFinallyConditionalSubscriber<T>', 1), ('Observable<S', 1), ('checkSchedulerBadMethod(Single.class.getSimpleName());\n', 1), ("ObservableSource's", 1), ('io.reactivex.flowable.FlowableCovarianceTest.*;\n\npublic', 1), ('\'.\').replace(".java",', 1), ('extremely', 1), ('AbstractNavigableMap.this;\n', 1), ('getAddAllNullUnsupportedMethod(),\n', 1), ('migrates', 1), ('resources\n', 1), ('Sex.FEMALE,', 1), ('source2', 1), ('FakeOp(1));\n', 1), ('List<Callable<S>>', 1), ('getField(Enum<?>', 1), ('DelayObserver', 1), ('classPath', 1), ('CollectSpliterators.map(delegate.entrySet().spliterator(),', 1), ('asCharSink(File', 1), ('construction.\n', 1), ('testLexicographical()', 1), ('baseLoader.loadAll(ImmutableList.of(new', 1), ('assertEquals(threads1.toString(),', 1), ('MaybeZipArrayTest', 1), ('cancelAfterHasNext()', 1), ('SingleDelay<T>', 1), ('throwable.getMessage());\n', 1), ('FlowableSwitchMapMaybeEmptyPerf', 1), ('String>builder()\n', 1), ('random.nextInt(6);', 1), ('run",', 1), ('CompletableAndThenTest', 1), ('RxJavaPlugins.setErrorHandler(null);\n', 1), ('TestHelper.checkDisposed(Flowable.generate(new', 1), ('value.get());\n\n', 1), ('ObservableAny<T>(source,', 1), ('notDoneFuture', 1), ('concat(Stream<?', 1), ('MaybeCreate<T>', 1), ('org.junit.jupiter.api.Assertions.assertSame;\n\n/**\n', 1), ('*/\n@Entity\npublic', 1), ('ToIntFunction})', 1), ('writable\n', 1), ("classFullName.lastIndexOf('.');\n", 1), ('accum,', 1), ('.concatWith(Flowable.range(0,', 1), ('MaybeOnSubscribe\n', 1), ('.put(InputStream.class,', 1), ('SpscArrayQueue<E>', 1), ('dust!"\n', 1), ('AssertionError("failed', 1), ('solves', 1), ('(done', 1), ('SafeTreeMap<>(delegate.tailMap(checkValid(fromKey),', 1), ('testDefaultIoSchedulerIsInitializedLazily()', 1), ('ScheduledRunnable(Runnable', 1), ('processor.subscribe(subscriber1);\n', 1), ('lowerBounds,', 1), ('(entries', 1), ('bulkGetSet', 1), ('ts1.assertNoValues();\n', 1), ('lacus.\\n"\n', 1), ('failing', 1), ('checkNotNull(suiteName);\n', 1), ('howMany)', 1), ('testRequestFromDecoupledOperator()', 1), ('(implementation', 1), ('overridden\n', 1), ('SingleObserver<U>,', 1), ('actualCounts);\n', 1), ('concat(Flowable.fromIterable(sources));\n', 1), ('reference.finalizeReferentCalled;\n', 1), ('AtomicBoolean(false);\n\n', 1), ('io()', 1), ('slow\npublic', 1), ('Contributors.",\n', 1), ('toSortedListCapacity()', 1), ('assertSame(action,', 1), ('simpleObjects.add(fs.getSimpleObject());\n', 1), ('super(e', 1), ('downloadPromise;\n', 1), ('task.get(5,', 1), ('Validator#t}\n', 1), ('observableBlockingSubscribe1()', 1), ('touch(File', 1), ('calcElementOffset(index);\n', 1), ('ConnectableObservable<Long>', 1), ('inUse', 1), ('commitInsert();\n', 1), ('io.reactivex.internal.operators.single.SingleDelayWithCompletable;\nimport', 1), ('#mapWithIndex(Stream,\n', 1), ('verify(observer).onSuccess(false);\n', 1), ('"ObservableDelaySubscriptionOther");\n', 1), ('com.iluwatar.event.sourcing.domain.Account;\nimport', 1), ('defined.', 1), ('io.reactivex.observers.TestObserver}', 1), ('pickInstance(Charset.availableCharsets().values(),', 1), ('(first.compareAndSet(current,', 1), ('"Resume");\n', 1), ('delaySubscription(Flowable.timer(delay,', 1), ('subtypeOf(newArrayType(upperBounds[0]));\n', 1), ('fromDtos', 1), ('ObservableAllSingle<T>', 1), ('testImmutableCollection()', 1), ('DefaultObserver<T>', 1), ('sourceBackAccount,', 1), ('super.loadClass(name,', 1), ('Equivalence<T>()', 1), ('absent"', 1), ('(!hasPrevious())', 1), ('checkNotNull(caseDesc);\n', 1), ('DEFAULT_DB', 1), ('Reflection.newProxy(interfaceType,', 1), ('List<Spellbook>', 1), ('.append(COMMA_JOINER.join(transform(argumentsList,', 1), ('mapping,', 1), ('byId.getId());\n', 1), ('t.setPriority(priority);\n', 1), ('NavigableSet\n', 1), ('testOnErrorExceptionIsThrownFromOnNext()', 1), ('CompletableMergeIterable(Iterable<?', 1), ('spellbookDao,', 1), ('ArbitraryInstances.get(Readable.class).read(CharBuffer.allocate(1)));\n', 1), ('Functions.justCallable((Maybe<Integer>)null))\n', 1), ('unsafeDelegate(delegate);\n', 1), ('Direction', 1), ('relative.jar', 1), ('Flowable.concatEager(Flowable.just(\n', 1), ('FlowableAllSingle(Flowable<T>', 1), ('that.identity;\n', 1), ('invocations:', 1), ('SimpleTroll();\n', 1), ('Function<MaybeSource<T>,', 1), ('newValue;\n', 1), ('ClassPathUtil.class.getClassLoader()', 1), ('UTF_16BE', 1), ('threads2', 1), ('List<U>', 1), ('Charsets()', 1), ('single.toFlowable();\n', 1), ('"%.4g",', 1), ('TimerDisposable(observer);\n', 1), ('checkCanCreate();\n\n', 1), ('IllegalStateException.class);\n', 1), ('handlers', 1), ('extractMethod(test);\n', 1), ('(eventClassName.equals("MoneyTransferEvent"))', 1), ('getList().listIterator(getNumElements());\n', 1), ('Reactor.\n', 1), ('fs.onSubscribe(s2);\n\n', 1), ('.put(ByteSink.class,', 1), ('MaybeConcatArrayDelayError<T>', 1), ('(disposed)\n', 1), ('negative");\n', 1), ('typeVariableMethod', 1), ('withFutureDisposed3()', 1), ('backpressureSpecEnd', 1), ('cakes', 1), ('rethrown', 1), ('AtomicReference<CompletableSubject>', 1), ('com.google.common.base.StandardSystemProperty.JAVA_COMPILER;\nimport', 1), ('this.other;\n', 1), ('Class.forName(className).getConstructor(int.class);\n', 1), ('fileThreadLocal.get(),', 1), ('client.', 1), ('fromPublisher(toFlowable().repeatWhen(handler));\n', 1), ('io.reactivex.internal.subscriptions.ScalarSubscription;\n\n/**\n', 1), ('Functions.justCallable(Observable.just(3)))\n', 1), ('(SortedMap<String,', 1), ('MaybeFlatten(MaybeSource<T>', 1), ('this.matcher', 1), ('e.purge();\n', 1), ('786994795061867455L;\n\n', 1), ('anything.\n', 1), ('WindowExactObserver(Observer<?', 1), ('onSuccess(@NullableDecl', 1), ('Model-View-Presenter\n', 1), ('height="393"', 1), ('accounts.getOrDefault(bankAccount,', 1), ('getCountersCollection()', 1), ('createEmptyArray(Class<T>', 1), ('7;', 1), ('Flowable.fromArray(ints);\n\n', 1), ('QueueDrainHelper.createQueue(-prefetch);\n', 1), ('(inner.index', 1), ('result.set(subtypeOfComponentType(t.getBounds()));\n', 1), ('SingleTask', 1), ('boot', 1), ('RetryBiSubscriber<T>(s,', 1), ('findPattern("ConnectableObservable<.*>\\\\s+cf(0-9|\\\\b)");\n', 1), ('maybe.blockingGet();\n', 1), ('io.reactivex.internal.disposables.*;\n/**\n', 1), ('innerObserver.onNext(value);\n', 1), ('useInfinite', 1), ('FlowableScanSeed<T,', 1), ('g.put(12);\n', 1), ('Flowable.fromIterable(sources).concatMapEager((Function)MaybeToPublisher.instance());\n', 1), ('super.createSource(bytes);\n', 1), ('discarding', 1), ('initialRequest;\n\n', 1), ('Observable<Observable<HorrorMovie>>', 1), ('concat(MaybeSource<?', 1), ('Equivalence.equals())\n', 1), ('Observable.fromArray(array).flatMap(new', 1), ('ByteArrayOutputStream.class);\n', 1), ('differentOrder', 1), ('(int)elements).observeOn(Schedulers.single())\n', 1), ('predicate);\n\n', 1), ('valueFunction,', 1), ('JsonParser();\n', 1), ('UTF_8))', 1), ('RxJavaPlugins#onSchedule(Runnable)}', 1), ('LinkedHashMultiset()', 1), ('ObservableFromIterable(Iterable<?', 1), ('CharSinkFactory()', 1), ('Event>,', 1), ('situations.\n', 1), ('ListIteratorTester<E>(\n', 1), ('list.addAll(c);\n', 1), ('ObservableDematerializeTest', 1), ('Bjarne', 1), ('service.submitTicket(LotteryTestUtils.createLotteryTicket("ant@bac.com",\n', 1), ('SingleSubscribeOn(SingleSource<?', 1), ('this.result', 1), ('SingleObserver<Integer>()', 1), ('assertUndeliverableTestException(List<Throwable>', 1), ('FlowableDoAfterNextTest', 1), ('(!rxdir.endsWith("/"))', 1), ('Class.forName(className);\n\n', 1), ("Letter('h'))));\n\n", 1), ('.onClose(\n', 1), ('cancelThrows()', 1), ('createDataSource()', 1), ('fileTreeChildren(File', 1), ('TreasureChestItemIterator(this,', 1), ('assertEquals((Integer)1,', 1), ('stores.add(store);\n', 1), ('GoF', 1), ('inMemoryDao', 1), ('DisposableObserver&lt;Integer&gt;()', 1), ('Hiroshi', 1), ('Observable.timer(1,', 1), ('fo.dispose();\n\n', 1), ('Collections.enumeration(values());\n', 1), ('dispose().', 1), ('.assertResult("12");\n', 1), ('field.getAndSet(CANCELLED);\n', 1), ('SimpleTroll}\n', 1), ('nullableReference)', 1), ('write1', 1), ('current.get();\n', 1), ('addresses', 1), ('now(@NonNull', 1), ('output.', 1), ('ts.request(10);\n\n', 1), ('Stream.of(streams).flatMap(stream', 1), ('ObserverResourceWrapper(Observer<?', 1), ('source.subscribe(mostRecentSubscriber);\n\n', 1), ('byte[][]', 1), ('nonCachingWithoutConstructorCheckValidator()', 1), ('promiseIsFulfilledWithAnExceptionIfTaskThrowsAnException()', 1), ('<p>Creates', 1), ('dao', 1), ('testBackpressureWithInitialValueObservable()', 1), ('wait();\n', 1), ('DematerializeObserver<T>', 1), ('"https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.toCompletable.png"\n', 1), ('io().shutdown();\n', 1), ('LocalDateTime.now().toString());\n', 1), ('OptionalInt#empty}', 1), ('java.net.UnknownHostException;\nimport', 1), ('MapTestSuiteBuilder.using(generator)\n', 1), ('.mergeWith(Maybe.<Long>empty());\n', 1), ('com.iluwatar.servicelayer.common;\n\nimport', 1), ('BooleanRunnable(Runnable', 1), ('https://github.com/ReactiveX/RxJava/issues/748#issuecomment-32471495\n', 1), ('filterFailHandlerThrowsConditional()', 1), ('MaybeFromCallableTest', 1), ('path.add(component);\n', 1), ('assertTrue(fo.isCancelled());\n\n', 1), ('DisposableObserver<U>', 1), ('p.getPrice().get()));\n', 1), ('testOnErrorExceptionIsThrownFromGroupBy()', 1), ('constructed,', 1), ('testIOScheduler()', 1), ('"FlowableFlatMapMaybe",\n', 1), ('achieved', 1), ('len2)', 1), ('MapMakerInternalMap\n', 1), ('Chow\n', 1), ('INPUTS_MASK', 1), ('small', 1), ('Task>', 1), ('noSince20InMaybe()', 1), ('remove(null)}.\n', 1), ('CompletableAmbTest', 1), ('subscriber.set(t);\n', 1), ('ms.test().assertResult(1);\n\n', 1), ('testCustomConverter()', 1), ('ImmutableMap.of(key,', 1), ('SkipLastTimedSubscriber<T>(s,', 1), ('dataSource.setURL(DB_URL);\n', 1), ('RxJavaPlugins.setOnCompletableLift(new', 1), ('toCompletable}', 1), ('FlowableInterval', 1), ('Consumer("Consumer_"', 1), ('DisposableHelper.isDisposed(resource.get());\n', 1), ('toArray(E[]', 1), ('returnType', 1), ('create(ThreadFactory', 1), ('builder.append("[").append(e.getKey()).append("', 1), ('execute.', 1), ('assertTrue(executor.isTerminated());\n', 1), ('reduceMaybeDoubleOnSubscribe()', 1), ('FinalizableReferenceQueueTest', 1), ('Comparable<Object>,', 1), ('no-op', 1), ('subscriber.onSubscribe(s2);\n\n', 1), ('Functions.identity().toString());\n', 1), ('disposeSelfPeriodic()', 1), ('setDefault(int.class,', 1), ('QueueSubscription<Object>', 1), ('worker.schedulePeriodically(new', 1), ('io.reactivex.internal.util;\n\n/**\n', 1), ('(doesWriterOwnThisLock())', 1), ('-3830916580126663321L;\n', 1), ('ScanSubscriber(Subscriber<?', 1), ('subtypeOf(componentType);\n', 1), ('update(Student', 1), ('numbers;\n', 1), ('resourceDisposedIfMapperCrashes()', 1), ('ListFeature(Feature<?', 1), ('(MenuAction)', 1), ('s2.dispose();\n', 1), ('FlowableSwitchMapCompletablePerf', 1), ('MaybeToFlowable<Object>(t);\n', 1), ('customers.add(customer3);\n', 1), ('Subscriptions.', 1), ('testedPrototype.toString());\n\n', 1), ('lastServedId', 1), ('precedent', 1), ('modes.contains(APPEND));\n', 1), ('#readerLock},', 1), ('Bob', 1), ('delegate.higherKey(checkValid(key));\n', 1), ('java.util.concurrent.atomic.AtomicLongArray;\n\n/**\n', 1), ('Undo', 1), ('UsingSubscriber(Subscriber<?', 1), ('scheduledExecutor);\n', 1), ('8));', 1), ('file.getCanonicalFile().getParentFile();\n', 1), ('RxJavaPlugins.setInitComputationSchedulerHandler(callable2scheduler);\n', 1), ('mock.assertLastMethodCalled("scheduleRunnable",', 1), ('scanForBadMethod(b,', 1), ('NON_STANDARD_TOSTRING,\n\n', 1), ('doOnSuccessCrash()', 1), ('MILLISECONDS);\n', 1), ('super(future);\n', 1), ('SingleHide<T>(this));\n', 1), ('https://github.com/ReactiveX/RxJava/pull/147#issuecomment-13624780\n', 1), ('FlowableTakeLastTimed<T>', 1), ('maintains', 1), ('e.getMessage()));\n', 1), ('RxJavaPlugins#setSingleSchedulerHandler(io.reactivex.functions.Function)}', 1), ('testCollectToListFlowable()', 1), ('enumClass.getMethod("valueOf",', 1), ('testFirstEmptyCollection()', 1), ('List<MenuAction>', 1), ('(stack.size()', 1), ('built', 1), ('QueueDisposable.BOUNDARY);\n', 1), ('collectAndLowercaseAndTrim', 1), ('removeInEdge(E', 1), ("Splitter.on(','))\n", 1), ('Comparator#compare}', 1), ('super.done();\n', 1), ('inherit', 1), ('RxJavaPlugins.getOnObservableCreate();\n//', 1), ('merely\n', 1), ('HashMultiset<Integer>', 1), ('"foobar.com");\n', 1), ('BufferedReader(\n', 1), ('entity.toString());\n\n', 1), ('Flyweight', 1), ('assertFalse(numbers1.equals(numbers3));\n', 1), ('Round', 1), ('CompletableMergeDelayErrorIterable', 1), ('"io.reactivex.internal.operators."', 1), ('biFunctionFail()', 1), ('Thread.sleep(5000L);\n', 1), ('newParameterizedTypeWithOwner(\n', 1), ('innerComplete(MergeInnerObserver', 1), ('receiver)', 1), ('IllegalArgumentException("parallelism', 1), ('fair.\n', 1), ('assertNull(ArbitraryInstances.get(NoDefaultConstructor.class));\n', 1), ('Case', 1), ('ConcatMapMaybeObserver(ConcatMapMaybeMainObserver<?,', 1), ('missingClosingDD(StringBuilder', 1), ('purposes.\n', 1), ('spellDao.findAll();\n', 1), ('suppressForEnumSet()', 1), ('RegularImmutableSortedSet}.\n', 1), ('-3852313036005250360L;\n\n', 1), ('System.out.println("testAsynchronousDrop', 1), ('getRawType()', 1), ('(compareAndSet(COMPLETE_MASK,', 1), ('PlayerDetails(doc.getString("email"),', 1), ('fhada");\n', 1), ('LineBufferTest', 1), ('isSynchronized()', 1), ('requested,\n', 1), ('CompoundOrdering<>(comparators);\n', 1), ('FirstTckTest', 1), ('prevProducerNode', 1), ('unescaped', 1), ('Observable.just(\n', 1), ('this.injector', 1), ('action.writeFile(writer);\n', 1), ('IntStream.range(6,', 1), ('SleepingRunnable(Runnable', 1), ('createMessage("me",', 1), ('verify(observer).onNext("test_value");\n', 1), ('harm', 1), ('ObjectHelper.requireNonNull(onErrorMapper.apply(e),', 1), ('HashMap}\n', 1), ('URL("file:///c:\\\\Documents', 1), ('parallel2);\n\n', 1), ('.take(500)\n', 1), ('ConsumerSingleObserver<T>(onSuccess,', 1), ('testGet_runnable()', 1), ('Built-in', 1), ('Collection<Supplier<PartyMember>[]>', 1), ('(PURGE_THREAD.compareAndSet(curr,', 1), ('NONE;\n\n', 1), ('Dispatcher.class.getDeclaredField("instance");\n', 1), ('ObjectHelper.requireNonNull(maybeSupplier.call(),', 1), ('assertThat(urls.get(3)).isEqualTo(new', 1), ('generateBigInteger()', 1), ('to1.assertNoValues();\n\n', 1), ('stripes[i]', 1), ('flush}\n', 1), ('assertEquals(cake.toString(),', 1), ('CompletableUsing<R>', 1), ('deltas;\n', 1), ('Wizard(String', 1), ('Queues.newLinkedBlockingDeque(11).remainingCapacity());\n', 1), ('"4",', 1), ('Subscription#request(long)}.', 1), ('unusual', 1), ('setImplementation(Executor.class,', 1), ('rangeObservable.subscribe(new', 1), ('pp.forEachWhile(new', 1), ('onCancel.run();\n', 1), ('guava', 1), ('Observable.just(1).test();\n', 1), ('deferredRequest(AtomicReference<Subscription>', 1), ('spc.onComplete();\n', 1), ('ThreadPoolExecutor}.', 1), ('recent', 1), ('child.onSubscribe(frc);\n\n', 1), ('componentClass;\n', 1), ('io.reactivex.internal.operators.observable.ObservableTimer.TimerObserver;\nimport', 1), ('statusMember.accept(startingData);\n', 1), ('CacheDisposable[0];\n\n', 1), ('Modifier.ABSTRACT)', 1), ('BiMap}</a>.\n', 1), ('Selenium', 1), ('blockingSubscribeConsumerConsumerError()', 1), ('method.invoke(null);\n', 1), ('System\n', 1), ('numbers.getNumbers().add(5);\n', 1), ('href="http://reactivex.io/documentation/operators/to.html">ReactiveX', 1), ('ParallelFilterSubscriber<T>(a,', 1), ('result[i].getDateList().size());\n', 1), ('annotations.\n', 1), ('}).toObservable());\n', 1), ('</blockquote>\n', 1), ('(rest.compareAndSet(current,', 1), ('super.createSource(string);', 1), ('ts.assertFailure(NullPointerException.class);\n', 1), ('").useForNull("null");\n\n', 1), ('ObjectHelper.requireNonNull(first,', 1), ('CompoundOrdering<T>', 1), ('error(EqualObserver<T>', 1), ('videoResource.getDetails(1);\n', 1), ('producer.produce();\n', 1), ('with.', 1), ('Flowable<TLeft>', 1), ('DoOnEachObserver<T>(t,', 1), ('DisposableHelper.set(d,', 1), ('delegate().tryLock();\n', 1), ('bufferHelper("\\r",', 1), ('SingleDoOnDispose<T>(this,', 1), ('}).subscribe(latchedObserver);\n', 1), ('false).onClose(()', 1), ('doAfter()', 1), ('arbiter.produced(1L);\n', 1), ('"bound', 1), ('String(stream.toByteArray()).contains(MESSAGE));\n', 1), ('actual.onSuccess(c);\n', 1), ('request(1)', 1), ('set(@NullableDecl', 1), ('errorMapper)', 1), ('Maybe.just(5)\n', 1), ('2).create()\n', 1), ('assertThat(drained).isAtMost(1);\n\n', 1), ('Optional<V>', 1), ('ComputationHolder', 1), ('precisely', 1), ('<p>would', 1), ('sub.events);\n', 1), ('SampleTimedNoLast(Subscriber<?', 1), ('MaybeDoOnEvent<T>(this,', 1), ('UnicastProcessor.<T>create(bufferSize);\n\n', 1), ('DoOnDisposeObserver<T>\n', 1), ('this.students;\n', 1), ('Request,', 1), ('ArbitraryInstances.get(ImmutableTable.class));\n', 1), ('delegate.equals(obj);\n', 1), ('Nobody', 1), ("Letter('r'),", 1), ('LimitTckTest', 1), ('fusedPollThrowsDelayError()', 1), ('this.actual.get();\n\n', 1), ('onBackpressureXXX', 1), ('onNext(Subscriber<?', 1), ('Promise<Map<Character,', 1), ('assertFalse(ArbitraryInstances.get(Equivalence.class).equivalent(1,', 1), ('getArrayClass(Class<?>', 1), ('maybe2observer', 1), ('1000).toList().toFlowable()\n', 1), ('signalAll()', 1), ('SingleDoAfterSuccessTest', 1), ('e);\n//', 1), ('mapperThrowsDelayError()', 1), ('TestCollidingSetGenerator()', 1), ('(++k', 1), ('elit', 1), ('#andThen(SingleSource)\n', 1), ('callback(String', 1), ('outputStreamClosed', 1), ('((AbstractNioChannel)', 1), ('administration;\n', 1), ('numStripes;\n\n', 1), ('JScrollPane', 1), ('expression.toString());\n', 1), ('both.add(at.next());\n', 1), ('assertFreshInstanceReturned(Random.class);\n', 1), ('schedule(\n', 1), ('timeUnit)', 1), ('flowableStart()', 1), ('"valueComparator', 1), ('Dixit\n', 1), ('constants;\n', 1), ('mapperThrows', 1), ('}});\n\n', 1), ('arrayFirstCancels()', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/never.png"', 1), ('*/\n@Retention(RetentionPolicy.CLASS)\n@Documented\n@Target({ElementType.METHOD,', 1), ('us.onNext(2);\n', 1), ('ArrayList<>(numStripes);\n\n', 1), ('R>(subscribers[i],', 1), ('TestHelper.checkDisposed(pp.singleElement().delay(100,', 1), ('typeVariableImpl;\n\n', 1), ('pattern.pattern();\n', 1), ('delegate().shutdown();\n', 1), ('onErrorResumeNext(Functions.justFunction(resumeSingleInCaseOfError));\n', 1), ('rxThreads)', 1), ('ThreadDeath}</li>\n', 1), ('mergeNAsyncStreamsOfN(final', 1), ('flowableBlockingSubscribe1()', 1), ('ZipSingleObserver[n];\n', 1), ('(int)(n', 1), ('Local', 1), ('"Deposit', 1), ('multicasts', 1), ('BufferExactBoundarySubscriber(Subscriber<?', 1), ('visitor\n', 1), ('FluentFuture\n', 1), ('Float', 1), ('ToFlowableIterator<T>(sources.iterator());\n', 1), ('meet', 1), ('is.requestMore(produced);\n', 1), ('"java.util.concurrent.");\n', 1), ('TypeToken<HashMultiset<String>>()', 1), ('result.substring(3);\n', 1), ('-8360547806504310570L;\n\n', 1), ('"Address",', 1), ('filterFalseConditional()', 1), ('CompletableObserveOn(CompletableSource', 1), ('(useMonitor', 1), ('Subscriber>', 1), ('InnerObserver(MergeObserver<T,', 1), ('OnErrorNotImplementedException(e);\n', 1), ('delegate.lowerEntry(checkValid(key));\n', 1), ('lastUnit;\n\n', 1), ('FileChannel#map(java.nio.channels.FileChannel.MapMode,\n', 1), ('BackpressureDropSubscriber<T>(s,', 1), ('other.subscribe(parent.boundaryObserver);\n\n', 1), ('Operation[]', 1), ('dedupe(String[]', 1), ('base.map(new', 1), ('producedMore()', 1), ('CompletableResumeNext(this,', 1), ('ImmutableBiMap}', 1), ('"c");\n\n', 1), ('checkFlowableBackpressure()', 1), ('this.initialRequest', 1), ('event.getMessage().equals(message));\n', 1), ('AssertionError}.\n', 1), ('byteSink.wasStreamClosed();\n', 1), ('Character(generateChar());\n', 1), ('structure,', 1), ('getChunkedReadable(input,', 1), ('Flowable.concatEager(Arrays.asList(\n', 1), ('#wrapTask(Callable)', 1), ('FlowableTakeUntil(Flowable<T>', 1), ('delegate.containsKey(key);\n', 1), ('((numbers', 1), ('getInnerGenerator()', 1), ('itself!",', 1), ('err[0].getMessage());\n\n', 1), ('DateFormatCallableTestMultiThread', 1), ('idToCustomer.remove(customer.getId())', 1), ('(tempDir.mkdir())', 1), ('NullPointerException("Test', 1), ('help\n', 1), ('listener.\n', 1), ('t8,', 1), ('suppressThrows;\n\n', 1), ('truncate\n', 1), ('Currency.class,\n', 1), ('Thread.sleep(5000);\n', 1), ('DisposableHelper.isDisposed(d.get());\n', 1), ('SubscriberCompletableObserver<T>(s);\n', 1), ('bufferHelper("mixed\\nline\\rendings\\r\\n",', 1), ('ob).subscribe(o);\n', 1), ('Bin', 1), ('ReduceObserver(MaybeObserver<?', 1), ('sender.\n', 1), ('(key.isAcceptable())', 1), ('last4.size());\n', 1), ('MaybeSource-like', 1), ('UsingSingleObserver(SingleObserver<?', 1), ('generateLongObject()', 1), ('(key.isReadable())', 1), ('retentionPolicy.value());\n', 1), ('less"', 1), ('crashRequest)', 1), ('toSingle(toFlowable().retryWhen(handler));\n', 1), ('asByteSource(File', 1), ('scheduler.triggerActions();\n', 1), ('error",', 1), ('CompletableTimeout(CompletableSource', 1), ("'f',", 1), ('n.substring(1);\n', 1), ('createNewThreadScheduler()', 1), ('(purgeEnabled)', 1), ('built.', 1), ('albumTitle', 1), ('normalMaybe()', 1), ('(optional', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/finallyDo.png"', 1), ('newReference(@NullableDecl', 1), ('expectedName', 1), ('Collections.emptySet();\n\n', 1), ('createSplit(Spliterator.OfLong', 1), ('Collections.unmodifiableSet(incidentEdgeMap.keySet());\n', 1), ('ResourceInfo.of(resource,', 1), ('assertSame(actual,', 1), ('lie', 1), ('FlowableScalarXMap', 1), ('.named("HashSet")\n', 1), ('worker3', 1), ('CallbackCompletableObserver\nextends', 1), ('mute(CheckedRunnable', 1), ('MERGE_LEFT_ASSOCIATIVE', 1), ('ObservableCollectSingle<T,', 1), ('#andThen(MaybeSource)\n', 1), ('tryAcquireSlot()', 1), ('19))));\n', 1), ('layers);\n', 1), ('(Field', 1), ('listIterator()', 1), ('followed\n', 1), ('serviceCache.get(serviceJndiName);\n', 1), ('dematerialize.subscribe(ts);\n\n', 1), ('.put(NavigableMap.class,', 1), ('s,\n', 1), ('unblocking\n', 1), ('MergeInnerObserver\n', 1), ('reduceWithCovariantObjectsObservable()', 1), ('(accounts.getOrDefault(sourceBackAccount,', 1), ('rangeObservableFlatMapJust(Blackhole', 1), ('list.remove(index);\n', 1), ('libero.', 1), ('WORKER;\n', 1), ('concatMapToObservableEmpty.subscribeWith(new', 1), ('suite.addTestSuite(ResourcesTest.class);\n', 1), ('FlowableEmitter\n', 1), ('refrain\n', 1), ('"\'Require\'', 1), ('RxJavaPlugins.createIoScheduler(factory);\n', 1), ('executeService.submit(reader1);\n\n', 1), ('mergeDelayError2()', 1), ('io.reactivex.observers.DisposableSingleObserver;\nimport', 1), ('AtomicReference.class,\n', 1), ('"maybe"', 1), ('thread,', 1), ('GwtIncompatible}.', 1), ('Timed', 1), ('add(AsyncDisposable<T>', 1), ('Object.class,\n', 1), ('org.apache.isis.core.specsupport.specs.CukeGlueAbstract;\n\nimport', 1), ('com.iluwatar.model.view.presenter;\n\nimport', 1), ('multimap,', 1), ('SingleFromPublisherTest', 1), ('volume', 1), ('selectAlbum(String', 1), ('FlowableAny(Flowable<T>', 1), ('delayIndicator\n', 1), ('arrayCancelRace()', 1), ('ArrayList<>(super.createDerivedSuites(parentBuilder));\n\n', 1), ('checkDoubleOnSubscribeCompletable(Function<Completable,', 1), ('java.lang.reflect.Modifier;\n\nimport', 1), ('(32', 1), ('dep', 1), ('dependentPromiseIsFulfilledAfterTheFunctionTransformsTheResultOfThisPromise()', 1), ('objects:\n', 1), ('rmo.add(null);\n', 1), ('singleton(e4()),\n', 1), ('(EventObserver', 1), ('list.get(i).get();\n', 1), ('superclass);\n', 1), ('org.springframework.context.support.ClassPathXmlApplicationContext;\nimport', 1), ('sa.drainLoop();\n', 1), ('poll().\n', 1), ('java.net.SocketAddress;\nimport', 1), ('multimapView;\n', 1), ('PathCharSinkFactory(@NullableDecl', 1), ('com.iluwatar.hexagonal.domain.PlayerDetails;\nimport', 1), ('build();\n', 1), ('WildcardTypeImpl(Type[]', 1), ('D>(observer,', 1), ('Reflection.newProxy(\n', 1), ('RxJavaPlugins.onAssembly(ObjectHelper.requireNonNull(composer,', 1), ('outEdgeMap).values());\n', 1), ('(GWT).', 1), ('(Heavy)', 1), ('LOGGER.debug("Resetting', 1), ('dtoUsers)', 1), ('Flowable.just(horrors);\n', 1), ('PerfSubscriber(Blackhole', 1), ('isEmpty().\n', 1), ('IllegalStateException("This', 1), ('LinkedHashMultimap}.\n', 1), ('FetchException.class,', 1), ('generateListMultimap(key,', 1), ('doubleOnSubscribe(SingleObserver<?>', 1), ('MissingBackpressureException()', 1), ('ResourceInfo', 1), ('random.', 1), ('takeUntil(MaybeSource<U>', 1), ('Initialization', 1), ('System.getSecurityManager();\n', 1), ('SHUTDOWN', 1), ('b.indexOf("<dt><b>Scheduler:</b></dt>",', 1), ('currConsumerNode.lvNext();\n', 1), ('benefit', 1), ('operation;\n\n', 1), ('1.5', 1), ('fringilla', 1), ('result1', 1), ('LinkedBlockingDeque<Object>(10),\n', 1), ('ImmutableMultimap<K,', 1), ('Executors.newFixedThreadPool(poolSize);\n', 1), ('commitDelete();\n', 1), ('FlatMapSingleObserver(Observer<?', 1), ('merge1SyncStreamOfN(final', 1), ('com.iluwatar.hexagonal.banking;\n\nimport', 1), ('out.toByteArray();\n', 1), ('visited;\n', 1), ('times(3)).onNext(anyInt());\n', 1), ('RxJavaPlugins.setOnConnectableObservableAssembly(new', 1), ('violation.\n', 1), ('DoubleBuffer.class,\n', 1), ('Turns', 1), ('Author', 1), ('(reply.getLength()', 1), ('DisposableHelper.dispose(ref);\n\n', 1), ('ab,', 1), ('lazySet(n);\n', 1), ('constructor.setAccessible(true);\n\n', 1), ('create(elements);\n', 1), ('Apples,', 1), ('#getValues(Object[])}.\n', 1), ('assertNotNull(byId);\n', 1), ('jsp.setPreferredSize(new', 1), ('ClassPathUtil', 1), ('SequentialDisposableTest', 1), ('converter.', 1), ('PathByteSinkFactory(@NullableDecl', 1), ('ObservableSkipLastTimed(ObservableSource<T>', 1), ('ImmutableMap.this.isPartialView();\n', 1), ('Schedulers#trampoline()', 1), ('external(Blackhole', 1), ('testStringConverter_nullPointerTester()', 1), ('multisets.clear();\n', 1), ('onCompleteCrashes()', 1), ('(((a', 1), ('checkNotNull(from);\n', 1), ('DoFinallyObserver(SingleObserver<?', 1), ('Concurrent', 1), ('"rx2.newthread-priority";\n\n', 1), ('(readable', 1), ('RxJavaPlugins#setIoSchedulerHandler(io.reactivex.functions.Function)}', 1), ('OnCompleteSubscriber());\n', 1), ('root.', 1), ('AppConfig.class', 1), ('getJavaChannel()).configureBlocking(false);\n', 1), ('tenantCallsCount.get(tenantName).incrementAndGet();\n', 1), ('accumulate', 1), ('DisposableHelper.replace(parent.task,', 1), ('value.get()', 1), ('secure', 1), ('(entries.hasMoreElements())', 1), ('file2.length();\n', 1), ('DebounceSubscriber(Subscriber<?', 1), ('FlowableSerialized(Flowable<T>', 1), ('Pisa', 1), ('DisposeObserver());\n', 1), ('eight-bit', 1), ('dr.direct.replace(scheduleDirect(dr));\n', 1), ('handleChannelRead(AbstractNioChannel', 1), ('containers.\n', 1), ('Ordering.natural();\n}\n', 1), ('value.get();\n', 1), ('assertTrue(SubscriptionHelper.setOnce(ref,', 1), ('ImmutableSet.of(outerValue);\n', 1), ('*/\n@Service\n@Transactional\npublic', 1), ('TestHelper.assertBadRequestReported(Flowable.generate(new', 1), ('timedRunnable', 1), ('FutureObserverTest', 1), ('producerThread.cancel(true);\n', 1), ('delayMillis\n', 1), ('dtm;\n', 1), ('decodingStream(int', 1), ('unit.accept(visitor);\n', 1), ('details,', 1), ('data.getDataBus().publish(MessageData.of(String.format("Goodbye', 1), ("'[]'", 1), ('simpleEmpty()', 1), ('SortedSetTestSuiteBuilder.using(\n', 1), ('this.reader', 1), ('fusionRejected()', 1), ('ResumeMainSingleObserver<T>(s,', 1), ('logging\n', 1), ('assertTrue(list.equals(list2));\n\n', 1), ('s.doOnDispose(Functions.EMPTY_ACTION);\n', 1), ('assertNull(doc.get(1,', 1), ('delegate().isTerminated();\n', 1), ('createArray(elements.length);\n', 1), ('implementations.get(type);\n', 1), ('CompletableAmb(CompletableSource[]', 1), ('behavioral', 1), ('checkNotNull(mergeFunction);\n', 1), ('ObservableRepeatUntil<T>', 1), ('sameSizeReverse()', 1), ('TestStringMapGenerator', 1), ('LOGGER.info("Saving', 1), ('CustomerClientApp', 1), ('below.\n', 1), ('unbounded()', 1), ('(TearDown', 1), ('PerfObserver', 1), ('RxJavaPlugins.initIoScheduler(null);\n', 1), ('io.reactivex.Completable}-based', 1), ('dq.clear();\n', 1), ('FlowableTimeoutTimed<T>', 1), ('affects\n', 1), ('(enabled)', 1), ('com.google.common.util.concurrent.FuturesGetChecked.weakSetValidator;\n\nimport', 1), ('negativeCount()', 1), ('r3', 1), ('Spliterator.SUBSIZED);\n', 1), ('Thread.sleep(500);\n', 1), ('unsubscription.",', 1), ('raf', 1), ('subscribers.getAndSet(CANCELLED);\n', 1), ('testForEachOrder()', 1), ('SingleFromPublisher(Publisher<?', 1), ('delegate.schedule(wrapTask(command),', 1), ('accurate', 1), ('#create(CompletableOnSubscribe)\n', 1), ('#mergeArrayDelayError(CompletableSource...)}', 1), ('ConcatWithMaybeTckTest', 1), ('.named("unmodifiableSet/HashSet")\n', 1), ('(of', 1), ('.filter(negatives())\n', 1), ('RandomNumberGenerator(int', 1), ('commit.\n', 1), ('lost', 1), ('left.getName().compareTo(right.getName());\n', 1), ('FlowableReduceMaybe(Flowable<T>', 1), ('TestWriter(TestOutputStream', 1), ('onNext*', 1), ('entity.setId(expectedId);\n', 1), ('assertTrue(ArbitraryInstances.get(LinkedList.class).isEmpty());\n', 1), ('FlowableConcatMapSingle(Flowable<T>', 1), ('ImmutableMap.<String,', 1), ('"Implementation', 1), ('"read").newPermissionCollection();\n', 1), ('lectus', 1), ('.containsExactly(fullpath("base/with/relative.jar"));\n', 1), ('this.crashOnSubscribe', 1), ('items.size());\n\n', 1), ('User("Tom",', 1), ('arg1', 1), ('command.execute(target);\n', 1), ('ImmutableSortedMap<Object,', 1), ('ArbitraryInstances.get(double.class));\n', 1), ('actions.\n', 1), ('verify(observer).onError(throwable);\n', 1), ('Resources.asByteSource(getFile().toURI().toURL());\n', 1), ('Arrays.asList(wheelProperties,', 1), ('SubscriptionHelper.validate(n);\n', 1), ('MaybeRetryTest', 1), ('"Gopi",', 1), ('"Files.asByteSource("', 1), ('Flowable.empty().onTerminateDetach().subscribe(ts);\n\n', 1), ('members)', 1), ('Reflection.initialize(\n', 1), ('effect\n', 1), ('checkInvalidParallelSubscribers(ParallelFlowable<T>', 1), ('NewThreadTask', 1), ('assertThat(urls.get(2).getProtocol()).isEqualTo("file");\n', 1), ('MaybeToFlowable<U>(composer.apply(pp.singleElement())).subscribe(ts);\n', 1), ('expectedThreadName)\n', 1), ('FILE_TREE_TRAVERSER', 1), ("Letter('a'),", 1), ('charset).readLines(callback)}.', 1), ('simultaneously', 1), ('Arrays.equals(getActualTypeArguments(),', 1), ('derivedFeatures.addAll(features);\n', 1), ('ObservableSwitchMapCompletableTest', 1), ('(onError|onComplete)?\n', 1), ('innerComplete(InnerQueuedSubscriber<R>', 1), ('Schedulers.io();\n', 1), ('.filter(Functions.alwaysFalse())\n', 1), ('exceptions");\n', 1), ('897683679971470653L;\n\n', 1), ('SimpleFluentIterable<E>', 1), ('Flowable},', 1), ('<p>These', 1), ('comparer', 1), ('assertNull(RxJavaPlugins.onCompletableError(null));\n//\n//', 1), ('initThreeCopies();\n', 1), ('abilities', 1), ('keySet}', 1), ('assertFalse(fs.isCancelled());\n\n', 1), ('IllegalArgumentException("unsafeCreate(Single)', 1), ('FlowableTransformer<T,', 1), ('m.doOnEvent(new', 1), ('io.reactivex.internal.fuseable;\n', 1), ('coordinator', 1), ('supertype', 1), ('15/12/2015', 1), ('consumedOne(boolean', 1), ('*/",\n', 1), ('PathByteSourceFactory', 1), ('TODO(user):', 1), ('TypeToken<ImmutableSortedMultiset<String>>()', 1), ('pendingWrites.poll();\n', 1), ('upstream.request(toRequest);\n', 1), ('entries.next();\n', 1), ('Shared', 1), ('BlockingFlowableIterable<T>', 1), ('checkDoubleOnSubscribeCompletableToMaybe(Function<Completable,', 1), ('"two', 1), ('estimateSize()', 1), ('callable2scheduler', 1), ('postVisitDirectory(Path', 1), ('StackOverflowError();\n', 1), ('TreeSet<>();\n', 1), ('CacheDisposable<T>(s,', 1), ('ballThread.setTwin(mock(BallItem.class));\n', 1), ('checkNext', 1), ('Messenger\n', 1), ('ClusterException.create(exceptions);\n', 1), ('backend', 1), ('RainbowFishSerializer()', 1), ('isAnnotationPresent(Class<?', 1), ('"April"),\n', 1), ('z},', 1), ('t1.toString());\n', 1), ('user)', 1), ('timed.dispose();\n', 1), ('Student(2,', 1), ('setOnceTwice()', 1), ('AsyncResult<Long>', 1), ('customer,', 1), ('accounts.get(accountNo);\n', 1), ('queueSubscriptionInsteadOfQueueFuseable()', 1), ('classpath', 1), ('contentActions.size());\n', 1), ('CompletableNever();\n\n', 1), ('-\n', 1), ('testFailure()', 1), ('accept(double', 1), ('(group', 1), ('checkNotNull(incidentEdgeMap);\n', 1), ('com.google.common.util.concurrent.MoreExecutors.directExecutor;\n\nimport', 1), ('"resumeSingleInCaseOfError', 1), ('behind\n', 1), ('shadowLoaderReference', 1), ('testInterrupt_doesNotStopExecution()', 1), ('(item', 1), ('ac;\n\n', 1), ('allTests.nextElement();\n', 1), ('(LinkageError)', 1), ('"\\n"\n', 1), ('mock(Unit.class));\n\n', 1), ('disposable.\n', 1), ('findPattern("TestObserver<.*>\\\\s+ts");\n', 1), ('Emitter\n', 1), ('#testUnhandledErrorIsDeliveredToThreadHandler},', 1), ('CompletableConverter<?', 1), ('cakeLayerInfos;\n\n', 1), ('partial', 1), ('Function)}', 1), ('handler",', 1), ('testShutdown()', 1), ('FileWriterAction()', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.flatMapPublisher.png"', 1), ('Comparable<E>>\n', 1), ('ISO-8859-1:', 1), ('putInstance(Class<T>', 1), ('materialized.subscribe(lio);\n', 1), ('DelaySubscription(s));\n', 1), ('.interval(1,', 1), ('generateTreeBasedTable(R', 1), ('inUse.remove(instance);\n', 1), ('equivalence,\n', 1), ('CompletableFromUnsafeSource', 1), ('copy(from,', 1), ('layers', 1), ('Objects}</a>.\n', 1), ('builder.append((char)', 1), ('10:53', 1), ('interfaceMethodCalled(Class<?>', 1), ('reliably', 1), ('OnSuccess', 1), ('In(),', 1), ('SHUTDOWN;\n', 1), ('tester.testEquals();\n', 1), ('writer.append("', 1), ('CompletableFromUnsafeSource(CompletableSource', 1), ('lastInitialDelay;\n', 1), ('#toSingle(Object)}', 1), ('docToTicket(results.get(0));\n', 1), ('EnumMap<>(PotionType.class);\n', 1), ('crunching\n', 1), ('.named("badly', 1), ('overflow', 1), ('futures.add(pool.submit(new', 1), ('sorted.\n', 1), ('(SocketChannel)', 1), ('AmbInnerSubscriber<T>', 1), ('testReadLines_withLineProcessor()', 1), ('sources[1]', 1), ('ConnectableObservable}.\n', 1), ('isEqual);\n', 1), ('ImmutableSortedMultiset.of(freshElement);\n', 1), ('all,', 1), ('create(Entry<AnEnum,', 1), ('De-multiplexing.\n', 1), ('source.subscribe(inner);\n\n', 1), ('instead.\n\n', 1), ('parent.innerComplete(value);\n', 1), ('PriorityQueue', 1), ('ConcatArrayEagerTckTest', 1), ('it.iterator();\n\n', 1), ('flowMaybe(Blackhole', 1), ('.append(".lt(")\n', 1), ('Completable.concatArray(new', 1), ('"onComplete"', 1), ('CharSource()', 1), ('CompletableMerge(Publisher<?', 1), ('subject.subscribe(new', 1), ('DwarvenCartOperator());\n', 1), ('failComputationObservableBlockingIterable()', 1), ('testExecute(DragonSlayingStrategy', 1), ('LotteryConstants.SERVICE_BANK_ACCOUNT_SALDO);\n', 1), ('SkipLastSubscriber<T>', 1), ('shutdown\n', 1), ('Queue<File[]>', 1), ('application\n', 1), ('PathByteSourceFactory();\n', 1), ('Thread.sleep(200);', 1), ('enumerate()', 1), ('EMPTY_GENERATORS.get(rawType);\n', 1), ("'getInstance'", 1), ('java.util.function.Function<F,', 1), ('error(Functions.justCallable(exception));\n', 1), ("Letter('W'),", 1), ('to.assertValueSequence(list);\n', 1), ('byte[0];\n', 1), ('course,', 1), ('.put(Collection.class,', 1), ('SimpleAppSystemInitializer.initIsft();\n\n', 1), ('variable");\n', 1), ('justo', 1), ('Functions.<Throwable>emptyConsumer(),', 1), ('nextSubscriber);\n', 1), ('java.util.concurrent.BlockingQueue;\n\nimport', 1), ('delegate.invokeAny(tasks);\n', 1), ('HasUpstreamPublisher<T>,', 1), ('CompletableDelay', 1), ('resumeErrors()', 1), ('unsubscribe");\n', 1), ('1).append(")\\r\\n\\r\\n");\n\n', 1), ('ConnectableFlowable<T>', 1), ('TestHelper.checkDisposed(Completable.create(new', 1), ('assertEquals(ImmutableSet.of(new', 1), ('ParallelPeekTest', 1), ('assertNotSame(Single.never(),', 1), ('ArbitraryInstances.get(Collection.class));\n', 1), ('System.out.print(j);\n', 1), ('serializable()', 1), ('SingleUnsubscribeOnTest', 1), ('servers.', 1), ('finalAccum', 1), ('ExceptionHelper.wrapOrThrow(errors[0]);\n', 1), ('Joshua', 1), ('WrappingScheduledExecutorService(ScheduledExecutorService', 1), ('interrupt\n', 1), ('Observable.range(1,num).doOnNext(new', 1), ('exception",', 1), ('s);\n}\n', 1), ('biconsumerError()', 1), ('(":"', 1), ('io.reactivex.internal.schedulers.SingleScheduler;\nimport', 1), ('(int)elements).doAfterNext(Functions.emptyConsumer())\n', 1), ('temporaryList.add(function.apply(iterator.next()));\n', 1), ('car");\n\n', 1), ('assertEquals(OptionalLong.empty(),', 1), ('assertNull(ArbitraryInstances.get(ParentClassHasConstant.class));\n', 1), ('anytime', 1), ('io.reactivex.functions.*;\n\n@SuppressWarnings("rawtypes")\npublic', 1), ('ExceptionHelperTest', 1), ('FluentFuture.from(indexService.lookUp(query));\n', 1), ('Observer<U>,', 1), ('registerDeleted(Student', 1), ('io.reactivex.internal.operators.observable.ObservableReduceSeedSingle.ReduceSeedObserver;\n\n/**\n', 1), ('java.nio.charset.StandardCharsets#ISO_8859_1}', 1), ('Implements', 1), ('program,', 1), ('bufferHelper("\\ra\\r\\n\\n\\r\\r",', 1), ('request()', 1), ('mo.onSubscribe(d);\n\n', 1), ('JButton', 1), ('Instance', 1), ('1000).toMap(Functions.<Integer>identity()).toFlowable()\n', 1), ('clazz));\n', 1), ('generateBoolean()', 1), ('interfaceType.getClassLoader(),', 1), ('get(THREAD_INDEX)', 1), ('.first()\n', 1), ('assertEquals(TestEnum.POODLE,', 1), ('#named})', 1), ('ImmutableSortedMap\n', 1), ('100).scan(0,', 1), ('sourceCode.indexOf("}",', 1), ('(List<Map<String,', 1), ('SimpleMessageQueue', 1), ('Future},', 1), ('TreasureChest}\n', 1), ('ObservableSwitchMapMaybePerf', 1), ('SkipWhileTckTest', 1), ('up.hide()\n', 1), ('Collection<T>', 1), ('Sets.newHashSet(v0()));\n', 1), ('SubscriberCompletableObserver(Subscriber<?', 1), ('approaches', 1), ('connectableFlowableAsCo()', 1), ('ConsumerSingleObserver<T>\nextends', 1), ('aFile;\n', 1), ('r.get())', 1), ('Joiner.on(generateString());\n', 1), ('SHUTDOWN.shutdown();\n\n', 1), ('ConcatTckTest', 1), ('others[i].subscribe(observers[i]);\n', 1), ('NonCachingWithoutConstructorCheckValidator', 1), ('Harry', 1), ('assertNull(RxJavaPlugins.onAssembly((ConnectableFlowable)null));\n\n', 1), ('Queue.class,\n', 1), ('FromIterableDisposable(Observer<?', 1), ('Collections#singleton(Object)}', 1), ('Boolean.class,\n', 1), ('qs.requestFusion(ANY);\n\n', 1), ('turns', 1), ('(purgeEnable', 1), ('IdentityProcessorVerification<Integer>', 1), ('assertTrue(b.get());\n', 1), ('threading', 1), ('o.unit);\n', 1), ('charset).copyTo(to)}.', 1), ('attempted', 1), ('soldierResponse', 1), ('ArrayCompositeDisposable(int', 1), ('mar', 1), ('conditions,', 1), ('keySet\n', 1), ('information,', 1), ('undoStack', 1), ('assertThat(resource.getResourceName()).doesNotContain("com/google/common/reflect/");\n', 1), ('allLayers', 1), ('Parallel', 1), ('customerId,', 1), ('changeOps(SelectionKey', 1), ('checkNotNull(listener);\n', 1), ('modulo', 1), ('errorConsumer', 1), ('crashing', 1), ('TestHelper.checkDoubleOnSubscribeCompletableToFlowable(new', 1), ('assertFalse(s1.isCancelled());\n\n', 1), ('checkNotNull(future);\n', 1), ('evictedGroup.onComplete();\n', 1), ('ArbitraryInstances.get(OptionalDouble.class));\n', 1), ('addValue(value);\n\n', 1), ('"c"};\n\n', 1), ('"c"),\n', 1), ('properties.getProperty("mongo-host");\n', 1), ('emptyArrayForContents,', 1), ('AssertionError("not', 1), ('guardedQueue.put(20);\n', 1), ('ofType(final', 1), ('inherited.",', 1), ('verify(sub).request(1);\n', 1), ('readFile(InputStream', 1), ('throttle', 1), ('value)}.\n', 1), ('assertEquals(""', 1), ('Iterable<TestOption>', 1), ('someday.', 1), ('de-multiplexing', 1), ('.put(Type.class,', 1), ('latter', 1), ('MaybeObserver}.\n', 1), ('anchor.click();\n', 1), ('v4));\n', 1), ('NO_REQUEST;\n', 1), ('directory");\n', 1), ('assertEquals("Second",', 1), ('o).pattern);\n', 1), ('bufferSize())', 1), ('interruptible\n', 1), ('==}', 1), ('Weather()', 1), ('setImplementation(Runnable.class,', 1), ('ServerSocketChannel}', 1), ('otherSource.subscribe(other);\n', 1), ('AbstractDocumentTest', 1), ('Utility.downloadFile(urlString);\n', 1), ('BinaryOperator)}', 1), ('.put("2', 1), ('io.reactivex.internal.operators.flowable.FlowableGroupJoin.*;\nimport', 1), ('rng', 1), ('merge0(Publisher<?', 1), ('run.get(ScheduledRunnable.FUTURE_INDEX));\n\n', 1), ('ParameterizedTypeImpl(@NullableDecl', 1), ('tickets.keySet())', 1), ('SubscriptionCancelThrows());\n\n//', 1), ('schedule()}\n', 1), ('weather);\n', 1), ('aFile', 1), ('ArrayListMultimap<>(multimap);\n', 1), ('setLayout(new', 1), ('ObservableConcatWithCompletable(Observable<T>', 1), ('CrashingMappedIterable<T>', 1), ('file-level', 1), ('Flowable<Flowable<HorrorMovie>>', 1), ('ImmutableEnumMap)', 1), ('Flowable.zip(\n', 1), ('Proceed', 1), ('SimpleFluentIterable.fromCopyOf(integerList).filter(positives()).last(2).asList();\n', 1), ('com.google.errorprone.annotations.concurrent.GuardedBy;\nimport', 1), ('8).equals("MaybeObserver"))', 1), ('Supplier<Lock>()', 1), ('getTypeName()', 1), ('testNoOpScheduledExecutor()', 1), ('BY_FIELD_NAME', 1), ('G,', 1), ('List<Disposable>', 1), ('Ordering<Object>', 1), ('int[nKeys];\n', 1), ('IS\\"', 1), ('above).', 1), ('mostRecentObserver', 1), ('assertFalse(mo.isDisposed());\n\n', 1), ('filterConditionalNoError()', 1), ('RxJavaPlugins.setErrorHandler(errorHandler);\n\n', 1), ('context.get(operation);\n', 1), ('is.dispose();\n\n', 1), ('MaybeToObservable<T>(this));\n', 1), ('DoAfterTerminateObserver<T>(s,', 1), ('mergeArrayInnerErrorRace()', 1), ('non-root', 1), ('comparable', 1), ('resultSet.getString("LNAME"));\n', 1), ('8:22', 1), ('Functions.REQUEST_MAX);\n\n', 1), ('Delayed', 1), ('handler.getStoredLogRecords().get(0);\n', 1), ('.flatMapSingle(Functions.justFunction(Single.just(2)))\n', 1), ('com.google.common.collect.testing.testers.ListAddTester.getAddSupportedNullPresentMethod;\nimport', 1), ('FlowableMapNotification(\n', 1), ('"Eclipse', 1), ('8081,', 1), ('testOnEvent()', 1), ('RxThreadFactory("RxSchedulerPurge"));\n', 1), ('q.take();\n', 1), ('testToToByteArray()', 1), ('GroupByTckTest', 1), ('Optional<List<Map<String,', 1), ('present.', 1), ("'@'", 1), ('SingleConcatTest', 1), ('getAvailableCurrencies()', 1), ('fromActionDisposed()', 1), ('java.util.ServiceConfigurationError;\nimport', 1), ("'/');\n\n//", 1), ('testFileTraverser_multipleFilesAndDirectories()', 1), ('IncrementingIterable', 1), ('s.subscribe(parent);\n', 1), ('generateFresh(TypeToken<?>', 1), ('DoFinallyObserver(Observer<?', 1), ('97,', 1), ('mapMaker.useCustomMap', 1), ('toByteArray', 1), ('completableSupplier;\n\n', 1), ('testTimeMs()', 1), ('requests!"));\n', 1), ('timeout.\n', 1), ('":.txt"}', 1), ('testSortedListWithCustomFunction()', 1), ('innerWrapper;\n', 1), ('testImmutableSortedMap()', 1), ('assertGoodTesterAnnotation(asAnnotation(containedClass));\n', 1), ('this.mask', 1), ('rso.onSuccess(1);\n\n', 1), ("StringBuilder(prefix).append('-').append(incrementAndGet());\n\n//", 1), ('SPSC', 1), ('times(1)).onNext("123");\n', 1), ('injector.injectMembers(this);\n', 1), ('flowableCancelDelayed()', 1), ('idf', 1), ('EvictionAction(Queue<GroupedUnicast<K,', 1), ('this.b', 1), ('FlowableScanSeed(Flowable<T>', 1), ('ConnectableObservable<?', 1), ('CI\n', 1), ('hashFunction)', 1), ('Class}', 1), ('WithExceptionalConstructor(String', 1), ('Collections.addAll(\n', 1), ('mapFailHandlerThrows()', 1), ('(itrA.hasNext()', 1), ('ServerSocketChannel.open());\n', 1), ('"/home/build/x', 1), ('..,', 1), ('reactor;\n', 1), ('})))\n', 1), ('Proxy.getInvocationHandler(obj)', 1), ('Flowable<ArrayList<Integer>>>()', 1), ('(valueComparator', 1), ('Functions.toFunction(function3);\n', 1), ('Futures.catchingAsync(this,', 1), ('CompletableFromPublisher<T>(publisher));\n', 1), ('com.google.common.collect.testing.Helpers.assertEqualIgnoringOrder;\nimport', 1), ('idToCustomer.put(customer.getId(),', 1), ('removed,', 1), ('persists', 1), ('merge/concat', 1), ('Class.getClassLoader()\n', 1), ('ObservableSkipLastTimed<T>', 1), ('queries[i]', 1), ('(!hasNext())', 1), ('innerError));\n', 1), ('assertTestException(List<Throwable>', 1), ('FlowableErrorHandlingTests', 1), ('(BrokenBarrierException', 1), ('parent.onSuccessCall.accept(value);\n', 1), ('Collections.unmodifiableList(items);\n', 1), ('Observer<T>()', 1), ('LinkedHashSet<>();\n\n', 1), ('(add(d))', 1), ('String.class,\n', 1), ('name.hashCode();\n', 1), ('submitted\n', 1), ('href="http://download.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/package-summary.html#Spurious">\n', 1), ('SUBMAP,\n', 1), ('fromIterator.hasNext()', 1), ('EnumSet.allOf(enumClass))', 1), ('assertFalse(unsubscribed.get());\n', 1), ('Objects()', 1), ('file1.length();\n', 1), ('delegate.containsValue(value);\n', 1), ('mock,', 1), ('multicasted', 1), ('range(Blackhole', 1), ('ds.isCancelled());\n', 1), ('.transform(ActivityService::isLoggedIn,', 1), ('qd.clear();\n', 1), ('UnsupportedAudioFileException,', 1), ('testLinkedHashMultimap()', 1), ('DoFinallyTckTest', 1), ('mainCompletesWhileInnerActive()', 1), ('clarity.\n', 1), ('entrySpliterator()', 1), ('FutureSingleObserver()', 1), ('SafeTreeMap(SortedMap<K,', 1), ('Iterable<String>()', 1), ('elit,', 1), ('andThenMaybeNull()', 1), ('sizeOfPopulatedStriped', 1), ('ObservableAmb<T>', 1), ('(compareAndSet(NO_REQUEST,', 1), ('His', 1), ('ObservableAny<T>', 1), ('non-empty', 1), ('"combiner', 1), ('(Callable<U>)ArrayListSupplier.asCallable());\n', 1), ('QueueDisposable.requestFusion', 1), ('Amb(AtomicBoolean', 1), ('verify(observer).onNext(1', 1), ('nextCancelRaceBackpressured()', 1), ('12:27', 1), ('scalarXMap(T', 1), ('commitDelete()', 1), ('add(E...', 1), ('assertEquals(expectedValue,', 1), ('Completable.complete().subscribe(rco);\n\n', 1), ('getAddNullUnsupportedMethod(),\n', 1), ('java.util.StringJoiner;\nimport', 1), ('filter},\n', 1), ('MapMaker();\n', 1), ('WindowOperation<Object,', 1), ('ds.subscribeTo(Flowable.range(1,', 1), ('InputStreamReader(System.in));\n', 1), ('subscribeThrows()', 1), ('testDecoupledLoader()', 1), ('UnsignedInteger.class,\n', 1), ('ParallelPeekSubscriber<T>', 1), ('Arrays.asList(2,', 1), ('m.javadoc.indexOf("</dd>",', 1), ('EndConsumerHelper()', 1), ('Subscriber.onError', 1), ('FlowableConcatMapSinglePerf', 1), ('CompletableDefer', 1), ('ps.onError(ex);\n', 1), ('cancelAfterFirstDelayError()', 1), ('Nazgul(NazgulName', 1), ('(line.contains("@since")', 1), ('(schhedulerSpec', 1), ('inherited', 1), ('prototype.get(stat);\n', 1), ('customerDao.update(customer);\n', 1), ('.put(ImmutableTable.class,', 1), ('to.values().get(0);\n', 1), ('details2', 1), ('TransformedIterator<Entry<Class<?', 1), ('concurrently,', 1), ('strategy)', 1), ('resetState()', 1), ('charset).readLines(callback);\n', 1), ('(crashRequest)', 1), ('Observable.fromArray(array);\n', 1), ('somehow', 1), ('arity', 1), ('throwIf(OPEN_THROWS);\n', 1), ('ObservableDelay(ObservableSource<T>', 1), ('readers;\n', 1), ('observable2observable', 1), ('"error.txt";\n\n', 1), ('immediateFuture(""),', 1), ('spellbooks.add(spellbook);\n', 1), ('mainDoubleOnError()', 1), ('Function<F,', 1), ('user.getLastName(),', 1), ('scheduledExecutor', 1), ('isAt()', 1), ('ArbitraryInstances.get(UnsignedLong.class));\n', 1), ('"B.B.2"),', 1), ('altering', 1), ('provide\n', 1), ('operator.apply(s);\n\n', 1), ('NATURAL_ORDER', 1), ('"+32425255",', 1), ('c.request(-10);\n\n', 1), ('TestHelper.checkDisposed(Observable.just(1).throttleFirst(1,', 1), ('calculated', 1), ('Maybe.amb(ms)\n', 1), ('BackpressureSupport', 1), ('testAggregateAsIntSumAccumulatorThrows()', 1), ('FiniteRangeIterator(end);\n', 1), ("');\n", 1), ('descendingMap().navigableKeySet();\n', 1), ('FlowableTimeoutTimed(Flowable<T>', 1), ('syncb', 1), ('byte[length];\n', 1), ('MongoTicketRepository(String', 1), ('once.', 1), ('wizardDao.findAll();\n', 1), ('testElementAtObservable()', 1), ('LongBuffer.allocate(generateInt());\n', 1), ('ArbitraryInstances.get(Direction.class));\n', 1), ('CompletableOnErrorComplete(this,', 1), ('converter.reverse().convert(TestEnum.HONDA));\n', 1), ('Unicode', 1), ('featuresList,\n', 1), ('Single.just(++counter);\n', 1), ('io.reactivex.internal.fuseable.HasUpstreamObservableSource;\n\npublic', 1), ('CompletableCache(this));\n', 1), ('(!(o', 1), ('Collections.emptyList().iterator();\n', 1), ('AtomicReference<CompletableDisposable[]>(EMPTY);\n', 1), ('bufferHelper("\\r\\r",', 1), ('COMMA_JOINER', 1), ('subscriber.assertResult("");\n', 1), ('convertDatesToString(result[i]);\n', 1), ('timedEmpty()', 1), ('System.out.println("DTO', 1), ('RegularImmutableList<E>', 1), ('CompletableError(Throwable', 1), ('BlockingQueue', 1), ('identically\n', 1), ('OptionalLong#empty}', 1), ('ServiceCache()', 1), ('getDisposableShouldReturnset()', 1), ('MaybeToPublisher', 1), ('ReflectionTest', 1), ('FreshValueGenerator().generateFresh(Object.class));\n', 1), ('options;\n', 1), ('ToListObserver(Observer<?', 1), ('boy', 1), ('"ObservableFromPublisher"\n', 1), ('this.throttlePeriod', 1), ('details1', 1), ('CloneNotSupportedException.class,\n', 1), ('ObjectHelper.requireNonNull(collector,', 1), ('!isProtected();\n', 1), ('schedulePeriodic()', 1), ('(unbounded)', 1), ('super(key);\n', 1), ('ConcatMapSupport<T>', 1), ('UsingObserver<R>(observer,', 1), ('subject.onNext("three");\n', 1), ('.assertFailure(IndexOutOfBoundsException.class);\n', 1), ('clear(SpscLinkedArrayQueue<?>', 1), ('ByteArrayInputStream(data)).readInt());\n', 1), ('lvElement(offset))', 1), ('ImmutableBiMapFauxverideShim<K,', 1), ('FluentIterable<Integer>', 1), ('found:', 1), ('onSuccessMapper', 1), ('C.class);\n', 1), ('channel.setReactor(this);\n', 1), ('dotIndex);\n', 1), ('<li>collapse', 1), ('CountingInputStream(InputStream', 1), ('8200530050639449080L;\n\n', 1), ('testNoBackpressure()', 1), ('checkArgument(upperBounds.length', 1), ('"ImmutableSet.<E>"', 1), ('String(byteSink.getBytes(),', 1), ('getFileName()', 1), ('java.nio.channels.SocketChannel;\nimport', 1), ('Futures.immediateFuture(new', 1), ('question.\n', 1), ('contracts', 1), ('RxCustomThread', 1), ('ObservableWindowBoundarySupplier<T,', 1), ('{"value",', 1), ('AUT_PATH', 1), ('completableThrows()', 1), ('AtomicReference<CacheDisposable<T>[]>(EMPTY);\n', 1), ('Converter(final', 1), ('ObservableTakeWhile(ObservableSource<T>', 1), ('assertTrue(ArbitraryInstances.get(ImmutableListMultimap.class).isEmpty());\n', 1), ('checkDoubleOnSubscribeObservableToCompletable(Function<Observable<T>,', 1), ('(int)elements),', 1), ('ChangeKeyOpsCommand(key,', 1), ('one.', 1), ('TestException("Outer")).doOnSubscribe(new', 1), ('testClassPathEntries_notURLClassLoader_withParentAndGrandParent()', 1), ('plans', 1), ('testJoin()', 1), ('testReadAndWrite()', 1), ('.put(Equivalence.class,', 1), ('shutdown\\r\\n");\n', 1), ('((Subscriber<Object>)it).onError(new', 1), ('com.google.common.collect.Multimaps;\nimport', 1), ('groupCount', 1), ('Spellbook()', 1), ('s.onSubscribe(coordinator);\n\n', 1), ('CustomerDto}', 1), ('Lee\n', 1), ('false;', 1), ('testDisplay(View', 1), ('ALBUM_LIST_HTML_FILE', 1), ('TestResourceObserver<T>', 1), ('"Bass");\n', 1), ('observables;\n\n', 1), ('createTestSubject()', 1), ('Disposables.fromFuture(ft,', 1), ('java.io.*;\n\nimport', 1), ('b.onNext(n', 1), ('features.add(KNOWN_ORDER);\n', 1), ('variable,', 1), ('sender\n', 1), ('fileLocation', 1), ('pp.subscribe(ds);\n\n', 1), ('PerCollectionSizeTestSuiteBuilder\n', 1), ('-1944085461036028108L;\n\n', 1), ('ObservableJoin(\n', 1), ('requests,', 1), ('"Flowable")))', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnError.m.png"', 1), ('-3740826063558713822L;\n\n', 1), ('testSwitchTriggerUnsubscribe()', 1), ('readable.\n', 1), ('span));\n', 1), ('Flowable<T>>\n', 1), ('IllegalArgumentException("unsafeCreate(Maybe)', 1), ('light', 1), ('loaded.', 1), ('CollectionFeature', 1), ('System.out.println("Abnormal', 1), ('Java8Holder.class.getDeclaredField("heavy");\n', 1), ('Collections.unmodifiableList(innerList);\n', 1), ('assertTrue(((Disposable)w).isDisposed());\n', 1), ('Schedulers.shutdown();\n', 1), ('Harmony', 1), ('getUpperBounds()', 1), ('String.valueOf(new', 1), ('compareTo(TimedRunnable', 1), ('(available.isEmpty())', 1), ('3).subscribe(subscriber.get());\n\n', 1), ('pickInstance(samples,', 1), ('blockingAwait(long', 1), ('cancelAndChange()', 1), ('eclipse', 1), ('PQ_SUPPRESS', 1), ('create.\n', 1), ('decouple', 1), ('direct;\n\n', 1), ('this;', 1), ('removing', 1), ('"ObservableFromPublisher",', 1), ('CompletableDisposable\n', 1), ('io.reactivex.functions.*;\n\n@BenchmarkMode(Mode.Throughput)\n@Warmup(iterations', 1), ('SingleUnsubscribeOn<T>', 1), ('BackpressureHelperTest', 1), ('upperBounds;\n\n', 1), ('RxJavaPlugins.initIoScheduler(unsafeDefault);\n', 1), ('replacingFirstUnderlyingCausesUnsubscription()', 1), ('HashMultimapGwtSerializationDependencies(Map<K,', 1), ('singleReturn()', 1), ('action.toString(),', 1), ('sub-DSL', 1), ('Callable<Observable<Object>>()', 1), ('MaybeMergeWithTest', 1), ('sharing', 1), ('ParallelPerf', 1), ('contains(null)}', 1), ('MpscLinkedQueue<T>', 1), ('errorEager()', 1), ('WriteLock();\n\n', 1), ('Completable.fromSingle(null);\n', 1), ('Flowables', 1), ('both;\n', 1), ('CompletableDelay(this,', 1), ('Event.values()[i];\n', 1), ('schedule(run);\n', 1), ('TypeToken<BiMap<String,', 1), ('(AbstractNioChannel)', 1), ('SingleObserveOn<T>', 1), ('server)', 1), ('statement.execute();\n', 1), ('"a.jar").toURI());\n', 1), ('FlowableFlatMapCompletable(Flowable<T>', 1), ('CompletableFuture\n', 1), ('(line.contains(consumerClassName))', 1), ('toList(Iterator<E>', 1), ('StartingData)', 1), ('checkSchedulerBadMethod(Observable.class.getSimpleName());\n', 1), ('BlockingFlowableIterator<T>', 1), ('ContentAction(Content.COMPANY));\n', 1), ('input\n', 1), ('assertEquals(ComputationScheduler.SHUTDOWN_WORKER,', 1), ('-3511336836796789179L;\n\n', 1), ('retries;\n\n', 1), ('(generateInt()', 1), ('min,', 1), ('protecting"}\n', 1), ('maybe,', 1), ('calculated.\n', 1), ('Document("$inc",', 1), ('SafeObserver<Integer>(to));\n\n', 1), ('limit\n', 1), ('Functions.toFunction(function4);\n', 1), ('Single.error(ex).subscribe(new', 1), ('streamB}', 1), ('socket.getOutputStream();\n', 1), ('assertNotNull(ArbitraryInstances.get(CharMatcher.class));\n', 1), ('FileByteSource(File', 1), ('ImmutableMap.Builder<String,', 1), ('(publishers.length', 1), ('assertEquals(expectedMessage,', 1), ('"three\\r",', 1), ('ObservableBuffer(ObservableSource<T>', 1), ('ObjectHelper.requireNonNull(completableSupplier,', 1), ('Thread.currentThread(),', 1), ('violate', 1), ('"Priority"})\n', 1), ('assertNotNull(bottomShelf);\n', 1), ('requests.add(t);\n', 1), ('contents.add(checkNotNull(element));\n', 1), ('3.\n', 1), ('"https://raw.githubusercontent.com/iluwatar/java-design-patterns/master/promise/README.md";\n', 1), ('checkSource(String', 1), ('MaybeFromFutureTest', 1), ('"1.0");\n', 1), ('DelayObserver<T>', 1), ('onSuccessCall;\n', 1), ('.suppressing(suppressForCheckedSortedSet())\n', 1), ('Helpers.mapEntry(AnEnum.E,', 1), ('SingleOnSubscribe\n', 1), ('2875964065294031672L;\n', 1), ('FILE_TREE', 1), ('Single.mergeDelayError(Arrays.asList(\n', 1), ('-7545121636549663526L;\n\n', 1), ('.put(ImmutableList.class,', 1), ('serverSocketChannel.accept();\n', 1), ('to.onSubscribe(is);\n\n', 1), ('DisposableHelper.isDisposed(main.get());\n', 1), ('Maybe.fromAction(null);\n', 1), ('doOnSuccess()', 1), ('o.blockingForEach(new', 1), ('Optional<AsyncCallback<T>>', 1), ('"/absolute/path/to/some.jar",\n', 1), ('Double.doubleToRawLongBits(x);\n', 1), ('userConverter.createFromEntities(users);\n', 1), ('overly\n', 1), ('dynamic', 1), ('(containedClass.isAnnotation())', 1), ('map()', 1), ('.toString()\n', 1), ('uniqueIdCount);\n', 1), ('JAVA_VM_SPECIFICATION_VERSION("java.vm.specification.version"),\n\n', 1), ('MaybeErrorCallable<T>', 1), ('WithLatestInnerObserver(WithLatestFromObserver<?,', 1), ('#concatWith(CompletableSource)}.\n', 1), ('flowableSubscribe1()', 1), ('MuteTest', 1), ('CountObserver(t));\n', 1), ('expectedToString)', 1), ('mapFailWithRetry()', 1), ('A>', 1), ('await(int', 1), ('this.expected', 1), ('expectedExecutionTime', 1), ('expectRead', 1), ('((ScheduledExecutorService)executor).scheduleAtFixedRate(task,', 1), ('26,', 1), ('sem.', 1), ('(ObservableSource<?>', 1), ('index++;\n\n', 1), ('Optional<Number>}', 1), ('pp2.singleElement()))\n', 1), ('successAcceptThrows()', 1), ('generateArrayListMultimap(K', 1), ('resumeFunctionInCaseOfError', 1), ('assertThat(Iterables.limit(Files.fileTraverser().breadthFirst(rootDir),', 1), ('instance;\n\n', 1), ('assertEquals(userDto.getEmail(),', 1), ('Inherently', 1), ('drill', 1), ('SingleElementSubscriber(SingleObserver<?', 1), ('checkDisposedMaybe(Function<Maybe<T>,', 1), ('IOException("Error', 1), ('Tests\n', 1), ('ObservableTakeLastOneTest', 1), ('range.subscribeOn(new', 1), ('sonar', 1), ('completableDocRefersToCompletableTypes()', 1), ('2).skipLast((int)elements)\n', 1), ('com.google.common.collect.testing.Helpers.NullsBeforeB;\nimport', 1), ('SingleScheduler()', 1), ('ArbitraryInstances.get(ImmutableSortedSet.class));\n', 1), ('FileByteSourceFactory();\n', 1), ('ParallelCollect(ParallelFlowable<?', 1), ('ConnectableFlowable}\n', 1), ('setFutureRunRace()', 1), ('{request[0],', 1), ('matcher.find(index);\n', 1), ('checked\n', 1), ('ImmutableList.of(\n', 1), ('listen', 1), ('Disposables.fromRunnable(dispose);\n', 1), ('(this.attempts.incrementAndGet()', 1), ('day",', 1), ('Single.zip(pp.single(0),', 1), ('java.util.concurrent.locks.Condition;\n\n/**', 1), ('note:</b>', 1), ('completableObserver2completableObserver', 1), ('1000));\n\n', 1), ('TakeUntilOtherSubscriber(TakeUntilMainObserver<?>', 1), ('AssertionError("Wrong', 1), ('Collections.unmodifiableList(this.errors);\n', 1), ('delegate.submit(task,', 1), ('ba1', 1), ('ObservableTakeLastTimed(ObservableSource<T>', 1), ('function5Fail()', 1), ('get(Class<T>', 1), ('BlockingFlowableIterable(Flowable<T>', 1), ('assertTrue(q.offer(7,', 1), ('Indexed.this;\n', 1), ('csub.add(w1);\n', 1), ('IndexOutOfBoundsException("Too', 1), ('broken', 1), ('RxJavaPlugins.setOnMaybeAssembly(maybe2maybe);\n', 1), ('assertTrue(comparable.compareTo("")', 1), ('CompletableEmpty', 1), ('testStringConverter_convertError()', 1), ('InternalConsumer(bh,', 1), ('newReference()', 1), ('mapFailWithStopConditional()', 1), ('StringWriter());\n', 1), ('Now,', 1), ('CompletableFromSingleTest', 1), ('Observable.fromArray(array);\n\n', 1), ('putAccount(Account', 1), ('Comparator[0]);\n', 1), ('backing\n', 1), ('reclaimed.', 1), ('testGet_nonFinalFieldNotUsed()', 1), ('<P>', 1), ('Set}.', 1), ('UncheckedThrowingFuture<V>(e);\n', 1), ('SingleDoAfterSuccessTest.this.values.add(t);\n', 1), ('".class");\n', 1), ('backpressureSpecEnd);\n', 1), ('ObservableConcatMapEager(ObservableSource<T>', 1), ('clearInterrupt()', 1), ('creation', 1), ('10)));\n\n', 1), ('vector', 1), ('Currency.getInstance(Locale.US))\n', 1), ('maxConcurrencyOneDelayError()', 1), ('this.emitter', 1), ('Builder<E>(size);\n', 1), ('"upper', 1), ('TestSubscriber<Integer>())', 1), ('bufferHelper("two', 1), ('ClassPath.ClassInfo', 1), ('errorAndDisposerThrowsNonEager()', 1), ('getDeclaringClass()', 1), ('(as.isCancelled())', 1), ('generator.samples();\n', 1), ('actual.getClass());\n', 1), ('cleaning"},\n', 1), ('entitiesLeft', 1), ('connections', 1), ('pendingCommands.add(new', 1), ('this.wizards', 1), ('charset).write(from)}.', 1), ('list.get(index);\n\n', 1), ('exc))', 1), ('consumerIndex++;\n', 1), ('LoggerFactory.getLogger(Java8Holder.class);\n\n', 1), ('TakeWhileObserver(Observer<?', 1), ('com.google.common.collect.testing.features.FeatureUtil;\nimport', 1), ('EventConsumer(type,', 1), ('ci)', 1), ('CustomCompletableOperator())\n', 1), ('expand', 1), ('observer",', 1), ('collected\n', 1), ('String[]{"id",', 1), ('generateImmutableSortedMap(K', 1), ('Integer[times];\n\n', 1), ('Charset\n', 1), ('reusability', 1), ('ss.test().assertResult(1);\n\n', 1), ('ObservableSkipLast<T>', 1), ('wheelProperties.put(HasType.PROPERTY,', 1), ('consumer()', 1), ('zone)\n', 1), ('writer.println("rud', 1), ('"12"})\n', 1), ('blocked.submit(\n', 1), ('super(\n', 1), ('BASE32(BaseEncoding.base32()),\n', 1), ('MaybeConcatArray<T>', 1), ('variation', 1), ('testsForHashSet()', 1), ('DROP_LATEST:\n', 1), ('newDirectExecutorService();\n\n', 1), ('testOptionalInt()', 1), ('ZipMaybeObserver<T>(this,', 1), ('BufferOpenSubscriber(BufferBoundarySubscriber<?,', 1), ('errorHandler1);\n\n', 1), ('lexically', 1), ('UnsupportedOperationExcetpion.\n', 1), ('T#toString()},', 1), ('io.reactivex.annotations.SchedulerSupport#NEW_THREAD', 1), ('postFulfillment()', 1), ('Predicate<Integer>', 1), ('.put(Number.class,', 1), ('actualLen);\n', 1), ('TestDisposableObserver<T>', 1), ('this.fromDto', 1), ('(converted', 1), ('(ResourceInfo', 1), ('console.', 1), ('blockinsSubscribeCancelAsync()', 1), ('complete(R', 1), ('findPattern("CompletableSource<.*>\\\\s+ms");\n', 1), ('HashMultiset.<Integer>create();\n', 1), ('testObject()', 1), ('MaybeFromRunnable<T>(run));\n', 1), ('java.nio.file.StandardOpenOption;\nimport', 1), ('ss\n', 1), ('tss', 1), ('fruit)', 1), ('super(Maps.<E,', 1), ('CreateEmitter<T>(observer);\n', 1), ('SwitchMapMaybeMainObserver(Observer<?', 1), ('File("foo");\n', 1), ('behaviorProcessorAsBs()', 1), ('to.assertValueAt(i,', 1), ('JAVA_HOME("java.home"),\n\n', 1), ('2071387740092105509L;\n', 1), ('asyncResult5', 1), ('(pi.get()', 1), ('resumeSingleInCaseOfError', 1), ('longs.get(0));\n', 1), ('ClassPathTest.class.getClassLoader());\n', 1), ('initialDisposable', 1), ('s.compareAndSet(a,', 1), ('suppressForTreeMapNatural()', 1), ('MaybeSwitchIfEmpty<T>(this,', 1), ('observableSource)', 1), ('Note:', 1), ('generateByte()', 1), ('subscribe(MaybeObserver<?', 1), ('isEqual.test((T)o1,', 1), ('statusMember.accept(messageData);\n', 1), ('ExtraObjectsMethodsForWeb', 1), ('ConcatMapDelayed(Subscriber<?', 1), ('Single.zipArray(Functions.justFunction(null),', 1), ('mostRecentSubscriber', 1), ('well-defined', 1), ('`RxJavaPlugins.onError`.\n', 1), ('PromiseSupport()', 1), ('ms.subscribe(new', 1), ('getSuppressedTests()', 1), ('FlowableConcatMapEager<T,', 1), ('serialDisposable.replace(Disposables.empty());\n', 1), ('suite.addTest(testsForCopyOnWriteArraySet());\n', 1), ('Helpers.testComparator(comparator,', 1), ('setSubscriptionMissed()', 1), ('RxJavaPlugins.initSingleScheduler(unsafeDefault);\n', 1), ('charFrequency)', 1), ('onDrop(R', 1), ('verifyVisit(final', 1), ('CompletablePeek(CompletableSource', 1), ('Settings/"));\n', 1), ('upstream\n\n', 1), ('terminate."));\n', 1), ('XCHG', 1), ('.named("singletonList")\n', 1), ('assertNotNull(ArbitraryInstances.get(Splitter.class).split("a,b"));\n', 1), ('SubscribeOnObserver(SingleObserver<?', 1), ('keySetGenerator)\n', 1), ('Flowable.just(\n', 1), ('java.nio.file.Files#readAllLines(java.nio.file.Path,', 1), ('joins', 1), ('list.subList(fromIndex,', 1), ('to.assertSubscribed().assertNoValues().assertNotComplete();\n\n', 1), ('half-serialization:', 1), ('NonCachingWithConstructorCheckValidator', 1), ('@Param({"Array",', 1), ('setImplementation(OutputStream.class,', 1), ('SingleInternalHelper.NoSuchElementCallable.values().length);\n', 1), ('FileByteSink(file,', 1), ('pair.b));\n', 1), ('CHEETO,\n', 1), ('globalMutex.contains(writerLock);\n', 1), ('unwrap', 1), ('crashRequest;\n', 1), ('java.util.concurrent.Delayed;\nimport', 1), ('arbitraryConstantInstanceOrNull(Class<T>', 1), ('processPendingCommands();\n\n', 1), ('MapWithIndexSpliterator<Spliterator.OfInt,', 1), ('ConsumingQueueIterator<T>', 1), ('OTHER_EXCEPTION_TYPES.asList().subList(0,', 1), ('protected.', 1), ('orphanRemoval', 1), ('AbstractSortedSetMultimap<K,', 1), ('getShutdownWorkers()', 1), ('(multimap', 1), ('ImmediateThinScheduler.INSTANCE.createWorker().schedulePeriodically(Functions.EMPTY_RUNNABLE,', 1), ('terms.\n', 1), ('ts.onError(t);\n', 1), ('Single.zip(Collections.<SingleSource<Integer>>emptyList(),', 1), ('NEW_TRHEAD})\n', 1), ('FlowableZipIterable<T,', 1), ('copyOf(E[]', 1), ('_.,()]*Observable");\n', 1), ('CompletableConcatSubscriber', 1), ('10).concatWith(Observable.<Integer>error(new', 1), ('CakeTopping(toppingInfo.name,', 1), ('guests.add(k);\n', 1), ('(Enum<NaturalComparator>', 1), ('ex.getExceptions();\n', 1), ('construction:', 1), ('version\n', 1), ('FlowableFlatMapSingle(Flowable<T>', 1), ('java.util.concurrent.ThreadLocalRandom;\nimport', 1), ('splitrB', 1), ('java.io.Closeable},', 1), ('set(i,', 1), ('workDone);\n', 1), ('assertSame(FirstConstantIsNull.SECOND,', 1), ('thenApply(Function<?', 1), ('ObservableFromFuture<T>', 1), ('UserDto("Tom",', 1), ('.doOnNext(Functions.emptyConsumer()));\n', 1), ('TestHelper.checkDisposed(Flowable.just(1)\n', 1), ('asSlicedByteSourceFactory(\n', 1), ('FlowableThrottleFirstTest', 1), ('numCalls.get());\n\n', 1), ('to1.assertNoErrors();\n\n', 1), ('handleEvent((StartingData)', 1), ('java.util.Objects.\n', 1), ('ObserveOnTckTest', 1), ('Observable<Timed<Object>>', 1), ('toByteArray(File', 1), ('potions;\n\n', 1), ('ArrayList<Long>();\n', 1), ('getAndSet(DISPOSED)', 1), ('CompletableHide', 1), ('non-periodic\n', 1), ('1000).toMultimap(Functions.<Integer>identity()).toFlowable()\n', 1), ('partProperties', 1), ('DispatcherTest', 1), ('unsubscribingTwiceDoesUnsubscribeOnce()', 1), ('delegate.containsKey(checkValid(key));\n', 1), ('delegate.shutdown();\n', 1), ('assertEquals("failed",', 1), ('cdl.await();\n', 1), ('"B.B.1",', 1), ('CompletableFromSingleObserver(CompletableObserver', 1), ('SingleEmitter}', 1), ('TemporaryPair::new).forEach(pair', 1), ('initialRequest;\n', 1), ('b.substring(schhedulerSpec', 1), ('assertNull(value[0]);\n', 1), ('evil', 1), ('SINGLE})\n', 1), ('callback;\n\n', 1), ('constructor);\n}\n', 1), ('defaultItem', 1), ('<i>corresponding</i>', 1), ('byte[1]));\n', 1), ('Weapon}', 1), ('assumed', 1), ('scheduler),', 1), ('*/\n}\n', 1), ('accounts.get(sourceBackAccount)', 1), ('these,', 1), ('TearDown}', 1), ('later.', 1), ('behaviorSubjectAsBp()', 1), ('Callable<Publisher<Movie>>()', 1), ('BaseTck()', 1), ('System.arraycopy(elements,', 1), ('TestHelper.checkDisposed(Flowable.timer(1,', 1), ('this.value;\n\n', 1), ('promise;\n\n', 1), ('Queues.newLinkedBlockingQueue(0);\n', 1), ('now(TimeUnit.MILLISECONDS));\n', 1), ('SpscArrayQueue(int', 1), ('Selector}.\n', 1), ('assertNull(aste);\n//\n//', 1), ('io.reactivex.internal.operators.flowable.FlowableTake.TakeSubscriber;\n\n/**\n', 1), ('Having', 1), ('.onErrorResumeNext(Single.just(1))\n', 1), ('writes\n', 1), ('DelaySubscription(Subscription', 1), ('List>', 1), ('FlowableMergeWithMaybeTest', 1), ('Splitter.on(generateString());\n', 1), ('assertEquals(System.getProperty(property.key()),', 1), ('expectedResult)', 1), ('java.util.Optional<Long>', 1), ('.put(AnnotatedElement.class,', 1), ('tenantCallsCount', 1), ('testAddCap()', 1), ('aggregation\n', 1), ('ListenableFuture<List<Row>>', 1), ('EnumMap<?,', 1), ('add(PublishSubscription<T>', 1), ('details2,', 1), ('onEvent\n', 1), ('createSplit(Spliterator<T>', 1), ('com.google.common.collect.ForwardingObject;\nimport', 1), ('delegateCollection().contains(target);\n', 1), ('ResumeSingleObserver(AtomicReference<Disposable>', 1), ('Future<Boolean>', 1), ('Subscription}\n', 1), ('IO;\n\n', 1), ('Maybe.<Integer>error(error).subscribe(rmo);\n\n', 1), ('assertNotInstantiable(TypeToken<?>', 1), ('Single.just(1).subscribeOn(Schedulers.computation());\n', 1), ('MonoState', 1), ('UTF_8', 1), ('(i.e.\n', 1), ('Single.concatArray(source,', 1), ('ObservableConcatMapCompletablePerf', 1), ('FlowableTakeWhile<T>', 1), ('cal.get(Calendar.DAY_OF_MONTH)', 1), ('MaybeFromSingle<T>(singleSource));\n', 1), ('generateOptionalInt()', 1), ('.doOnComplete(()', 1), ('TypeToken<HashMultimap<String,', 1), ('How', 1), ('(targetNode.equals(entry.getValue()))', 1), ('"FlowableAnySingle",\n', 1), ('(Socket', 1), ('"300SL");\n', 1), ('inputStreamOpened', 1), ('LoggerFactory.getLogger(CallsCount.class);\n', 1), ('forEach(BiConsumer<?', 1), ('org.junit.Assert.assertFalse;\n\npublic', 1), ('CompletableFromAction(run));\n', 1), ('(requested)', 1), ('EnumsTest', 1), ('withFutureDisposed2()', 1), ('noneagerMapperThrowsDisposerThrows()', 1), ('this.prefix', 1), ('enumClass;\n\n', 1), ('onError(Observer<?>', 1), ('Maybe.&lt;Event&gt;create(emitter', 1), ('possiblyIgnoredError3', 1), ('-10', 1), ('Optional}\n', 1), ('ByteBuffer.allocate(generateInt());\n', 1), ('<i>same</i>\n', 1), ('CollectSpliterators.map(entrySet().spliterator(),', 1), ('super.forcePut(key,', 1), ('Stream#findFirst()\n', 1), ('ExceptionHelper.wrapOrThrow(t);\n', 1), ('emitter.setCancellable(c);\n', 1), ('suite.addTest(testsForSingletonSet());\n', 1), ('STREAMS_FIND_LAST', 1), ('error3()', 1), ('MaybeErrorCallable(Callable<?', 1), ('innerNext(InnerQueuedObserver<R>', 1), ('Observable}.\n', 1), ('ObservableToFutureTest', 1), ('lvNext()', 1), ('cleared', 1), ('UncheckedThrowingFuture<V>', 1), ('all.', 1), ('missingFeatures));\n', 1), ('"line\\r",', 1), ('Navigates', 1), ('com.google.common.collect.Iterables.limit;\n\nimport', 1), ('HibernateUtil.dropSession();\n', 1), ('line\n', 1), ('Typically,', 1), ('TooManyListenersException.class,\n', 1), ('happen:\n', 1), ('tested.', 1), ('principle', 1), ('UTF_16', 1), ('Completable.complete().subscribe(tc);\n\n', 1), ('Charsets', 1), ('Objects.requireNonNull(properties,', 1), ('this.listeners.add(member);\n', 1), ('"xx";\n', 1), ('Furman\n', 1), ('SerializedObserver<T>(t),', 1), ('int[][]>>()', 1), ('CompletableDisposeOnTest', 1), ('DoOnEachSubscriber<T>', 1), ('s.schedule(Functions.EMPTY_RUNNABLE));\n\n', 1), ('AnyTckTest', 1), ('FlowableCount<T>(source));\n', 1), ('.put(Predicate.class,', 1), ('errors[0]', 1), ('s.request(p);\n', 1), ('"-Xmx12g",', 1), ('deque', 1), ('Executors.newFixedThreadPool(4);\n\n', 1), ('BufferBoundarySubscriber(BufferExactBoundarySubscriber<T,', 1), ('interruptibly)\n', 1), ('customerId}\n', 1), ('(DatagramPacket)', 1), ('two,', 1), ('disallowPrimitiveType(typeArguments,', 1), ('addListener(Runnable', 1), ('testThatFinalizerStops()', 1), ('Audio.playSound(Audio.getAudioStream("./etc/Closed-Hi-Hat-1.wav"),', 1), ('incidentEdgeMap.remove(edge);\n', 1), ('ProtocolViolationException("")));\n', 1), ('t8)', 1), ('codes', 1), ('EnumMap(enumMap));\n', 1), ('com.iluwatar.throttling.timer.Throttler;\nimport', 1), ('createComputationScheduler()', 1), ('testToString(NumberExpression', 1), ('this.interfaceType', 1), ('detectJvmBehavior()', 1), ('Actions.empty();\n//\n//', 1), ('com.google.common.graph.Traverser;\nimport', 1), ('Observable.concat(\n', 1), ('AbstractPackageSanityTests.class.getDeclaredMethods()[0]);\n', 1), ('browser.\n', 1), ('stopped,', 1), ('8)));\n', 1), ('clients.', 1), ('result[0]);\n', 1), ('X[]};', 1), ('super.dispose();\n', 1), ("'g');\n", 1), ('.validate(User::getEmail,', 1), ('apples++;\n', 1), ('withProducer', 1), ('0}', 1), ('11;', 1), ('6666));\n', 1), ('reentrantNoOverflow()', 1), ('splits.addLast(stream.spliterator());\n\n', 1), ('StrengthPotion();\n', 1), ('subscriber.onError(error.terminate());\n', 1), ('io.reactivex.Single},', 1), ('trampolineWorker', 1), ('SingleSource<List<Integer>>', 1), ('.put(Charset.class,', 1), ('ObserveOnMaybeObserver<T>\n', 1), ('onCompleteCall,\n', 1), ('UrlCharSourceFactory', 1), ('testFileTraverser_singleFile()', 1), ('com.google.common.collect.testing.testers.MapEntrySetTester.getContainsEntryWithIncomparableValueMethod;\nimport', 1), ('cs.test().assertFailure(IOException.class);\n\n', 1), ('create().\n', 1), ('mike', 1), ('IgnoreMaybeObserver<T>(observer));\n', 1), ('MultiInputStreamTest', 1), ('CompletableObserver}.\n', 1), ('o1).compareTo(o2);\n', 1), ('X}', 1), ('tasks.add(task);\n', 1), ('this.rawType', 1), ('-------------------------------------------------------------------------\n\n', 1), ('dig', 1), ('strings;\n\n', 1), ('InputStream.class,\n', 1), ('v1);\n', 1), ('this.sourceList', 1), ('32);\n', 1), ('Flowable<Upstream>', 1), ('testNoPeriodicTimedTaskPartRetention()', 1), ('TransformAction(Promise<T>', 1), ('NioDatagramChannel(int', 1), ('AccountCreateEvent)', 1), ('CompletableConcatTest', 1), ('visitTypeVariable((TypeVariable<?>)', 1), ('setImplementation(PrintStream.class,', 1), ('Predicate<U>', 1), ('-98,', 1), ('objIn', 1), ('ObservableConcatWithSingle(Observable<T>', 1), ('exception.");\n', 1), ('File.createTempFile("with_circular_class_path",', 1), ('assertNotNull(DisposableHelper.valueOf("DISPOSED"));\n', 1), ('Data\n', 1), ('value.cancel();\n', 1), ('file.toString().substring(base.toString().length());\n', 1), ('SetTestSuiteBuilder}.\n', 1), ('replace(@Nullable', 1), ('T>)a,', 1), ('testAddSampleInstances_oneInstance()', 1), ('System.out.println(pv);\n', 1), ('StripBoundary<T>(upstream);\n', 1), ('.named("AbstractSet")\n', 1), ('"FlowableLastSingle",\n', 1), ('Scheduler#createWorker()}\n', 1), ('Schedulers.SingleHolder());\n', 1), ('baseExpected', 1), ('ResourceInfo("some.txt",', 1), ('bimap.putAll(map);\n', 1), ('sizeOfStriped()', 1), ('active.getAndSet((SwitchMapInnerObserver<T,', 1), ('(Disposable', 1), ('entries.add(entryOf((K)', 1), ('WeatherType.values();\n', 1), ('(acquired', 1), ('longs.set(i,', 1), ('Collections.checkedList(innerList,', 1), ('.put(DoubleBuffer.class,', 1), ('.assertValueCount(elements)\n', 1), ('v1;\n\n', 1), ('java.lang.ref.ReferenceQueue;\nimport', 1), ('CompletableTransformer', 1), ('TimeoutFallbackObserver<T>\n', 1), ('part.getPrice().get());\n', 1), ('compiling', 1), ('AppendToQueueTask', 1), ('RandomAccess', 1), ('existence,', 1), ('"source");\n', 1), ('destruction.\n', 1), ('cake.getTopping().getName(),', 1), ('charset)\n', 1), ('serialized()', 1), ('CallsCount.reset();\n', 1), ('150', 1), ('MaybePeekTest', 1), ('sergeantResponse', 1), ('FinalizableReferenceQueue());\n\n', 1), ('optimization.\n', 1), ('details1,', 1), ('SingleToObservable<T>(this));\n', 1), ('toSingle(T', 1), ('ArbitraryInstances.get(Number.class));\n', 1), ('getCreateWithNullUnsupportedMethod());\n', 1), ('multi', 1), ('LotteryTestUtils', 1), ('testerSuite', 1), ('queueing', 1), ('onXError()', 1), ('fileIn', 1), ('T}\n', 1), ('views.stream().forEach(view', 1), ('lifetime:', 1), ('isLockFree()', 1), ('assertThat(expected).hasCauseThat().isInstanceOf(RejectedExecutionException.class);\n', 1), ('TestHelper.checkUtilityClass(FlowableInternalHelper.class);\n', 1), ('queue.offer(br);\n\n', 1), ('delegate().tryLock(time,', 1), ('LegacyComparable(String', 1), ('TreeSet<V>(valueComparator);\n', 1), ('ds.downstreamRequest(1);\n', 1), ('int[1];\n', 1), ('wishes', 1), ('acquireResource()', 1), ('FlowableIgnoreElements<T>(source));\n', 1), ('TestingHelper()', 1), ('assertSame(o1,', 1), ('delegate.entrySet();\n', 1), ('fromEntity.apply(user);\n', 1), ('Files()', 1), ('Publisher<V>', 1), ('Comparator<T>,', 1), ('other.subscribe(otherObserver);\n', 1), ('-4745803872902019069L;\n', 1), ('topShelf;\n', 1), ('expectedExecutionTime;\n', 1), ('failComputationFlowableBlockingLatest()', 1), ('Queues.newLinkedBlockingQueue(11).remainingCapacity());\n', 1), ('OUTPUT_FILE', 1), ('System#err}.\n', 1), ('"2.0:2")}.\n', 1), ('FILE_TREE_TRAVERSER;\n', 1), ('getAuthorBooks(String', 1), ('returnType.getComponentType());\n', 1), ('readerLock;\n', 1), ('s1.subscribe(shared);\n', 1), ('Single.concat(Arrays.asList(source,', 1), ('testCurrentTimeDriftBackwards()', 1), ('MaybeEqualSingle<T>', 1), ('cap', 1), ('complete.",', 1), ('typeVariableMethod.invoke(typeVariableImpl,', 1), ('ImmutableEnumMap<K', 1), ('ImmutableList<String>};\n', 1), ('ParallelReduceFullMainSubscriber<T>(s,', 1), ('SingleTransformer<Upstream,', 1), ('Generates}.\n', 1), ('queueDisposableInsteadOfQueueFuseable()', 1), ('Flowable.combineLatest(\n', 1), ('Multimap#forEach}.\n', 1), ('DEFAULT_VALUES_PER_KEY', 1), ('errorList(TestObserver<?>', 1), ('MinimalSet<E>(type,', 1), ('list.add(m);\n', 1), ('createSplit(Spliterator.OfDouble', 1), ('explains', 1), ('EmptyCompletableObserver();\n', 1), ('Publisher<String>', 1), ('set.size());\n\n', 1), ('parent.s.request(p);\n', 1), ('NewThreadScheduler(ThreadFactory', 1), ('AnyObserver(SingleObserver<?', 1), ('TimeoutException}', 1), ('10000L);\n\n', 1), ('resourceSupplier;\n\n', 1), ('TypeVariableImpl.class.getMethods())', 1), ('de.run();\n', 1), ('9:31', 1), ('regression', 1), ('aim', 1), ('to.onSubscribe(Disposables.empty());\n', 1), ('used:\n', 1), ('verifyVisit(unit,', 1), ('HobbitsTest', 1), ('SingleJust<T>(item));\n', 1), ('io.reactivex.internal.subscribers.SinglePostCompleteSubscriber;\n\npublic', 1), ('member.joinedParty(this);\n', 1), ('SourceSinkFactories', 1), ('Lea\n', 1), ('reflect\n', 1), ('ImmutableList<Parameter>', 1), ('assertThat(urls.get(2).getAuthority()).isNull();\n', 1), ('features.add(NoRecurse.SUBMAP);\n', 1), ('completableSupplier;\n', 1), ('FlowableOnBackpressureDrop<T>', 1), ('Atomics', 1), ('testGet_concurrent()', 1), ('saveNewTopping(CakeToppingInfo', 1), ('MissingBackpressureException("Couldn\'t', 1), ('lazySet(int', 1), ('CollectionSize.SEVERAL)\n', 1), ('drive\n', 1), ('observed.', 1), ('subject1m()', 1), ('completionValueSupplier;\n\n', 1), ('io.reactivex.annotations;\n', 1), ('value;', 1), ('ticket.getPlayerDetails().getPhoneNumber());\n', 1), ('args.toArray());\n', 1), ('LOREM_IPSUM)\n', 1), ('fields);\n\n', 1), ('Update', 1), ('TypeToken<NavigableMap<?,', 1), ('trampoline().start();\n', 1), ('(runtime)\n', 1), ('PublishProcessorPerf', 1), ('gravida', 1), ('frq);\n', 1), ('cucumber.api.java.Before;\nimport', 1), ('generateShortObject()', 1), ('CharBuffer.allocate(generateInt());\n', 1), ('java.lang.annotation.Target;\nimport', 1), ('customScheduleDirectDisposed()', 1), ('findPattern("PublishProcessor<.*>\\\\s+ps");\n', 1), ('addToList(final', 1), ('assertUninterruptibleDrained(BlockingQueue<Object>', 1), ('firstOnError()', 1), ('enumValues.length];\n', 1), ('to2.assertResult();\n', 1), ('actual\n', 1), ('schedulerDocLine;\n', 1), ('"12231-213132",', 1), ('MaybeCallbackObserver<T>(onSuccess,', 1), ('MaybeFromCallable<T>', 1), ('32\n', 1), ('ec,', 1), ('this.byteSource', 1), ('verifyPositive(int', 1), ('other.get()', 1), ('NumberCrunchingTask', 1), ('(date', 1), ('EnumBiMap},', 1), ('dialog).', 1), ('streams.', 1), ('ObservableScan<T>', 1), ('readNext()', 1), ('FlowableDelay(Flowable<T>', 1), ('testZeroElements()', 1), ('BasicIntQueueSubscription<GroupedFlowable<K,', 1), ('stopped;\n', 1), ('<li>This', 1), ('getAndSet(int', 1), ('PURGE_THREAD.get();\n', 1), ('FlowableSubscriberTest', 1), ('others[i].subscribe(subscribers[i]);\n', 1), ('currentWeather;\n', 1), ('address.', 1), ('erroneous', 1), ('(true);\n', 1), ('initCounters();\n', 1), ('(state.set)', 1), ('prettyPrint(\n', 1), ('AtomicInteger>makeMap());\n', 1), ('ID_GENERATOR.incrementAndGet());\n', 1), ('ConcurrentHashMap()', 1), ('events.add(line);\n', 1), ('validate(@NonNull', 1), ('assertEquals(Action.values().length,', 1), ('not)\n', 1), ('o.onSubscribe(EmptyDisposable.NEVER);\n', 1), ('suite.addTest(testsForHashMapNullKeysForbidden());\n', 1), ('type.isAssignableFrom(field.getType()))', 1), ('Charsets.UTF_8)).asByteSource(Charsets.UTF_8);\n', 1), ('m.javadoc.subSequence(idx', 1), ('contentActions.stream().map(ContentAction::getContent).filter(Content.PRODUCTS::equals).count());\n', 1), ('Integer>,', 1), ('IoHolder.DEFAULT;\n', 1), ('readable)', 1), ('expectedExceptions', 1), ('LineBuffer}', 1), ('Completable.mergeArray(new', 1), ('Allocate', 1), ('count.incrementAndGet());\n', 1), ('mock)', 1), ('testStringConverter_nullConversions()', 1), ('TreeMap<>(comparator);\n', 1), ('delegateCollection();\n\n', 1), ('handler}.', 1), ('remove(CacheDisposable<T>', 1), ('testSortedListObservable()', 1), ('Function<Mutable,', 1), ('ThreadLocal<Path>', 1), ('scheduleDirectThrows()', 1), ('exceptions.add(t);\n', 1), ('mainErrorPublisher()', 1), ('Function3', 1), ('ObservableAmb(ObservableSource<?', 1), ('observableReturn()', 1), ('#testListIterator_unmodifiable()}', 1), ('trim(long', 1), ('GiantViewTest', 1), ('testEmpty(q);\n', 1), ('BlockingObservableToFutureTest', 1), ('connect();\n', 1), ('mergeArrayDelayError(MaybeSource<?', 1), ('architecture-specific', 1), ('list;', 1), ('MySubscriber<Integer>', 1), ('ObservableSource",', 1), ('com.iluwatar.decorator;\n\nimport', 1), ('compositeList(ts.errors().get(0));\n', 1), ('suppression\n\n', 1), ('TestException("onError("', 1), ('Publisher<T>...', 1), ('mechanisms,', 1), ('closes.");\n', 1), ('CompletableToFlowable(CompletableSource', 1), ('mainArray', 1), ('int.class,\n', 1), ('pp0.onNext(pp1);\n\n', 1), ('googleOptional.toJavaUtil();\n', 1), ('SingleSource-like', 1), ('MergeInnerCompletableObserver(CompletableObserver', 1), ('ws.offer(w);\n', 1), ('TestingExecutors.sameThreadScheduledExecutor().schedule(task,', 1), ('TestHelper.checkDisposed(Single.never().takeUntil(Flowable.never()));\n', 1), ('source.blockingMostRecent(initialValue);\n', 1), ('LinkageError)', 1), ('newInstance(\n', 1), ('System.out.print(clazz2.getName());\n', 1), ('.put(String.class,', 1), ('sun.misc.FpUtils},', 1), ('times(1)).onNext(Arrays.asList(1,', 1), ('RxJavaPlugins.setOnConnectableObservableAssembly(connectableObservable2ConnectableObservable);\n', 1), ('"One");\n\n', 1), ('href="http://java.sun.com/docs/books/jls/third_edition/html/execution.html#12.4.2">JLS', 1), ('(combining', 1), ('SingleTckTest', 1), ('java.util.LinkedList;\n\n/**\n', 1), ('assertEquals(-99,', 1), ('@Param({"10000"})\n', 1), ('@deprecated\n', 1), ('update,', 1), ('FlowableIntervalRangeTest', 1), ('CompletableDisposable(observer,', 1), ('NANOSECONDS,', 1), ('\'Require\'.",\n', 1), ('request.', 1), ('25', 1), ('onOverflow,\n', 1), ('properties()', 1), ('1000).collect(Functions.<Integer>createArrayList(128),', 1), ('SingleOperator', 1), ('Count>newLinkedHashMapWithExpectedSize(distinctElements));\n', 1), ('Enum<?>>,', 1), ('whatever', 1), ('UdpLoggingClient(String', 1), ('customerDao.getById(2));\n', 1), ('mergeErrors()', 1), ('Function<MaybeSource<Object>,', 1), ('RunnableDisposable(Runnable', 1), ('testSortedList()', 1), ('testsForPriorityBlockingQueue()', 1), ('generateString().charAt(0);\n', 1), ('orElseThrow}.\n', 1), ('ArbitraryInstances.get(Long.class));\n', 1), ('Inventory(1000);\n', 1), ('ArbitraryInstances.get(Iterable.class));\n', 1), ('it).', 1), ('UnsupportedAudioFileException', 1), ('1.000', 1), ('verifyThread(Schedulers.io(),', 1), ('wording', 1), ('FunctionWithIndex<?', 1), ('Resources.asCharSource(getFile().toURI().toURL(),', 1), ('SwitchMapTckTest', 1), ('<li>exactly', 1), ('disallowPrimitiveType(upperBounds,', 1), ('windows.', 1), ('entryIterator.hasNext();\n', 1), ('RxJavaPlugins.setOnSingleAssembly(single2single);\n', 1), ('this.result.future;\n', 1), ('Helpers.fail(e,', 1), ('bankAccount,', 1), ('HideCompletableObserver(observer));\n', 1), ('aggregation.\n', 1), ('readUsingJava(String', 1), ('cancellation");\n', 1), ('"6710883"})\n', 1), ('reactor;\n\n', 1), ('what\n', 1), ('.assertResult((Number)1d);\n', 1), ('Arrays.asList(5,', 1), ('never()).dispose();\n', 1), ('deque;\n\n', 1), ('FixtureScript', 1), ('assertFalse(ex.isTerminated());\n\n', 1), ('ByteSource.empty())\n', 1), ('TakeLastTimedSubscriber<T>(s,', 1), ('actual.onError(list.get(0));\n', 1), ('o.subscribe(ls);\n\n', 1), ('mock(Party.class);\n', 1), ('directed', 1), ('keys.clear();\n', 1), ('entries();\n\n', 1), ('Subscribe}.\n', 1), ('"Publisher",', 1), ('(set.size())', 1), ('.put(Multimap.class,', 1), ('TypeVariableImpl(D', 1), ('filterFailWithSkipConditional()', 1), ('libraries.', 1), ('-5592042965931999169L;\n\n', 1), ('ps*}</li>\n', 1), ('performed.\n', 1), ('//now', 1), ('.transform(User::getId,', 1), ('ClassLoader(null)', 1), ('doOnSubscribeNormal()', 1), ('studentsToBeInserted)', 1), ('FlowableConcatMapCompletableTest', 1), ('MAGE,', 1), ('queueReference', 1), ('getJavaChannel().send(pendingPacket.getData(),', 1), ('addCallback(FutureCallback<?', 1), ('.switchMapMaybe(Functions.justFunction(Maybe.never()));\n', 1), ('Set}.\n', 1), ('SafeSubscriber<Integer>(ts));\n\n', 1), ('testPartyAction(Supplier<PartyMember>', 1), ('BlockingObservableMostRecent<T>', 1), ('CompletableConcat(Publisher<?', 1), ('syncWorkerCancelRace()', 1), ('fromArraySingle()', 1), ('restCancelRace()', 1), ('Completable.fromAction(null);\n', 1), ('concatArray(other,', 1), ('wireTransfers;\n\n', 1), ('android.test.suitebuilder.annotation.Suppress}?\n', 1), ('suppressForConcurrentSkipListMap()', 1), ('ArbitraryInstances.get(ImmutableCollection.class));\n', 1), ('visitClass((Class<?>)', 1), ('ClassSanityTester()\n', 1), ('(--i', 1), ('threads.<br>\n', 1), ('reality', 1), ('flowable)', 1), ('FlowableDematerialize(Flowable<Notification<T>>', 1), ('String.format("Pool', 1), ('SpscLinkedArrayQueue<T>(bufferSize);\n', 1), ('FileWriteMode#APPEND\n', 1), ('delegate.lastKey();\n', 1), ('ImmutableEnumMap', 1), ('LOGGER.info("getting");\n', 1), ('<li>As', 1), ('producerNode.getAndSet(node);\n', 1), ('executor.invokeAll(tasks);}\n', 1), ('Chinese', 1), ('CompletableResult<>(callback);\n', 1), ('LongStream.of(optional.getAsLong())', 1), ('com.google.common.collect.testing.features.CollectionFeature.SUPPORTS_REMOVE;\nimport', 1), ('unbounded1m()', 1), ('Out()', 1), ('Map<SelectableChannel,', 1), ('m)\n', 1), ('testDistinctUntilChangedOfNormalSource()', 1), ('checkNotNull(element);\n', 1), ('rangeObservableFlatMapJust', 1), ('se.toString();\n//', 1), ('-2311252482644620661L;\n\n', 1), ('UndirectedNetworkConnections<>(HashBiMap.<E,', 1), ('ps1.concatMapCompletable(new', 1), ('path.substring(0,', 1), ('BlockingQueue.class,\n', 1), ('FlowableCollectSingle<T,', 1), ('List<Action>', 1), ('FlowableConcatWithSingle(Flowable<T>', 1), ('innerError(InnerQueuedObserver<T>', 1), ('rso.onSubscribe(Disposables.empty());\n\n', 1), ('DisposableHelper.replace(arbiter,', 1), ('timedRunnable;\n\n', 1), ('any(RuntimeException.class));\n', 1), ('m.schedulerDocumentation', 1), ('queue).consume();\n\n', 1), ('Publisher<Disposable>>()', 1), ('accounts.put(account.getAccountNo(),', 1), ('com.google.errorprone.annotations.DoNotMock;\nimport', 1), ('comparator().compare(k,', 1), ('future);\n', 1), ('SequentialDispose', 1), ('Files.fileTraverser().depthFirstPreOrder(root))', 1), ('(count.compareAndSet(state,', 1), ('AtomicReference<PublishDisposable<T>[]>(EMPTY);\n', 1), ('dematerialize.subscribe(to);\n\n', 1), ('doForward(String', 1), ('AssertionError("Unknown', 1), ('andThenMaybeCompleteError()', 1), ('newService', 1), ('mergeDelayError(Flowable.fromIterable(sources));\n', 1), ('RefCountProcessor<Integer>(up);\n', 1), ('ps1.concatMap(new', 1), ('concatMapToFlowableEmpty', 1), ('EqualObserver<T>\n', 1), ('JustTckTest', 1), ('CollectionSize(Feature<?', 1), ('LongStream#findFirst()\n', 1), ('printAndCountDates(result[i]);\n', 1), ('#compose(SingleTransformer)\n', 1), ('md.actual.onSuccess(value);\n', 1), ('optionals)', 1), ('this.error;\n\n', 1), ('assertTrue(list2.equals(list));\n', 1), ('generateSortedSet(E', 1), ('FlowableWindowBoundarySupplier<T,', 1), ('err2', 1), ('update(final', 1), ('CakeViewImpl', 1), ('ObservableAllTest', 1), ('leave', 1), ('invocations.', 1), ('converter.convert("xxx");\n', 1), ('AmbInnerObserver(AmbCoordinator<T>', 1), ('FinalizableReferenceQueue.DecoupledLoader()', 1), ('Under', 1), ("collection's", 1), ('→', 1), ('"b"));\n', 1), ('trampolineWorker.schedule(Functions.EMPTY_RUNNABLE);\n', 1), ('ReserializedMapTests', 1), ('testDefaultComputationSchedulerIsInitializedLazily()', 1), ('blockingLastNormal()', 1), ('(FileLoggerModule.singleton', 1), ('cpu;\n\n', 1), ('returns</li>\n', 1), ('printAndCountExceptions(result[i]);\n', 1), ('java.util.ConcurrentModificationException;\nimport', 1), ('customer3', 1), ('io.reactivex.subscribers.DefaultSubscriber;\n\n@SuppressWarnings("unchecked")\npublic', 1), ('subject1()', 1), ('MapTestSuiteBuilder}', 1), ('parent.cancel(key);\n', 1), ('factory.createSource(new', 1), ('!(elements', 1), ('testNotAllObservable()', 1), ('testNewLinkedBlockingDequeCapacity()', 1), ('AtomicReference<>();\n', 1), ('reactor.\n', 1), ('tenMillionEmptySources().read(new', 1), ('widely', 1), ('java.io.IOException;\n\nimport', 1), ('MaybeFromSingle<T>(this));\n', 1), ('"java.compiler"', 1), ('RxJavaPlugins.initSingleScheduler(c));\n\n', 1), ('OBSERVER_ONNEXT_ONERROR_FAIL().onNext("one");\n', 1), ('assertThat(urls.get(2).getPath()).endsWith("/relative/path/to/class/root");\n\n', 1), ('handler.</li>\n', 1), ('#parallelism()\n', 1), ('.concatWith(Maybe.just((int)elements))\n', 1), ('stoppingData', 1), ('TypeToken<List<EmptyEnum>>()', 1), ('i).intValue());\n', 1), ('RxJavaPlugins.setOnObservableLift(new', 1), ('.flatMap(Functions.justFunction(Completable.fromAction(this).subscribeOn(Schedulers.computation()).toFlowable()),', 1), ('expectedValues', 1), ('FlowableSkipLastTimed<T>', 1), ('TearDownStack}', 1), ('method;\n', 1), ('single().start();\n', 1), ('separately.', 1), ('scheduler.now(unit)', 1), ('volutpat.', 1), ('unlikely', 1), ('A.class,', 1), ('yBits', 1), ('executor.endProcess(asyncResult2);\n', 1), ('Schedulers#io()', 1), ('Exception(MESSAGE);\n', 1), ('RegularImmutableBiMap_CustomFieldSerializer', 1), ('generateByteArrayInputStream();\n', 1), ('DoOnEachSubscriber<T>(\n', 1), ('safety', 1), ('testVisitCommander()', 1), ('copyOf(iterable);\n', 1), ('validator\n', 1), ('IntervalRangeTckTest', 1), ('SerializedForm(delegateCollection());\n', 1), ('delayError);\n\n', 1), ('getRemainingElementsCount();\n', 1), ('"Nguyen");\n', 1), ('SequentialExecutor(null);\n', 1), ('Worker}', 1), ('type/method', 1), ('delegate.invokeAny(tasks,', 1), ('MaybeSubscribeOn<T>', 1), ('(ContentAction)', 1), ('rmo.onComplete();\n\n', 1), ('TestSubscriber[n', 1), ('createSplit(Spliterator.OfInt', 1), ('doOnEvent(BiConsumer<?', 1), ('ExecutorWorker(executor);\n', 1), ('log.info(cust));\n', 1), ('innerObserver.onError(error);\n', 1), ('getNumber()', 1), ('-4025173261791142821L;\n\n', 1), ('Effective\n', 1), ('failure?\n', 1), ('io.reactivex.subjects.PublishSubject;\n\n@BenchmarkMode(Mode.Throughput)\n@Warmup(iterations', 1), ('Retry(5,', 1), ('StartingData', 1), ('retrieveMsg()', 1), ('ConcurrentMap.class,\n', 1), ('shouldConstructPart()', 1), ('nulla,', 1), ('multi-type', 1), ('accounts.get(destinationBankAccount)', 1), ('ObservableDoFinally<T>', 1), ('singleIterableToFlowableIterable()', 1), ('BlockingObservableIterator<T>(bufferSize);\n', 1), ('sequentialDelayError(Flowable.bufferSize());\n', 1), ('model.\n', 1), ('decode(int', 1), ('AbstractCollectionTestSuiteBuilder}', 1), ('(TestCase)', 1), ('navigation', 1), ('actual.onSuccess(defaultValue);\n', 1), ('(mapFactory', 1), ('propertyName));\n', 1), ('RxJavaPlugins.initSingleScheduler(new', 1), ('toJavaUtil()', 1), ('filterFailWithStopConditional()', 1), ('LinkedBlockingQueue<>(MinimalCollection.of(elements));\n', 1), ('LotteryNumbers}\n', 1), ('16,', 1), ('setImplementation(ThreadPoolExecutor.class,', 1), ('org.junit.jupiter.api.Assertions.assertNotSame;\nimport', 1), ('second,\n', 1), ('MaybeZipIterableTest', 1), ('rootLocaleFormat(String', 1), ('ClassInfo(resource,', 1), ('findPattern(String', 1), ('Gonsalves\n', 1), ('e.onError(error.terminate());\n', 1), ('doOnSuccessErrors()', 1), ('283-284\n', 1), ('verifications,', 1), ('BiConsumerSingleObserver<T>\nextends', 1), ('CompletableObserverImplementation(s,', 1), ('see\n', 1), ('ArrayList<V>>}.\n', 1), ('interestedOps;\n\n', 1), ('Comparable<Object>', 1), ('SinglePostCompleteSubscriber(Subscriber<?', 1), ('"https://github.com/google/guava/wiki/NewCollectionTypesExplained#classtoinstancemap">', 1), ('paramString(Ordering.class,', 1), ('TreeSet<>(arbitraryNullFriendlyComparator());\n', 1), ('isCompleted()', 1), ('(type.isEnum())', 1), ('times(1)).run();\n', 1), ('side-effecting', 1), ('DEFAULT_PORT;\n', 1), ('classInfo(cls,', 1), ('dataFileName', 1), ('encoding;\n', 1), ('rangeAsyncPipeline.subscribe(lo);\n\n', 1), ('remove(AsyncDisposable<T>', 1), ('AssertionError("Type', 1), ('aLong)', 1), ('com.google.common.collect.testing.testers.CollectionSpliteratorTester.getSpliteratorNotImmutableCollectionAllowsAddMethod;\nimport', 1), ('}).toObservable().blockingSingle();\n\n', 1), ('validate(long', 1), ('generateBuffer()', 1), ('Selector}', 1), ('5).concatWith(Observable.<Integer>error(new', 1), ('Single.just((Object)1).delaySubscription(s);\n', 1), ('PriorityBlockingQueue<Object>(10,', 1), ('subscribeOn(Scheduler', 1), ('lock.readLock()));\n', 1), ('Constructor<Dispatcher>', 1), ('ProtocolViolationException(String', 1), ('field.getAndSet(d);\n', 1), ('consumer.await(count);\n', 1), ('NetworkConnections<N,', 1), ('executeService.awaitTermination(5,', 1), ('TestsForQueuesInJavaUtil().allTests();\n', 1), ('%.2f', 1), ('ps.forEachWhile(Functions.alwaysTrue());\n\n', 1), ('.put(Joiner.class,', 1), ('#create(CompletableOnSubscribe)}', 1), ('ArbitraryInstances.get(long.class));\n', 1), ('checkDoubleOnSubscribeMaybe(Function<Maybe<T>,', 1), ('href="http://sourceforge.net/projects/mc-fastflow/">Fast', 1), ('ExceptionHelper.addThrowable(this,', 1), ('TestHelper.checkDisposed(PublishSubject.create().singleOrError().delaySubscription(Observable.just(1)));\n', 1), ('lowerBounds)', 1), ('.put(ImmutableMap.class,', 1), ('ExceptionHelper.<Exception>throwIfThrowable(new', 1), ('loop.', 1), ('FilesFileTraverserTest', 1), ('predicate.apply(b))}.\n', 1), ('IntervalSubscriber(s);\n', 1), ('MaybeDelay(MaybeSource<T>', 1), ('Maybe#as}', 1), ('throwIf(boolean', 1), ('CustomerResourceTest', 1), ('flatMapXRange(Blackhole', 1), ('string;', 1), ('fruit.size();\n', 1), ('BlockingObservableLatestTest', 1), ('action.\n', 1), ('ram', 1), ('t}', 1), ('List<Future<int[]>>', 1), ('checkNotNull(queue);\n', 1), ('s.readDouble());\n', 1), ('Enum#name()}.', 1), ('lastTwoOfFirstFourStringMapped);\n\n', 1), ('LOGGER.info("Writers', 1), ('FlowableSkipLast(Flowable<T>', 1), ('org.mockito.stubbing.Answer;\n\npublic', 1), ('accumsan.', 1), ('rowKeyFuture.transformAsync(dataService::readFuture,', 1), ('out.closed();\n', 1), ('DEFAULT_VALUES_PER_KEY;\n', 1), ('toFunction6()', 1), ('LongBuffer.allocate(0))\n', 1), ('Subscriber()', 1), ('FlowableLimit<T>', 1), ('random.nextInt(5);', 1), ('treats', 1), ('(scalarEmission', 1), ('simpleLongPrefetch()', 1), ('Object>(null,', 1), ('delaySubscription(time,', 1), ('checkDoubleOnSubscribeFlowable(Function<Flowable<T>,', 1), ('veryEnd;\n\n', 1), ('testGetKeyMatchesString()', 1), ('MaybeFlatMapCompletable<T>', 1), ('newByteSource(final', 1), ('ObservableToFlowabeTestSync()', 1), ('ArbitraryInstances.get(ImmutableBiMap.class));\n', 1), ('Publisher<Disposable>', 1), ('s.get());\n', 1), ('Entry[entries.size()]);\n', 1), ('missing\n', 1), ('getCollectionSize()', 1), ('onErrorFailure()', 1), ('UsingObserver(MaybeObserver<?', 1), ('fos', 1), ('drinks\n', 1), ('20.0,', 1), ('sizeOfPopulatedStriped()', 1), ('Options', 1), ('main;\n\n', 1), ('multimap);\n', 1), ('Flowable.merge(Arrays.asList(\n', 1), ('assertEquals(Pattern.compile("").pattern(),', 1), ('tearDown);\n', 1), ('loadPatternCompiler();\n\n', 1), ('ToFlowablePerf();\n', 1), ('checkOut()', 1), ('"elit.', 1), ('OneConstantEnum', 1), ('generateOptionalLong()', 1), ('computation().shutdown();\n', 1), ('Flowable.empty().blockingSingle();\n', 1), ('SlotPair<T>();\n', 1), ('final}', 1), ('immediateOuterInnerErrorRace()', 1), ('idx.incrementAndGet()).start();\n', 1), ('frameworks', 1), ('BlockingIgnoringReceiver', 1), ('FlatMapMaybeObserver(AtomicReference<Disposable>', 1), ('localhost', 1), ('cancel2()', 1), ('cancellation.\n', 1), ('cakeInfo.cakeToppingInfo.name));\n', 1), ('inUse=%d",', 1), ('DESCENDING;\n\n', 1), ('properties.get(key);\n', 1), ('java.util.Queue#offer(java.lang.Object)\n', 1), ('BackpressureKind', 1), ('ByteSource.concat(checker,', 1), ('keys",\n', 1), ('LOGGER.info("\\t{}/{}/{}",', 1), ('Assert.assertTrue(exception.get()', 1), ('"ticketId");\n', 1), ('found").append("\\r\\n")\n', 1), ('load(Properties', 1), ('SwitchIfEmptyMaybeObserver(SingleObserver<?', 1), ('shouldRetrieveEmptyStreamForNonExistingChildren()', 1), ('HashFunction', 1), ('b.size();\n', 1), ('BackpressureLatestSubscriber<T>', 1), ('AnnotatedType[]}', 1), ('SetMultimapPutAllTester<K,', 1), ('onError.get().getMessage());\n\n', 1), ('this.completableFunction', 1), ('MongoClient(System.getProperty("mongo-host"),\n', 1), ('"Second").ignoreElements();\n', 1), ('"age', 1), ('MultiEdgesConnecting<E>', 1), ('suggest', 1), ('nazguls.put(NazgulName.AKHORAHIL,', 1), ('java.util.Arrays;\n\n/**\n', 1), ('p.subscribe(nextInner);\n', 1), ('order,\n', 1), ('futureObservable.subscribeOn(Schedulers.computation()).subscribe(to);\n\n', 1), ('InputStreamReader(checkNotNull(in),', 1), ('DisposeObserver', 1), ('R>>();\n\n', 1), ('subscription.request(Long.MAX_VALUE);\n', 1), ('delayOnError()', 1), ('\\"License\\");', 1), ('.test(5)\n', 1), ('legend', 1), ('setNumber(final', 1), ('LineReader(Readable', 1), ('isDisposed(Disposable', 1), ('.put(Comparator.class,', 1), ('IsEmptyMaybeObserver<T>(observer));\n', 1), ('connectableObservableAsCf()', 1), ('sensible', 1), ('SpscArrayQueue<Integer>(8);\n', 1), ('subtypes', 1), ('v4,', 1), ('.onErrorComplete()\n', 1), ('SYNC;\n\n', 1), ('%s.",\n', 1), ('Function<O,', 1), ('--r;\n', 1), ('DisposableCompletableObserver}', 1), ('java.util.concurrent.CompletableFuture#thenAcceptAsync}.\n', 1), ('io.reactivex.functions.BiPredicate;\n\n/**\n', 1), ('result.get(result.size()', 1), ('in.getChannel().size());\n', 1), ('assertSame(testedPrototype.getClass(),', 1), ('returned)', 1), ('manifestClasspath("nosuchscheme:an_invalid^path");\n', 1), ('NextSubscriber<T>();\n', 1), ('(generated', 1), ('addSpellbook(Spellbook', 1), ('1000).toSortedList().toFlowable()\n', 1), ('out!");\n', 1), ('limits', 1), ('targetNode.equals(outEdgeToNode.get(edge));\n', 1), ('RunnableDisposable', 1), ('SortedSet<E>', 1), ('ObjectHelper.requireNonNull(stop,', 1), ('winner.get()', 1), ('ImmutableMultimap.of(key,', 1), ('subscribers.poll();\n\n', 1), ('assertTrue(w.isDisposed());\n', 1), ('((Long)ts', 1), ('notJava7)', 1), ('testWaitingSomeTimeForPromiseToBeFulfilled();\n', 1), ('startWith(Publisher<T>', 1), ('NewThreadWorker(threadFactory);\n', 1), ('OptionalLong.empty();\n', 1), ('hit,', 1), ('andThen(ObservableSource<T>', 1), ('this.q', 1), ('qs.length;\n', 1), ('i).flatMap(i', 1), ('iteratorNotification.isOnNext())', 1), ('FieldJsonMapper', 1), ('sources.length);\n', 1), ('java.util.concurrent.Callable;\n\npublic', 1), ('Arrays.asList(getToArrayIsPlainObjectArrayMethod());\n', 1), ('DisposableHelper', 1), ('Process', 1), ('f.setCancellable(new', 1), ('doorProperties.put(HasType.PROPERTY,', 1), ('being\n', 1), ('AnnotationConfigContextLoader.class)\npublic', 1), ('encapsulating', 1), ('.subscribe().dispose();\n\n', 1), ('generateFloat()', 1), ('unbounded;\n\n', 1), ('VideoResourceTest', 1), ('odio', 1), ('PartyMemberTest', 1), ('assertFalse(doc.isDone());\n\n', 1), ('(javadocStartNext', 1), ('LotteryNumbersTest', 1), ('"expectedValuesPerKey");\n', 1), ('!(map', 1), ('SEVERAL(3),\n', 1), ('subscribe(o,', 1), ('backingEntry.getKey();\n', 1), ('currentThreadName', 1), ('NoDefaultConstructor(@SuppressWarnings("unused")', 1), ('QueueSubscription<U>', 1), ('TimerSubscriber(Subscriber<?', 1), ('#1702.', 1), ('DisposeOnCancel(d);\n\n', 1), ('KEY', 1), ('java.util.stream.IntStream;\nimport', 1), ('SingleTransformer<Integer,', 1), ('CompletableEmitter}', 1), ('cancel.");\n', 1), ('respectively.\n', 1), ('ConnectableObservable>', 1), ('FlowableFromCallable<T>', 1), ('sequences.\n', 1), ('directories,', 1), ('CacheDisposable<T>\n', 1), ('InnerSubscriber(Subscriber<?', 1), ('CollectSpliterators}.', 1), ('managed\n', 1), ('testRender()', 1), ('ObservableRetryBiPredicate<T>', 1), ('assertEquals(Charsets.UTF_8,', 1), ('TreeMultimap(Comparator<?', 1), ('super.write(b,', 1), ('drainUnbounded()', 1), ('spite', 1), ('customer1', 1), ('errorNonEager()', 1), ('result1);\n', 1), ('Optional.absent();\n', 1), ('mashup', 1), ('rmo.start);\n\n', 1), ('suppressForAbstractSet()', 1), ('optionals},', 1), ('assertTrue(rco.errors.isEmpty());\n', 1), ('ListFeature.GENERAL_PURPOSE,', 1), ('expectation', 1), ('Function6', 1), ('stopLatch.await();\n', 1), ('NewThreadWorker', 1), ('pairs;', 1), ('this.timedRunnable', 1), ('out.write("Hello".getBytes()));\n', 1), ('io.reactivex.Scheduler#createWorker()}', 1), ('thing', 1), ('@MapFeature.Require(ALLOWS_NULL_KEYS)\n', 1), ('ZipSubscriber(ZipCoordinator<T,', 1), ('CompactHashSet.\n', 1), ('blockingAwait()', 1), ('EmptyComponentTest', 1), ('MaybeSource}\n', 1), ('LotteryTicketId();\n', 1), ('user);\n\n', 1), ('visitor,', 1), ('FlowableConcatMapSingle<T,', 1), ('indexOf(Object', 1), ('assertTrue(ArbitraryInstances.get(Predicate.class).apply("abc"));\n', 1), ('flowableCompletable2()', 1), ('LotteryNumbers();\n', 1), ('java.util.function.DoubleConsumer;\nimport', 1), ('required:\n', 1), ('.startWith(Flowable.fromIterable(li))\n', 1), ('LordVarys(kingsHand));\n', 1), ('equivalence;\n\n', 1), ('href="https://github.com/ReactiveX/RxJava/issues/748#issuecomment-32471495">RxJava:', 1), ('Audio.stopService();\n', 1), ('Blackhole.consumeCPU(10);\n', 1), ('notifier', 1), ('acquisition/release.\n', 1), ('RxJavaPlugins.initNewThreadScheduler(new', 1), ('equivalence.test(expected,', 1), ('mock.assertLastMethodCalled("scheduleWithFixedDelay",', 1), ('writeLock()', 1), ('TestHelper.checkDisposed(Flowable.just(1).unsubscribeOn(Schedulers.single()));\n', 1), ('never()).request(anyInt());\n', 1), ('atomicBoolean.set(true);\n', 1), ('WithLatestFromObserver(Observer<?', 1), ('FlowableSingleMaybe<T>', 1), ('closer.register(openStream());\n', 1), ('com.iluwatar.repository;\n\nimport', 1), ('variable.', 1), ('Observable</a>\n', 1), ('CompletableToFlowable<T>(other));\n', 1), ('getWizards()', 1), ('Resources}.\n', 1), ('GeneratorSubscription(Subscriber<?', 1), ('.suppressing(suppressForEmptySet())\n', 1), ('generateUnsignedInteger()', 1), ('timeComplete_Failure(int', 1), ('length,', 1), ('batchSize', 1), ('TestHelper.checkDoubleOnSubscribeCompletableToSingle(new', 1), ('annotation.', 1), ('createFluentIterable(integers).forEach(consumer);\n\n', 1), ('assertNotNull(clone);\n', 1), ('END",', 1), ('ALMOST_SORTED', 1), ('com.iluwatar.reactor.app;\n\nimport', 1), ('utilizeResource(Resource', 1), ('hashing', 1), ('super(properties);\n', 1), ('subscribed.set(true);\n', 1), ('dtoUsers.stream().map(this::convertFromDto).collect(Collectors.toList());\n', 1), ('Function<PublishProcessor<Integer>,', 1), ('"Single");\n\n', 1), ('File(parent);\n', 1), ('errors.size());\n', 1), ('java.util.function.Function;\n\n/**\n', 1), ('AbstractMapTester<K,', 1), ('JButton("Delete");\n', 1), ('Collections.singletonMap(k0(),', 1), ('Java8Holder();\n\n\n', 1), ('cancelCrashed()', 1), ('MAX_NUMBER', 1), ('testReadSingle_noStackOverflow()', 1), ('April', 1), ('DelayedRunnable(decoratedRun);\n\n', 1), ('collectIntoFlowable()', 1), ('problematic', 1), ('emitted.</dd>\n', 1), ('ScheduledDirectPeriodicTaskTest', 1), ('CompletableSubject()', 1), ('500;\n\n', 1), ('Lancaster\n', 1), ('Flowable.just(v).subscribeOn(Schedulers.computation())\n', 1), ('Sending', 1), ('assertTrue(a1[0]', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.merge.oo.png"', 1), ('subscribers.length;', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/timeout.1s.png"', 1), ('fromSpliterator,', 1), ('ObservableWindowBoundarySupplier(\n', 1), ('toSortedListComparatorCapacityObservable()', 1), ('backingEntry', 1), ('List[n];\n', 1), ("Letter('f'),", 1), ('ForwardingImmutableList<E>', 1), ('"comparer', 1), ('studentDatabase.modify(student);\n', 1), ('ReserializedMapTests()', 1), ('ConcatMapEagerMainObserver(Observer<?', 1), ('Customer(resultSet.getInt("ID"),', 1), ('id:', 1), ('ArrayList<Throwable>(n', 1), ('characterToFrequency', 1), ('keyComparator,\n', 1), ('ThreadDeath();\n', 1), ('.window(2)\n', 1), ('to.assertFailure(NullPointerException.class);\n\n', 1), ('follows:\n', 1), ('ConsumerSingleObserver<T>', 1), ('JAVA_VM_SPECIFICATION_NAME("java.vm.specification.name"),\n\n', 1), ('2).elementAt(1).toObservable().blockingSingle()\n', 1), ('Pluggable', 1), ('BaseConcatMapSubscriber(\n', 1), ('ArrayCompositeDisposable(2);\n\n', 1), ('ParallelPeek(ParallelFlowable<T>', 1), ('"unknown"', 1), ('clazz.getDeclaredField(enumValue.name());\n', 1), ('sp.second),', 1), ('"@BackpressureSupport",', 1), ('#DISPOSED}.\n', 1), ('Handler<?', 1), ('FlowableDematerializeTest', 1), ('<p><b>Performance', 1), ('Single.fromPublisher(pp).test();\n\n', 1), ('incidentEdgeMap.put(edge,', 1), ('MaybeCreate(MaybeOnSubscribe<T>', 1), ('rawType', 1), ('assertFalse(((Disposable)s).isDisposed());\n\n', 1), ('diam,', 1), ('multi.read());\n', 1), ('testGetField()', 1), ('RxJavaPlugins#createIoScheduler(ThreadFactory)}', 1), ('Spliterator.ORDERED);\n', 1), ('getSize();\n', 1), ('LotteryNumbers(Set<Integer>', 1), ('<p>Changes', 1), ('ScalarSubscription<T>', 1), ('HashSet<E>', 1), ('getAccount(int', 1), ('acquire', 1), ('assertNull(Completable.complete().blockingGet());\n', 1), ('doTestExistsThrowsSecurityException();\n', 1), ('SubscribeTask(SubscribeOnObserver<T>', 1), ('typeArguments)', 1), ('onOverflow.run();\n', 1), ('*/\n@EnableRuleMigrationSupport\npublic', 1), ('Scheduler.Worker})', 1), ('other.concatWith(this.<T>toObservable());\n', 1), ('afterwards.\n', 1), ('fewer);\n', 1), ('flatMapSingleElement}', 1), ('completableStart()', 1), ('depth', 1), ('nextNotification;\n\n', 1), ('ObservableFromFuture(Future<?', 1), ('submitMsg(Message', 1), ('"jdbc:h2:~/dao";\n', 1), ('ToSingleObserver<T>', 1), ('set!)");\n', 1), ('completionValue));\n', 1), ('verbose', 1), ('this.dataSource', 1), ('checkArgument(rawType.getEnclosingClass()', 1), ('Collections.addAll(list,', 1), ('FlowableBufferBoundary<T,', 1), ('assertFalse(list.remove((Integer)10));\n\n', 1), ('onSuccessEmpty()', 1), ('source.supplier.get();\n', 1), ('assertEquals(expectedResult,', 1), ('addSpell(Spell', 1), ('once"));\n', 1), ('newService);\n', 1), ('(short)', 1), ('resource.getDetails(1);\n\n', 1), ('RxJavaPlugins.unlock();\n', 1), ('Multiset}</a>.\n', 1), ('ObservableTakeUntilPredicate<T>', 1), ('.put(Multiset.class,', 1), ('(name.contains("("))', 1), ('R>)CANCELLED);\n', 1), ('parallel1', 1), ('lineBuf.add(chars,', 1), ('concatWith(MaybeSource<?', 1), ('TypeToken<SortedMultiset<String>>()', 1), ('BiConsumer<List<Object>,', 1), ('lockdown()', 1), ('signature,', 1), ('getSpliteratorNotImmutableCollectionAllowsRemoveMethod());\n', 1), ('componentType.hashCode();\n', 1), ('GENERAL_PURPOSE(\n', 1), ('Flowable.just(1).startWithArray().test().assertResult(1);\n', 1), ('Object.equals).\n', 1), ('ImmutableList.of("b");\n\n', 1), ('flush();', 1), ('last4.get(3));\n', 1), ('delete(Student', 1), ('EnumHashBiMap(Class<K>', 1), ('com.google.common.collect.testing.testers.ListSetTester.getSetNullSupportedMethod;\n\nimport', 1), ('OtherMaybeObserver<T>(actual,', 1), ('unimplemented.', 1), ('b.indexOf("@BackpressureSupport(",', 1), ('.subscribe(to);\n', 1), ('parallel2', 1), ('releaseSlot()', 1), ('CompletableMergeSubscriber(s,', 1), ('com.iluwatar.throttling.timer.ThrottleTimerImpl;\n\nimport', 1), ('member.getClass();\n', 1), ('off;\n', 1), ('LinkedArrayList(int', 1), ('allToppings.stream().filter(t', 1), ('result.add(next);\n', 1), ('studentRepository.registerNew(ram);\n', 1), ('ByteBuffer.wrap("Server', 1), ('up.onError(new', 1), ('CountDownLatch(1);\n//', 1), ('logger.fine("', 1), ('<i>interchangeable</i>', 1), ('OpenJdk6MapTests().allTests();\n', 1), ('Tom', 1), ('repeat(Long.MAX_VALUE);\n', 1), ('measure.', 1), ('!methods2.contains(m.getName().replace("Observable",', 1), ('toNpe(Throwable', 1), ('allowed!"),', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/repeat.o.png"', 1), ('funds', 1), ('runLatch.countDown();\n', 1), ('Integers', 1), ('FutureTask<Void>(run,', 1), ('1L.\n', 1), ('endOfData()', 1), ('times(1)).onNext(Arrays.asList(5,', 1), ('.map(number', 1), ('source.blockingFirst().intValue());\n', 1), ('ArgumentCaptor.forClass(Action.class);\n', 1), ('Enum<?>>>>\n', 1), ('Iterable<Object>()', 1), ('specifically', 1), ('testPredicateThrowsExceptionAndValueInCauseMessage()', 1), ('onCallback;\n', 1), ('25;\n', 1), ('ServiceLoader.load(PatternCompiler.class);\n', 1), ('java.util.LinkedHashMap;\n\n/**\n', 1), ('onErrorAfterComplete()', 1), ('constructs', 1), ('ServiceLoader<PatternCompiler>', 1), ('checkExceptionClassValidity(exceptionClass);\n', 1), ('ImmutableEnumMap.asImmutable(new', 1), ('<li>§3.9:', 1), ('BlockingDeque.class,\n', 1), ('testFeatureEnums()', 1), ('scheduler}.\n', 1), ('charset).readFirstLine()}.', 1), ('accessibleObject.isAccessible();\n', 1), ('stack.add(value);\n', 1), ('IllegalArgumentException());\n', 1), ('free\n', 1), ('layerBean.save(layer);\n', 1), ('consumers/functions', 1), ('Selects', 1), ('.thenApply(Utility::countLines);\n', 1), ('TypeToken<ImmutableCollection<String>>()', 1), ('requested.get()', 1), ('Optional.orElse},', 1), ('flatMapTwoNestedAsync(final', 1), ('Lottery', 1), ('SerialDisposable()', 1), ('java.lang.Exception}.\n', 1), ('CRUNCHED_NUMBER;\n', 1), ('testForEachEntryDuplicates()', 1), ('direction.', 1), ('mapWithIndex(IntStream', 1), ('menu', 1), ('.thenApply(Utility::lowestFrequencyChar);\n', 1), ('this.spellbooks', 1), ('(SubscriptionHelper.setOnce(subscription,', 1), ('toMaybe', 1), ('rangeAsyncPipeline;\n\n', 1), ('ArrayList<Date>();\n\n', 1), ('FlowableSubscriber<Notification<T>>,', 1), ('LazyFluentIterable}', 1), ('o2);\n', 1), ('BiObjectPredicate', 1), ('subscribeActual(SingleObserver', 1), ('Now', 1), ('cousins', 1), ('this.subjectGenerator', 1), ('TEST_CAR_MODEL', 1), ('<h3>For', 1), ('subscribers.delete(closer);\n', 1), ('concurrentSetDisposableShouldNotInterleave()\n', 1), ('6)));\n', 1), ('q.addAndGet(n);\n', 1), ('subscribe(FlowableEmitter<Long>', 1), ('guests.add(q);\n\n', 1), ('"contain', 1), ('SingleCache<T>(this));\n', 1), ('CollectionFeature.NONE,', 1), ('resolve);\n', 1), ('Flowable.empty().takeLast(1).subscribe(s);\n', 1), ('MergerBiFunction(Comparator<?', 1), ('CakeBakingServiceImpl()', 1), ('testOnCompletedThrows2()', 1), ('testOnErrorAfterOnCompleted()', 1), ('ArrayDeque<File[]>();\n\n', 1), ('#writerLock},', 1), ('long.class,\n', 1), ('io.reactivex.internal.operators.observable.ObservableRange;\nimport', 1), ('Action1<Long>', 1), ('22876611072430776L;\n\n', 1), ('ObjectHelper.requireNonNull(initialCollection.call(),', 1), ('Timed<T>', 1), ('delegate().signal();\n', 1), ('regards', 1), ('THREAD_COUNT;', 1), ('"c:2")}.\n', 1), ('Long.\n', 1), ('assertNull(ArbitraryInstances.get(NonStaticFieldIgnored.class));\n', 1), ('OtherEnum', 1), ('((clazz.getModifiers()', 1), ('Streams.forEachPair(\n', 1), ('SingleObserveOnTest', 1), ('getLowerBounds()', 1), ('testGetClassPathFromManifest_trailingBlanks()', 1), ('testAsMapValuesImplementSortedSet()', 1), ('IntStream#concat(IntStream,', 1), ('signalled.', 1), ('growth', 1), ('cancelOnRequest()', 1), ('ObservableFromIterable<T>', 1), ('pp2.ignoreElements()).test();\n\n', 1), ('MySubscriber<T>', 1), ('Publisher<Completable>()', 1), ('600;', 1), ('reference,', 1), ('acquireForReaders();\n', 1), ('generateRandomNumbers();\n', 1), ('ObservableFromCallable(Callable<?', 1), ('RetentionPolicy.",', 1), ('FlowableDematerialize<T>', 1), ('com.iluwatar.eda.framework;\n\nimport', 1), ('executeService.submit(writer1);\n\n', 1), ('"rx2.purge-period-seconds";\n\n', 1), ('bs2.isCancelled());\n', 1), ('frc.setResource(1,', 1), ('parent.mkdirs();\n', 1), ('(!c)', 1), ('legal\n', 1), ('assertFalse(doc.cancel(true));\n\n', 1), ('(newGroup)', 1), ('filterFailWithStop()', 1), ("optional's", 1), ('FlowableBufferExactBoundary(Flowable<T>', 1), ('MaybeOperator<?', 1), ('when(fieldJsonMapper.toJson(any(Video.class),', 1), ('from);\n', 1), ('strings.\n', 1), ('thanks', 1), ('testImmutableListMultimap()', 1), ('ObservableOnErrorNext(ObservableSource<T>', 1), ('iterating', 1), ('Collections.sort(\n', 1), ('molestie,', 1), ('child.onError(t);\n', 1), ('AbstractDocument(Map<String,', 1), ('assertSame(f,', 1), ('Decorates', 1), ('worker.now(TimeUnit.MILLISECONDS);\n', 1), ('ImmutableSortedSet.copyOf(comparator,', 1), ('toString', 1), ('noted', 1), ('mute,', 1), ('com.iluwatar.event.sourcing.event.DomainEvent;\nimport', 1), ('asCharSinkFactory(final', 1), ('delegate.lastEntry();\n', 1), ('(disposeAll())', 1), ('MaybeMergeArray(MaybeSource<?', 1), ('eventType,\n', 1), ('benchmarkGetChecked(int', 1), ('AtomicThrowableTest', 1), ('lines.add(line', 1), ('Typically', 1), ('clazz.indexOf("/io/reactivex/");\n', 1), ('#hide()}\n', 1), ('filterFailWithRetryLimited()', 1), ('Class<E>', 1), ('addCustomers(CustomerDao', 1), ('MessageQueue()', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.legend.png"', 1), ('connect()}', 1), ('wrap(CompletableSource', 1), ('Worker(tasks.get(i));\n', 1), ('exceptions,\n', 1), ('assertNotNull(Resources.getResource(getClass(),', 1), ('ArbitraryInstances.get(OptionalInt.class));\n', 1), ('AsyncSubject', 1), ('FlowableConcatArray(Publisher<?', 1), ('future.addCallback(\n', 1), ('InnerQueuedObserverSupport<R>', 1), ('ParallelFilterTest', 1), ('(idx2', 1), ('reply".getBytes());\n', 1), ('end.', 1), ('csub.dispose();\n', 1), ('doubleOnSubscribe(CompletableObserver', 1), ('completableSourceAsMs()', 1), ('exhibit', 1), ('BlockingSubscriber.TERMINATED\n', 1), ('FlowableWindowBoundarySupplier(Flowable<T>', 1), ('Lines:', 1), ('Flowable}.\n', 1), ('java.lang},', 1), ('appropriate\n', 1), ('TypeToken<Collection<String>>()', 1), ('createMaybeNavigableKeySet();\n', 1), ('CharSequence.class,\n', 1), ('com.iluwatar.fluentinterface.fluentiterable.FluentIterable;\nimport', 1), ('subscriptionIndicator));\n', 1), ('FlowableDeferTest', 1), ('isPackagePrivate()', 1), ('resultSet.getString(1);\n\n', 1), ('System.getProperty("hexagonal.properties.path");\n', 1), ('"FlowableElementAtMaybe",\n', 1), ('ComputationTask', 1), ('java.util.function.IntBinaryOperator;\nimport', 1), ('java.util.Set}', 1), ('IllegalArgumentException("unable', 1), ('registered.\n', 1), ('subMap', 1), ('FileByteSinkFactory(null);\n', 1), ('assertEquals("java.util",', 1), ('multiset.add(key,', 1), ('Never</a>\n', 1), ('evaluated");\n', 1), ('String>();\n\n', 1), ('Dispatcher();\n\n', 1), ('VolatileSizeArrayList<Integer>', 1), ('#onComplete}.\n', 1), ('"RxSingleScheduler";\n\n', 1), ('dispatcher.menuItemSelected(MenuItem.COMPANY);\n\n', 1), ('compareAndSet(false,', 1), ('locally\n', 1), ('testNoNullValues()', 1), ('letter)', 1), ('platea', 1), ('SameThreadScheduledExecutorService', 1), ('delegate().newCondition();\n', 1), ('GwtCompatible}', 1), ('Traits', 1), ('ServerSocketChannel}.\n', 1), ('50))', 1), ('SerializedProcessor(final', 1), ('taskLatch.getCount());\n', 1), ('onAfterTerminatedCrash()', 1), ('TestEnum.values())', 1), ('Exception();\n', 1), ('processKey(SelectionKey', 1), ('(int)elements).onBackpressureBuffer()\n', 1), ('Flowable.just(1,2,3,4).subscribe(new', 1), ('SinglePostCompleteSubscriberTest', 1), ('taskLatch', 1), ('maybeSubscribe0()', 1), ('src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/mergeMap.r.png"', 1), ('otherOnNextSingle()', 1), ('super.write(data,', 1), ('MaybeFlatMapNotificationTest', 1), ('.map(Integer::longValue)\n', 1), ('ObserveOnSingleObserver(SingleObserver<?', 1), ('t.onSuccess(value);\n', 1), ('reader2', 1), ('spells)', 1), ('SingleSource<T>>', 1), ('ofType}', 1), ('testAct(Supplier<PartyMember>', 1), ('CrashingIterable', 1), ('multi-producer', 1), ('mn.onSubscribe(Disposables.empty());\n', 1), ('servant.giveWine(q);\n', 1), ('fullpath("base/relative/dir"))\n', 1), ('bufferSize()));\n', 1), ('filterFailWithErrorConditional()', 1), ('LegacyComparable("z");\n\n', 1), ('rebatchAndTake()', 1), ('ArbitraryInstances.get(Map.class));\n', 1), ('tryTerminate()', 1), ('RxJavaPlugins.onBeforeBlocking()))', 1), ('3).takeUntil(new', 1), ('Customer(3,', 1), ('3258103020495908596L;\n\n', 1), ('DisposableSubscriberTest', 1), ('average', 1), ('pendingCommands.iterator();\n', 1), ('java.awt.Desktop;\nimport', 1), ('works,', 1), ('testRepeatObservableThrowsError()', 1), ('newTaskFor(Callable<T>', 1), ('generateSplitter()', 1), ('java.io.ObjectOutputStream;\n\n/**\n', 1), ('discards', 1), ('brittle.', 1), ('equals(),', 1), ('tm.run();\n\n', 1), ('readV1(String', 1), ('writes/reads', 1), ('Schedulers\n', 1), ('.named("checkedSet/HashSet")\n', 1), ('TestHelper.checkDoubleOnSubscribeFlowableToCompletable(\n', 1), ('fieldName', 1), ('com.google.common.reflect.ClassPath.ResourceInfo;\nimport', 1), ('setRest(executor.submit(this));\n', 1), ('CompletableMergeIterable(sources));\n', 1), ('parent.onErrorCall.accept(e);\n', 1), ('tm.dispose();\n\n', 1), ('delegate.toArray(other);\n', 1), ('suppressForCopyOnWriteArrayList()', 1), ('assertTrue(aa.get());\n', 1), ('assertNotNull("Expected', 1), ('Annotation>)', 1), ('ro.add(null);\n', 1), ('CompletableMergeSubscriber', 1), ('Converter}\n', 1), ('derivedSuites.add(\n', 1), ('testObserverAsTs()', 1), ('tester.testAllPublicStaticMethods(Enums.class);\n', 1), ('VisitorTest<V', 1), ('axe"},\n', 1), ('dispatcher}', 1), ('service;\n', 1), ('#orNull}\n', 1), ('CompletableDisposable', 1), ('shyam', 1), ('null)).keySet())\n', 1), ('generateGoogleOptional(T', 1), ('FlowableEventStream()', 1), ('REMOVE_OPERATIONS(SUPPORTS_REMOVE,', 1), ('StopScanningException', 1), ('output.write(eventString', 1), ('com.iluwatar.monostate;\n\nimport', 1), ('subscribers[0].onSubscribe(new', 1), ('Single.never().doOnDispose(new', 1), ('environments,', 1), ('this.latest', 1), ('getPackageName(clazz.getName());\n', 1), ('Closeable', 1), ('org.reactivestreams.Subscriber}', 1), ('buffer\n\n', 1), ('NullPointerException("Observable', 1), ('newProxy(rawType);\n', 1), ('").append(name).append(\'\\n\');\n', 1), ('assertEquals("ALICE\'S', 1), ('innerExceptions.get(2);\n', 1), ('assertSame(myb,', 1), ('iterB', 1), ('genericDeclaration.equals(that.getGenericDeclaration());\n', 1), ('SimpleTrollTest', 1), ('publishCompleted(observer,', 1), ('unsafeImpl', 1), ('notifyObservers(Event', 1), ('testBackpressureWithNoInitialValueObservable()', 1), ('FlowableTimeout<T,', 1), ('swallowIOException', 1), ('com.iluwatar.hexagonal.module.LotteryTestingModule;\nimport', 1), ('splitrB.estimateSize()),', 1), ('StringReader(input))', 1), ('Math.min(splitrA.estimateSize(),', 1), ('this.random', 1), ('#onErrorResumeNext}', 1), ('day', 1), ('flatMap(@NonNull', 1), ('Multimap#entries()}', 1), ('(DisposableHelper.validate(this.subscription,', 1), ('pattern.flags();\n', 1), ('TrustedListenableFutureTask.create(callable);\n', 1), ('<p>With', 1), ('2.1.11\n', 1), ('(see', 1), ('testZeroElements(BlockingQueue<Object>', 1), ('MergerBiFunctionTest', 1), ('.concatMapCompletable(Functions.justFunction(Completable.complete()),', 1), ('Promise<Character>', 1), ('currentCount', 1), ('Observable.just(1).forEachWhile(new', 1), ('AtomicReferenceArray<Subscription>', 1), ('assertTrue(fo.isDone());\n', 1), ('assertNull(RxJavaPlugins.onObservableLift(null));\n//\n//', 1), ('-7954444275102466525L;\n\n', 1), ('maybeCompletable2()', 1), ('Heavy}', 1), ('RuntimeException("test")))\n', 1), ('assertFalse(atomicBoolean.get());\n\n', 1), ('ImmutableList.Builder<Spliterator<?', 1), ('add(PublishDisposable<T>', 1), ('flatMapIntPassthruSync(Input', 1), ('t3)', 1), ('xchgProducerNode(node);//', 1), ('Spliterator<A>', 1), ('handler,', 1), ('(!this.errors.isEmpty())', 1)]